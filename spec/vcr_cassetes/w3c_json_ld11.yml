---
http_interactions:
- request:
    method: get
    uri: https://www.w3.org/TR/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.w3.org
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Cache-Control:
      - max-age=0, public, s-maxage=86400
      Date:
      - Mon, 06 Apr 2020 16:47:56 GMT
      Etag:
      - W/"053bfc450fc4d05212900f143bc6ecbd"
      Last-Modified:
      - Fri, 03 Apr 2020 16:45:57 GMT
      Access-Control-Allow-Origin:
      - "*"
      Vary:
      - Accept-Encoding
      Accept-Ranges:
      - bytes
      Content-Length:
      - '163541'
      Strict-Transport-Security:
      - max-age=15552000; includeSubdomains; preload
      Content-Security-Policy:
      - upgrade-insecure-requests
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>
<html lang="en" class="no-js">
<head>
<title>All Standards and Drafts - W3C</title>
<link rel="Help" href="http://www.w3.org/Help/">
<link rel="stylesheet" href="//www.w3.org/2008/site/css/minimum.css" media="screen, all">
<style media="print, screen and (min-width: 520px)">
/*<![CDATA[*/
@import url("//www.w3.org/2008/site/css/advanced");
/*]]>*/
</style>
<link rel="stylesheet" href="//www.w3.org/2008/site/css/print.css" media="print">
<link rel="shortcut icon" href="//www.w3.org/2008/site/images/favicon.ico" type="image/x-icon">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta name="viewport" content="width=device-width">
    <link rel="stylesheet" href="/2008/site/sf/build/publication-tr.95cce364.css">
</head>
<body id="www-w3-org" class="w3c_public w3c_javascript w3c_screen">
<div id="w3c_container">
    <div id="w3c_mast">
<h1 class="logo"><a tabindex="2" accesskey="1" href="http://www.w3.org/"><img src="https://www.w3.org/2008/site/images/logo-w3c-mobile-lg" alt="W3C" width="90" height="53"></a> <span class="alt-logo">W3C</span></h1>
<div id="w3c_nav">
<form action="//www.w3.org/Help/search" method="get" enctype="application/x-www-form-urlencoded">
<!-- w3c_sec_nav is populated through js -->
<div class="w3c_sec_nav"><!-- --></div>
<ul class="main_nav"><!-- Main navigation menu -->
<li class="first-item"><a href="http://www.w3.org/standards/">Standards</a></li>
<li><a href="http://www.w3.org/participate/">Participate</a></li>
<li><a href="http://www.w3.org/Consortium/membership">Membership</a></li>
<li class="last-item"><a href="http://www.w3.org/Consortium/">About W3C</a></li>

</ul>
</form>
</div>
</div>
<!-- /end #w3c_mast -->
    <div id="w3c_main">
        <div id="w3c_logo_shadow" class="w3c_leftCol">
            <img alt="" src="https://www.w3.org/2008/site/images/logo-shadow" height="32">
        </div>
        <div class="w3c_leftCol"><h2 class="offscreen">Site Navigation</h2>
    <h3 class="category"><span class="ribbon">Featured Specifications</span></h3>
       <ul class="theme">
        <li><a href="/TR/service-workers/">Service workers</a></li>
        <li><a href="/TR/css-grid-1/">CSS Grid</a></li>
        <li><a href="/TR/html-aria/">ARIA in HTML</a></li>
        <li><a href="/TR/CSP3">CSP</a></li>
       </ul>
        </div>
        <div class="w3c_mainCol">
            <div id="w3c_crumbs">
           <div id="w3c_crumbs_frame">
            <ul class="bct"> <!-- .bct / Breadcrumbs -->
              <li class="skip"><a tabindex="1" accesskey="2" title="Skip to content (e.g., when browsing via audio)" href="#w3c_content_body">Skip</a></li>
              <li><a href="http://www.w3.org/">W3C</a>&nbsp;<span class="cr">»</span>&nbsp;</li>
              <li><a href="http://www.w3.org/standards/">Standards</a>&nbsp;<span class="cr">»</span>&nbsp;</li>
              <li class="current">All Standards and Drafts</li>
            </ul>
         </div>
        </div>
    <h1 class="title">All Standards and Drafts</h1>
    <div class="w3c_toc"><!-- --></div>            <div id="w3c_content_body">
   <div class="hierarchy tMargin">
      <div class="container">
        <h2 id="summary"></h2>
        <form id="filters" method="get" action="#">
          <fieldset>
            <label for="title">Title</label>
            <input id="title" name="title" type="text" autofocus />
          </fieldset>
          <fieldset>
            <label for="tag">Tag</label>
            <select id="tag" name="tag">
              <option value="" selected="selected"></option>
                            <option value="accessibility">Accessibility</option>
                            <option value="css">CSS</option>
                            <option value="data">Data</option>
                            <option value="dom">DOM</option>
                            <option value="graphics">Graphics</option>
                            <option value="html">HTML</option>
                            <option value="http">HTTP</option>
                            <option value="i18n">i18n</option>
                            <option value="media">Media</option>
                            <option value="performance">Performance</option>
                            <option value="privacy">Privacy</option>
                            <option value="security">Security</option>
                            <option value="webapi">Web API</option>
                            <option value="wot">WoT</option>
                            <option value="xml">XML</option>
                          </select>
          </fieldset>
          <fieldset>
            <label for="status">Status</label>
            <select id="status" name="status">
              <option value="" selected="selected"></option>
              <option value="cr">Candidate Recommendation</option>
              <option value="note">Group Note</option>
              <option value="per">Proposed Edited Recommendation</option>
              <option value="pr">Proposed Recommendation</option>
              <option value="rec">Recommendation</option>
              <option value="ret">Retired</option>
              <option value="wd">Working Draft</option>
            </select>
          </fieldset>
          <fieldset>
            <label for="version">Version</label>
            <select id="version" name="version">
              <option value="" selected="selected"></option>
              <option value="latest">Latest</option>
              <option value="upcoming">Upcoming</option>
              <option value="ed">Editor's draft</option>
            </select>
          </fieldset>
          <fieldset class="help">
            <a class="trhelp" href="https://w3c.github.io/tr-pages/help.html">?<span>Help about search criteria</span></a>
          </fieldset>
          <fieldset class="buttons">
            <input id="reset" type="reset" value="Reset" />
            <input id="submit" type="submit" value="Filter" />
          </fieldset>
        </form>
        <ul id="container">
                                                                                                                                                                    <li data-title="decentralized identifiers (dids) v1.0" data-tag="privacy security" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-did-core-20200403/" title="Latest draft of Decentralized Identifiers (DIDs) v1.0 formally approved by the group">Decentralized Identifiers (DIDs) v1.0</a></h2>
                        <p class=deliverer>Decentralized Identifier Working Group</p>
                        <p class=pubdetails>2020-04-03 - <a title="Decentralized Identifiers (DIDs) v1.0 publication history" href="/standards/history/did-core">History</a>
                        - <a href="https://w3c.github.io/did-core/" title="Latest editor's draft of Decentralized Identifiers (DIDs) v1.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Drummond Reed
                            <li>Manu Sporny
                            <li>Markus Sabadello
                            <li>Dave Longley
                            <li>Christopher Allen
                          </ul>
                                    <ul class="taglist">
                            <li class="privacy">Privacy
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <li data-title="css color adjustment module level 1" data-tag="css" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-css-color-adjust-1-20200402/" title="Latest draft of CSS Color Adjustment Module Level 1 formally approved by the group">CSS  Color  Adjustment  Module  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2020-04-02 - <a title="CSS Color Adjustment Module Level 1 publication history" href="/standards/history/css-color-adjust-1">History</a>
                        - <a href="https://drafts.csswg.org/css-color-adjust-1/" title="Latest editor's draft of CSS Color Adjustment Module Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Elika Etemad
                            <li>Rossen Atanassov
                            <li>Rune Lillesveen
                            <li>Tab Atkins Jr.
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="use cases and requirements for decentralized identifiers" data-tag="privacy security" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-did-use-cases-20200401/" title="Latest draft of Use Cases and Requirements for Decentralized Identifiers formally approved by the group">Use Cases and Requirements for Decentralized Identifiers</a></h2>
                        <p class=deliverer>Decentralized Identifier Working Group</p>
                        <p class=pubdetails>2020-04-01 - <a title="Use Cases and Requirements for Decentralized Identifiers publication history" href="/standards/history/did-use-cases">History</a>
                        - <a href="https://w3c.github.io/did-use-cases/" title="Latest editor's draft of Use Cases and Requirements for Decentralized Identifiers">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Joe Andrieu
                            <li>Phil Archer
                          </ul>
                                    <ul class="taglist">
                            <li class="privacy">Privacy
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="the screen orientation api" data-tag="webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-screen-orientation-20200330/" title="Latest draft of The Screen Orientation API formally approved by the group">The Screen Orientation API</a></h2>
                        <p class=deliverer>Web Applications Working Group</p>
                        <p class=pubdetails>2020-03-30 - <a title="The Screen Orientation API publication history" href="/standards/history/screen-orientation">History</a>
                        - <a href="https://w3c.github.io/screen-orientation/" title="Latest editor's draft of The Screen Orientation API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mounir Lamouri
                            <li>Marcos Caceres
                            <li>Johanna Herman
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="web app manifest" data-tag="" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-appmanifest-20200330/" title="Latest draft of Web App Manifest formally approved by the group">Web App Manifest</a></h2>
                        <p class=deliverer>Web Applications Working Group</p>
                        <p class=pubdetails>2020-03-30 - <a title="Web App Manifest publication history" href="/standards/history/appmanifest">History</a>
                        - <a href="https://w3c.github.io/manifest/" title="Latest editor's draft of Web App Manifest">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Marcos Caceres
                            <li>Kenneth Christiansen
                            <li>Mounir Lamouri
                            <li>Anssi Kostiainen
                            <li>Matt Giuca
                            <li>Aaron Gustafson
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="webdriver" data-tag="webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-webdriver2-20200327/" title="Latest draft of WebDriver formally approved by the group">WebDriver</a></h2>
                        <p class=deliverer>Browser Testing and Tools Working Group</p>
                        <p class=pubdetails>2020-03-27 - <a title="WebDriver publication history" href="/standards/history/webdriver2">History</a>
                        - <a href="https://w3c.github.io/webdriver/" title="Latest editor's draft of WebDriver">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Simon Stewart
                            <li>David Burns
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="making content usable for people with cognitive and learning disabilities" data-tag="accessibility" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-coga-usable-20200327/" title="Latest draft of Making content usable for people with cognitive and learning disabilities formally approved by the group">Making content usable for people with cognitive and learning disabilities</a></h2>
                        <p class=deliverer>Accessible Platform Architectures Working Group</p>
                        <p class=deliverer>Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2020-03-27 - <a title="Making content usable for people with cognitive and learning disabilities publication history" href="/standards/history/coga-usable">History</a>
                        - <a href="https://w3c.github.io/coga/content-usable/" title="Latest editor's draft of Making content usable for people with cognitive and learning disabilities">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Lisa Seeman-Kestenbaum
                            <li>Rachael Montgomery
                            <li>Steve Lee
                            <li>Ruoxi Ran
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="time ontology in owl" data-tag="data" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2020/CR-owl-time-20200326/" title="Latest draft of Time Ontology in OWL formally approved by the group">Time Ontology in OWL</a></h2>
                        <p class=deliverer>Spatial Data on the Web Working Group</p>
                        <p class=pubdetails>2020-03-26 - <a title="Time Ontology in OWL publication history" href="/standards/history/owl-time">History</a>
                        - <a href="https://w3c.github.io/sdw/time/" title="Latest editor's draft of Time Ontology in OWL">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Simon Cox
                            <li>Chris Little
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="user timing level 3" data-tag="performance webapi" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-user-timing-3-20200326/" title="Latest draft of User Timing Level 3 formally approved by the group">User  Timing  Level&nbsp;3</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2020-03-26 - <a title="User Timing Level 3 publication history" href="/standards/history/user-timing-3">History</a>
                        - <a href="https://w3c.github.io/user-timing/" title="Latest editor's draft of User Timing Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ilya Grigorik
                            <li>Nicolas Pena Moreno
                            <li>Jatinder Mann
                            <li>Zhiheng Wang
                            <li>Anderson Quach
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="ttml profiles for internet media subtitles and captions 1.2" data-tag="media" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2020/CR-ttml-imsc1.2-20200324/" title="Latest draft of TTML Profiles for Internet Media Subtitles and Captions 1.2 formally approved by the group">TTML  Profiles  for  Internet  Media  Subtitles  and  Captions&nbsp;1.2</a></h2>
                        <p class=deliverer>Timed Text Working Group</p>
                        <p class=pubdetails>2020-03-24 - <a title="TTML Profiles for Internet Media Subtitles and Captions 1.2 publication history" href="/standards/history/ttml-imsc1.2">History</a>
                        - <a href="https://w3c.github.io/imsc/imsc1/spec/ttml-ww-profiles.html" title="Latest editor's draft of TTML Profiles for Internet Media Subtitles and Captions 1.2">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Pierre-Anthony Lemieux
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="lightweight packaging format (lpf)" data-tag="" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2020/NOTE-lpf-20200319/" title="Latest draft of Lightweight Packaging Format (LPF) formally approved by the group">Lightweight Packaging Format (LPF)</a></h2>
                        <p class=deliverer>Publishing Working Group</p>
                        <p class=pubdetails>2020-03-19 - <a title="Lightweight Packaging Format (LPF) publication history" href="/standards/history/lpf">History</a>
                        - <a href="https://w3c.github.io/lpf/" title="Latest editor's draft of Lightweight Packaging Format (LPF)">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Laurent Le Meur
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="rtc accessibility user requirements" data-tag="accessibility" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-raur-20200319/" title="Latest draft of RTC Accessibility User Requirements formally approved by the group">RTC Accessibility User Requirements</a></h2>
                        <p class=deliverer>Accessible Platform Architectures Working Group</p>
                        <p class=pubdetails>2020-03-19 - <a title="RTC Accessibility User Requirements publication history" href="/standards/history/raur">History</a>
                        - <a href="https://w3c.github.io/apa/raur/" title="Latest editor's draft of RTC Accessibility User Requirements">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Joshue O Connor
                            <li>Janina Sajka
                            <li>Jason White
                            <li>Michael Cooper
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="media queries level 5" data-tag="css" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-mediaqueries-5-20200318/" title="Latest draft of Media Queries Level 5 formally approved by the group">Media  Queries  Level&nbsp;5</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2020-03-18 - <a title="Media Queries Level 5 publication history" href="/standards/history/mediaqueries-5">History</a>
                        - <a href="https://drafts.csswg.org/mediaqueries-5/" title="Latest editor's draft of Media Queries Level 5">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dean Jackson
                            <li>Florian Rivoal
                            <li>Tab Atkins Jr.
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                          <li data-title="pronunciation use cases" data-tag="accessibility" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2020/NOTE-pronunciation-use-cases-20200317/" title="Latest draft of Pronunciation Use Cases formally approved by the group">Pronunciation Use Cases</a></h2>
                        <p class=deliverer>Accessible Platform Architectures Working Group</p>
                        <p class=pubdetails>2020-03-17 - <a title="Pronunciation Use Cases publication history" href="/standards/history/pronunciation-use-cases">History</a>
                        - <a href="https://w3c.github.io/pronunciation/use-cases" title="Latest editor's draft of Pronunciation Use Cases">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Irfan Ali
                            <li>Paul Grenier
                            <li>Markku Hakkinen
                            <li>Ruoxi Ran
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                    <li data-title="w3c dom 4.1" data-tag="dom" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2020/NOTE-dom41-20200317/" title="Latest draft of W3C DOM 4.1 formally approved by the group">W3C  DOM&nbsp;4.1</a></h2>
                        <p class=deliverer>Web Platform Working Group</p>
                        <p class=pubdetails>2020-03-17 - <a title="W3C DOM 4.1 publication history" href="/standards/history/dom41">History</a>
                        - <a href="https://w3c.github.io/dom/" title="Latest editor's draft of W3C DOM 4.1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Yongsheng Zhu
                          </ul>
                                    <ul class="taglist">
                            <li class="dom">DOM
                          </ul>
                      </li>
                                                                                                                          <li data-title="pronunciation gap analysis" data-tag="accessibility" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2020/NOTE-pronunciation-gap-analysis-20200317/" title="Latest draft of Pronunciation Gap Analysis formally approved by the group">Pronunciation Gap Analysis</a></h2>
                        <p class=deliverer>Accessible Platform Architectures Working Group</p>
                        <p class=pubdetails>2020-03-17 - <a title="Pronunciation Gap Analysis publication history" href="/standards/history/pronunciation-gap-analysis">History</a>
                        - <a href="https://w3c.github.io/pronunciation/gap-analysis" title="Latest editor's draft of Pronunciation Gap Analysis">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Markku Hakkinen
                            <li>Steve Noble
                            <li>Irfan Ali
                            <li>Ruoxi Ran
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="publication manifest" data-tag="" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2020/CR-pub-manifest-20200317/" title="Latest draft of Publication Manifest formally approved by the group">Publication Manifest</a></h2>
                        <p class=deliverer>Publishing Working Group</p>
                        <p class=pubdetails>2020-03-17 - <a title="Publication Manifest publication history" href="/standards/history/pub-manifest">History</a>
                        - <a href="https://w3c.github.io/pub-manifest/" title="Latest editor's draft of Publication Manifest">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Matt Garrish
                            <li>Ivan Herman
                          </ul>
                                  </li>
                                                                                                                          <li data-title="dom" data-tag="dom" data-status="cr" data-version="latest">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2020/CR-dom-20200317/" title="Latest draft of DOM formally approved by the group">DOM</a></h2>
                        <p class=deliverer>HTML Working Group</p>
                        <p class=pubdetails>2020-03-17 - <a title="DOM publication history" href="/standards/history/dom">History</a>
                        </p>
                                    <ul class="taglist">
                            <li class="dom">DOM
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="audiobooks" data-tag="" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2020/CR-audiobooks-20200317/" title="Latest draft of Audiobooks formally approved by the group">Audiobooks</a></h2>
                        <p class=deliverer>Publishing Working Group</p>
                        <p class=pubdetails>2020-03-17 - <a title="Audiobooks publication history" href="/standards/history/audiobooks">History</a>
                        - <a href="https://w3c.github.io/audiobooks/" title="Latest editor's draft of Audiobooks">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Wendy Reid
                            <li>Matt Garrish
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                        <li data-title="json-ld 1.1" data-tag="data" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2020/CR-json-ld11-20200316/" title="Latest draft of JSON-LD 1.1 formally approved by the group">JSON-LD&nbsp;1.1</a></h2>
                        <p class=deliverer>JSON-LD Working Group</p>
                        <p class=pubdetails>2020-03-16 - <a title="JSON-LD 1.1 publication history" href="/standards/history/json-ld11">History</a>
                        - <a href="https://w3c.github.io/json-ld-syntax/" title="Latest editor's draft of JSON-LD 1.1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Gregg Kellogg
                            <li>Pierre-Antoine Champin
                            <li>Dave Longley
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="css speech module" data-tag="css media" data-status="cr" data-version="latest upcoming">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2020/CR-css-speech-1-20200310/" title="Latest draft of CSS Speech Module formally approved by the group">CSS Speech Module</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2020-03-10 - <a title="CSS Speech Module publication history" href="/standards/history/css3-speech">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Daniel Weck
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="explainer: improving spoken presentation on the web" data-tag="accessibility" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-pronunciation-explainer-20200310/" title="Latest draft of Explainer: Improving Spoken Presentation on the Web formally approved by the group">Explainer: Improving Spoken Presentation on the Web</a></h2>
                        <p class=deliverer>Accessible Platform Architectures Working Group</p>
                        <p class=pubdetails>2020-03-10 - <a title="Explainer: Improving Spoken Presentation on the Web publication history" href="/standards/history/pronunciation-explainer">History</a>
                        - <a href="https://w3c.github.io/pronunciation/explainer" title="Latest editor's draft of Explainer: Improving Spoken Presentation on the Web">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Markku Hakkinen
                            <li>Irfan Ali
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="pronunciation gap analysis and use cases" data-tag="accessibility" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-pronunciation-gap-analysis-and-use-cases-20200310/" title="Latest draft of Pronunciation Gap Analysis and Use Cases formally approved by the group">Pronunciation Gap Analysis and Use Cases</a></h2>
                        <p class=deliverer>Accessible Platform Architectures Working Group</p>
                        <p class=pubdetails>2020-03-10 - <a title="Pronunciation Gap Analysis and Use Cases publication history" href="/standards/history/pronunciation-gap-analysis-and-use-cases">History</a>
                        - <a href="https://w3c.github.io/pronunciation/gap-analysis_and_use-case" title="Latest editor's draft of Pronunciation Gap Analysis and Use Cases">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Markku Hakkinen
                            <li>Steve Noble
                            <li>Dee Dyer
                            <li>Irfan Ali
                            <li>Paul Grenier
                            <li>Ruoxi Ran
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="json-ld 1.1 processing algorithms and api" data-tag="data" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2020/CR-json-ld11-api-20200305/" title="Latest draft of JSON-LD 1.1 Processing Algorithms and API formally approved by the group">JSON-LD 1.1 Processing Algorithms and API</a></h2>
                        <p class=deliverer>JSON-LD Working Group</p>
                        <p class=pubdetails>2020-03-05 - <a title="JSON-LD 1.1 Processing Algorithms and API publication history" href="/standards/history/json-ld11-api">History</a>
                        - <a href="https://w3c.github.io/json-ld-api/" title="Latest editor's draft of JSON-LD 1.1 Processing Algorithms and API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Gregg Kellogg
                            <li>Dave Longley
                            <li>Pierre-Antoine Champin
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="json-ld 1.1 framing" data-tag="data" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2020/CR-json-ld11-framing-20200305/" title="Latest draft of JSON-LD 1.1 Framing formally approved by the group">JSON-LD 1.1 Framing</a></h2>
                        <p class=deliverer>JSON-LD Working Group</p>
                        <p class=pubdetails>2020-03-05 - <a title="JSON-LD 1.1 Framing publication history" href="/standards/history/json-ld11-framing">History</a>
                        - <a href="https://w3c.github.io/json-ld-framing/" title="Latest editor's draft of JSON-LD 1.1 Framing">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dave Longley
                            <li>Gregg Kellogg
                            <li>Pierre-Antoine Champin
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css color module level 5" data-tag="css" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-css-color-5-20200303/" title="Latest draft of CSS Color Module Level 5 formally approved by the group">CSS  Color  Module  Level&nbsp;5</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2020-03-03 - <a title="CSS Color Module Level 5 publication history" href="/standards/history/css-color-5">History</a>
                        - <a href="https://drafts.csswg.org/css-color-5/" title="Latest editor's draft of CSS Color Module Level 5">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Chris Lilley
                            <li>Una Kravets
                            <li>Lea Verou
                            <li>Adam Argyle
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="css conditional rules module level 4" data-tag="css" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-css-conditional-4-20200303/" title="Latest draft of CSS Conditional Rules Module Level 4 formally approved by the group">CSS  Conditional  Rules  Module  Level&nbsp;4</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2020-03-03 - <a title="CSS Conditional Rules Module Level 4 publication history" href="/standards/history/css-conditional-4">History</a>
                        - <a href="https://drafts.csswg.org/css-conditional-4/" title="Latest editor's draft of CSS Conditional Rules Module Level 4">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>David Baron
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css transforms module level 2" data-tag="css" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-css-transforms-2-20200303/" title="Latest draft of CSS Transforms Module Level 2 formally approved by the group">CSS  Transforms  Module  Level&nbsp;2</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2020-03-03 - <a title="CSS Transforms Module Level 2 publication history" href="/standards/history/css-transforms-2">History</a>
                        - <a href="https://drafts.csswg.org/css-transforms-2/" title="Latest editor's draft of CSS Transforms Module Level 2">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tab Atkins Jr.
                            <li>Simon Fraser
                            <li>Dean Jackson
                            <li>Theresa O&#039;Connor
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="web content accessibility guidelines (wcag) 2.2" data-tag="accessibility" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-WCAG22-20200227/" title="Latest draft of Web Content Accessibility Guidelines (WCAG) 2.2 formally approved by the group">Web  Content  Accessibility  Guidelines  (WCAG)&nbsp;2.2</a></h2>
                        <p class=deliverer>Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2020-02-27 - <a title="Web Content Accessibility Guidelines (WCAG) 2.2 publication history" href="/standards/history/WCAG22">History</a>
                        - <a href="https://w3c.github.io/wcag/guidelines/22/" title="Latest editor's draft of Web Content Accessibility Guidelines (WCAG) 2.2">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Andrew Kirkpatrick
                            <li>Alastair Campbell
                            <li>Michael Cooper
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="selection api" data-tag="webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-selection-api-20200226/" title="Latest draft of Selection API formally approved by the group">Selection API</a></h2>
                        <p class=deliverer>Web Applications Working Group</p>
                        <p class=pubdetails>2020-02-26 - <a title="Selection API publication history" href="/standards/history/selection-api">History</a>
                        - <a href="https://w3c.github.io/selection-api/" title="Latest editor's draft of Selection API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ryosuke Niwa
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="gamepad" data-tag="webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-gamepad-20200225/" title="Latest draft of Gamepad formally approved by the group">Gamepad</a></h2>
                        <p class=deliverer>Web Applications Working Group</p>
                        <p class=pubdetails>2020-02-25 - <a title="Gamepad publication history" href="/standards/history/gamepad">History</a>
                        - <a href="https://w3c.github.io/gamepad/" title="Latest editor's draft of Gamepad">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>James Hollyer
                            <li>Matthew Reynolds
                            <li>Brandon Jones
                            <li>Scott Graham
                            <li>Theodore Mielczarek
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="resource timing level 2" data-tag="performance webapi" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-resource-timing-2-20200218/" title="Latest draft of Resource Timing Level 2 formally approved by the group">Resource  Timing  Level&nbsp;2</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2020-02-18 - <a title="Resource Timing Level 2 publication history" href="/standards/history/resource-timing-2">History</a>
                        - <a href="https://w3c.github.io/resource-timing/" title="Latest editor's draft of Resource Timing Level 2">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Todd Reifsteck
                            <li>Ilya Grigorik
                            <li>Yoav Weiss
                            <li>Arvind Jain
                            <li>Jatinder Mann
                            <li>Zhiheng Wang
                            <li>Anderson Quach
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="aria in html" data-tag="accessibility" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-html-aria-20200215/" title="Latest draft of ARIA in HTML formally approved by the group">ARIA in HTML</a></h2>
                        <p class=deliverer>Web Applications Working Group</p>
                        <p class=pubdetails>2020-02-15 - <a title="ARIA in HTML publication history" href="/standards/history/html-aria">History</a>
                        - <a href="https://w3c.github.io/html-aria/" title="Latest editor's draft of ARIA in HTML">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steve Faulkner
                            <li>Scott O&#039;Hara
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="mediastreamtrack content hints" data-tag="media webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-mst-content-hint-20200214/" title="Latest draft of MediaStreamTrack Content Hints formally approved by the group">MediaStreamTrack Content Hints</a></h2>
                        <p class=deliverer>Web Real-Time Communications Working Group</p>
                        <p class=pubdetails>2020-02-14 - <a title="MediaStreamTrack Content Hints publication history" href="/standards/history/mst-content-hint">History</a>
                        - <a href="https://w3c.github.io/mst-content-hint/" title="Latest editor's draft of MediaStreamTrack Content Hints">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Harald Alvestrand
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="xr accessibility user requirements" data-tag="accessibility" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-xaur-20200213/" title="Latest draft of XR Accessibility User Requirements formally approved by the group">XR Accessibility User Requirements</a></h2>
                        <p class=deliverer>Accessible Platform Architectures Working Group</p>
                        <p class=pubdetails>2020-02-13 - <a title="XR Accessibility User Requirements publication history" href="/standards/history/xaur">History</a>
                        - <a href="https://w3c.github.io/apa/xaur/" title="Latest editor's draft of XR Accessibility User Requirements">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Joshue O Connor
                            <li>Janina Sajka
                            <li>Jason White
                            <li>Michael Cooper
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="payment method: basic card" data-tag="" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-payment-method-basic-card-20200213/" title="Latest draft of Payment Method: Basic Card formally approved by the group">Payment Method: Basic Card</a></h2>
                        <p class=deliverer>Web Payments Working Group</p>
                        <p class=pubdetails>2020-02-13 - <a title="Payment Method: Basic Card publication history" href="/standards/history/payment-method-basic-card">History</a>
                        - <a href="https://w3c.github.io/payment-method-basic-card/" title="Latest editor's draft of Payment Method: Basic Card">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Marcos Caceres
                            <li>Domenic Denicola
                            <li>Zach Koch
                            <li>Roy McElmurry
                            <li>Adrian Bateman
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <li data-title="css scroll anchoring module level 1" data-tag="css" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-css-scroll-anchoring-1-20200211/" title="Latest draft of CSS Scroll Anchoring Module Level 1 formally approved by the group">CSS  Scroll  Anchoring  Module  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2020-02-11 - <a title="CSS Scroll Anchoring Module Level 1 publication history" href="/standards/history/css-scroll-anchoring-1">History</a>
                        - <a href="https://drafts.csswg.org/css-scroll-anchoring/" title="Latest editor's draft of CSS Scroll Anchoring Module Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steve Kobes
                            <li>Tab Atkins Jr.
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="resize observer" data-tag="css" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-resize-observer-1-20200211/" title="Latest draft of Resize Observer formally approved by the group">Resize Observer</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2020-02-11 - <a title="Resize Observer publication history" href="/standards/history/resize-observer-1">History</a>
                        - <a href="https://drafts.csswg.org/resize-observer/" title="Latest editor's draft of Resize Observer">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Aleks Totic
                            <li>Greg Whitworth
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="trace context - level 1" data-tag="performance" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2020/REC-trace-context-1-20200206/" title="Latest draft of Trace Context - Level 1 formally approved by the group">Trace  Context  -  Level&nbsp;1</a></h2>
                        <p class=deliverer>Distributed Tracing Working Group</p>
                        <p class=pubdetails>2020-02-06 - <a title="Trace Context - Level 1 publication history" href="/standards/history/trace-context">History</a>
                        - <a href="https://w3c.github.io/trace-context/" title="Latest editor's draft of Trace Context - Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Sergey Kanzhelev
                            <li>Morgan McLean
                            <li>Alois Reitbauer
                            <li>Bogdan Drutu
                            <li>Nik Molnar
                            <li>Yuri Shkuro
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                          </ul>
                      </li>
                                                                                                                          <li data-title="data catalog vocabulary (dcat)" data-tag="data" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2020/SPSD-vocab-dcat-20200204/" title="Latest draft of Data Catalog Vocabulary (DCAT) formally approved by the group">Data Catalog Vocabulary (DCAT)</a></h2>
                        <p class=deliverer>Government Linked Data Working Group</p>
                        <p class=pubdetails>2020-02-04 - <a title="Data Catalog Vocabulary (DCAT) publication history" href="/standards/history/vocab-dcat">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Fadi Maali
                            <li>John Erickson
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="data catalog vocabulary (dcat) - version 2" data-tag="data" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2020/REC-vocab-dcat-2-20200204/" title="Latest draft of Data Catalog Vocabulary (DCAT) - Version 2 formally approved by the group">Data  Catalog  Vocabulary  (DCAT)  -  Version&nbsp;2</a></h2>
                        <p class=deliverer>Dataset Exchange Working Group</p>
                        <p class=pubdetails>2020-02-04 - <a title="Data Catalog Vocabulary (DCAT) - Version 2 publication history" href="/standards/history/vocab-dcat-2">History</a>
                        - <a href="https://w3c.github.io/dxwg/dcat/" title="Latest editor's draft of Data Catalog Vocabulary (DCAT) - Version 2">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Riccardo Albertoni
                            <li>David Browning
                            <li>Simon Cox
                            <li>Alejandra Gonzalez Beltran
                            <li>Andrea Perego
                            <li>Peter Winstanley
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="push api" data-tag="webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-push-api-20200204/" title="Latest draft of Push API formally approved by the group">Push API</a></h2>
                        <p class=deliverer>Web Applications Working Group</p>
                        <p class=pubdetails>2020-02-04 - <a title="Push API publication history" href="/standards/history/push-api">History</a>
                        - <a href="https://w3c.github.io/push-api/" title="Latest editor's draft of Push API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Peter Beverloo
                            <li>Martin Thomson
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="media session standard" data-tag="media" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-mediasession-20200130/" title="Latest draft of Media Session Standard formally approved by the group">Media Session Standard</a></h2>
                        <p class=deliverer>Media Working Group</p>
                        <p class=pubdetails>2020-01-30 - <a title="Media Session Standard publication history" href="/standards/history/mediasession">History</a>
                        - <a href="https://w3c.github.io/mediasession/" title="Latest editor's draft of Media Session Standard">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mounir Lamouri
                            <li>Becca Hughes
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="web of things (wot) architecture" data-tag="wot" data-status="pr" data-version="latest upcoming ed">
            <div class="profile">PR</div>
            <h2 class="ProposedRecommendation"><a href="https://www.w3.org/TR/2020/PR-wot-architecture-20200130/" title="Latest draft of Web of Things (WoT) Architecture formally approved by the group">Web of Things (WoT) Architecture</a></h2>
                        <p class=deliverer>Web of Things Working Group</p>
                        <p class=pubdetails>2020-01-30 - <a title="Web of Things (WoT) Architecture publication history" href="/standards/history/wot-architecture">History</a>
                        - <a href="https://w3c.github.io/wot-architecture/" title="Latest editor's draft of Web of Things (WoT) Architecture">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Matthias Kovatsch
                            <li>Ryuichi Matsukura
                            <li>Michael Lagally
                            <li>Toru Kawaguchi
                            <li>Kunihiko Toumura
                            <li>Kazuo Kajimoto
                          </ul>
                                    <ul class="taglist">
                            <li class="wot">WoT
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="web of things (wot) binding templates" data-tag="wot" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2020/NOTE-wot-binding-templates-20200130/" title="Latest draft of Web of Things (WoT) Binding Templates formally approved by the group">Web of Things (WoT) Binding Templates</a></h2>
                        <p class=deliverer>Web of Things Working Group</p>
                        <p class=pubdetails>2020-01-30 - <a title="Web of Things (WoT) Binding Templates publication history" href="/standards/history/wot-binding-templates">History</a>
                        - <a href="https://w3c.github.io/wot-binding-templates/" title="Latest editor's draft of Web of Things (WoT) Binding Templates">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael Koster
                            <li>Ege Korkan
                          </ul>
                                    <ul class="taglist">
                            <li class="wot">WoT
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="requirements for personalization semantics" data-tag="accessibility" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-personalization-semantics-requirements-1.0-20200130/" title="Latest draft of Requirements for Personalization Semantics formally approved by the group">Requirements for Personalization Semantics</a></h2>
                        <p class=deliverer>Accessible Platform Architectures Working Group</p>
                        <p class=pubdetails>2020-01-30 - <a title="Requirements for Personalization Semantics publication history" href="/standards/history/personalization-semantics-requirements-1.0">History</a>
                        - <a href="https://w3c.github.io/personalization-semantics/requirements/" title="Latest editor's draft of Requirements for Personalization Semantics">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Lisa Seeman-Kestenbaum
                            <li>Charles LaPierre
                            <li>Michael Cooper
                            <li>Ruoxi Ran
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="media capabilities" data-tag="media" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-media-capabilities-20200130/" title="Latest draft of Media Capabilities formally approved by the group">Media Capabilities</a></h2>
                        <p class=deliverer>Media Working Group</p>
                        <p class=pubdetails>2020-01-30 - <a title="Media Capabilities publication history" href="/standards/history/media-capabilities">History</a>
                        - <a href="https://w3c.github.io/media-capabilities/" title="Latest editor's draft of Media Capabilities">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mounir Lamouri
                            <li>Chris Cunningham
                            <li>Vi Nguyen
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="web of things (wot) thing description" data-tag="wot" data-status="pr" data-version="latest upcoming ed">
            <div class="profile">PR</div>
            <h2 class="ProposedRecommendation"><a href="https://www.w3.org/TR/2020/PR-wot-thing-description-20200130/" title="Latest draft of Web of Things (WoT) Thing Description formally approved by the group">Web of Things (WoT) Thing Description</a></h2>
                        <p class=deliverer>Web of Things Working Group</p>
                        <p class=pubdetails>2020-01-30 - <a title="Web of Things (WoT) Thing Description publication history" href="/standards/history/wot-thing-description">History</a>
                        - <a href="https://w3c.github.io/wot-thing-description/" title="Latest editor's draft of Web of Things (WoT) Thing Description">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Sebastian Käbisch
                            <li>Takuki Kamiya
                            <li>Michael McCool
                            <li>Victor Charpenay
                            <li>Matthias Kovatsch
                          </ul>
                                    <ul class="taglist">
                            <li class="wot">WoT
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="picture-in-picture" data-tag="media" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-picture-in-picture-20200130/" title="Latest draft of Picture-in-Picture formally approved by the group">Picture-in-Picture</a></h2>
                        <p class=deliverer>Media Working Group</p>
                        <p class=pubdetails>2020-01-30 - <a title="Picture-in-Picture publication history" href="/standards/history/picture-in-picture">History</a>
                        - <a href="https://w3c.github.io/picture-in-picture/" title="Latest editor's draft of Picture-in-Picture">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Francois Beaufort
                            <li>Mounir Lamouri
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="timed text markup language 2 (ttml2) (2nd edition)" data-tag="accessibility css html" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2020/CR-ttml2-20200128/" title="Latest draft of Timed Text Markup Language 2 (TTML2) (2nd Edition) formally approved by the group">Timed Text Markup Language 2 (TTML2) (2nd Edition)</a></h2>
                        <p class=deliverer>Timed Text Working Group</p>
                        <p class=pubdetails>2020-01-28 - <a title="Timed Text Markup Language 2 (TTML2) (2nd Edition) publication history" href="/standards/history/ttml2">History</a>
                        - <a href="https://w3c.github.io/ttml2/index.html" title="Latest editor's draft of Timed Text Markup Language 2 (TTML2) (2nd Edition)">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Glenn Adams
                            <li>Cyril Concolato
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                            <li class="css">CSS
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                        <li data-title="personalization semantics explainer 1.0" data-tag="accessibility" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-personalization-semantics-1.0-20200127/" title="Latest draft of Personalization Semantics Explainer 1.0 formally approved by the group">Personalization  Semantics  Explainer&nbsp;1.0</a></h2>
                        <p class=deliverer>Accessible Platform Architectures Working Group</p>
                        <p class=pubdetails>2020-01-27 - <a title="Personalization Semantics Explainer 1.0 publication history" href="/standards/history/personalization-semantics-1.0">History</a>
                        - <a href="https://w3c.github.io/personalization-semantics/" title="Latest editor's draft of Personalization Semantics Explainer 1.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Lisa Seeman-Kestenbaum
                            <li>Charles LaPierre
                            <li>Michael Cooper
                            <li>Ruoxi Ran
                            <li>Richard Schwerdtfeger
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="personalization semantics content module 1.0" data-tag="accessibility" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-personalization-semantics-content-1.0-20200127/" title="Latest draft of Personalization Semantics Content Module 1.0 formally approved by the group">Personalization  Semantics  Content  Module&nbsp;1.0</a></h2>
                        <p class=deliverer>Accessible Platform Architectures Working Group</p>
                        <p class=pubdetails>2020-01-27 - <a title="Personalization Semantics Content Module 1.0 publication history" href="/standards/history/personalization-semantics-content-1.0">History</a>
                        - <a href="https://w3c.github.io/personalization-semantics/content/" title="Latest editor's draft of Personalization Semantics Content Module 1.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Lisa Seeman-Kestenbaum
                            <li>Charles LaPierre
                            <li>Michael Cooper
                            <li>Ruoxi Ran
                            <li>Richard Schwerdtfeger
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css basic user interface module level 4" data-tag="css" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-css-ui-4-20200124/" title="Latest draft of CSS Basic User Interface Module Level 4 formally approved by the group">CSS  Basic  User  Interface  Module  Level&nbsp;4</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2020-01-24 - <a title="CSS Basic User Interface Module Level 4 publication history" href="/standards/history/css-ui-4">History</a>
                        - <a href="https://drafts.csswg.org/css-ui-4/" title="Latest editor's draft of CSS Basic User Interface Module Level 4">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Florian Rivoal
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="webrtc priority control api" data-tag="media webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-webrtc-priority-20200123/" title="Latest draft of WebRTC Priority Control API formally approved by the group">WebRTC Priority Control API</a></h2>
                        <p class=deliverer>Web Real-Time Communications Working Group</p>
                        <p class=pubdetails>2020-01-23 - <a title="WebRTC Priority Control API publication history" href="/standards/history/webrtc-priority">History</a>
                        - <a href="http://w3c.github.io/webrtc-priority/" title="Latest editor's draft of WebRTC Priority Control API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Harald Alvestrand
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="navigation timing level 2" data-tag="performance webapi" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-navigation-timing-2-20200121/" title="Latest draft of Navigation Timing Level 2 formally approved by the group">Navigation  Timing  Level&nbsp;2</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2020-01-21 - <a title="Navigation Timing Level 2 publication history" href="/standards/history/navigation-timing-2">History</a>
                        - <a href="https://w3c.github.io/navigation-timing/" title="Latest editor's draft of Navigation Timing Level 2">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ilya Grigorik
                            <li>Tobin Titus
                            <li>Jatinder Mann
                            <li>Arvind Jain
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="server timing" data-tag="performance webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-server-timing-20200120/" title="Latest draft of Server Timing formally approved by the group">Server Timing</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2020-01-20 - <a title="Server Timing publication history" href="/standards/history/server-timing">History</a>
                        - <a href="https://w3c.github.io/server-timing/" title="Latest editor's draft of Server Timing">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Charles Vazac
                            <li>Ilya Grigorik
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="extensions to the semantic sensor network ontology" data-tag="data" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-vocab-ssn-ext-20200116/" title="Latest draft of Extensions to the Semantic Sensor Network Ontology formally approved by the group">Extensions to the Semantic Sensor Network Ontology</a></h2>
                        <p class=deliverer>Spatial Data on the Web Interest Group</p>
                        <p class=pubdetails>2020-01-16 - <a title="Extensions to the Semantic Sensor Network Ontology publication history" href="/standards/history/vocab-ssn-ext">History</a>
                        - <a href="https://w3c.github.io/sdw/proposals/ssn-extensions/" title="Latest editor's draft of Extensions to the Semantic Sensor Network Ontology">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Simon Cox
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="identifiers for webrtc&#039;s statistics api" data-tag="media webapi" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2020/CR-webrtc-stats-20200114/" title="Latest draft of Identifiers for WebRTC&#039;s Statistics API formally approved by the group">Identifiers for WebRTC's Statistics API</a></h2>
                        <p class=deliverer>Web Real-Time Communications Working Group</p>
                        <p class=pubdetails>2020-01-14 - <a title="Identifiers for WebRTC&#039;s Statistics API publication history" href="/standards/history/webrtc-stats">History</a>
                        - <a href="https://w3c.github.io/webrtc-stats/" title="Latest editor's draft of Identifiers for WebRTC&#039;s Statistics API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Harald Alvestrand
                            <li>Varun Singh
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="fetch metadata request headers" data-tag="security" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2020/WD-fetch-metadata-20200110/" title="Latest draft of Fetch Metadata Request Headers formally approved by the group">Fetch Metadata Request Headers</a></h2>
                        <p class=deliverer>Web Application Security Working Group</p>
                        <p class=pubdetails>2020-01-10 - <a title="Fetch Metadata Request Headers publication history" href="/standards/history/fetch-metadata">History</a>
                        - <a href="https://w3c.github.io/webappsec-fetch-metadata/" title="Latest editor's draft of Fetch Metadata Request Headers">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mike West
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="accessible rich internet applications (wai-aria) 1.2" data-tag="accessibility" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-wai-aria-1.2-20191218/" title="Latest draft of Accessible Rich Internet Applications (WAI-ARIA) 1.2 formally approved by the group">Accessible  Rich  Internet  Applications  (WAI-ARIA)&nbsp;1.2</a></h2>
                        <p class=deliverer>Accessible Rich Internet Applications Working Group</p>
                        <p class=pubdetails>2019-12-18 - <a title="Accessible Rich Internet Applications (WAI-ARIA) 1.2 publication history" href="/standards/history/wai-aria-1.2">History</a>
                        - <a href="https://rawgit.com/w3c/aria/master/" title="Latest editor's draft of Accessible Rich Internet Applications (WAI-ARIA) 1.2">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Joanmarie Diggs
                            <li>Shane McCarron
                            <li>James Nurthen
                            <li>Michael Cooper
                            <li>Richard Schwerdtfeger
                            <li>James Craig
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="the profiles vocabulary" data-tag="data" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2019/NOTE-dx-prof-20191218/" title="Latest draft of The Profiles Vocabulary formally approved by the group">The Profiles Vocabulary</a></h2>
                        <p class=deliverer>Dataset Exchange Working Group</p>
                        <p class=pubdetails>2019-12-18 - <a title="The Profiles Vocabulary publication history" href="/standards/history/dx-prof">History</a>
                        - <a href="https://w3c.github.io/dxwg/prof/" title="Latest editor's draft of The Profiles Vocabulary">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Nicholas Car
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="core accessibility api mappings 1.2" data-tag="accessibility" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-core-aam-1.2-20191218/" title="Latest draft of Core Accessibility API Mappings 1.2 formally approved by the group">Core  Accessibility  API  Mappings&nbsp;1.2</a></h2>
                        <p class=deliverer>Accessible Rich Internet Applications Working Group</p>
                        <p class=pubdetails>2019-12-18 - <a title="Core Accessibility API Mappings 1.2 publication history" href="/standards/history/core-aam-1.2">History</a>
                        - <a href="https://w3c.github.io/core-aam/" title="Latest editor's draft of Core Accessibility API Mappings 1.2">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Joanmarie Diggs
                            <li>Michael Cooper
                            <li>Richard Schwerdtfeger
                            <li>Joseph Scheuhammer
                            <li>Andi Snow-Weaver
                            <li>Aaron Leventhal
                            <li>Melanie Richards
                            <li>James Craig
                            <li>Alexander Surkov
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="wai-aria authoring practices 1.2" data-tag="accessibility" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-wai-aria-practices-1.2-20191218/" title="Latest draft of WAI-ARIA Authoring Practices 1.2 formally approved by the group">WAI-ARIA  Authoring  Practices&nbsp;1.2</a></h2>
                        <p class=deliverer>Accessible Rich Internet Applications Working Group</p>
                        <p class=pubdetails>2019-12-18 - <a title="WAI-ARIA Authoring Practices 1.2 publication history" href="/standards/history/wai-aria-practices-1.2">History</a>
                        - <a href="https://w3c.github.io/aria-practices/" title="Latest editor's draft of WAI-ARIA Authoring Practices 1.2">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Matthew King
                            <li>JaEun Ku
                            <li>James Nurthen
                            <li>Zoë Bijl
                            <li>Michael Cooper
                            <li>Joseph Scheuhammer
                            <li>Lisa Pappas
                            <li>Richard Schwerdtfeger
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="web share api" data-tag="webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-web-share-20191217/" title="Latest draft of Web Share API formally approved by the group">Web Share API</a></h2>
                        <p class=deliverer>Web Applications Working Group</p>
                        <p class=pubdetails>2019-12-17 - <a title="Web Share API publication history" href="/standards/history/web-share">History</a>
                        - <a href="https://w3c.github.io/web-share/" title="Latest editor's draft of Web Share API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Matt Giuca
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="html accessibility api mappings 1.0" data-tag="accessibility html" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-html-aam-1.0-20191217/" title="Latest draft of HTML Accessibility API Mappings 1.0 formally approved by the group">HTML  Accessibility  API  Mappings&nbsp;1.0</a></h2>
                        <p class=deliverer>Web Applications Working Group</p>
                        <p class=pubdetails>2019-12-17 - <a title="HTML Accessibility API Mappings 1.0 publication history" href="/standards/history/html-aam-1.0">History</a>
                        - <a href="https://w3c.github.io/html-aam/" title="Latest editor's draft of HTML Accessibility API Mappings 1.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steve Faulkner
                            <li>Alexander Surkov
                            <li>Scott O&#039;Hara
                            <li>Bogdan Brinza
                            <li>Jason Kiss
                            <li>Cynthia Shelly
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="webrtc 1.0: real-time communication between browsers" data-tag="media webapi" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2019/CR-webrtc-20191213/" title="Latest draft of WebRTC 1.0: Real-time Communication Between Browsers formally approved by the group">WebRTC 1.0: Real-time Communication Between Browsers</a></h2>
                        <p class=deliverer>Web Real-Time Communications Working Group</p>
                        <p class=pubdetails>2019-12-13 - <a title="WebRTC 1.0: Real-time Communication Between Browsers publication history" href="/standards/history/webrtc">History</a>
                        - <a href="https://w3c.github.io/webrtc-pc/" title="Latest editor's draft of WebRTC 1.0: Real-time Communication Between Browsers">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Cullen Jennings
                            <li>Henrik Boström
                            <li>Jan-Ivar Bruaroey
                            <li>Adam Bergkvist
                            <li>Daniel Burnett
                            <li>Anant Narayanan
                            <li>Bernard Aboba
                            <li>Taylor Brandstetter
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="orientation sensor" data-tag="webapi" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2019/CR-orientation-sensor-20191212/" title="Latest draft of Orientation Sensor formally approved by the group">Orientation Sensor</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2019-12-12 - <a title="Orientation Sensor publication history" href="/standards/history/orientation-sensor">History</a>
                        - <a href="https://w3c.github.io/orientation-sensor/" title="Latest editor's draft of Orientation Sensor">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Kenneth Christiansen
                            <li>Anssi Kostiainen
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="accelerometer" data-tag="webapi" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2019/CR-accelerometer-20191212/" title="Latest draft of Accelerometer formally approved by the group">Accelerometer</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2019-12-12 - <a title="Accelerometer publication history" href="/standards/history/accelerometer">History</a>
                        - <a href="https://w3c.github.io/accelerometer/" title="Latest editor's draft of Accelerometer">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Anssi Kostiainen
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="payment request api" data-tag="webapi" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2019/CR-payment-request-20191212/" title="Latest draft of Payment Request API formally approved by the group">Payment Request API</a></h2>
                        <p class=deliverer>Web Payments Working Group</p>
                        <p class=pubdetails>2019-12-12 - <a title="Payment Request API publication history" href="/standards/history/payment-request">History</a>
                        - <a href="https://w3c.github.io/payment-request/" title="Latest editor's draft of Payment Request API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Marcos Caceres
                            <li>Domenic Denicola
                            <li>Zach Koch
                            <li>Roy McElmurry
                            <li>Ian Jacobs
                            <li>Rouslan Solomakhin
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="generic sensor api" data-tag="webapi" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2019/CR-generic-sensor-20191212/" title="Latest draft of Generic Sensor API formally approved by the group">Generic Sensor API</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2019-12-12 - <a title="Generic Sensor API publication history" href="/standards/history/generic-sensor">History</a>
                        - <a href="https://w3c.github.io/sensors/" title="Latest editor's draft of Generic Sensor API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Rick Waldron
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="gyroscope" data-tag="webapi" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2019/CR-gyroscope-20191212/" title="Latest draft of Gyroscope formally approved by the group">Gyroscope</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2019-12-12 - <a title="Gyroscope publication history" href="/standards/history/gyroscope">History</a>
                        - <a href="https://w3c.github.io/gyroscope/" title="Latest editor's draft of Gyroscope">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Anssi Kostiainen
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="pointer events level 3" data-tag="webapi" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-pointerevents3-20191212/" title="Latest draft of Pointer Events Level 3 formally approved by the group">Pointer  Events  Level&nbsp;3</a></h2>
                        <p class=deliverer>Pointer Events Working Group</p>
                        <p class=pubdetails>2019-12-12 - <a title="Pointer Events Level 3 publication history" href="/standards/history/pointerevents3">History</a>
                        - <a href="https://w3c.github.io/pointerevents/" title="Latest editor's draft of Pointer Events Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Patrick Lauke
                            <li>Navid Zolghadr
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="css writing modes level 3" data-tag="css" data-status="rec" data-version="ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2019/REC-css-writing-modes-3-20191210/" title="Latest draft of CSS Writing Modes Level 3 formally approved by the group">CSS  Writing  Modes  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2019-12-10 - <a title="CSS Writing Modes Level 3 publication history" href="/standards/history/css-writing-modes-3">History</a>
                        - <a href="https://drafts.csswg.org/css-writing-modes-3/" title="Latest editor's draft of CSS Writing Modes Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Elika Etemad
                            <li>Koji Ishii
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="inaccessibility of captcha" data-tag="accessibility" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2019/NOTE-turingtest-20191209/" title="Latest draft of Inaccessibility of CAPTCHA formally approved by the group">Inaccessibility of CAPTCHA</a></h2>
                        <p class=deliverer>Accessible Platform Architectures Working Group</p>
                        <p class=pubdetails>2019-12-09 - <a title="Inaccessibility of CAPTCHA publication history" href="/standards/history/turingtest">History</a>
                        - <a href="https://w3c.github.io/apa/captcha/" title="Latest editor's draft of Inaccessibility of CAPTCHA">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Scott Hollier
                            <li>Janina Sajka
                            <li>Jason White
                            <li>Michael Cooper
                            <li>Matthew May
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="webassembly core specification" data-tag="performance" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2019/REC-wasm-core-1-20191205/" title="Latest draft of WebAssembly Core Specification formally approved by the group">WebAssembly Core Specification</a></h2>
                        <p class=deliverer>WebAssembly Working Group</p>
                        <p class=pubdetails>2019-12-05 - <a title="WebAssembly Core Specification publication history" href="/standards/history/wasm-core-1">History</a>
                        - <a href="https://webassembly.github.io/spec/core/bikeshed/" title="Latest editor's draft of WebAssembly Core Specification">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Andreas Rossberg
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                            <li data-title="webcgm 2.0" data-tag="graphics" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2019/SPSD-webcgm20-20191205/" title="Latest draft of WebCGM 2.0 formally approved by the group">WebCGM&nbsp;2.0</a></h2>
                        <p class=deliverer>WebCGM Working Group</p>
                        <p class=pubdetails>2019-12-05 - <a title="WebCGM 2.0 publication history" href="/standards/history/webcgm20">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Benoit Bezaire
                            <li>David Cruikshank
                            <li>Lofton Henderson
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="webassembly javascript interface" data-tag="performance webapi" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2019/REC-wasm-js-api-1-20191205/" title="Latest draft of WebAssembly JavaScript Interface formally approved by the group">WebAssembly JavaScript Interface</a></h2>
                        <p class=deliverer>WebAssembly Working Group</p>
                        <p class=pubdetails>2019-12-05 - <a title="WebAssembly JavaScript Interface publication history" href="/standards/history/wasm-js-api-1">History</a>
                        - <a href="https://webassembly.github.io/spec/js-api/" title="Latest editor's draft of WebAssembly JavaScript Interface">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Daniel Ehrenberg
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="webcgm 1.0 second release" data-tag="graphics" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2019/SPSD-WebCGM-20191205" title="Latest draft of WebCGM 1.0 Second Release formally approved by the group">WebCGM 1.0 Second Release</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>2019-12-05 - <a title="WebCGM 1.0 Second Release publication history" href="/standards/history/REC-WebCGM">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>David Cruikshank
                            <li>Lofton Henderson
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="webassembly web api" data-tag="performance" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2019/REC-wasm-web-api-1-20191205/" title="Latest draft of WebAssembly Web API formally approved by the group">WebAssembly Web API</a></h2>
                        <p class=deliverer>WebAssembly Working Group</p>
                        <p class=pubdetails>2019-12-05 - <a title="WebAssembly Web API publication history" href="/standards/history/wasm-web-api-1">History</a>
                        - <a href="https://webassembly.github.io/spec/web-api/" title="Latest editor's draft of WebAssembly Web API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Daniel Ehrenberg
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="css grid layout module level 2" data-tag="css" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-css-grid-2-20191203/" title="Latest draft of CSS Grid Layout Module Level 2 formally approved by the group">CSS  Grid  Layout  Module  Level&nbsp;2</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2019-12-03 - <a title="CSS Grid Layout Module Level 2 publication history" href="/standards/history/css-grid-2">History</a>
                        - <a href="https://drafts.csswg.org/css-grid-2/" title="Latest editor's draft of CSS Grid Layout Module Level 2">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tab Atkins Jr.
                            <li>Elika Etemad
                            <li>Rossen Atanassov
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="css spatial navigation level 1" data-tag="css" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-css-nav-1-20191126/" title="Latest draft of CSS Spatial Navigation Level 1 formally approved by the group">CSS  Spatial  Navigation  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2019-11-26 - <a title="CSS Spatial Navigation Level 1 publication history" href="/standards/history/css-nav-1">History</a>
                        - <a href="https://drafts.csswg.org/css-nav-1/" title="Latest editor's draft of CSS Spatial Navigation Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jihye Hong
                            <li>Florian Rivoal
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="content negotiation by profile" data-tag="data" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-dx-prof-conneg-20191126/" title="Latest draft of Content Negotiation by Profile formally approved by the group">Content Negotiation by Profile</a></h2>
                        <p class=deliverer>Dataset Exchange Working Group</p>
                        <p class=pubdetails>2019-11-26 - <a title="Content Negotiation by Profile publication history" href="/standards/history/dx-prof-conneg">History</a>
                        - <a href="https://w3c.github.io/dxwg/connegp/" title="Latest editor's draft of Content Negotiation by Profile">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Lars G. Svensson
                            <li>Nicholas Car
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <li data-title="web authentication: an api for accessing public key credentials - level 2" data-tag="security" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-webauthn-2-20191126/" title="Latest draft of Web Authentication: An API for accessing Public Key Credentials - Level 2 formally approved by the group">Web  Authentication:  An  API  for  accessing  Public  Key  Credentials  -  Level&nbsp;2</a></h2>
                        <p class=deliverer>Web Authentication Working Group</p>
                        <p class=pubdetails>2019-11-26 - <a title="Web Authentication: An API for accessing Public Key Credentials - Level 2 publication history" href="/standards/history/webauthn-2">History</a>
                        - <a href="https://w3c.github.io/webauthn/" title="Latest editor's draft of Web Authentication: An API for accessing Public Key Credentials - Level 2">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dirk Balfanz
                            <li>Alexei Czeskis
                            <li>Jeff Hodges
                            <li>J.C. Jones
                            <li>Michael Jones
                            <li>Akshay Kumar
                            <li>Rolf Lindemann
                            <li>Vijay Bharadwaj
                            <li>Arnar Birgisson
                            <li>Hubert Le Van Gong
                            <li>Huakai Liao
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                          <li data-title="high resolution time" data-tag="performance webapi" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2019/SPSD-hr-time-1-20191121/" title="Latest draft of High Resolution Time formally approved by the group">High Resolution Time</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2019-11-21 - <a title="High Resolution Time publication history" href="/standards/history/hr-time">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael McKeough
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="high resolution time level 2" data-tag="performance webapi" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2019/REC-hr-time-2-20191121/" title="Latest draft of High Resolution Time Level 2 formally approved by the group">High  Resolution  Time  Level&nbsp;2</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2019-11-21 - <a title="High Resolution Time Level 2 publication history" href="/standards/history/hr-time-2">History</a>
                        - <a href="https://w3c.github.io/hr-time/" title="Latest editor's draft of High Resolution Time Level 2">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ilya Grigorik
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css containment module level 1" data-tag="css" data-status="rec" data-version="latest ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2019/REC-css-contain-1-20191121/" title="Latest draft of CSS Containment Module Level 1 formally approved by the group">CSS  Containment  Module  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2019-11-21 - <a title="CSS Containment Module Level 1 publication history" href="/standards/history/css-contain-1">History</a>
                        - <a href="https://drafts.csswg.org/css-contain/" title="Latest editor's draft of CSS Containment Module Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tab Atkins Jr.
                            <li>Florian Rivoal
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                <li data-title="service workers 1" data-tag="webapi" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2019/CR-service-workers-1-20191119/" title="Latest draft of Service Workers 1 formally approved by the group">Service  Workers&nbsp;1</a></h2>
                        <p class=deliverer>Service Workers Working Group</p>
                        <p class=pubdetails>2019-11-19 - <a title="Service Workers 1 publication history" href="/standards/history/service-workers-1">History</a>
                        - <a href="https://w3c.github.io/ServiceWorker/v1/" title="Latest editor's draft of Service Workers 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Alex Russell
                            <li>Jungkee Song
                            <li>Jake Archibald
                            <li>Marijn Kruisselbrink
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="verifiable credentials data model 1.0" data-tag="" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2019/REC-vc-data-model-20191119/" title="Latest draft of Verifiable Credentials Data Model 1.0 formally approved by the group">Verifiable  Credentials  Data  Model&nbsp;1.0</a></h2>
                        <p class=deliverer>Verifiable Credentials Working Group</p>
                        <p class=pubdetails>2019-11-19 - <a title="Verifiable Credentials Data Model 1.0 publication history" href="/standards/history/vc-data-model">History</a>
                        - <a href="https://w3c.github.io/vc-data-model/" title="Latest editor's draft of Verifiable Credentials Data Model 1.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Manu Sporny
                            <li>Grant Noble
                            <li>Dave Longley
                            <li>Daniel Burnett
                            <li>Brent Zundel
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="screen capture" data-tag="media webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-screen-capture-20191119/" title="Latest draft of Screen Capture formally approved by the group">Screen Capture</a></h2>
                        <p class=deliverer>Web Real-Time Communications Working Group</p>
                        <p class=pubdetails>2019-11-19 - <a title="Screen Capture publication history" href="/standards/history/screen-capture">History</a>
                        - <a href="https://w3c.github.io/mediacapture-screen-share/" title="Latest editor's draft of Screen Capture">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Martin Thomson
                            <li>Keith Griffin
                            <li>Suhas Nandakumar
                            <li>Henrik Boström
                            <li>Jan-Ivar Bruaroey
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="trace context protocols registry" data-tag="performance" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2019/NOTE-trace-context-protocols-registry-20191119/" title="Latest draft of Trace Context Protocols Registry formally approved by the group">Trace Context Protocols Registry</a></h2>
                        <p class=deliverer>Distributed Tracing Working Group</p>
                        <p class=pubdetails>2019-11-19 - <a title="Trace Context Protocols Registry publication history" href="/standards/history/trace-context-protocols-registry">History</a>
                        - <a href="https://w3c.github.io/trace-context-protocols-registry/" title="Latest editor's draft of Trace Context Protocols Registry">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Sergey Kanzhelev
                            <li>Philippe Le Hégaret
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css fonts module level 4" data-tag="css" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-css-fonts-4-20191113/" title="Latest draft of CSS Fonts Module Level 4 formally approved by the group">CSS  Fonts  Module  Level&nbsp;4</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2019-11-13 - <a title="CSS Fonts Module Level 4 publication history" href="/standards/history/css-fonts-4">History</a>
                        - <a href="https://drafts.csswg.org/css-fonts-4/" title="Latest editor's draft of CSS Fonts Module Level 4">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>John Daggett
                            <li>Myles Maxfield
                            <li>Chris Lilley
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css text module level 4" data-tag="css" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-css-text-4-20191113/" title="Latest draft of CSS Text Module Level 4 formally approved by the group">CSS  Text  Module  Level&nbsp;4</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2019-11-13 - <a title="CSS Text Module Level 4 publication history" href="/standards/history/css-text-4">History</a>
                        - <a href="https://drafts.csswg.org/css-text-4/" title="Latest editor's draft of CSS Text Module Level 4">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Elika Etemad
                            <li>Koji Ishii
                            <li>Alan Stearns
                            <li>Florian Rivoal
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css text module level 3" data-tag="css i18n" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-css-text-3-20191113/" title="Latest draft of CSS Text Module Level 3 formally approved by the group">CSS  Text  Module  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2019-11-13 - <a title="CSS Text Module Level 3 publication history" href="/standards/history/css-text-3">History</a>
                        - <a href="https://drafts.csswg.org/css-text-3/" title="Latest editor's draft of CSS Text Module Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Elika Etemad
                            <li>Koji Ishii
                            <li>Florian Rivoal
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css containment module level 2" data-tag="css" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-css-contain-2-20191111/" title="Latest draft of CSS Containment Module Level 2 formally approved by the group">CSS  Containment  Module  Level&nbsp;2</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2019-11-11 - <a title="CSS Containment Module Level 2 publication history" href="/standards/history/css-contain-2">History</a>
                        - <a href="https://drafts.csswg.org/css-contain-2/" title="Latest editor's draft of CSS Containment Module Level 2">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tab Atkins Jr.
                            <li>Florian Rivoal
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="web of things (wot) security and privacy guidelines" data-tag="wot" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2019/NOTE-wot-security-20191106/" title="Latest draft of Web of Things (WoT) Security and Privacy Guidelines formally approved by the group">Web of Things (WoT) Security and Privacy Guidelines</a></h2>
                        <p class=deliverer>Web of Things Working Group</p>
                        <p class=pubdetails>2019-11-06 - <a title="Web of Things (WoT) Security and Privacy Guidelines publication history" href="/standards/history/wot-security">History</a>
                        - <a href="https://w3c.github.io/wot-security/" title="Latest editor's draft of Web of Things (WoT) Security and Privacy Guidelines">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Elena Reshetova
                            <li>Michael McCool
                          </ul>
                                    <ul class="taglist">
                            <li class="wot">WoT
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css color module level 4" data-tag="css" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-css-color-4-20191105/" title="Latest draft of CSS Color Module Level 4 formally approved by the group">CSS  Color  Module  Level&nbsp;4</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2019-11-05 - <a title="CSS Color Module Level 4 publication history" href="/standards/history/css-color-4">History</a>
                        - <a href="https://drafts.csswg.org/css-color/" title="Latest editor's draft of CSS Color Module Level 4">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tab Atkins Jr.
                            <li>Chris Lilley
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="accessibility conformance testing (act) rules format 1.0" data-tag="accessibility" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2019/REC-act-rules-format-1.0-20191031/" title="Latest draft of Accessibility Conformance Testing (ACT) Rules Format 1.0 formally approved by the group">Accessibility  Conformance  Testing  (ACT)  Rules  Format&nbsp;1.0</a></h2>
                        <p class=deliverer>Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2019-10-31 - <a title="Accessibility Conformance Testing (ACT) Rules Format 1.0 publication history" href="/standards/history/act-rules-format-1.0">History</a>
                        - <a href="https://w3c.github.io/wcag-act/act-rules-format.html" title="Latest editor's draft of Accessibility Conformance Testing (ACT) Rules Format 1.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Wilco Fiers
                            <li>Maureen Kraft
                            <li>Mary Jo Mueller
                            <li>Shadi Abou-Zahra
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                <li data-title="web of things (wot) scripting api" data-tag="wot" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-wot-scripting-api-20191028/" title="Latest draft of Web of Things (WoT) Scripting API formally approved by the group">Web of Things (WoT) Scripting API</a></h2>
                        <p class=deliverer>Web of Things Working Group</p>
                        <p class=pubdetails>2019-10-28 - <a title="Web of Things (WoT) Scripting API publication history" href="/standards/history/wot-scripting-api">History</a>
                        - <a href="https://w3c.github.io/wot-scripting-api/" title="Latest editor's draft of Web of Things (WoT) Scripting API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Zoltan Kis
                            <li>Daniel Peintner
                            <li>Johannes Hund
                            <li>Kazuaki Nimura
                          </ul>
                                    <ul class="taglist">
                            <li class="wot">WoT
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css properties and values api level 1" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-css-properties-values-api-1-20191025/" title="Latest draft of CSS Properties and Values API Level 1 formally approved by the group">CSS  Properties  and  Values  API  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=deliverer>Technical Architecture Group</p>
                        <p class=pubdetails>2019-10-25 - <a title="CSS Properties and Values API Level 1 publication history" href="/standards/history/css-properties-values-api-1">History</a>
                        - <a href="https://drafts.css-houdini.org/css-properties-values-api-1/" title="Latest editor's draft of CSS Properties and Values API Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tab Atkins Jr.
                            <li>Daniel Glazman
                            <li>Alan Stearns
                            <li>Greg Whitworth
                            <li>Shane Stephens
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                        <li data-title="performance timeline level 2" data-tag="performance webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-performance-timeline-2-20191024/" title="Latest draft of Performance Timeline Level 2 formally approved by the group">Performance  Timeline  Level&nbsp;2</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2019-10-24 - <a title="Performance Timeline Level 2 publication history" href="/standards/history/performance-timeline-2">History</a>
                        - <a href="https://w3c.github.io/performance-timeline/" title="Latest editor's draft of Performance Timeline Level 2">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ilya Grigorik
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="scalable video coding (svc) extension for webrtc" data-tag="media" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-webrtc-svc-20191022/" title="Latest draft of Scalable Video Coding (SVC) Extension for WebRTC formally approved by the group">Scalable Video Coding (SVC) Extension for WebRTC</a></h2>
                        <p class=deliverer>Web Real-Time Communications Working Group</p>
                        <p class=pubdetails>2019-10-22 - <a title="Scalable Video Coding (SVC) Extension for WebRTC publication history" href="/standards/history/webrtc-svc">History</a>
                        - <a href="https://w3c.github.io/webrtc-svc/" title="Latest editor's draft of Scalable Video Coding (SVC) Extension for WebRTC">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Peter Thatcher
                            <li>Bernard Aboba
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="payment handler api" data-tag="webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-payment-handler-20191021/" title="Latest draft of Payment Handler API formally approved by the group">Payment Handler API</a></h2>
                        <p class=deliverer>Web Payments Working Group</p>
                        <p class=pubdetails>2019-10-21 - <a title="Payment Handler API publication history" href="/standards/history/payment-handler">History</a>
                        - <a href="https://w3c.github.io/payment-handler/" title="Latest editor's draft of Payment Handler API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Adrian Hope-Bailie
                            <li>Jason Normore
                            <li>Ian Jacobs
                            <li>Rouslan Solomakhin
                            <li>Jinho Bang
                            <li>Tommy Thorsen
                            <li>Adam Roach
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="css multi-column layout module level 1" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-css-multicol-1-20191015/" title="Latest draft of CSS Multi-column Layout Module Level 1 formally approved by the group">CSS  Multi-column  Layout  Module  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2019-10-15 - <a title="CSS Multi-column Layout Module Level 1 publication history" href="/standards/history/css-multicol-1">History</a>
                        - <a href="https://drafts.csswg.org/css-multicol/" title="Latest editor's draft of CSS Multi-column Layout Module Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Håkon Wium Lie
                            <li>Florian Rivoal
                            <li>Rachel Andrew
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="webxr device api" data-tag="graphics webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-webxr-20191010/" title="Latest draft of WebXR Device API formally approved by the group">WebXR Device API</a></h2>
                        <p class=deliverer>Immersive Web Working Group</p>
                        <p class=pubdetails>2019-10-10 - <a title="WebXR Device API publication history" href="/standards/history/webxr">History</a>
                        - <a href="https://immersive-web.github.io/webxr/" title="Latest editor's draft of WebXR Device API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Brandon Jones
                            <li>Nell Waliczek
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="webxr augmented reality module - level 1" data-tag="graphics webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-webxr-ar-module-1-20191010/" title="Latest draft of WebXR Augmented Reality Module - Level 1 formally approved by the group">WebXR  Augmented  Reality  Module  -  Level&nbsp;1</a></h2>
                        <p class=deliverer>Immersive Web Working Group</p>
                        <p class=pubdetails>2019-10-10 - <a title="WebXR Augmented Reality Module - Level 1 publication history" href="/standards/history/webxr-ar-module">History</a>
                        - <a href="https://immersive-web.github.io/webxr-ar-module/" title="Latest editor's draft of WebXR Augmented Reality Module - Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Brandon Jones
                            <li>Nell Waliczek
                            <li>Manish Goregaokar
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <li data-title="webxr gamepads module - level 1" data-tag="graphics webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-webxr-gamepads-module-1-20191010/" title="Latest draft of WebXR Gamepads Module - Level 1 formally approved by the group">WebXR  Gamepads  Module  -  Level&nbsp;1</a></h2>
                        <p class=deliverer>Immersive Web Working Group</p>
                        <p class=pubdetails>2019-10-10 - <a title="WebXR Gamepads Module - Level 1 publication history" href="/standards/history/webxr-gamepads-module">History</a>
                        - <a href="https://immersive-web.github.io/webxr-gamepads-module/" title="Latest editor's draft of WebXR Gamepads Module - Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Brandon Jones
                            <li>Nell Waliczek
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css images module level 3" data-tag="css" data-status="cr" data-version="latest ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2019/CR-css-images-3-20191010/" title="Latest draft of CSS Images Module Level 3 formally approved by the group">CSS  Images  Module  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2019-10-10 - <a title="CSS Images Module Level 3 publication history" href="/standards/history/css3-images">History</a>
                        - <a href="https://drafts.csswg.org/css-images-3/" title="Latest editor's draft of CSS Images Module Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tab Atkins Jr.
                            <li>Elika Etemad
                            <li>Lea Verou
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="verifiable credentials implementation guidelines 1.0" data-tag="" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2019/NOTE-vc-imp-guide-20190924/" title="Latest draft of Verifiable Credentials Implementation Guidelines 1.0 formally approved by the group">Verifiable  Credentials  Implementation  Guidelines&nbsp;1.0</a></h2>
                        <p class=deliverer>Verifiable Credentials Working Group</p>
                        <p class=pubdetails>2019-09-24 - <a title="Verifiable Credentials Implementation Guidelines 1.0 publication history" href="/standards/history/vc-imp-guide">History</a>
                        - <a href="https://w3c.github.io/vc-imp-guide/" title="Latest editor's draft of Verifiable Credentials Implementation Guidelines 1.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Andrei Sambra
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="verifiable credentials use cases" data-tag="" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2019/NOTE-vc-use-cases-20190924/" title="Latest draft of Verifiable Credentials Use Cases formally approved by the group">Verifiable Credentials Use Cases</a></h2>
                        <p class=deliverer>Verifiable Credentials Working Group</p>
                        <p class=pubdetails>2019-09-24 - <a title="Verifiable Credentials Use Cases publication history" href="/standards/history/vc-use-cases">History</a>
                        - <a href="https://w3c.github.io/vc-use-cases/" title="Latest editor's draft of Verifiable Credentials Use Cases">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Shane McCarron
                            <li>Joe Andrieu
                            <li>Matt Stone
                            <li>Tzviya Siegman
                            <li>Gregg Kellogg
                            <li>Ted Thibodeau
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="html accessibility api mappings 1.0" data-tag="accessibility html" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-html-aam-1.0-20190913/" title="Latest draft of HTML Accessibility API Mappings 1.0 formally approved by the group">HTML  Accessibility  API  Mappings&nbsp;1.0</a></h2>
                        <p class=deliverer>Web Applications Working Group</p>
                        <p class=pubdetails>2019-09-13 - <a title="HTML Accessibility API Mappings 1.0 publication history" href="/standards/history/html-aam-1.0">History</a>
                        - <a href="https://w3c.github.io/html-aam/" title="Latest editor's draft of HTML Accessibility API Mappings 1.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steve Faulkner
                            <li>Alexander Surkov
                            <li>Scott O&#039;Hara
                            <li>Bogdan Brinza
                            <li>Jason Kiss
                            <li>Cynthia Shelly
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="miniapp standardization white paper" data-tag="" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-mini-app-white-paper-20190912/" title="Latest draft of MiniApp Standardization White Paper formally approved by the group">MiniApp Standardization White Paper</a></h2>
                        <p class=deliverer>Chinese Web Interest Group</p>
                        <p class=pubdetails>2019-09-12 - <a title="MiniApp Standardization White Paper publication history" href="/standards/history/mini-app-white-paper">History</a>
                        - <a href="https://w3c.github.io/mini-app-white-paper/" title="Latest editor's draft of MiniApp Standardization White Paper">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Angel Li
                            <li>Qing An
                            <li>Dapeng Liu
                            <li>Hongru (Judy) Zhu
                            <li>Qingqian Tao
                            <li>Zhixing Lei
                            <li>Zhou Shen
                            <li>Zhiqiang Yu
                            <li>Wanming Lin
                            <li>xiaowei jiang
                            <li>Fuqiao Xue
                            <li>Lei Zhao
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="file api" data-tag="webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-FileAPI-20190911/" title="Latest draft of File API formally approved by the group">File API</a></h2>
                        <p class=deliverer>Web Applications Working Group</p>
                        <p class=pubdetails>2019-09-11 - <a title="File API publication history" href="/standards/history/FileAPI">History</a>
                        - <a href="https://w3c.github.io/FileAPI/" title="Latest editor's draft of File API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Marijn Kruisselbrink
                            <li>Arun Ranganathan
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="self-review questionnaire: security and privacy" data-tag="privacy" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2019/NOTE-security-privacy-questionnaire-20190910/" title="Latest draft of Self-Review Questionnaire: Security and Privacy formally approved by the group">Self-Review Questionnaire: Security and Privacy</a></h2>
                        <p class=deliverer>Technical Architecture Group</p>
                        <p class=pubdetails>2019-09-10 - <a title="Self-Review Questionnaire: Security and Privacy publication history" href="/standards/history/security-privacy-questionnaire">History</a>
                        - <a href="https://w3ctag.github.io/security-questionnaire/" title="Latest editor's draft of Self-Review Questionnaire: Security and Privacy">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Lukasz Olejnik
                            <li>Jason Novak
                          </ul>
                                    <ul class="taglist">
                            <li class="privacy">Privacy
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="payment method identifiers" data-tag="" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2019/CR-payment-method-id-20190905/" title="Latest draft of Payment Method Identifiers formally approved by the group">Payment Method Identifiers</a></h2>
                        <p class=deliverer>Web Payments Working Group</p>
                        <p class=pubdetails>2019-09-05 - <a title="Payment Method Identifiers publication history" href="/standards/history/payment-method-id">History</a>
                        - <a href="https://w3c.github.io/payment-method-id/" title="Latest editor's draft of Payment Method Identifiers">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Marcos Caceres
                            <li>Domenic Denicola
                            <li>Zach Koch
                            <li>Roy McElmurry
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="pronunciation user scenarios" data-tag="accessibility" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-pronunciation-user-scenarios-20190905/" title="Latest draft of Pronunciation User Scenarios formally approved by the group">Pronunciation User Scenarios</a></h2>
                        <p class=deliverer>Accessible Platform Architectures Working Group</p>
                        <p class=pubdetails>2019-09-05 - <a title="Pronunciation User Scenarios publication history" href="/standards/history/pronunciation-user-scenarios">History</a>
                        - <a href="https://w3c.github.io/pronunciation/user-scenarios" title="Latest editor's draft of Pronunciation User Scenarios">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Irfan Ali
                            <li>Sam Kanta
                            <li>Christine Loew
                            <li>Paul Grenier
                            <li>Ruoxi Ran
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                          <li data-title="pointer lock 2.0" data-tag="webapi" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-pointerlock-2-20190828/" title="Latest draft of Pointer Lock 2.0 formally approved by the group">Pointer  Lock&nbsp;2.0</a></h2>
                        <p class=deliverer>Web Applications Working Group</p>
                        <p class=pubdetails>2019-08-28 - <a title="Pointer Lock 2.0 publication history" href="/standards/history/pointerlock-2">History</a>
                        - <a href="https://w3c.github.io/pointerlock/" title="Latest editor's draft of Pointer Lock 2.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Navid Zolghadr
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css lists module level 3" data-tag="css i18n" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-css-lists-3-20190817/" title="Latest draft of CSS Lists Module Level 3 formally approved by the group">CSS  Lists  Module  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2019-08-17 - <a title="CSS Lists Module Level 3 publication history" href="/standards/history/css-lists-3">History</a>
                        - <a href="https://drafts.csswg.org/css-lists-3/" title="Latest editor's draft of CSS Lists Module Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Elika Etemad
                            <li>Tab Atkins Jr.
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="wai-aria authoring practices 1.1" data-tag="accessibility" data-status="note" data-version="latest ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2019/NOTE-wai-aria-practices-1.1-20190814/" title="Latest draft of WAI-ARIA Authoring Practices 1.1 formally approved by the group">WAI-ARIA  Authoring  Practices&nbsp;1.1</a></h2>
                        <p class=deliverer>Accessible Rich Internet Applications Working Group</p>
                        <p class=pubdetails>2019-08-14 - <a title="WAI-ARIA Authoring Practices 1.1 publication history" href="/standards/history/wai-aria-practices-1.1">History</a>
                        - <a href="https://w3c.github.io/aria-practices/" title="Latest editor's draft of WAI-ARIA Authoring Practices 1.1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Matthew King
                            <li>JaEun Ku
                            <li>James Nurthen
                            <li>Zoë Bijl
                            <li>Michael Cooper
                            <li>Joseph Scheuhammer
                            <li>Lisa Pappas
                            <li>Richard Schwerdtfeger
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="web publications use cases and requirements" data-tag="" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2019/NOTE-pwp-ucr-20190813/" title="Latest draft of Web Publications Use Cases and Requirements formally approved by the group">Web Publications Use Cases and Requirements</a></h2>
                        <p class=deliverer>Publishing Working Group</p>
                        <p class=pubdetails>2019-08-13 - <a title="Web Publications Use Cases and Requirements publication history" href="/standards/history/pwp-ucr">History</a>
                        - <a href="https://w3c.github.io/dpub-pwp-ucr/" title="Latest editor's draft of Web Publications Use Cases and Requirements">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Franco Alvarado
                            <li>Joshua Pyle
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="css text decoration module level 3" data-tag="css" data-status="cr" data-version="latest ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2019/CR-css-text-decor-3-20190813/" title="Latest draft of CSS Text Decoration Module Level 3 formally approved by the group">CSS  Text  Decoration  Module  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2019-08-13 - <a title="CSS Text Decoration Module Level 3 publication history" href="/standards/history/css-text-decor-3">History</a>
                        - <a href="https://drafts.csswg.org/css-text-decor-3/" title="Latest editor's draft of CSS Text Decoration Module Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Elika Etemad
                            <li>Koji Ishii
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="web publications" data-tag="" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2019/NOTE-wpub-20190813/" title="Latest draft of Web Publications formally approved by the group">Web Publications</a></h2>
                        <p class=deliverer>Publishing Working Group</p>
                        <p class=pubdetails>2019-08-13 - <a title="Web Publications publication history" href="/standards/history/wpub">History</a>
                        - <a href="https://w3c.github.io/wpub/" title="Latest editor's draft of Web Publications">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Matt Garrish
                            <li>Ivan Herman
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="css generated content module level 3" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-css-content-3-20190802/" title="Latest draft of CSS Generated Content Module Level 3 formally approved by the group">CSS  Generated  Content  Module  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2019-08-02 - <a title="CSS Generated Content Module Level 3 publication history" href="/standards/history/css-content-3">History</a>
                        - <a href="https://drafts.csswg.org/css-content-3/" title="Latest editor's draft of CSS Generated Content Module Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Elika Etemad
                            <li>Dave Cramer
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="css writing modes level 4" data-tag="css" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2019/CR-css-writing-modes-4-20190730/" title="Latest draft of CSS Writing Modes Level 4 formally approved by the group">CSS  Writing  Modes  Level&nbsp;4</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2019-07-30 - <a title="CSS Writing Modes Level 4 publication history" href="/standards/history/css-writing-modes-4">History</a>
                        - <a href="https://drafts.csswg.org/css-writing-modes-4/" title="Latest editor's draft of CSS Writing Modes Level 4">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Elika Etemad
                            <li>Koji Ishii
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css table module level 3" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-css-tables-3-20190727/" title="Latest draft of CSS Table Module Level 3 formally approved by the group">CSS  Table  Module  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2019-07-27 - <a title="CSS Table Module Level 3 publication history" href="/standards/history/css-tables-3">History</a>
                        - <a href="https://drafts.csswg.org/css-tables-3/" title="Latest editor's draft of CSS Table Module Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>François Remy
                            <li>Greg Whitworth
                            <li>David Baron
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="timing entry names registry" data-tag="performance" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-timing-entrytypes-registry-20190723/" title="Latest draft of Timing Entry Names Registry formally approved by the group">Timing Entry Names Registry</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2019-07-23 - <a title="Timing Entry Names Registry publication history" href="/standards/history/timing-entrytypes-registry">History</a>
                        - <a href="https://w3c.github.io/timing-entrytypes-registry/" title="Latest editor's draft of Timing Entry Names Registry">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Philippe Le Hégaret
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="css syntax module level 3" data-tag="css" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2019/CR-css-syntax-3-20190716/" title="Latest draft of CSS Syntax Module Level 3 formally approved by the group">CSS  Syntax  Module  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2019-07-16 - <a title="CSS Syntax Module Level 3 publication history" href="/standards/history/css-syntax-3">History</a>
                        - <a href="https://drafts.csswg.org/css-syntax/" title="Latest editor's draft of CSS Syntax Module Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tab Atkins Jr.
                            <li>Simon Sapin
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="css display module level 3" data-tag="css" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2019/CR-css-display-3-20190711/" title="Latest draft of CSS Display Module Level 3 formally approved by the group">CSS  Display  Module  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2019-07-11 - <a title="CSS Display Module Level 3 publication history" href="/standards/history/css-display-3">History</a>
                        - <a href="https://drafts.csswg.org/css-display/" title="Latest editor's draft of CSS Display Module Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tab Atkins Jr.
                            <li>Elika Etemad
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="personalization help and support 1.0" data-tag="accessibility" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-personalization-semantics-help-1.0-20190711/" title="Latest draft of Personalization Help and Support 1.0 formally approved by the group">Personalization  Help  and  Support&nbsp;1.0</a></h2>
                        <p class=deliverer>Accessible Platform Architectures Working Group</p>
                        <p class=pubdetails>2019-07-11 - <a title="Personalization Help and Support 1.0 publication history" href="/standards/history/personalization-semantics-help-1.0">History</a>
                        - <a href="https://w3c.github.io/personalization-semantics/help/" title="Latest editor's draft of Personalization Help and Support 1.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Lisa Seeman-Kestenbaum
                            <li>Charles LaPierre
                            <li>Michael Cooper
                            <li>Ruoxi Ran
                            <li>Richard Schwerdtfeger
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                <li data-title="personalization tools 1.0" data-tag="accessibility" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-personalization-semantics-tools-1.0-20190711/" title="Latest draft of Personalization Tools 1.0 formally approved by the group">Personalization  Tools&nbsp;1.0</a></h2>
                        <p class=deliverer>Accessible Platform Architectures Working Group</p>
                        <p class=pubdetails>2019-07-11 - <a title="Personalization Tools 1.0 publication history" href="/standards/history/personalization-semantics-tools-1.0">History</a>
                        - <a href="https://w3c.github.io/personalization-semantics/tools/" title="Latest editor's draft of Personalization Tools 1.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Lisa Seeman-Kestenbaum
                            <li>Charles LaPierre
                            <li>Michael Cooper
                            <li>Ruoxi Ran
                            <li>Richard Schwerdtfeger
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="accessible name and description computation 1.2" data-tag="accessibility" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-accname-1.2-20190711/" title="Latest draft of Accessible Name and Description Computation 1.2 formally approved by the group">Accessible  Name  and  Description  Computation&nbsp;1.2</a></h2>
                        <p class=deliverer>Accessible Rich Internet Applications Working Group</p>
                        <p class=pubdetails>2019-07-11 - <a title="Accessible Name and Description Computation 1.2 publication history" href="/standards/history/accname-1.2">History</a>
                        - <a href="https://w3c.github.io/accname/" title="Latest editor's draft of Accessible Name and Description Computation 1.2">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Bryan Garaventa
                            <li>Joanmarie Diggs
                            <li>Michael Cooper
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="media capture and streams" data-tag="media webapi" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2019/CR-mediacapture-streams-20190702/" title="Latest draft of Media Capture and Streams formally approved by the group">Media Capture and Streams</a></h2>
                        <p class=deliverer>Web Real-Time Communications Working Group</p>
                        <p class=pubdetails>2019-07-02 - <a title="Media Capture and Streams publication history" href="/standards/history/mediacapture-streams">History</a>
                        - <a href="https://w3c.github.io/mediacapture-main/" title="Latest editor's draft of Media Capture and Streams">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Daniel Burnett
                            <li>Adam Bergkvist
                            <li>Cullen Jennings
                            <li>Anant Narayanan
                            <li>Bernard Aboba
                            <li>Jan-Ivar Bruaroey
                            <li>Henrik Boström
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="resource hints" data-tag="performance" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-resource-hints-20190702/" title="Latest draft of Resource Hints formally approved by the group">Resource Hints</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2019-07-02 - <a title="Resource Hints publication history" href="/standards/history/resource-hints">History</a>
                        - <a href="https://w3c.github.io/resource-hints/" title="Latest editor's draft of Resource Hints">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ilya Grigorik
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="preload" data-tag="performance" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2019/CR-preload-20190626/" title="Latest draft of Preload formally approved by the group">Preload</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2019-06-26 - <a title="Preload publication history" href="/standards/history/preload">History</a>
                        - <a href="https://w3c.github.io/preload/" title="Latest editor's draft of Preload">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ilya Grigorik
                            <li>Yoav Weiss
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="css animation worklet api" data-tag="css" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-css-animation-worklet-1-20190625/" title="Latest draft of CSS Animation Worklet API formally approved by the group">CSS Animation Worklet API</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2019-06-25 - <a title="CSS Animation Worklet API publication history" href="/standards/history/css-animation-worklet-1">History</a>
                        - <a href="https://drafts.css-houdini.org/css-animationworklet-1/" title="Latest editor's draft of CSS Animation Worklet API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Majid Valipour
                            <li>Robert Flack
                            <li>Stephen McGruer
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="strings on the web: language and direction metadata" data-tag="data i18n media webapi wot" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-string-meta-20190611/" title="Latest draft of Strings on the Web: Language and Direction Metadata formally approved by the group">Strings on the Web: Language and Direction Metadata</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2019-06-11 - <a title="Strings on the Web: Language and Direction Metadata publication history" href="/standards/history/string-meta">History</a>
                        - <a href="https://w3c.github.io/string-meta/" title="Latest editor's draft of Strings on the Web: Language and Direction Metadata">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Addison Phillips
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                            <li class="i18n">i18n
                            <li class="media">Media
                            <li class="webapi">Web API
                            <li class="wot">WoT
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css values and units module level 3" data-tag="css" data-status="cr" data-version="latest ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2019/CR-css-values-3-20190606/" title="Latest draft of CSS Values and Units Module Level 3 formally approved by the group">CSS  Values  and  Units  Module  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2019-06-06 - <a title="CSS Values and Units Module Level 3 publication history" href="/standards/history/css-values-3">History</a>
                        - <a href="https://drafts.csswg.org/css-values-3/" title="Latest editor's draft of CSS Values and Units Module Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tab Atkins Jr.
                            <li>Elika Etemad
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <li data-title="css overscroll behavior module level 1" data-tag="css" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-css-overscroll-1-20190606/" title="Latest draft of CSS Overscroll Behavior Module Level 1 formally approved by the group">CSS  Overscroll  Behavior  Module  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2019-06-06 - <a title="CSS Overscroll Behavior Module Level 1 publication history" href="/standards/history/css-overscroll-1">History</a>
                        - <a href="https://drafts.csswg.org/css-overscroll-1/" title="Latest editor's draft of CSS Overscroll Behavior Module Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Majid Valipour
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="clipboard api and events" data-tag="webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-clipboard-apis-20190605/" title="Latest draft of Clipboard API and events formally approved by the group">Clipboard API and events</a></h2>
                        <p class=deliverer>Web Applications Working Group</p>
                        <p class=pubdetails>2019-06-05 - <a title="Clipboard API and events publication history" href="/standards/history/clipboard-apis">History</a>
                        - <a href="https://w3c.github.io/clipboard-apis/" title="Latest editor's draft of Clipboard API and events">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Gary Kacmarcik
                            <li>Grisha Lyukshin
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="intersection observer" data-tag="dom" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-intersection-observer-20190531/" title="Latest draft of Intersection Observer formally approved by the group">Intersection Observer</a></h2>
                        <p class=deliverer>Web Applications Working Group</p>
                        <p class=pubdetails>2019-05-31 - <a title="Intersection Observer publication history" href="/standards/history/intersection-observer">History</a>
                        - <a href="https://w3c.github.io/IntersectionObserver/" title="Latest editor's draft of Intersection Observer">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Stefan Zager
                            <li>Michael Blain
                          </ul>
                                    <ul class="taglist">
                            <li class="dom">DOM
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="input events level 1" data-tag="webapi" data-status="wd" data-version="ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-input-events-1-20190530/" title="Latest draft of Input Events Level 1 formally approved by the group">Input  Events  Level&nbsp;1</a></h2>
                        <p class=deliverer>Web Applications Working Group</p>
                        <p class=pubdetails>2019-05-30 - <a title="Input Events Level 1 publication history" href="/standards/history/input-events-1">History</a>
                        - <a href="https://cdn.staticaly.com/gh/w3c/input-events/v1/index.html" title="Latest editor's draft of Input Events Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Johannes Wilm
                            <li>Ben Peters
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                <li data-title="ui events" data-tag="dom" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-uievents-20190530/" title="Latest draft of UI Events formally approved by the group">UI Events</a></h2>
                        <p class=deliverer>Web Applications Working Group</p>
                        <p class=pubdetails>2019-05-30 - <a title="UI Events publication history" href="/standards/history/uievents">History</a>
                        - <a href="https://w3c.github.io/uievents/" title="Latest editor's draft of UI Events">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Gary Kacmarcik
                            <li>Travis Leithead
                            <li>Doug Schepers
                          </ul>
                                    <ul class="taglist">
                            <li class="dom">DOM
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="input events level 2" data-tag="" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-input-events-2-20190530/" title="Latest draft of Input Events Level 2 formally approved by the group">Input  Events  Level&nbsp;2</a></h2>
                        <p class=deliverer>Web Applications Working Group</p>
                        <p class=pubdetails>2019-05-30 - <a title="Input Events Level 2 publication history" href="/standards/history/input-events-2">History</a>
                        - <a href="https://w3c.github.io/input-events/" title="Latest editor's draft of Input Events Level 2">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Johannes Wilm
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="requirements for chinese text layout 中文排版需求" data-tag="css graphics i18n xml" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-clreq-20190528/" title="Latest draft of Requirements for Chinese Text Layout 中文排版需求 formally approved by the group">Requirements for Chinese Text Layout 中文排版需求</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2019-05-28 - <a title="Requirements for Chinese Text Layout 中文排版需求 publication history" href="/standards/history/clreq">History</a>
                        - <a href="https://w3c.github.io/clreq/" title="Latest editor's draft of Requirements for Chinese Text Layout 中文排版需求">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Bobby Tung
                            <li>Yijun Chen
                            <li>Eric Q LIU
                            <li>Hui Jing Chen
                            <li>Fuqiao Xue
                            <li>Richard Ishida
                            <li>An Qi Li
                            <li>Hai Liang
                            <li>Xiaoqian Wu
                            <li>Aijie Zhang
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                            <li class="graphics">Graphics
                            <li class="i18n">i18n
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="css intrinsic &amp; extrinsic sizing module level 3" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-css-sizing-3-20190522/" title="Latest draft of CSS Intrinsic &amp; Extrinsic Sizing Module Level 3 formally approved by the group">CSS  Intrinsic  &  Extrinsic  Sizing  Module  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2019-05-22 - <a title="CSS Intrinsic &amp; Extrinsic Sizing Module Level 3 publication history" href="/standards/history/css-sizing-3">History</a>
                        - <a href="https://drafts.csswg.org/css-sizing-3/" title="Latest editor's draft of CSS Intrinsic &amp; Extrinsic Sizing Module Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tab Atkins Jr.
                            <li>Elika Etemad
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="international text layout and typography index" data-tag="i18n" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-typography-20190520/" title="Latest draft of International text layout and typography index formally approved by the group">International text layout and typography index</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2019-05-20 - <a title="International text layout and typography index publication history" href="/standards/history/typography">History</a>
                        - <a href="https://w3c.github.io/typography/" title="Latest editor's draft of International text layout and typography index">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="media timed events" data-tag="media" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2019/NOTE-media-timed-events-20190516/" title="Latest draft of Media Timed Events formally approved by the group">Media Timed Events</a></h2>
                        <p class=deliverer>Media and Entertainment Interest Group</p>
                        <p class=pubdetails>2019-05-16 - <a title="Media Timed Events publication history" href="/standards/history/media-timed-events">History</a>
                        - <a href="https://w3c.github.io/me-media-timed-events/" title="Latest editor's draft of Media Timed Events">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Chris Needham
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                          <li data-title="character model for the world wide web 1.0: resource identifiers" data-tag="i18n" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2019/NOTE-charmod-resid-20190502/" title="Latest draft of Character Model for the World Wide Web 1.0: Resource Identifiers formally approved by the group">Character Model for the World Wide Web 1.0: Resource Identifiers</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2019-05-02 - <a title="Character Model for the World Wide Web 1.0: Resource Identifiers publication history" href="/standards/history/charmod-resid">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="css easing functions level 1" data-tag="css" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2019/CR-css-easing-1-20190430/" title="Latest draft of CSS Easing Functions Level 1 formally approved by the group">CSS  Easing  Functions  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2019-04-30 - <a title="CSS Easing Functions Level 1 publication history" href="/standards/history/css-easing-1">History</a>
                        - <a href="https://drafts.csswg.org/css-easing/" title="Latest editor's draft of CSS Easing Functions Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Brian Birtles
                            <li>Dean Jackson
                            <li>Matt Rakow
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="feature policy" data-tag="security webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-feature-policy-1-20190416/" title="Latest draft of Feature Policy formally approved by the group">Feature Policy</a></h2>
                        <p class=deliverer>Web Application Security Working Group</p>
                        <p class=pubdetails>2019-04-16 - <a title="Feature Policy publication history" href="/standards/history/feature-policy-1">History</a>
                        - <a href="https://w3c.github.io/webappsec-feature-policy/" title="Latest editor's draft of Feature Policy">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ian Clelland
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="accessibility conformance testing (act) rules: common input aspects" data-tag="accessibility" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2019/NOTE-act-rules-aspects-20190416/" title="Latest draft of Accessibility Conformance Testing (ACT) Rules: Common Input Aspects formally approved by the group">Accessibility Conformance Testing (ACT) Rules: Common Input Aspects</a></h2>
                        <p class=deliverer>Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2019-04-16 - <a title="Accessibility Conformance Testing (ACT) Rules: Common Input Aspects publication history" href="/standards/history/act-rules-aspects">History</a>
                        - <a href="https://w3c.github.io/wcag-act/NOTE-act-rules-common-aspects.html" title="Latest editor's draft of Accessibility Conformance Testing (ACT) Rules: Common Input Aspects">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Wilco Fiers
                            <li>Maureen Kraft
                            <li>Mary Jo Mueller
                            <li>Shadi Abou-Zahra
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="deviceorientation event specification" data-tag="webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-orientation-event-20190416/" title="Latest draft of DeviceOrientation Event Specification formally approved by the group">DeviceOrientation Event Specification</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2019-04-16 - <a title="DeviceOrientation Event Specification publication history" href="/standards/history/orientation-event">History</a>
                        - <a href="https://w3c.github.io/deviceorientation/" title="Latest editor's draft of DeviceOrientation Event Specification">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Rich Tibbett
                            <li>Tim Volodine
                            <li>Stephen Block
                            <li>Andrei Popescu
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="ttml media type definition and profile registry" data-tag="accessibility css html" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2019/NOTE-ttml-profile-registry-20190411/" title="Latest draft of TTML Media Type Definition and Profile Registry formally approved by the group">TTML Media Type Definition and Profile Registry</a></h2>
                        <p class=deliverer>Timed Text Working Group</p>
                        <p class=pubdetails>2019-04-11 - <a title="TTML Media Type Definition and Profile Registry publication history" href="/standards/history/ttml-profile-registry">History</a>
                        - <a href="https://w3c.github.io/tt-profile-registry/" title="Latest editor's draft of TTML Media Type Definition and Profile Registry">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Glenn Adams
                            <li>Mike Dolan
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                            <li class="css">CSS
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                          <li data-title="pointer events" data-tag="dom webapi" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2019/SPSD-pointerevents1-20190404/" title="Latest draft of Pointer Events formally approved by the group">Pointer Events</a></h2>
                        <p class=deliverer>Pointer Events Working Group</p>
                        <p class=pubdetails>2019-04-04 - <a title="Pointer Events publication history" href="/standards/history/pointerevents">History</a>
                        - <a href="https://dvcs.w3.org/hg/pointerevents/raw-file/tip/pointerEvents.html" title="Latest editor's draft of Pointer Events">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jacob Rossi
                            <li>Matt Brubeck
                          </ul>
                                    <ul class="taglist">
                            <li class="dom">DOM
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                <li data-title="pointer events" data-tag="webapi" data-status="rec" data-version="latest ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2019/REC-pointerevents2-20190404/" title="Latest draft of Pointer Events formally approved by the group">Pointer Events</a></h2>
                        <p class=deliverer>Pointer Events Working Group</p>
                        <p class=pubdetails>2019-04-04 - <a title="Pointer Events publication history" href="/standards/history/pointerevents2">History</a>
                        - <a href="https://w3c.github.io/pointerevents/" title="Latest editor's draft of Pointer Events">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Matt Brubeck
                            <li>Rick Byers
                            <li>Patrick Lauke
                            <li>Navid Zolghadr
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="webvtt: the web video text tracks format" data-tag="css graphics html" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2019/CR-webvtt1-20190404/" title="Latest draft of WebVTT: The Web Video Text Tracks Format formally approved by the group">WebVTT: The Web Video Text Tracks Format</a></h2>
                        <p class=deliverer>Timed Text Working Group</p>
                        <p class=pubdetails>2019-04-04 - <a title="WebVTT: The Web Video Text Tracks Format publication history" href="/standards/history/webvtt1">History</a>
                        - <a href="https://w3c.github.io/webvtt/" title="Latest editor's draft of WebVTT: The Web Video Text Tracks Format">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Silvia Pfeiffer
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                            <li class="graphics">Graphics
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="non-element selectors module level 1" data-tag="css" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2019/NOTE-selectors-nonelement-1-20190402/" title="Latest draft of Non-element Selectors Module Level 1 formally approved by the group">Non-element  Selectors  Module  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2019-04-02 - <a title="Non-element Selectors Module Level 1 publication history" href="/standards/history/selectors-nonelement-1">History</a>
                        - <a href="https://drafts.csswg.org/selectors-nonelement/" title="Latest editor's draft of Non-element Selectors Module Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jirka Kosek
                            <li>Tab Atkins Jr.
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                <li data-title="mitigating browser fingerprinting in web specifications" data-tag="privacy" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2019/NOTE-fingerprinting-guidance-20190328/" title="Latest draft of Mitigating Browser Fingerprinting in Web Specifications formally approved by the group">Mitigating Browser Fingerprinting in Web Specifications</a></h2>
                        <p class=deliverer>Privacy Interest Group</p>
                        <p class=pubdetails>2019-03-28 - <a title="Mitigating Browser Fingerprinting in Web Specifications publication history" href="/standards/history/fingerprinting-guidance">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Nick Doty
                          </ul>
                                    <ul class="taglist">
                            <li class="privacy">Privacy
                          </ul>
                      </li>
                                                                                                                          <li data-title="svg filter requirements" data-tag="graphics" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2019/NOTE-SVGFilterReqs12-20190328/" title="Latest draft of SVG Filter Requirements formally approved by the group">SVG Filter Requirements</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2019-03-28 - <a title="SVG Filter Requirements publication history" href="/standards/history/SVGFilterReqs12">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Erik Dahlström
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                          <li data-title="media access events" data-tag="dom graphics media" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2019/NOTE-MediaAccessEvents-20190328/" title="Latest draft of Media Access Events formally approved by the group">Media Access Events</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2019-03-28 - <a title="Media Access Events publication history" href="/standards/history/MediaAccessEvents">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ola Andersson
                            <li>Jean-Claude Dufourd
                          </ul>
                                    <ul class="taglist">
                            <li class="dom">DOM
                            <li class="graphics">Graphics
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <li data-title="css scroll snap module level 1" data-tag="css" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2019/CR-css-scroll-snap-1-20190319/" title="Latest draft of CSS Scroll Snap Module Level 1 formally approved by the group">CSS  Scroll  Snap  Module  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2019-03-19 - <a title="CSS Scroll Snap Module Level 1 publication history" href="/standards/history/css-scroll-snap-1">History</a>
                        - <a href="https://drafts.csswg.org/css-scroll-snap-1/" title="Latest editor's draft of CSS Scroll Snap Module Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Matt Rakow
                            <li>Jacob Rossi
                            <li>Tab Atkins Jr.
                            <li>Elika Etemad
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="ambient light sensor" data-tag="webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-ambient-light-20190307/" title="Latest draft of Ambient Light Sensor formally approved by the group">Ambient Light Sensor</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2019-03-07 - <a title="Ambient Light Sensor publication history" href="/standards/history/ambient-light">History</a>
                        - <a href="https://w3c.github.io/ambient-light/" title="Latest editor's draft of Ambient Light Sensor">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Anssi Kostiainen
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="magnetometer" data-tag="webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-magnetometer-20190307/" title="Latest draft of Magnetometer formally approved by the group">Magnetometer</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2019-03-07 - <a title="Magnetometer publication history" href="/standards/history/magnetometer">History</a>
                        - <a href="https://w3c.github.io/magnetometer/" title="Latest editor's draft of Magnetometer">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Anssi Kostiainen
                            <li>Rijubrata Bhaumik
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="proximity sensor" data-tag="webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-proximity-20190305/" title="Latest draft of Proximity Sensor formally approved by the group">Proximity Sensor</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2019-03-05 - <a title="Proximity Sensor publication history" href="/standards/history/proximity">History</a>
                        - <a href="https://w3c.github.io/proximity/" title="Latest editor's draft of Proximity Sensor">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Anssi Kostiainen
                            <li>Rijubrata Bhaumik
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <li data-title="web authentication:an api for accessing public key credentials level 1" data-tag="security" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2019/REC-webauthn-1-20190304/" title="Latest draft of Web Authentication:An API for accessing Public Key Credentials Level 1 formally approved by the group">Web  Authentication:An  API  for  accessing  Public  Key  Credentials  Level&nbsp;1</a></h2>
                        <p class=deliverer>Web Authentication Working Group</p>
                        <p class=pubdetails>2019-03-04 - <a title="Web Authentication:An API for accessing Public Key Credentials Level 1 publication history" href="/standards/history/webauthn-1">History</a>
                        - <a href="https://w3c.github.io/webauthn/" title="Latest editor's draft of Web Authentication:An API for accessing Public Key Credentials Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dirk Balfanz
                            <li>Alexei Czeskis
                            <li>Jeff Hodges
                            <li>J.C. Jones
                            <li>Michael Jones
                            <li>Akshay Kumar
                            <li>Huakai Liao
                            <li>Rolf Lindemann
                            <li>Emil Lundberg
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                          <li data-title="user timing" data-tag="performance webapi" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2019/SPSD-user-timing-1-20190226/" title="Latest draft of User Timing formally approved by the group">User Timing</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2019-02-26 - <a title="User Timing publication history" href="/standards/history/user-timing-1">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jatinder Mann
                            <li>Zhiheng Wang
                            <li>Anderson Quach
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="user timing level 2" data-tag="performance webapi" data-status="rec" data-version="latest ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2019/REC-user-timing-2-20190226/" title="Latest draft of User Timing Level 2 formally approved by the group">User  Timing  Level&nbsp;2</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2019-02-26 - <a title="User Timing Level 2 publication history" href="/standards/history/user-timing-2">History</a>
                        - <a href="https://w3c.github.io/user-timing/" title="Latest editor's draft of User Timing Level 2">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ilya Grigorik
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css pseudo-elements module level 4" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-css-pseudo-4-20190225/" title="Latest draft of CSS Pseudo-Elements Module Level 4 formally approved by the group">CSS  Pseudo-Elements  Module  Level&nbsp;4</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2019-02-25 - <a title="CSS Pseudo-Elements Module Level 4 publication history" href="/standards/history/css-pseudo-4">History</a>
                        - <a href="https://drafts.csswg.org/css-pseudo-4/" title="Latest editor's draft of CSS Pseudo-Elements Module Level 4">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Daniel Glazman
                            <li>Elika Etemad
                            <li>Alan Stearns
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css transforms module level 1" data-tag="css" data-status="cr" data-version="latest ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2019/CR-css-transforms-1-20190214/" title="Latest draft of CSS Transforms Module Level 1 formally approved by the group">CSS  Transforms  Module  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2019-02-14 - <a title="CSS Transforms Module Level 1 publication history" href="/standards/history/css-transforms-1">History</a>
                        - <a href="https://drafts.csswg.org/css-transforms/" title="Latest editor's draft of CSS Transforms Module Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Simon Fraser
                            <li>Dean Jackson
                            <li>Theresa O&#039;Connor
                            <li>Dirk Schulze
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="character model for the world wide web: string matching" data-tag="i18n" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2019/NOTE-charmod-norm-20190204/" title="Latest draft of Character Model for the World Wide Web: String Matching formally approved by the group">Character Model for the World Wide Web: String Matching</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2019-02-04 - <a title="Character Model for the World Wide Web: String Matching publication history" href="/standards/history/charmod-norm">History</a>
                        - <a href="https://w3c.github.io/charmod-norm/" title="Latest editor's draft of Character Model for the World Wide Web: String Matching">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Addison Phillips
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css values and units module level 4" data-tag="css" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-css-values-4-20190131/" title="Latest draft of CSS Values and Units Module Level 4 formally approved by the group">CSS  Values  and  Units  Module  Level&nbsp;4</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2019-01-31 - <a title="CSS Values and Units Module Level 4 publication history" href="/standards/history/css-values-4">History</a>
                        - <a href="https://drafts.csswg.org/css-values-4/" title="Latest editor's draft of CSS Values and Units Module Level 4">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tab Atkins Jr.
                            <li>Elika Etemad
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                          <li data-title="tracking compliance and scope" data-tag="http" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2019/NOTE-tracking-compliance-20190122/" title="Latest draft of Tracking Compliance and Scope formally approved by the group">Tracking Compliance and Scope</a></h2>
                        <p class=deliverer>Tracking Protection Working Group</p>
                        <p class=pubdetails>2019-01-22 - <a title="Tracking Compliance and Scope publication history" href="/standards/history/tracking-compliance">History</a>
                        - <a href="https://www.w3.org/2011/tracking-protection/drafts/tracking-compliance.html" title="Latest editor's draft of Tracking Compliance and Scope">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Nick Doty
                            <li>Heather West
                            <li>Justin Brookman
                            <li>Sean Harvey
                            <li>Erica Newland
                          </ul>
                                    <ul class="taglist">
                            <li class="http">HTTP
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="css snapshot 2018" data-tag="css" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2019/NOTE-css-2018-20190122/" title="Latest draft of CSS Snapshot 2018 formally approved by the group">CSS Snapshot 2018</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2019-01-22 - <a title="CSS Snapshot 2018 publication history" href="/standards/history/css-2018">History</a>
                        - <a href="https://drafts.csswg.org/css-2018/" title="Latest editor's draft of CSS Snapshot 2018">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tab Atkins Jr.
                            <li>Elika Etemad
                            <li>Florian Rivoal
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                          <li data-title="tracking preference expression (dnt)" data-tag="http privacy" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2019/NOTE-tracking-dnt-20190117/" title="Latest draft of Tracking Preference Expression (DNT) formally approved by the group">Tracking Preference Expression (DNT)</a></h2>
                        <p class=deliverer>Tracking Protection Working Group</p>
                        <p class=pubdetails>2019-01-17 - <a title="Tracking Preference Expression (DNT) publication history" href="/standards/history/tracking-dnt">History</a>
                        - <a href="https://w3c.github.io/dnt/drafts/tracking-dnt.html" title="Latest editor's draft of Tracking Preference Expression (DNT)">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Roy Fielding
                            <li>David Singer
                          </ul>
                                    <ul class="taglist">
                            <li class="http">HTTP
                            <li class="privacy">Privacy
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                        <li data-title="credential management level 1" data-tag="security" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2019/WD-credential-management-1-20190117/" title="Latest draft of Credential Management Level 1 formally approved by the group">Credential  Management  Level&nbsp;1</a></h2>
                        <p class=deliverer>Web Application Security Working Group</p>
                        <p class=pubdetails>2019-01-17 - <a title="Credential Management Level 1 publication history" href="/standards/history/credential-management-1">History</a>
                        - <a href="https://w3c.github.io/webappsec-credential-management/" title="Latest editor's draft of Credential Management Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mike West
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="dataset exchange use cases and requirements" data-tag="data" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2019/NOTE-dcat-ucr-20190117/" title="Latest draft of Dataset Exchange Use Cases and Requirements formally approved by the group">Dataset Exchange Use Cases and Requirements</a></h2>
                        <p class=deliverer>Dataset Exchange Working Group</p>
                        <p class=pubdetails>2019-01-17 - <a title="Dataset Exchange Use Cases and Requirements publication history" href="/standards/history/dcat-ucr">History</a>
                        - <a href="https://w3c.github.io/dxwg/ucr/" title="Latest editor's draft of Dataset Exchange Use Cases and Requirements">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jaroslav Pullmann
                            <li>Rob Atkinson
                            <li>Antoine Isaac
                            <li>Ixchel Faniel
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="geolocation sensor" data-tag="webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2018/WD-geolocation-sensor-20181219/" title="Latest draft of Geolocation Sensor formally approved by the group">Geolocation Sensor</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2018-12-19 - <a title="Geolocation Sensor publication history" href="/standards/history/geolocation-sensor">History</a>
                        - <a href="https://w3c.github.io/geolocation-sensor/" title="Latest editor's draft of Geolocation Sensor">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Anssi Kostiainen
                            <li>Thomas Steiner
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css fragmentation module level 4" data-tag="css" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2018/WD-css-break-4-20181218/" title="Latest draft of CSS Fragmentation Module Level 4 formally approved by the group">CSS  Fragmentation  Module  Level&nbsp;4</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2018-12-18 - <a title="CSS Fragmentation Module Level 4 publication history" href="/standards/history/css-break-4">History</a>
                        - <a href="https://drafts.csswg.org/css-break-4/" title="Latest editor's draft of CSS Fragmentation Module Level 4">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Rossen Atanassov
                            <li>Elika Etemad
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <li data-title="css box model module level 3" data-tag="css" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2018/WD-css-box-3-20181218/" title="Latest draft of CSS Box Model Module Level 3 formally approved by the group">CSS  Box  Model  Module  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2018-12-18 - <a title="CSS Box Model Module Level 3 publication history" href="/standards/history/css-box-3">History</a>
                        - <a href="https://drafts.csswg.org/css-box-3/" title="Latest editor's draft of CSS Box Model Module Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Elika Etemad
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="accessible name and description computation 1.1" data-tag="accessibility" data-status="rec" data-version="latest ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2018/REC-accname-1.1-20181218/" title="Latest draft of Accessible Name and Description Computation 1.1 formally approved by the group">Accessible  Name  and  Description  Computation&nbsp;1.1</a></h2>
                        <p class=deliverer>Accessible Rich Internet Applications Working Group</p>
                        <p class=pubdetails>2018-12-18 - <a title="Accessible Name and Description Computation 1.1 publication history" href="/standards/history/accname-1.1">History</a>
                        - <a href="https://w3c.github.io/accname/" title="Latest editor's draft of Accessible Name and Description Computation 1.1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Joanmarie Diggs
                            <li>Bryan Garaventa
                            <li>Michael Cooper
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="motion path module level 1" data-tag="css graphics" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2018/WD-motion-1-20181218/" title="Latest draft of Motion Path Module Level 1 formally approved by the group">Motion  Path  Module  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2018-12-18 - <a title="Motion Path Module Level 1 publication history" href="/standards/history/motion-1">History</a>
                        - <a href="https://drafts.fxtf.org/motion-1/" title="Latest editor's draft of Motion Path Module Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dirk Schulze
                            <li>Shane Stephens
                            <li>Jihye Hong
                            <li>Eric Willigers
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="filter effects module level 1" data-tag="css graphics" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2018/WD-filter-effects-1-20181218/" title="Latest draft of Filter Effects Module Level 1 formally approved by the group">Filter  Effects  Module  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2018-12-18 - <a title="Filter Effects Module Level 1 publication history" href="/standards/history/filter-effects-1">History</a>
                        - <a href="https://drafts.fxtf.org/filter-effects-1/" title="Latest editor's draft of Filter Effects Module Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dirk Schulze
                            <li>Dean Jackson
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                                                <li data-title="cognitive accessibility roadmap and gap analysis" data-tag="accessibility" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2018/WD-coga-gap-analysis-20181211/" title="Latest draft of Cognitive Accessibility Roadmap and Gap Analysis formally approved by the group">Cognitive Accessibility Roadmap and Gap Analysis</a></h2>
                        <p class=deliverer>Accessible Platform Architectures Working Group</p>
                        <p class=deliverer>Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2018-12-11 - <a title="Cognitive Accessibility Roadmap and Gap Analysis publication history" href="/standards/history/coga-gap-analysis">History</a>
                        - <a href="https://w3c.github.io/coga/gap-analysis/" title="Latest editor's draft of Cognitive Accessibility Roadmap and Gap Analysis">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Lisa Seeman-Kestenbaum
                            <li>Michael Cooper
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="webrtc next version use cases" data-tag="media" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2018/WD-webrtc-nv-use-cases-20181211/" title="Latest draft of WebRTC Next Version Use Cases formally approved by the group">WebRTC Next Version Use Cases</a></h2>
                        <p class=deliverer>Web Real-Time Communications Working Group</p>
                        <p class=pubdetails>2018-12-11 - <a title="WebRTC Next Version Use Cases publication history" href="/standards/history/webrtc-nv-use-cases">History</a>
                        - <a href="https://w3c.github.io/webrtc-nv-use-cases/" title="Latest editor's draft of WebRTC Next Version Use Cases">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Bernard Aboba
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="css box alignment module level 3" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2018/WD-css-align-3-20181206/" title="Latest draft of CSS Box Alignment Module Level 3 formally approved by the group">CSS  Box  Alignment  Module  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2018-12-06 - <a title="CSS Box Alignment Module Level 3 publication history" href="/standards/history/css-align-3">History</a>
                        - <a href="https://drafts.csswg.org/css-align/" title="Latest editor's draft of CSS Box Alignment Module Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Elika Etemad
                            <li>Tab Atkins Jr.
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="css fragmentation module level 3" data-tag="css" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2018/CR-css-break-3-20181204/" title="Latest draft of CSS Fragmentation Module Level 3 formally approved by the group">CSS  Fragmentation  Module  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2018-12-04 - <a title="CSS Fragmentation Module Level 3 publication history" href="/standards/history/css-break-3">History</a>
                        - <a href="https://drafts.csswg.org/css-break/" title="Latest editor's draft of CSS Fragmentation Module Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Rossen Atanassov
                            <li>Elika Etemad
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="geometry interfaces module level 1" data-tag="css graphics" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2018/CR-geometry-1-20181204/" title="Latest draft of Geometry Interfaces Module Level 1 formally approved by the group">Geometry  Interfaces  Module  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2018-12-04 - <a title="Geometry Interfaces Module Level 1 publication history" href="/standards/history/geometry-1">History</a>
                        - <a href="https://drafts.fxtf.org/geometry/" title="Latest editor's draft of Geometry Interfaces Module Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Simon Pieters
                            <li>Chris Harrelson
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                          <li data-title="selectors level 4" data-tag="css" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2018/WD-selectors-4-20181121/" title="Latest draft of Selectors Level 4 formally approved by the group">Selectors  Level&nbsp;4</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2018-11-21 - <a title="Selectors Level 4 publication history" href="/standards/history/selectors-4">History</a>
                        - <a href="https://drafts.csswg.org/selectors/" title="Latest editor's draft of Selectors Level 4">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Elika Etemad
                            <li>Tab Atkins Jr.
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="css flexible box layout module level 1" data-tag="css" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2018/CR-css-flexbox-1-20181119/" title="Latest draft of CSS Flexible Box Layout Module Level 1 formally approved by the group">CSS  Flexible  Box  Layout  Module  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2018-11-19 - <a title="CSS Flexible Box Layout Module Level 1 publication history" href="/standards/history/css-flexbox-1">History</a>
                        - <a href="https://drafts.csswg.org/css-flexbox-1/" title="Latest editor's draft of CSS Flexible Box Layout Module Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tab Atkins Jr.
                            <li>Elika Etemad
                            <li>Rossen Atanassov
                            <li>David Baron
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="css shadow parts" data-tag="css" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2018/WD-css-shadow-parts-1-20181115/" title="Latest draft of CSS Shadow Parts formally approved by the group">CSS Shadow Parts</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2018-11-15 - <a title="CSS Shadow Parts publication history" href="/standards/history/css-shadow-parts-1">History</a>
                        - <a href="http://drafts.csswg.org/css-shadow-parts/" title="Latest editor's draft of CSS Shadow Parts">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tab Atkins Jr.
                            <li>Fergal Daly
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="ttml profiles for internet media subtitles and captions 1.1" data-tag="media" data-status="rec" data-version="ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2018/REC-ttml-imsc1.1-20181108/" title="Latest draft of TTML Profiles for Internet Media Subtitles and Captions 1.1 formally approved by the group">TTML  Profiles  for  Internet  Media  Subtitles  and  Captions&nbsp;1.1</a></h2>
                        <p class=deliverer>Timed Text Working Group</p>
                        <p class=pubdetails>2018-11-08 - <a title="TTML Profiles for Internet Media Subtitles and Captions 1.1 publication history" href="/standards/history/ttml-imsc1.1">History</a>
                        - <a href="https://w3c.github.io/imsc/imsc1/spec/ttml-ww-profiles.html" title="Latest editor's draft of TTML Profiles for Internet Media Subtitles and Captions 1.1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Pierre-Anthony Lemieux
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                          <li data-title="timed text markup language 1 (ttml1) (third edition)" data-tag="media" data-status="rec" data-version="ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2018/REC-ttml1-20181108/" title="Latest draft of Timed Text Markup Language 1 (TTML1) (Third Edition) formally approved by the group">Timed Text Markup Language 1 (TTML1) (Third Edition)</a></h2>
                        <p class=deliverer>Timed Text Working Group</p>
                        <p class=pubdetails>2018-11-08 - <a title="Timed Text Markup Language 1 (TTML1) (Third Edition) publication history" href="/standards/history/ttml1">History</a>
                        - <a href="https://w3c.github.io/ttml1/index.html" title="Latest editor's draft of Timed Text Markup Language 1 (TTML1) (Third Edition)">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Glenn Adams
                            <li>Pierre-Anthony Lemieux
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                          <li data-title="selectors level 3" data-tag="css" data-status="rec" data-version="latest ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2018/REC-selectors-3-20181106/" title="Latest draft of Selectors Level 3 formally approved by the group">Selectors  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2018-11-06 - <a title="Selectors Level 3 publication history" href="/standards/history/selectors-3">History</a>
                        - <a href="https://drafts.csswg.org/selectors-3/" title="Latest editor's draft of Selectors Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tantek Çelik
                            <li>Elika Etemad
                            <li>Daniel Glazman
                            <li>Ian Hickson
                            <li>Peter Linss
                            <li>John Williams
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                  <li data-title="html 5.3" data-tag="html" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2018/WD-html53-20181018/" title="Latest draft of HTML 5.3 formally approved by the group">HTML&nbsp;5.3</a></h2>
                        <p class=deliverer>Web Platform Working Group</p>
                        <p class=pubdetails>2018-10-18 - <a title="HTML 5.3 publication history" href="/standards/history/html53">History</a>
                        - <a href="https://w3c.github.io/html/" title="Latest editor's draft of HTML 5.3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Patricia Aas
                            <li>Shwetank Dixit
                            <li>Terence Eden
                            <li>Bruce Lawson
                            <li>Sangwhan Moon
                            <li>Xiaoqian Wu
                            <li>Scott O&#039;Hara
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <li data-title="css paged media module level 3" data-tag="css" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2018/WD-css-page-3-20181018/" title="Latest draft of CSS Paged Media Module Level 3 formally approved by the group">CSS  Paged  Media  Module  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2018-10-18 - <a title="CSS Paged Media Module Level 3 publication history" href="/standards/history/css-page-3">History</a>
                        - <a href="https://drafts.csswg.org/css-page-3/" title="Latest editor's draft of CSS Paged Media Module Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Elika Etemad
                            <li>Simon Sapin
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="content security policy level 3" data-tag="security" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2018/WD-CSP3-20181015/" title="Latest draft of Content Security Policy Level 3 formally approved by the group">Content  Security  Policy  Level&nbsp;3</a></h2>
                        <p class=deliverer>Web Application Security Working Group</p>
                        <p class=pubdetails>2018-10-15 - <a title="Content Security Policy Level 3 publication history" href="/standards/history/CSP3">History</a>
                        - <a href="https://w3c.github.io/webappsec-csp/" title="Latest editor's draft of Content Security Policy Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mike West
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                          <li data-title="widget access request policy" data-tag="" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2018/OBSL-widgets-access-20181011/" title="Latest draft of Widget Access Request Policy formally approved by the group">Widget Access Request Policy</a></h2>
                        <p class=deliverer>(historical) Web Applications Working Group</p>
                        <p class=pubdetails>2018-10-11 - <a title="Widget Access Request Policy publication history" href="/standards/history/widgets-access">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Marcos Caceres
                            <li>Robin Berjon
                          </ul>
                                  </li>
                                                                                                                          <li data-title="widget interface" data-tag="webapi" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2018/OBSL-widgets-apis-20181011/" title="Latest draft of Widget Interface formally approved by the group">Widget Interface</a></h2>
                        <p class=deliverer>(historical) Web Applications Working Group</p>
                        <p class=pubdetails>2018-10-11 - <a title="Widget Interface publication history" href="/standards/history/widgets-apis">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Marcos Caceres
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="xml digital signatures for widgets" data-tag="" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2018/OBSL-widgets-digsig-20181011/" title="Latest draft of XML Digital Signatures for Widgets formally approved by the group">XML Digital Signatures for Widgets</a></h2>
                        <p class=deliverer>(historical) Web Applications Working Group</p>
                        <p class=pubdetails>2018-10-11 - <a title="XML Digital Signatures for Widgets publication history" href="/standards/history/widgets-digsig">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Marcos Caceres
                            <li>Paddy Byers
                            <li>Stuart Knightley
                            <li>Frederick Hirsch
                            <li>Mark Priestley
                          </ul>
                                  </li>
                                                                                                                          <li data-title="the &#039;view-mode&#039; media feature" data-tag="" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2018/OBSL-view-mode-20181011/" title="Latest draft of The &#039;view-mode&#039; Media Feature formally approved by the group">The 'view-mode' Media Feature</a></h2>
                        <p class=deliverer>(historical) Web Applications Working Group</p>
                        <p class=pubdetails>2018-10-11 - <a title="The &#039;view-mode&#039; Media Feature publication history" href="/standards/history/view-mode">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Robin Berjon
                            <li>Marcos Caceres
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="web animations" data-tag="css graphics" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2018/WD-web-animations-1-20181011/" title="Latest draft of Web Animations formally approved by the group">Web Animations</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2018-10-11 - <a title="Web Animations publication history" href="/standards/history/web-animations-1">History</a>
                        - <a href="https://drafts.csswg.org/web-animations-1/" title="Latest editor's draft of Web Animations">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Brian Birtles
                            <li>Robert Flack
                            <li>Stephen McGruer
                            <li>Antoine Quint
                            <li>Shane Stephens
                            <li>Alex Danilo
                            <li>Tab Atkins Jr.
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="css animations level 1" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2018/WD-css-animations-1-20181011/" title="Latest draft of CSS Animations Level 1 formally approved by the group">CSS  Animations  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2018-10-11 - <a title="CSS Animations Level 1 publication history" href="/standards/history/css-animations-1">History</a>
                        - <a href="https://drafts.csswg.org/css-animations/" title="Latest editor's draft of CSS Animations Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dean Jackson
                            <li>David Baron
                            <li>Tab Atkins Jr.
                            <li>Brian Birtles
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                <li data-title="css transitions" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2018/WD-css-transitions-1-20181011/" title="Latest draft of CSS Transitions formally approved by the group">CSS Transitions</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2018-10-11 - <a title="CSS Transitions publication history" href="/standards/history/css-transitions-1">History</a>
                        - <a href="https://drafts.csswg.org/css-transitions/" title="Latest editor's draft of CSS Transitions">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>David Baron
                            <li>Dean Jackson
                            <li>Brian Birtles
                            <li>David Hyatt
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                          <li data-title="packaged web apps (widgets) - packaging and xml configuration (second edition)" data-tag="" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2018/OBSL-widgets-20181011/" title="Latest draft of Packaged Web Apps (Widgets) - Packaging and XML Configuration (Second Edition) formally approved by the group">Packaged Web Apps (Widgets) - Packaging and XML Configuration (Second Edition)</a></h2>
                        <p class=deliverer>(historical) Web Applications Working Group</p>
                        <p class=pubdetails>2018-10-11 - <a title="Packaged Web Apps (Widgets) - Packaging and XML Configuration (Second Edition) publication history" href="/standards/history/widgets">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Marcos Caceres
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="scalable vector graphics (svg) 2" data-tag="graphics" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2018/CR-SVG2-20181004/" title="Latest draft of Scalable Vector Graphics (SVG) 2 formally approved by the group">Scalable  Vector  Graphics  (SVG)&nbsp;2</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2018-10-04 - <a title="Scalable Vector Graphics (SVG) 2 publication history" href="/standards/history/SVG2">History</a>
                        - <a href="https://svgwg.org/svg2-draft/" title="Latest editor's draft of Scalable Vector Graphics (SVG) 2">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Amelia Bellamy-Royds
                            <li>Bogdan Brinza
                            <li>Chris Lilley
                            <li>Dirk Schulze
                            <li>David Storey
                            <li>Eric Willigers
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="graphics accessibility api mappings" data-tag="accessibility graphics" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2018/REC-graphics-aam-1.0-20181002/" title="Latest draft of Graphics Accessibility API Mappings formally approved by the group">Graphics Accessibility API Mappings</a></h2>
                        <p class=deliverer>Accessible Rich Internet Applications Working Group</p>
                        <p class=pubdetails>2018-10-02 - <a title="Graphics Accessibility API Mappings publication history" href="/standards/history/graphics-aam-1.0">History</a>
                        - <a href="https://w3c.github.io/graphics-aam/" title="Latest editor's draft of Graphics Accessibility API Mappings">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Amelia Bellamy-Royds
                            <li>Joanmarie Diggs
                            <li>Michael Cooper
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="wai-aria graphics module" data-tag="accessibility graphics" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2018/REC-graphics-aria-1.0-20181002/" title="Latest draft of WAI-ARIA Graphics Module formally approved by the group">WAI-ARIA Graphics Module</a></h2>
                        <p class=deliverer>Accessible Rich Internet Applications Working Group</p>
                        <p class=pubdetails>2018-10-02 - <a title="WAI-ARIA Graphics Module publication history" href="/standards/history/graphics-aria-1.0">History</a>
                        - <a href="https://w3c.github.io/graphics-aria/" title="Latest editor's draft of WAI-ARIA Graphics Module">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Amelia Bellamy-Royds
                            <li>Joanmarie Diggs
                            <li>Michael Cooper
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                        <li data-title="identity for webrtc 1.0" data-tag="" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2018/CR-webrtc-identity-20180927/" title="Latest draft of Identity for WebRTC 1.0 formally approved by the group">Identity  for  WebRTC&nbsp;1.0</a></h2>
                        <p class=deliverer>Web Real-Time Communications Working Group</p>
                        <p class=pubdetails>2018-09-27 - <a title="Identity for WebRTC 1.0 publication history" href="/standards/history/webrtc-identity">History</a>
                        - <a href="https://w3c.github.io/webrtc-identity/identity.html" title="Latest editor's draft of Identity for WebRTC 1.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Cullen Jennings
                            <li>Martin Thomson
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="using aria" data-tag="accessibility html" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2018/WD-using-aria-20180927/" title="Latest draft of Using ARIA formally approved by the group">Using ARIA</a></h2>
                        <p class=deliverer>Web Platform Working Group</p>
                        <p class=pubdetails>2018-09-27 - <a title="Using ARIA publication history" href="/standards/history/using-aria">History</a>
                        - <a href="https://w3c.github.io/using-aria/" title="Latest editor's draft of Using ARIA">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steve Faulkner
                            <li>David MacDonald
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="imsc1.1 requirements" data-tag="media" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2018/NOTE-imsc-1.1-reqs-20180925/" title="Latest draft of IMSC1.1 Requirements formally approved by the group">IMSC1.1 Requirements</a></h2>
                        <p class=deliverer>Timed Text Working Group</p>
                        <p class=pubdetails>2018-09-25 - <a title="IMSC1.1 Requirements publication history" href="/standards/history/imsc-1.1-reqs">History</a>
                        - <a href="https://w3c.github.io/imsc-vnext-reqs/" title="Latest editor's draft of IMSC1.1 Requirements">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Pierre-Anthony Lemieux
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="reporting api" data-tag="performance webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2018/WD-reporting-1-20180925/" title="Latest draft of Reporting API formally approved by the group">Reporting API</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2018-09-25 - <a title="Reporting API publication history" href="/standards/history/reporting-1">History</a>
                        - <a href="https://w3c.github.io/reporting/" title="Latest editor's draft of Reporting API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Douglas Creager
                            <li>Ilya Grigorik
                            <li>Paul Meyer
                            <li>Mike West
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="css scrollbars module level 1" data-tag="css" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2018/WD-css-scrollbars-1-20180925/" title="Latest draft of CSS Scrollbars Module Level 1 formally approved by the group">CSS  Scrollbars  Module  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2018-09-25 - <a title="CSS Scrollbars Module Level 1 publication history" href="/standards/history/css-scrollbars-1">History</a>
                        - <a href="https://drafts.csswg.org/css-scrollbars/" title="Latest editor's draft of CSS Scrollbars Module Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tantek Çelik
                            <li>Rossen Atanassov
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="device memory" data-tag="performance" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2018/WD-device-memory-1-20180925/" title="Latest draft of Device Memory formally approved by the group">Device Memory</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2018-09-25 - <a title="Device Memory publication history" href="/standards/history/device-memory-1">History</a>
                        - <a href="https://w3c.github.io/device-memory/" title="Latest editor's draft of Device Memory">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Shubhie Panicker
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="network error logging" data-tag="performance webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2018/WD-network-error-logging-1-20180925/" title="Latest draft of Network Error Logging formally approved by the group">Network Error Logging</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2018-09-25 - <a title="Network Error Logging publication history" href="/standards/history/network-error-logging-1">History</a>
                        - <a href="https://w3c.github.io/network-error-logging/" title="Latest editor's draft of Network Error Logging">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Douglas Creager
                            <li>Ilya Grigorik
                            <li>Julia Tuttle
                            <li>Alois Reitbauer
                            <li>Arvind Jain
                            <li>Jatinder Mann
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css fonts module level 3" data-tag="css i18n" data-status="rec" data-version="latest ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2018/REC-css-fonts-3-20180920/" title="Latest draft of CSS Fonts Module Level 3 formally approved by the group">CSS  Fonts  Module  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2018-09-20 - <a title="CSS Fonts Module Level 3 publication history" href="/standards/history/css-fonts-3">History</a>
                        - <a href="https://drafts.csswg.org/css-fonts/" title="Latest editor's draft of CSS Fonts Module Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>John Daggett
                            <li>Myles Maxfield
                            <li>Chris Lilley
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="web audio api" data-tag="media webapi" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2018/CR-webaudio-20180918/" title="Latest draft of Web Audio API formally approved by the group">Web Audio API</a></h2>
                        <p class=deliverer>Audio Working Group</p>
                        <p class=pubdetails>2018-09-18 - <a title="Web Audio API publication history" href="/standards/history/webaudio">History</a>
                        - <a href="https://webaudio.github.io/web-audio-api/" title="Latest editor's draft of Web Audio API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Paul Adenot
                            <li>Raymond Toy
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="cascading style sheets, level 1" data-tag="css" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2018/SPSD-CSS1-20180913/" title="Latest draft of Cascading Style Sheets, level 1 formally approved by the group">Cascading  Style  Sheets,  level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2018-09-13 - <a title="Cascading Style Sheets, level 1 publication history" href="/standards/history/CSS1">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Håkon Wium Lie
                            <li>Bert Bos
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                          <li data-title="the platform for privacy preferences 1.0 (p3p1.0) specification" data-tag="privacy" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2018/OBSL-P3P-20180830/" title="Latest draft of The Platform for Privacy Preferences 1.0 (P3P1.0) Specification formally approved by the group">The Platform for Privacy Preferences 1.0 (P3P1.0) Specification</a></h2>
                        <p class=deliverer>P3P Specification Working Group</p>
                        <p class=pubdetails>2018-08-30 - <a title="The Platform for Privacy Preferences 1.0 (P3P1.0) Specification publication history" href="/standards/history/P3P">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Massimo Marchiori
                          </ul>
                                    <ul class="taglist">
                            <li class="privacy">Privacy
                          </ul>
                      </li>
                                                                                                                          <li data-title="p3p guiding principles" data-tag="privacy" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2018/NOTE-P3P10-principles-20180830/" title="Latest draft of P3P Guiding Principles formally approved by the group">P3P Guiding Principles</a></h2>
                        <p class=deliverer>P3P Specification Working Group</p>
                        <p class=pubdetails>2018-08-30 - <a title="P3P Guiding Principles publication history" href="/standards/history/NOTE-P3P10-principles">History</a>
                        </p>
                                    <ul class="taglist">
                            <li class="privacy">Privacy
                          </ul>
                      </li>
                                                                                                                          <li data-title="an rdf schema for p3p" data-tag="privacy" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2018/NOTE-p3p-rdfschema-20180830/" title="Latest draft of An RDF Schema for P3P formally approved by the group">An RDF Schema for P3P</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>2018-08-30 - <a title="An RDF Schema for P3P publication history" href="/standards/history/p3p-rdfschema">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Brian McBride
                            <li>Rigo Wenning
                            <li>Lorrie Cranor
                          </ul>
                                    <ul class="taglist">
                            <li class="privacy">Privacy
                          </ul>
                      </li>
                                                                                                                          <li data-title="the platform for privacy preferences 1.1 (p3p1.1) specification" data-tag="privacy" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2018/NOTE-P3P11-20180830/" title="Latest draft of The Platform for Privacy Preferences 1.1 (P3P1.1) Specification formally approved by the group">The Platform for Privacy Preferences 1.1 (P3P1.1) Specification</a></h2>
                        <p class=deliverer>P3P Specification Working Group</p>
                        <p class=pubdetails>2018-08-30 - <a title="The Platform for Privacy Preferences 1.1 (P3P1.1) Specification publication history" href="/standards/history/P3P11">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Rigo Wenning
                            <li>Matthias Schunter
                          </ul>
                                    <ul class="taglist">
                            <li class="privacy">Privacy
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="css cascading and inheritance level 3" data-tag="css" data-status="cr" data-version="ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2018/CR-css-cascade-3-20180828/" title="Latest draft of CSS Cascading and Inheritance Level 3 formally approved by the group">CSS  Cascading  and  Inheritance  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2018-08-28 - <a title="CSS Cascading and Inheritance Level 3 publication history" href="/standards/history/css-cascade-3">History</a>
                        - <a href="https://drafts.csswg.org/css-cascade-3/" title="Latest editor's draft of CSS Cascading and Inheritance Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Elika Etemad
                            <li>Tab Atkins Jr.
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <li data-title="css cascading and inheritance level 4" data-tag="css" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2018/CR-css-cascade-4-20180828/" title="Latest draft of CSS Cascading and Inheritance Level 4 formally approved by the group">CSS  Cascading  and  Inheritance  Level&nbsp;4</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2018-08-28 - <a title="CSS Cascading and Inheritance Level 4 publication history" href="/standards/history/css-cascade-4">History</a>
                        - <a href="https://drafts.csswg.org/css-cascade/" title="Latest editor's draft of CSS Cascading and Inheritance Level 4">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Elika Etemad
                            <li>Tab Atkins Jr.
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css logical properties and values level 1" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2018/WD-css-logical-1-20180827/" title="Latest draft of CSS Logical Properties and Values Level 1 formally approved by the group">CSS  Logical  Properties  and  Values  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2018-08-27 - <a title="CSS Logical Properties and Values Level 1 publication history" href="/standards/history/css-logical-1">History</a>
                        - <a href="https://drafts.csswg.org/css-logical-1/" title="Latest editor's draft of CSS Logical Properties and Values Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Rossen Atanassov
                            <li>Elika Etemad
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css painting api level 1" data-tag="css" data-status="cr" data-version="latest ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2018/CR-css-paint-api-1-20180809/" title="Latest draft of CSS Painting API Level 1 formally approved by the group">CSS  Painting  API  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2018-08-09 - <a title="CSS Painting API Level 1 publication history" href="/standards/history/css-paint-api-1">History</a>
                        - <a href="https://drafts.css-houdini.org/css-paint-api-1/" title="Latest editor's draft of CSS Painting API Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ian Kilpatrick
                            <li>Dean Jackson
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="css inline layout module level 3" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2018/WD-css-inline-3-20180808/" title="Latest draft of CSS Inline Layout Module Level 3 formally approved by the group">CSS  Inline  Layout  Module  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2018-08-08 - <a title="CSS Inline Layout Module Level 3 publication history" href="/standards/history/css-inline-3">History</a>
                        - <a href="https://drafts.csswg.org/css-inline-3/" title="Latest editor's draft of CSS Inline Layout Module Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dave Cramer
                            <li>Elika Etemad
                            <li>Steve Zilles
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css overflow module level 3" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2018/WD-css-overflow-3-20180731/" title="Latest draft of CSS Overflow Module Level 3 formally approved by the group">CSS  Overflow  Module  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2018-07-31 - <a title="CSS Overflow Module Level 3 publication history" href="/standards/history/css-overflow-3">History</a>
                        - <a href="https://drafts.csswg.org/css-overflow-3/" title="Latest editor's draft of CSS Overflow Module Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>David Baron
                            <li>Elika Etemad
                            <li>Florian Rivoal
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                <li data-title="exi for json (exi4json)" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2018/NOTE-exi-for-json-20180726/" title="Latest draft of EXI for JSON (EXI4JSON) formally approved by the group">EXI for JSON (EXI4JSON)</a></h2>
                        <p class=deliverer>Efficient Extensible Interchange  Working Group</p>
                        <p class=pubdetails>2018-07-26 - <a title="EXI for JSON (EXI4JSON) publication history" href="/standards/history/exi-for-json">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Daniel Peintner
                            <li>Don Brutzman
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="web payments use cases 1.0" data-tag="" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2018/NOTE-web-payments-use-cases-20180719/" title="Latest draft of Web Payments Use Cases 1.0 formally approved by the group">Web  Payments  Use  Cases&nbsp;1.0</a></h2>
                        <p class=deliverer>Web Commerce Interest Group</p>
                        <p class=pubdetails>2018-07-19 - <a title="Web Payments Use Cases 1.0 publication history" href="/standards/history/web-payments-use-cases">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Manu Sporny
                            <li>Ian Jacobs
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="vehicle information api specification" data-tag="" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2018/NOTE-vehicle-information-api-20180626/" title="Latest draft of Vehicle Information API Specification formally approved by the group">Vehicle Information API Specification</a></h2>
                        <p class=deliverer>Automotive Working Group</p>
                        <p class=pubdetails>2018-06-26 - <a title="Vehicle Information API Specification publication history" href="/standards/history/vehicle-information-api">History</a>
                        - <a href="https://w3c.github.io/automotive/vehicle_information_api/vehicle_information_api_specification.html" title="Latest editor's draft of Vehicle Information API Specification">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Powell Kinney
                            <li>Shinjiro Urata
                            <li>Mike Aro
                          </ul>
                                  </li>
                                                                                                                          <li data-title="packaging on the web" data-tag="" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2018/NOTE-web-packaging-20180626/" title="Latest draft of Packaging on the Web formally approved by the group">Packaging on the Web</a></h2>
                        <p class=deliverer>Technical Architecture Group</p>
                        <p class=pubdetails>2018-06-26 - <a title="Packaging on the Web publication history" href="/standards/history/web-packaging">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jeni Tennison
                          </ul>
                                  </li>
                                                                                                                          <li data-title="ttml profiles for internet media subtitles and captions 1.0 (imsc1)" data-tag="media" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2018/SPSD-ttml-imsc1-20180626/" title="Latest draft of TTML Profiles for Internet Media Subtitles and Captions 1.0 (IMSC1) formally approved by the group">TTML Profiles for Internet Media Subtitles and Captions 1.0 (IMSC1)</a></h2>
                        <p class=deliverer>Timed Text Working Group</p>
                        <p class=pubdetails>2018-06-26 - <a title="TTML Profiles for Internet Media Subtitles and Captions 1.0 (IMSC1) publication history" href="/standards/history/ttml-imsc1">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Pierre-Anthony Lemieux
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                <li data-title="css basic user interface module level 3 (css3 ui)" data-tag="css" data-status="rec" data-version="latest ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2018/REC-css-ui-3-20180621/" title="Latest draft of CSS Basic User Interface Module Level 3 (CSS3 UI) formally approved by the group">CSS Basic User Interface Module Level 3 (CSS3 UI)</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2018-06-21 - <a title="CSS Basic User Interface Module Level 3 (CSS3 UI) publication history" href="/standards/history/css-ui-3">History</a>
                        - <a href="https://drafts.csswg.org/css-ui/" title="Latest editor's draft of CSS Basic User Interface Module Level 3 (CSS3 UI)">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tantek Çelik
                            <li>Florian Rivoal
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css color module level 3" data-tag="css" data-status="rec" data-version="latest ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2018/REC-css-color-3-20180619/" title="Latest draft of CSS Color Module Level 3 formally approved by the group">CSS  Color  Module  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2018-06-19 - <a title="CSS Color Module Level 3 publication history" href="/standards/history/css-color-3">History</a>
                        - <a href="https://drafts.csswg.org/css-color-3/" title="Latest editor's draft of CSS Color Module Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tantek Çelik
                            <li>Chris Lilley
                            <li>David Baron
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                <li data-title="canonical exi" data-tag="xml" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2018/REC-exi-c14n-20180607/" title="Latest draft of Canonical EXI formally approved by the group">Canonical EXI</a></h2>
                        <p class=deliverer>Efficient Extensible Interchange  Working Group</p>
                        <p class=pubdetails>2018-06-07 - <a title="Canonical EXI publication history" href="/standards/history/exi-c14n">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Sebastian Käbisch
                            <li>Daniel Peintner
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="webdriver" data-tag="webapi" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2018/REC-webdriver1-20180605/" title="Latest draft of WebDriver formally approved by the group">WebDriver</a></h2>
                        <p class=deliverer>Browser Testing and Tools Working Group</p>
                        <p class=pubdetails>2018-06-05 - <a title="WebDriver publication history" href="/standards/history/webdriver1">History</a>
                        - <a href="https://w3c.github.io/webdriver/" title="Latest editor's draft of WebDriver">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Simon Stewart
                            <li>David Burns
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="web content accessibility guidelines (wcag) 2.1" data-tag="accessibility" data-status="rec" data-version="latest ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2018/REC-WCAG21-20180605/" title="Latest draft of Web Content Accessibility Guidelines (WCAG) 2.1 formally approved by the group">Web  Content  Accessibility  Guidelines  (WCAG)&nbsp;2.1</a></h2>
                        <p class=deliverer>Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2018-06-05 - <a title="Web Content Accessibility Guidelines (WCAG) 2.1 publication history" href="/standards/history/WCAG21">History</a>
                        - <a href="https://w3c.github.io/wcag/21/guidelines/" title="Latest editor's draft of Web Content Accessibility Guidelines (WCAG) 2.1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Andrew Kirkpatrick
                            <li>Joshue O Connor
                            <li>Alastair Campbell
                            <li>Michael Cooper
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="svg accessibility api mappings" data-tag="accessibility graphics" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2018/WD-svg-aam-1.0-20180510/" title="Latest draft of SVG Accessibility API Mappings formally approved by the group">SVG Accessibility API Mappings</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2018-05-10 - <a title="SVG Accessibility API Mappings publication history" href="/standards/history/svg-aam-1.0">History</a>
                        - <a href="https://w3c.github.io/svg-aam/" title="Latest editor's draft of SVG Accessibility API Mappings">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Amelia Bellamy-Royds
                            <li>Ian Pouncey
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                          <li data-title="custom elements" data-tag="" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2018/NOTE-custom-elements-20180503/" title="Latest draft of Custom Elements formally approved by the group">Custom Elements</a></h2>
                        <p class=deliverer>Web Platform Working Group</p>
                        <p class=pubdetails>2018-05-03 - <a title="Custom Elements publication history" href="/standards/history/custom-elements">History</a>
                        - <a href="https://w3c.github.io/webcomponents/spec/custom/" title="Latest editor's draft of Custom Elements">Editor's Draft</a>
                        </p>
                                  </li>
                                                                                                                                                                      <li data-title="html microdata" data-tag="html" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2018/WD-microdata-20180426/" title="Latest draft of HTML Microdata formally approved by the group">HTML Microdata</a></h2>
                        <p class=deliverer>Web Platform Working Group</p>
                        <p class=pubdetails>2018-04-26 - <a title="HTML Microdata publication history" href="/standards/history/microdata">History</a>
                        - <a href="https://w3c.github.io/microdata/" title="Latest editor's draft of HTML Microdata">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Charles &#039;chaals&#039; (McCathie) Nevile
                            <li>Dan Brickley
                            <li>Ian Hickson
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                          <li data-title="ttml profiles for internet media subtitles and captions 1.0.1 (imsc1)" data-tag="media" data-status="rec" data-version="ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2018/REC-ttml-imsc1.0.1-20180424/" title="Latest draft of TTML Profiles for Internet Media Subtitles and Captions 1.0.1 (IMSC1) formally approved by the group">TTML Profiles for Internet Media Subtitles and Captions 1.0.1 (IMSC1)</a></h2>
                        <p class=deliverer>Timed Text Working Group</p>
                        <p class=pubdetails>2018-04-24 - <a title="TTML Profiles for Internet Media Subtitles and Captions 1.0.1 (IMSC1) publication history" href="/standards/history/ttml-imsc1.0.1">History</a>
                        - <a href="https://w3c.github.io/imsc/imsc1/spec/ttml-ww-profiles.html" title="Latest editor's draft of TTML Profiles for Internet Media Subtitles and Captions 1.0.1 (IMSC1)">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Pierre-Anthony Lemieux
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="css layout api level 1" data-tag="css" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2018/WD-css-layout-api-1-20180412/" title="Latest draft of CSS Layout API Level 1 formally approved by the group">CSS  Layout  API  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2018-04-12 - <a title="CSS Layout API Level 1 publication history" href="/standards/history/css-layout-api-1">History</a>
                        - <a href="https://drafts.css-houdini.org/css-layout-api-1/" title="Latest editor's draft of CSS Layout API Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Greg Whitworth
                            <li>Ian Kilpatrick
                            <li>Tab Atkins Jr.
                            <li>Shane Stephens
                            <li>Robert O&#039;Callahan
                            <li>Rossen Atanassov
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                          <li data-title="dommatrix interface" data-tag="css graphics" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2018/NOTE-matrix-20180412/" title="Latest draft of DOMMatrix interface formally approved by the group">DOMMatrix interface</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2018-04-12 - <a title="DOMMatrix interface publication history" href="/standards/history/matrix">History</a>
                        - <a href="https://drafts.fxtf.org/matrix/" title="Latest editor's draft of DOMMatrix interface">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dirk Schulze
                            <li>Rik Cabanier
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css typed om level 1" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2018/WD-css-typed-om-1-20180410/" title="Latest draft of CSS Typed OM Level 1 formally approved by the group">CSS  Typed  OM  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=deliverer>Technical Architecture Group</p>
                        <p class=pubdetails>2018-04-10 - <a title="CSS Typed OM Level 1 publication history" href="/standards/history/css-typed-om-1">History</a>
                        - <a href="https://drafts.css-houdini.org/css-typed-om-1/" title="Latest editor's draft of CSS Typed OM Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Shane Stephens
                            <li>Tab Atkins Jr.
                            <li>Naina Raisinghani
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                          <li data-title="xhtml™ basic 1.1 - second edition" data-tag="html" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2018/SPSD-xhtml-basic-20180327/" title="Latest draft of XHTML™ Basic 1.1 - Second Edition formally approved by the group">XHTML™ Basic 1.1 - Second Edition</a></h2>
                        <p class=deliverer>XHTML2 Working Group</p>
                        <p class=pubdetails>2018-03-27 - <a title="XHTML™ Basic 1.1 - Second Edition publication history" href="/standards/history/xhtml-basic">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Shane McCarron
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                          <li data-title="html 4.0 recommendation" data-tag="" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2018/SPSD-html40-20180327/" title="Latest draft of HTML 4.0 Recommendation formally approved by the group">HTML 4.0 Recommendation</a></h2>
                        <p class=deliverer>XHTML2 Working Group</p>
                        <p class=pubdetails>2018-03-27 - <a title="HTML 4.0 Recommendation publication history" href="/standards/history/html40">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dave Raggett
                            <li>Arnaud Le Hors
                            <li>Ian Jacobs
                          </ul>
                                  </li>
                                                                                                                          <li data-title="xhtml™ 1.1 - module-based xhtml - second edition" data-tag="html" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2018/SPSD-xhtml11-20180327/" title="Latest draft of XHTML™ 1.1 - Module-based XHTML - Second Edition formally approved by the group">XHTML™ 1.1 - Module-based XHTML - Second Edition</a></h2>
                        <p class=deliverer>XHTML2 Working Group</p>
                        <p class=pubdetails>2018-03-27 - <a title="XHTML™ 1.1 - Module-based XHTML - Second Edition publication history" href="/standards/history/xhtml11">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Masayasu Ishikawa
                            <li>Shane McCarron
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                          <li data-title="html 4.01 specification" data-tag="html" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2018/SPSD-html401-20180327/" title="Latest draft of HTML 4.01 Specification formally approved by the group">HTML 4.01 Specification</a></h2>
                        <p class=deliverer>XHTML2 Working Group</p>
                        <p class=pubdetails>2018-03-27 - <a title="HTML 4.01 Specification publication history" href="/standards/history/html401">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dave Raggett
                            <li>Arnaud Le Hors
                            <li>Ian Jacobs
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                          <li data-title="html5" data-tag="html" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2018/SPSD-html5-20180327/" title="Latest draft of HTML5 formally approved by the group">HTML5</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2018-03-27 - <a title="HTML5 publication history" href="/standards/history/html5">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ian Hickson
                            <li>Robin Berjon
                            <li>Steve Faulkner
                            <li>Travis Leithead
                            <li>Erika Doyle Navara
                            <li>Theresa O&#039;Connor
                            <li>Silvia Pfeiffer
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                          <li data-title="xhtml™ modularization 1.1 - second edition" data-tag="" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2018/SPSD-xhtml-modularization-20180327/" title="Latest draft of XHTML™ Modularization 1.1 - Second Edition formally approved by the group">XHTML™ Modularization 1.1 - Second Edition</a></h2>
                        <p class=deliverer>XHTML2 Working Group</p>
                        <p class=pubdetails>2018-03-27 - <a title="XHTML™ Modularization 1.1 - Second Edition publication history" href="/standards/history/xhtml-modularization">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Shane McCarron
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="encoding" data-tag="css html i18n" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2018/CR-encoding-20180327/" title="Latest draft of Encoding formally approved by the group">Encoding</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2018-03-27 - <a title="Encoding publication history" href="/standards/history/encoding">History</a>
                        - <a href="https://encoding.spec.whatwg.org/" title="Latest editor's draft of Encoding">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Anne van Kesteren
                            <li>Joshua Bell
                            <li>Addison Phillips
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                            <li class="html">HTML
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                          <li data-title="xhtml-print - second edition" data-tag="html" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2018/SPSD-xhtml-print-20180327/" title="Latest draft of XHTML-Print - Second Edition formally approved by the group">XHTML-Print - Second Edition</a></h2>
                        <p class=deliverer>XHTML2 Working Group</p>
                        <p class=pubdetails>2018-03-27 - <a title="XHTML-Print - Second Edition publication history" href="/standards/history/xhtml-print">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Shane McCarron
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                          <li data-title="xhtml™ 1.0 the extensible hypertext markup language (second edition)" data-tag="html" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2018/SPSD-xhtml1-20180327/" title="Latest draft of XHTML™ 1.0 The Extensible HyperText Markup Language (Second Edition) formally approved by the group">XHTML™ 1.0 The Extensible HyperText Markup Language (Second Edition)</a></h2>
                        <p class=deliverer>XHTML2 Working Group</p>
                        <p class=pubdetails>2018-03-27 - <a title="XHTML™ 1.0 The Extensible HyperText Markup Language (Second Edition) publication history" href="/standards/history/xhtml1">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steven Pemberton
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                          <li data-title="html 3.2 reference specification" data-tag="html" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2018/SPSD-html32-20180315/" title="Latest draft of HTML 3.2 Reference Specification formally approved by the group">HTML 3.2 Reference Specification</a></h2>
                        <p class=deliverer>XHTML2 Working Group</p>
                        <p class=pubdetails>2018-03-15 - <a title="HTML 3.2 Reference Specification publication history" href="/standards/history/REC-html32">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dave Raggett
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="css text decoration module level 4" data-tag="css" data-status="wd" data-version="upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2018/WD-css-text-decor-4-20180313/" title="Latest draft of CSS Text Decoration Module Level 4 formally approved by the group">CSS  Text  Decoration  Module  Level&nbsp;4</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2018-03-13 - <a title="CSS Text Decoration Module Level 4 publication history" href="/standards/history/css-text-decor-4">History</a>
                        - <a href="https://drafts.csswg.org/css-text-decor-4/" title="Latest editor's draft of CSS Text Decoration Module Level 4">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Elika Etemad
                            <li>Koji Ishii
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                          <li data-title="shadow dom" data-tag="dom" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2018/NOTE-shadow-dom-20180301/" title="Latest draft of Shadow DOM formally approved by the group">Shadow DOM</a></h2>
                        <p class=deliverer>Web Platform Working Group</p>
                        <p class=pubdetails>2018-03-01 - <a title="Shadow DOM publication history" href="/standards/history/shadow-dom">History</a>
                        - <a href="https://w3c.github.io/webcomponents/spec/shadow/" title="Latest editor's draft of Shadow DOM">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Hayato Ito
                          </ul>
                                    <ul class="taglist">
                            <li class="dom">DOM
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="woff file format 2.0" data-tag="" data-status="rec" data-version="upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2018/REC-WOFF2-20180301/" title="Latest draft of WOFF File Format 2.0 formally approved by the group">WOFF  File  Format&nbsp;2.0</a></h2>
                        <p class=deliverer>Web Fonts Working Group</p>
                        <p class=pubdetails>2018-03-01 - <a title="WOFF File Format 2.0 publication history" href="/standards/history/WOFF2">History</a>
                        - <a href="https://w3c.github.io/woff/woff2/" title="Latest editor's draft of WOFF File Format 2.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Vladimir Levantovsky
                            <li>Raph Levien
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="text layout requirements for the arabic script" data-tag="i18n" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2018/WD-alreq-20180222/" title="Latest draft of Text Layout Requirements for the Arabic Script formally approved by the group">Text Layout Requirements for the Arabic Script</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2018-02-22 - <a title="Text Layout Requirements for the Arabic Script publication history" href="/standards/history/alreq">History</a>
                        - <a href="https://w3c.github.io/alreq/" title="Latest editor's draft of Text Layout Requirements for the Arabic Script">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Shervin Afshar
                            <li>Behnam Esfahbod
                            <li>Mostafa Hajizadeh
                            <li>Najib Tounsi
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                        <li data-title="odrl information model 2.2" data-tag="data" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2018/REC-odrl-model-20180215/" title="Latest draft of ODRL Information Model 2.2 formally approved by the group">ODRL  Information  Model&nbsp;2.2</a></h2>
                        <p class=deliverer>Permissions and Obligations Expression Working Group</p>
                        <p class=pubdetails>2018-02-15 - <a title="ODRL Information Model 2.2 publication history" href="/standards/history/odrl-model">History</a>
                        - <a href="https://w3c.github.io/poe/model/" title="Latest editor's draft of ODRL Information Model 2.2">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Renato Iannella
                            <li>Serena Villata
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="odrl vocabulary &amp; expression 2.2" data-tag="data" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2018/REC-odrl-vocab-20180215/" title="Latest draft of ODRL Vocabulary &amp; Expression 2.2 formally approved by the group">ODRL  Vocabulary  &  Expression&nbsp;2.2</a></h2>
                        <p class=deliverer>Permissions and Obligations Expression Working Group</p>
                        <p class=pubdetails>2018-02-15 - <a title="ODRL Vocabulary &amp; Expression 2.2 publication history" href="/standards/history/odrl-vocab">History</a>
                        - <a href="https://w3c.github.io/poe/vocab/" title="Latest editor's draft of ODRL Vocabulary &amp; Expression 2.2">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Renato Iannella
                            <li>Michael Steidl
                            <li>Stuart Myles
                            <li>Víctor Rodríguez-Doncel
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="vehicle information service specification" data-tag="" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2018/CR-vehicle-information-service-20180213/" title="Latest draft of Vehicle Information Service Specification formally approved by the group">Vehicle Information Service Specification</a></h2>
                        <p class=deliverer>Automotive Working Group</p>
                        <p class=pubdetails>2018-02-13 - <a title="Vehicle Information Service Specification publication history" href="/standards/history/vehicle-information-service">History</a>
                        - <a href="https://w3c.github.io/automotive/vehicle_data/vehicle_information_service.html" title="Latest editor's draft of Vehicle Information Service Specification">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Kevin Gavigan
                            <li>Adam Crofts
                            <li>WonSuk Lee
                            <li>Powell Kinney
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="html media capture" data-tag="html media webapi" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2018/REC-html-media-capture-20180201/" title="Latest draft of HTML Media Capture formally approved by the group">HTML Media Capture</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2018-02-01 - <a title="HTML Media Capture publication history" href="/standards/history/html-media-capture">History</a>
                        - <a href="https://w3c.github.io/html-media-capture/" title="Latest editor's draft of HTML Media Capture">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Anssi Kostiainen
                            <li>Ilkka Oksanen
                            <li>Dominique Hazaël-Massieux
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                            <li class="media">Media
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="packaging on the web" data-tag="" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2018/NOTE-web-packaging-20180130/" title="Latest draft of Packaging on the Web formally approved by the group">Packaging on the Web</a></h2>
                        <p class=deliverer>Technical Architecture Group</p>
                        <p class=pubdetails>2018-01-30 - <a title="Packaging on the Web publication history" href="/standards/history/web-packaging">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jeni Tennison
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                        <li data-title="indexed database api 2.0" data-tag="webapi" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2018/REC-IndexedDB-2-20180130/" title="Latest draft of Indexed Database API 2.0 formally approved by the group">Indexed  Database  API&nbsp;2.0</a></h2>
                        <p class=deliverer>Web Platform Working Group</p>
                        <p class=pubdetails>2018-01-30 - <a title="Indexed Database API 2.0 publication history" href="/standards/history/IndexedDB-2">History</a>
                        - <a href="https://w3c.github.io/IndexedDB/" title="Latest editor's draft of Indexed Database API 2.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ali Alabbas
                            <li>Joshua Bell
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="activitypub" data-tag="" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2018/REC-activitypub-20180123/" title="Latest draft of ActivityPub formally approved by the group">ActivityPub</a></h2>
                        <p class=deliverer>Social Web Working Group</p>
                        <p class=pubdetails>2018-01-23 - <a title="ActivityPub publication history" href="/standards/history/activitypub">History</a>
                        - <a href="https://w3c.github.io/activitypub/" title="Latest editor's draft of ActivityPub">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Christopher Webber
                            <li>Jessica Tallon
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="websub" data-tag="" data-status="rec" data-version="latest ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2018/REC-websub-20180123/" title="Latest draft of WebSub formally approved by the group">WebSub</a></h2>
                        <p class=deliverer>Social Web Working Group</p>
                        <p class=pubdetails>2018-01-23 - <a title="WebSub publication history" href="/standards/history/websub">History</a>
                        - <a href="https://websub.net/draft" title="Latest editor's draft of WebSub">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Julien Genestoux
                            <li>Aaron Parecki
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="indieauth" data-tag="" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2018/NOTE-indieauth-20180123/" title="Latest draft of IndieAuth formally approved by the group">IndieAuth</a></h2>
                        <p class=deliverer>Social Web Working Group</p>
                        <p class=pubdetails>2018-01-23 - <a title="IndieAuth publication history" href="/standards/history/indieauth">History</a>
                        - <a href="https://indieauth.spec.indieweb.org/" title="Latest editor's draft of IndieAuth">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Aaron Parecki
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="post type discovery" data-tag="" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2018/NOTE-post-type-discovery-20180118/" title="Latest draft of Post Type Discovery formally approved by the group">Post Type Discovery</a></h2>
                        <p class=deliverer>Social Web Working Group</p>
                        <p class=pubdetails>2018-01-18 - <a title="Post Type Discovery publication history" href="/standards/history/post-type-discovery">History</a>
                        - <a href="http://ptd.spec.indieweb.org/" title="Latest editor's draft of Post Type Discovery">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tantek Çelik
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="jf2 post serialization format" data-tag="" data-status="note" data-version="latest ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2018/NOTE-jf2-20180110/" title="Latest draft of JF2 Post Serialization Format formally approved by the group">JF2 Post Serialization Format</a></h2>
                        <p class=deliverer>Social Web Working Group</p>
                        <p class=pubdetails>2018-01-10 - <a title="JF2 Post Serialization Format publication history" href="/standards/history/jf2">History</a>
                        - <a href="http://jf2.spec.indieweb.org/" title="Latest editor's draft of JF2 Post Serialization Format">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Benjamin Roberts
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="web annotation extensions for web publications" data-tag="" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2018/WD-wpub-ann-20180104/" title="Latest draft of Web Annotation Extensions for Web Publications formally approved by the group">Web Annotation Extensions for Web Publications</a></h2>
                        <p class=deliverer>Publishing Working Group</p>
                        <p class=pubdetails>2018-01-04 - <a title="Web Annotation Extensions for Web Publications publication history" href="/standards/history/wpub-ann">History</a>
                        - <a href="https://w3c.github.io/wpub-ann/" title="Latest editor's draft of Web Annotation Extensions for Web Publications">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Timothy Cole
                            <li>Ivan Herman
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="packaged web publications" data-tag="" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2018/WD-pwpub-20180104/" title="Latest draft of Packaged Web Publications formally approved by the group">Packaged Web Publications</a></h2>
                        <p class=deliverer>Publishing Working Group</p>
                        <p class=pubdetails>2018-01-04 - <a title="Packaged Web Publications publication history" href="/standards/history/pwpub">History</a>
                        - <a href="https://w3c.github.io/pwpub/" title="Latest editor's draft of Packaged Web Publications">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>David Wood
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="social web protocols" data-tag="" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2017/NOTE-social-web-protocols-20171225/" title="Latest draft of Social Web Protocols formally approved by the group">Social Web Protocols</a></h2>
                        <p class=deliverer>Social Web Working Group</p>
                        <p class=pubdetails>2017-12-25 - <a title="Social Web Protocols publication history" href="/standards/history/social-web-protocols">History</a>
                        - <a href="https://w3c-social.github.io/social-web-protocols" title="Latest editor's draft of Social Web Protocols">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Amy Guy
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="digital publishing wai-aria module 1.0" data-tag="accessibility" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2017/REC-dpub-aria-1.0-20171214/" title="Latest draft of Digital Publishing WAI-ARIA Module 1.0 formally approved by the group">Digital  Publishing  WAI-ARIA  Module&nbsp;1.0</a></h2>
                        <p class=deliverer>Accessible Rich Internet Applications Working Group</p>
                        <p class=pubdetails>2017-12-14 - <a title="Digital Publishing WAI-ARIA Module 1.0 publication history" href="/standards/history/dpub-aria-1.0">History</a>
                        - <a href="https://w3c.github.io/dpub-aria/" title="Latest editor's draft of Digital Publishing WAI-ARIA Module 1.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Matt Garrish
                            <li>Tzviya Siegman
                            <li>Markus Gylling
                            <li>Shane McCarron
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="core accessibility api mappings 1.1" data-tag="accessibility" data-status="rec" data-version="latest ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2017/REC-core-aam-1.1-20171214/" title="Latest draft of Core Accessibility API Mappings 1.1 formally approved by the group">Core  Accessibility  API  Mappings&nbsp;1.1</a></h2>
                        <p class=deliverer>Accessible Rich Internet Applications Working Group</p>
                        <p class=pubdetails>2017-12-14 - <a title="Core Accessibility API Mappings 1.1 publication history" href="/standards/history/core-aam-1.1">History</a>
                        - <a href="https://w3c.github.io/core-aam/" title="Latest editor's draft of Core Accessibility API Mappings 1.1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Joanmarie Diggs
                            <li>Joseph Scheuhammer
                            <li>Richard Schwerdtfeger
                            <li>Michael Cooper
                            <li>Andi Snow-Weaver
                            <li>Aaron Leventhal
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                  <li data-title="html 5.2" data-tag="html" data-status="rec" data-version="latest ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2017/REC-html52-20171214/" title="Latest draft of HTML 5.2 formally approved by the group">HTML&nbsp;5.2</a></h2>
                        <p class=deliverer>Web Platform Working Group</p>
                        <p class=pubdetails>2017-12-14 - <a title="HTML 5.2 publication history" href="/standards/history/html52">History</a>
                        - <a href="https://w3c.github.io/html/" title="Latest editor's draft of HTML 5.2">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steve Faulkner
                            <li>Arron Eicholz
                            <li>Travis Leithead
                            <li>Alex Danilo
                            <li>Sangwhan Moon
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="wake lock api" data-tag="webapi" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2017/CR-wake-lock-20171214/" title="Latest draft of Wake Lock API formally approved by the group">Wake Lock API</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2017-12-14 - <a title="Wake Lock API publication history" href="/standards/history/wake-lock">History</a>
                        - <a href="https://w3c.github.io/wake-lock/" title="Latest editor's draft of Wake Lock API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ilya Bogdanovich
                            <li>Andrey Logvinov
                            <li>Marcos Caceres
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="css grid layout module level 1" data-tag="css" data-status="cr" data-version="latest ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2017/CR-css-grid-1-20171214/" title="Latest draft of CSS Grid Layout Module Level 1 formally approved by the group">CSS  Grid  Layout  Module  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2017-12-14 - <a title="CSS Grid Layout Module Level 1 publication history" href="/standards/history/css-grid-1">History</a>
                        - <a href="https://drafts.csswg.org/css-grid/" title="Latest editor's draft of CSS Grid Layout Module Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tab Atkins Jr.
                            <li>Elika Etemad
                            <li>Rossen Atanassov
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="digital publishing accessibility api mappings" data-tag="accessibility" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2017/REC-dpub-aam-1.0-20171214/" title="Latest draft of Digital Publishing Accessibility API Mappings formally approved by the group">Digital Publishing Accessibility API Mappings</a></h2>
                        <p class=deliverer>Accessible Rich Internet Applications Working Group</p>
                        <p class=pubdetails>2017-12-14 - <a title="Digital Publishing Accessibility API Mappings publication history" href="/standards/history/dpub-aam-1.0">History</a>
                        - <a href="https://w3c.github.io/dpub-aam/" title="Latest editor's draft of Digital Publishing Accessibility API Mappings">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Richard Schwerdtfeger
                            <li>Joanmarie Diggs
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="accessible rich internet applications (wai-aria) 1.1" data-tag="accessibility" data-status="rec" data-version="latest ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2017/REC-wai-aria-1.1-20171214/" title="Latest draft of Accessible Rich Internet Applications (WAI-ARIA) 1.1 formally approved by the group">Accessible  Rich  Internet  Applications  (WAI-ARIA)&nbsp;1.1</a></h2>
                        <p class=deliverer>Accessible Rich Internet Applications Working Group</p>
                        <p class=pubdetails>2017-12-14 - <a title="Accessible Rich Internet Applications (WAI-ARIA) 1.1 publication history" href="/standards/history/wai-aria-1.1">History</a>
                        - <a href="https://w3c.github.io/aria/" title="Latest editor's draft of Accessible Rich Internet Applications (WAI-ARIA) 1.1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Joanmarie Diggs
                            <li>Shane McCarron
                            <li>Michael Cooper
                            <li>Richard Schwerdtfeger
                            <li>James Craig
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css counter styles level 3" data-tag="css" data-status="cr" data-version="latest ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2017/CR-css-counter-styles-3-20171214/" title="Latest draft of CSS Counter Styles Level 3 formally approved by the group">CSS  Counter  Styles  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2017-12-14 - <a title="CSS Counter Styles Level 3 publication history" href="/standards/history/css-counter-styles-3">History</a>
                        - <a href="https://drafts.csswg.org/css-counter-styles/" title="Latest editor's draft of CSS Counter Styles Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tab Atkins Jr.
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="payment method manifest" data-tag="" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2017/WD-payment-method-manifest-20171212/" title="Latest draft of Payment Method Manifest formally approved by the group">Payment Method Manifest</a></h2>
                        <p class=deliverer>Web Payments Working Group</p>
                        <p class=pubdetails>2017-12-12 - <a title="Payment Method Manifest publication history" href="/standards/history/payment-method-manifest">History</a>
                        - <a href="https://w3c.github.io/payment-method-manifest/" title="Latest editor's draft of Payment Method Manifest">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dapeng Liu
                            <li>Domenic Denicola
                            <li>Zach Koch
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="web payments http api 1.0" data-tag="" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2017/NOTE-webpayments-http-api-20171212/" title="Latest draft of Web Payments HTTP API 1.0 formally approved by the group">Web  Payments  HTTP  API&nbsp;1.0</a></h2>
                        <p class=deliverer>Web Payments Working Group</p>
                        <p class=pubdetails>2017-12-12 - <a title="Web Payments HTTP API 1.0 publication history" href="/standards/history/webpayments-http-api">History</a>
                        - <a href="https://w3c.github.io/webpayments-http-api/" title="Latest editor's draft of Web Payments HTTP API 1.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Manu Sporny
                            <li>Dave Longley
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="clear site data" data-tag="security" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2017/WD-clear-site-data-20171130/" title="Latest draft of Clear Site Data formally approved by the group">Clear Site Data</a></h2>
                        <p class=deliverer>Web Application Security Working Group</p>
                        <p class=pubdetails>2017-11-30 - <a title="Clear Site Data publication history" href="/standards/history/clear-site-data">History</a>
                        - <a href="https://w3c.github.io/webappsec-clear-site-data/" title="Latest editor's draft of Clear Site Data">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mike West
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="remote playback api" data-tag="webapi" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2017/CR-remote-playback-20171019/" title="Latest draft of Remote Playback API formally approved by the group">Remote Playback API</a></h2>
                        <p class=deliverer>Second Screen Working Group</p>
                        <p class=pubdetails>2017-10-19 - <a title="Remote Playback API publication history" href="/standards/history/remote-playback">History</a>
                        - <a href="https://w3c.github.io/remote-playback/" title="Latest editor's draft of Remote Playback API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mounir Lamouri
                            <li>Anton Vayvod
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="semantic sensor network ontology" data-tag="data" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2017/REC-vocab-ssn-20171019/" title="Latest draft of Semantic Sensor Network Ontology formally approved by the group">Semantic Sensor Network Ontology</a></h2>
                        <p class=deliverer>Spatial Data on the Web Working Group</p>
                        <p class=pubdetails>2017-10-19 - <a title="Semantic Sensor Network Ontology publication history" href="/standards/history/vocab-ssn">History</a>
                        - <a href="https://w3c.github.io/sdw/ssn/" title="Latest editor's draft of Semantic Sensor Network Ontology">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Armin Haller
                            <li>Krzysztof Janowicz
                            <li>Simon Cox
                            <li>Danh Le Phuoc
                            <li>Kerry Taylor
                            <li>Maxime Lefrançois
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css backgrounds and borders module level 3" data-tag="css" data-status="cr" data-version="latest ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2017/CR-css-backgrounds-3-20171017/" title="Latest draft of CSS Backgrounds and Borders Module Level 3 formally approved by the group">CSS  Backgrounds  and  Borders  Module  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2017-10-17 - <a title="CSS Backgrounds and Borders Module Level 3 publication history" href="/standards/history/css-backgrounds-3">History</a>
                        - <a href="https://drafts.csswg.org/css-backgrounds/" title="Latest editor's draft of CSS Backgrounds and Borders Module Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Bert Bos
                            <li>Elika Etemad
                            <li>Brad Kemper
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                        <li data-title="page visibility level 2" data-tag="performance webapi" data-status="pr" data-version="latest upcoming ed">
            <div class="profile">PR</div>
            <h2 class="ProposedRecommendation"><a href="https://www.w3.org/TR/2017/PR-page-visibility-2-20171017/" title="Latest draft of Page Visibility Level 2 formally approved by the group">Page  Visibility  Level&nbsp;2</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2017-10-17 - <a title="Page Visibility Level 2 publication history" href="/standards/history/page-visibility-2">History</a>
                        - <a href="https://w3c.github.io/page-visibility/" title="Latest editor's draft of Page Visibility Level 2">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ilya Grigorik
                            <li>Arvind Jain
                            <li>Jatinder Mann
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="vehicle data" data-tag="" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2017/NOTE-vehicle-data-20171012/" title="Latest draft of Vehicle Data formally approved by the group">Vehicle Data</a></h2>
                        <p class=deliverer>Automotive Working Group</p>
                        <p class=pubdetails>2017-10-12 - <a title="Vehicle Data publication history" href="/standards/history/vehicle-data">History</a>
                        - <a href="https://w3c.github.io/automotive/vehicle_data/data_spec.html" title="Latest editor's draft of Vehicle Data">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>WonSuk Lee
                            <li>Qing An
                            <li>Adam Crofts
                            <li>Kevin Gavigan
                            <li>Justin(JongSeon) Park
                            <li>Kevron Rees
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="cooperative scheduling of background tasks" data-tag="performance webapi" data-status="pr" data-version="latest upcoming ed">
            <div class="profile">PR</div>
            <h2 class="ProposedRecommendation"><a href="https://www.w3.org/TR/2017/PR-requestidlecallback-20171010/" title="Latest draft of Cooperative Scheduling of Background Tasks formally approved by the group">Cooperative Scheduling of Background Tasks</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2017-10-10 - <a title="Cooperative Scheduling of Background Tasks publication history" href="/standards/history/requestidlecallback">History</a>
                        - <a href="https://w3c.github.io/requestidlecallback/" title="Latest editor's draft of Cooperative Scheduling of Background Tasks">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ross McIlroy
                            <li>Ilya Grigorik
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                <li data-title="html 5.1 2nd edition" data-tag="html" data-status="rec" data-version="latest ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2017/REC-html51-20171003/" title="Latest draft of HTML 5.1 2nd Edition formally approved by the group">HTML 5.1 2nd Edition</a></h2>
                        <p class=deliverer>Web Platform Working Group</p>
                        <p class=pubdetails>2017-10-03 - <a title="HTML 5.1 2nd Edition publication history" href="/standards/history/html51">History</a>
                        - <a href="https://rawgit.com/w3c/html/html5.1-2/single-page.html" title="Latest editor's draft of HTML 5.1 2nd Edition">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steve Faulkner
                            <li>Arron Eicholz
                            <li>Travis Leithead
                            <li>Alex Danilo
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="audio output devices api" data-tag="media webapi" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2017/CR-audio-output-20171003/" title="Latest draft of Audio Output Devices API formally approved by the group">Audio Output Devices API</a></h2>
                        <p class=deliverer>Web Real-Time Communications Working Group</p>
                        <p class=pubdetails>2017-10-03 - <a title="Audio Output Devices API publication history" href="/standards/history/audio-output">History</a>
                        - <a href="https://w3c.github.io/mediacapture-output/" title="Latest editor's draft of Audio Output Devices API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Justin Uberti
                            <li>Guido Urdaneta
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="spatial data on the web best practices" data-tag="data" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2017/NOTE-sdw-bp-20170928/" title="Latest draft of Spatial Data on the Web Best Practices formally approved by the group">Spatial Data on the Web Best Practices</a></h2>
                        <p class=deliverer>Spatial Data on the Web Working Group</p>
                        <p class=pubdetails>2017-09-28 - <a title="Spatial Data on the Web Best Practices publication history" href="/standards/history/sdw-bp">History</a>
                        - <a href="https://w3c.github.io/sdw/bp/" title="Latest editor's draft of Spatial Data on the Web Best Practices">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jeremy Tandy
                            <li>Linda van den Brink
                            <li>Payam Barnaghi
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="qb4st: rdf data cube extensions for spatio-temporal components" data-tag="data" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2017/NOTE-qb4st-20170928/" title="Latest draft of QB4ST: RDF Data Cube extensions for spatio-temporal components formally approved by the group">QB4ST: RDF Data Cube extensions for spatio-temporal components</a></h2>
                        <p class=deliverer>Spatial Data on the Web Working Group</p>
                        <p class=pubdetails>2017-09-28 - <a title="QB4ST: RDF Data Cube extensions for spatio-temporal components publication history" href="/standards/history/qb4st">History</a>
                        - <a href="https://w3c.github.io/sdw/qb4st/" title="Latest editor's draft of QB4ST: RDF Data Cube extensions for spatio-temporal components">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Rob Atkinson
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="publishing and using earth observation data with the rdf data cube and the discrete global grid system" data-tag="data" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2017/NOTE-eo-qb-20170928/" title="Latest draft of Publishing and Using Earth Observation Data with the RDF Data Cube and the Discrete Global Grid System formally approved by the group">Publishing and Using Earth Observation Data with the RDF Data Cube and the Discrete Global Grid System</a></h2>
                        <p class=deliverer>Spatial Data on the Web Working Group</p>
                        <p class=pubdetails>2017-09-28 - <a title="Publishing and Using Earth Observation Data with the RDF Data Cube and the Discrete Global Grid System publication history" href="/standards/history/eo-qb">History</a>
                        - <a href="https://w3c.github.io/sdw/eo-qb/" title="Latest editor's draft of Publishing and Using Earth Observation Data with the RDF Data Cube and the Discrete Global Grid System">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dmitry Brizhinev
                            <li>Sam Toyer
                            <li>Kerry Taylor
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="permissions" data-tag="security" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2017/WD-permissions-20170925/" title="Latest draft of Permissions formally approved by the group">Permissions</a></h2>
                        <p class=deliverer>Web Application Security Working Group</p>
                        <p class=pubdetails>2017-09-25 - <a title="Permissions publication history" href="/standards/history/permissions">History</a>
                        - <a href="https://w3c.github.io/permissions/" title="Latest editor's draft of Permissions">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mounir Lamouri
                            <li>Marcos Caceres
                            <li>Jeffrey Yasskin
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="encrypted media extensions" data-tag="html webapi" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2017/REC-encrypted-media-20170918/" title="Latest draft of Encrypted Media Extensions formally approved by the group">Encrypted Media Extensions</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2017-09-18 - <a title="Encrypted Media Extensions publication history" href="/standards/history/encrypted-media">History</a>
                        - <a href="https://w3c.github.io/encrypted-media/" title="Latest editor's draft of Encrypted Media Extensions">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>David Dorwin
                            <li>Jerry Smith
                            <li>Mark Watson
                            <li>Adrian Bateman
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="using the itu bt.2100 pq eotf with the png format" data-tag="media" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2017/NOTE-png-hdr-pq-20170911/" title="Latest draft of Using the ITU BT.2100 PQ EOTF with the PNG Format formally approved by the group">Using the ITU BT.2100 PQ EOTF with the PNG Format</a></h2>
                        <p class=deliverer>Timed Text Working Group</p>
                        <p class=pubdetails>2017-09-11 - <a title="Using the ITU BT.2100 PQ EOTF with the PNG Format publication history" href="/standards/history/png-hdr-pq">History</a>
                        - <a href="https://w3c.github.io/png-hdr-pq/" title="Latest editor's draft of Using the ITU BT.2100 PQ EOTF with the PNG Format">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Pierre-Anthony Lemieux
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="long tasks api 1" data-tag="performance" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2017/WD-longtasks-1-20170907/" title="Latest draft of Long Tasks API 1 formally approved by the group">Long  Tasks  API&nbsp;1</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2017-09-07 - <a title="Long Tasks API 1 publication history" href="/standards/history/longtasks-1">History</a>
                        - <a href="https://w3c.github.io/longtasks/" title="Latest editor's draft of Long Tasks API 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Shubhie Panicker
                            <li>Ilya Grigorik
                            <li>Domenic Denicola
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                          <li data-title="paint timing 1" data-tag="performance" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2017/WD-paint-timing-20170907/" title="Latest draft of Paint Timing 1 formally approved by the group">Paint  Timing&nbsp;1</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2017-09-07 - <a title="Paint Timing 1 publication history" href="/standards/history/paint-timing">History</a>
                        - <a href="https://w3c.github.io/paint-timing/" title="Latest editor's draft of Paint Timing 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Shubhie Panicker
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="media capture from dom elements" data-tag="media webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2017/WD-mediacapture-fromelement-20170906/" title="Latest draft of Media Capture from DOM Elements formally approved by the group">Media Capture from DOM Elements</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=deliverer>Web Real-Time Communications Working Group</p>
                        <p class=pubdetails>2017-09-06 - <a title="Media Capture from DOM Elements publication history" href="/standards/history/mediacapture-fromelement">History</a>
                        - <a href="https://w3c.github.io/mediacapture-fromelement/" title="Latest editor's draft of Media Capture from DOM Elements">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Martin Thomson
                            <li>Miguel Casas-sanchez
                            <li>Emircan Uysaler
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="media queries level 4" data-tag="css" data-status="cr" data-version="latest ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2017/CR-mediaqueries-4-20170905/" title="Latest draft of Media Queries Level 4 formally approved by the group">Media  Queries  Level&nbsp;4</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2017-09-05 - <a title="Media Queries Level 4 publication history" href="/standards/history/mediaqueries-4">History</a>
                        - <a href="https://drafts.csswg.org/mediaqueries-4/" title="Latest editor's draft of Media Queries Level 4">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Florian Rivoal
                            <li>Tab Atkins Jr.
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="motion sensors explainer" data-tag="webapi" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2017/NOTE-motion-sensors-20170830/" title="Latest draft of Motion Sensors Explainer formally approved by the group">Motion Sensors Explainer</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2017-08-30 - <a title="Motion Sensors Explainer publication history" href="/standards/history/motion-sensors">History</a>
                        - <a href="https://w3c.github.io/motion-sensors/" title="Latest editor's draft of Motion Sensors Explainer">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Kenneth Christiansen
                            <li>Alexander Shalamov
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="high resolution time level 3" data-tag="performance webapi" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2017/NOTE-hr-time-3-20170803/" title="Latest draft of High Resolution Time Level 3 formally approved by the group">High  Resolution  Time  Level&nbsp;3</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2017-08-03 - <a title="High Resolution Time Level 3 publication history" href="/standards/history/hr-time-3">History</a>
                        - <a href="https://w3c.github.io/hr-time/" title="Latest editor's draft of High Resolution Time Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ilya Grigorik
                            <li>James Simonsen
                            <li>Jatinder Mann
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                <li data-title="shacl use cases and requirements" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2017/NOTE-shacl-ucr-20170720/" title="Latest draft of SHACL Use Cases and Requirements formally approved by the group">SHACL Use Cases and Requirements</a></h2>
                        <p class=deliverer>RDF Data Shapes Working Group</p>
                        <p class=pubdetails>2017-07-20 - <a title="SHACL Use Cases and Requirements publication history" href="/standards/history/shacl-ucr">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Simon Steyskal
                            <li>Karen Coyle
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="shapes constraint language (shacl)" data-tag="data" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2017/REC-shacl-20170720/" title="Latest draft of Shapes Constraint Language (SHACL) formally approved by the group">Shapes Constraint Language (SHACL)</a></h2>
                        <p class=deliverer>RDF Data Shapes Working Group</p>
                        <p class=pubdetails>2017-07-20 - <a title="Shapes Constraint Language (SHACL) publication history" href="/standards/history/shacl">History</a>
                        - <a href="https://w3c.github.io/data-shapes/shacl/" title="Latest editor's draft of Shapes Constraint Language (SHACL)">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Holger Knublauch
                            <li>Dimitris Kontokostas
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                          <li data-title="shacl abstract syntax -- note on status of obsolete proposal" data-tag="data" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2017/NOTE-shacl-abstract-syntax-20170720/" title="Latest draft of SHACL Abstract Syntax -- Note on Status of Obsolete Proposal formally approved by the group">SHACL Abstract Syntax -- Note on Status of Obsolete Proposal</a></h2>
                        <p class=deliverer>RDF Data Shapes Working Group</p>
                        <p class=pubdetails>2017-07-20 - <a title="SHACL Abstract Syntax -- Note on Status of Obsolete Proposal publication history" href="/standards/history/shacl-abstract-syntax">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Eric Prud&#039;hommeaux
                            <li>Karen Coyle
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                          <li data-title="unicode in xml and other markup languages" data-tag="i18n" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2017/NOTE-unicode-xml-20170713/" title="Latest draft of Unicode in XML and other Markup Languages formally approved by the group">Unicode in XML and other Markup Languages</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2017-07-13 - <a title="Unicode in XML and other Markup Languages publication history" href="/standards/history/unicode-xml">History</a>
                        - <a href="https://w3c.github.io/unicode-xml/" title="Latest editor's draft of Unicode in XML and other Markup Languages">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Addison Phillips
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="overview of the coveragejson format" data-tag="" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2017/NOTE-covjson-overview-20170711/" title="Latest draft of Overview of the CoverageJSON format formally approved by the group">Overview of the CoverageJSON format</a></h2>
                        <p class=deliverer>Spatial Data on the Web Working Group</p>
                        <p class=pubdetails>2017-07-11 - <a title="Overview of the CoverageJSON format publication history" href="/standards/history/covjson-overview">History</a>
                        - <a href="https://w3c.github.io/sdw/coverage-json/" title="Latest editor's draft of Overview of the CoverageJSON format">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jon Blower
                            <li>Maik Riechert
                            <li>Bill Roberts
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="geolocation api specification level 2" data-tag="webapi" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2017/NOTE-geolocation-API-v2-20170706/" title="Latest draft of Geolocation API Specification Level 2 formally approved by the group">Geolocation  API  Specification  Level&nbsp;2</a></h2>
                        <p class=deliverer>Geolocation Working Group</p>
                        <p class=pubdetails>2017-07-06 - <a title="Geolocation API Specification Level 2 publication history" href="/standards/history/geolocation-API-v2">History</a>
                        - <a href="https://dev.w3.org/geo/api/spec-source-v2.html" title="Latest editor's draft of Geolocation API Specification Level 2">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Andrei Popescu
                            <li>Stephen Block
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="mediastream recording" data-tag="media webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2017/WD-mediastream-recording-20170621/" title="Latest draft of MediaStream Recording formally approved by the group">MediaStream Recording</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=deliverer>Web Real-Time Communications Working Group</p>
                        <p class=pubdetails>2017-06-21 - <a title="MediaStream Recording publication history" href="/standards/history/mediastream-recording">History</a>
                        - <a href="https://w3c.github.io/mediacapture-record/" title="Latest editor's draft of MediaStream Recording">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Miguel Casas-sanchez
                            <li>James Barnett
                            <li>Travis Leithead
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="&quot;mediastream image capture&quot;" data-tag="media webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2017/WD-image-capture-20170621/" title="Latest draft of &quot;MediaStream Image Capture&quot; formally approved by the group">"MediaStream Image Capture"</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=deliverer>Web Real-Time Communications Working Group</p>
                        <p class=pubdetails>2017-06-21 - <a title="&quot;MediaStream Image Capture&quot; publication history" href="/standards/history/image-capture">History</a>
                        - <a href="https://w3c.github.io/mediacapture-image/" title="Latest editor's draft of &quot;MediaStream Image Capture&quot;">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Giridhar Mandyam
                            <li>Miguel Casas-sanchez
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xquery scripting extension 1.0 requirements" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2017/NOTE-xquery-sx-10-requirements-20170620/" title="Latest draft of XQuery Scripting Extension 1.0 Requirements formally approved by the group">XQuery Scripting Extension 1.0 Requirements</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=pubdetails>2017-06-20 - <a title="XQuery Scripting Extension 1.0 Requirements publication history" href="/standards/history/xquery-sx-10-requirements">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Daniel Engovatov
                            <li>Daniela Florescu
                            <li>Giorgio Ghelli
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xquery scripting extension 1.0 use cases" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2017/NOTE-xquery-sx-10-use-cases-20170620/" title="Latest draft of XQuery Scripting Extension 1.0 Use Cases formally approved by the group">XQuery Scripting Extension 1.0 Use Cases</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=pubdetails>2017-06-20 - <a title="XQuery Scripting Extension 1.0 Use Cases publication history" href="/standards/history/xquery-sx-10-use-cases">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>John Snelson
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="findtext api" data-tag="webapi" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2017/NOTE-findtext-20170620/" title="Latest draft of FindText API formally approved by the group">FindText API</a></h2>
                        <p class=deliverer>Web Annotation Working Group</p>
                        <p class=deliverer>Web Platform Working Group</p>
                        <p class=pubdetails>2017-06-20 - <a title="FindText API publication history" href="/standards/history/findtext">History</a>
                        - <a href="https://w3c.github.io/findtext/" title="Latest editor's draft of FindText API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Doug Schepers
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="css overflow module level 4" data-tag="css" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2017/WD-css-overflow-4-20170613/" title="Latest draft of CSS Overflow Module Level 4 formally approved by the group">CSS  Overflow  Module  Level&nbsp;4</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2017-06-13 - <a title="CSS Overflow Module Level 4 publication history" href="/standards/history/css-overflow-4">History</a>
                        - <a href="https://drafts.csswg.org/css-overflow-4/" title="Latest editor's draft of CSS Overflow Module Level 4">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>David Baron
                            <li>Florian Rivoal
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="cloud browser architecture" data-tag="media" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2017/NOTE-cloud-browser-arch-20170608/" title="Latest draft of Cloud Browser Architecture formally approved by the group">Cloud Browser Architecture</a></h2>
                        <p class=deliverer>Media and Entertainment Interest Group</p>
                        <p class=pubdetails>2017-06-08 - <a title="Cloud Browser Architecture publication history" href="/standards/history/cloud-browser-arch">History</a>
                        - <a href="https://w3c.github.io/Web-and-TV-IG/cloud-browser-tf/" title="Latest editor's draft of Cloud Browser Architecture">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Colin Meerveld
                            <li>Alexandra Mikityuk
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="xsl transformations (xslt) version 3.0" data-tag="xml" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2017/REC-xslt-30-20170608/" title="Latest draft of XSL Transformations (XSLT) Version 3.0 formally approved by the group">XSL  Transformations  (XSLT)  Version&nbsp;3.0</a></h2>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2017-06-08 - <a title="XSL Transformations (XSLT) Version 3.0 publication history" href="/standards/history/xslt-30">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael Kay
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="shacl advanced features" data-tag="data" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2017/NOTE-shacl-af-20170608/" title="Latest draft of SHACL Advanced Features formally approved by the group">SHACL Advanced Features</a></h2>
                        <p class=deliverer>RDF Data Shapes Working Group</p>
                        <p class=pubdetails>2017-06-08 - <a title="SHACL Advanced Features publication history" href="/standards/history/shacl-af">History</a>
                        - <a href="https://w3c.github.io/data-shapes/shacl-af/" title="Latest editor's draft of SHACL Advanced Features">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Holger Knublauch
                            <li>Dean Allemang
                            <li>Simon Steyskal
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="shacl javascript extensions" data-tag="data" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2017/NOTE-shacl-js-20170608/" title="Latest draft of SHACL JavaScript Extensions formally approved by the group">SHACL JavaScript Extensions</a></h2>
                        <p class=deliverer>RDF Data Shapes Working Group</p>
                        <p class=pubdetails>2017-06-08 - <a title="SHACL JavaScript Extensions publication history" href="/standards/history/shacl-js">History</a>
                        - <a href="https://w3c.github.io/data-shapes/shacl-js/" title="Latest editor's draft of SHACL JavaScript Extensions">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Holger Knublauch
                            <li>Pano Maria
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="ui events keyboardevent code values" data-tag="dom webapi" data-status="cr" data-version="latest ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2017/CR-uievents-code-20170601/" title="Latest draft of UI Events KeyboardEvent code Values formally approved by the group">UI Events KeyboardEvent code Values</a></h2>
                        <p class=deliverer>Web Platform Working Group</p>
                        <p class=pubdetails>2017-06-01 - <a title="UI Events KeyboardEvent code Values publication history" href="/standards/history/uievents-code">History</a>
                        - <a href="https://w3c.github.io/uievents-code/" title="Latest editor's draft of UI Events KeyboardEvent code Values">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Gary Kacmarcik
                            <li>Travis Leithead
                          </ul>
                                    <ul class="taglist">
                            <li class="dom">DOM
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                <li data-title="ui events keyboardevent key values" data-tag="dom webapi" data-status="cr" data-version="latest ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2017/CR-uievents-key-20170601/" title="Latest draft of UI Events KeyboardEvent key Values formally approved by the group">UI Events KeyboardEvent key Values</a></h2>
                        <p class=deliverer>Web Platform Working Group</p>
                        <p class=pubdetails>2017-06-01 - <a title="UI Events KeyboardEvent key Values publication history" href="/standards/history/uievents-key">History</a>
                        - <a href="https://w3c.github.io/uievents-key/" title="Latest editor's draft of UI Events KeyboardEvent key Values">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Gary Kacmarcik
                            <li>Travis Leithead
                          </ul>
                                    <ul class="taglist">
                            <li class="dom">DOM
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="presentation api" data-tag="webapi" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2017/CR-presentation-api-20170601/" title="Latest draft of Presentation API formally approved by the group">Presentation API</a></h2>
                        <p class=deliverer>Second Screen Working Group</p>
                        <p class=pubdetails>2017-06-01 - <a title="Presentation API publication history" href="/standards/history/presentation-api">History</a>
                        - <a href="https://w3c.github.io/presentation-api/" title="Latest editor's draft of Presentation API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mark Foltz
                            <li>Dominik Röttsches
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="geofencing api" data-tag="" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2017/NOTE-geofencing-20170530/" title="Latest draft of Geofencing API formally approved by the group">Geofencing API</a></h2>
                        <p class=deliverer>Geolocation Working Group</p>
                        <p class=pubdetails>2017-05-30 - <a title="Geofencing API publication history" href="/standards/history/geofencing">History</a>
                        - <a href="https://w3c.github.io/geofencing-api/" title="Latest editor's draft of Geofencing API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Marijn Kruisselbrink
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="micropub" data-tag="" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2017/REC-micropub-20170523/" title="Latest draft of Micropub formally approved by the group">Micropub</a></h2>
                        <p class=deliverer>Social Web Working Group</p>
                        <p class=pubdetails>2017-05-23 - <a title="Micropub publication history" href="/standards/history/micropub">History</a>
                        - <a href="https://micropub.net/draft/" title="Latest editor's draft of Micropub">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Aaron Parecki
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                <li data-title="activity streams 2.0" data-tag="" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2017/REC-activitystreams-core-20170523/" title="Latest draft of Activity Streams 2.0 formally approved by the group">Activity  Streams&nbsp;2.0</a></h2>
                        <p class=deliverer>Social Web Working Group</p>
                        <p class=pubdetails>2017-05-23 - <a title="Activity Streams 2.0 publication history" href="/standards/history/activitystreams-core">History</a>
                        - <a href="http://w3c.github.io/activitystreams/core/" title="Latest editor's draft of Activity Streams 2.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>James Snell
                            <li>Evan Prodromou
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="activity vocabulary" data-tag="" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2017/REC-activitystreams-vocabulary-20170523/" title="Latest draft of Activity Vocabulary formally approved by the group">Activity Vocabulary</a></h2>
                        <p class=deliverer>Social Web Working Group</p>
                        <p class=pubdetails>2017-05-23 - <a title="Activity Vocabulary publication history" href="/standards/history/activitystreams-vocabulary">History</a>
                        - <a href="http://w3c.github.io/activitystreams/vocabulary/" title="Latest editor's draft of Activity Vocabulary">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>James Snell
                            <li>Evan Prodromou
                          </ul>
                                  </li>
                                                                                                                          <li data-title="tv control api specification" data-tag="media" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2017/NOTE-tvcontrol-api-20170518/" title="Latest draft of TV Control API Specification formally approved by the group">TV Control API Specification</a></h2>
                        <p class=deliverer>TV Control Working Group</p>
                        <p class=pubdetails>2017-05-18 - <a title="TV Control API Specification publication history" href="/standards/history/tvcontrol-api">History</a>
                        - <a href="https://w3c.github.io/tvcontrol-api/" title="Latest editor's draft of TV Control API Specification">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steve Morris
                            <li>Sung Hei Kim
                            <li>Alexander Futász
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="web publications for the open web platform: vision and technical challenges" data-tag="" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2017/NOTE-pwp-20170502/" title="Latest draft of Web Publications for the Open Web Platform: Vision And Technical Challenges formally approved by the group">Web Publications for the Open Web Platform: Vision And Technical Challenges</a></h2>
                        <p class=deliverer>Digital Publishing Interest Group</p>
                        <p class=pubdetails>2017-05-02 - <a title="Web Publications for the Open Web Platform: Vision And Technical Challenges publication history" href="/standards/history/pwp">History</a>
                        - <a href="https://w3c.github.io/dpub-pwp/" title="Latest editor's draft of Web Publications for the Open Web Platform: Vision And Technical Challenges">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Markus Gylling
                            <li>Ben De Meester
                            <li>Ivan Herman
                            <li>Tzviya Siegman
                            <li>Dave Cramer
                            <li>Leonard Rosenthol
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="linked data notifications" data-tag="data" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2017/REC-ldn-20170502/" title="Latest draft of Linked Data Notifications formally approved by the group">Linked Data Notifications</a></h2>
                        <p class=deliverer>Social Web Working Group</p>
                        <p class=pubdetails>2017-05-02 - <a title="Linked Data Notifications publication history" href="/standards/history/ldn">History</a>
                        - <a href="https://linkedresearch.org/ldn/" title="Latest editor's draft of Linked Data Notifications">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Sarven Capadisli
                            <li>Amy Guy
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="media capture depth stream extensions" data-tag="media webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2017/WD-mediacapture-depth-20170418/" title="Latest draft of Media Capture Depth Stream Extensions formally approved by the group">Media Capture Depth Stream Extensions</a></h2>
                        <p class=deliverer>Web Real-Time Communications Working Group</p>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2017-04-18 - <a title="Media Capture Depth Stream Extensions publication history" href="/standards/history/mediacapture-depth">History</a>
                        - <a href="https://w3c.github.io/mediacapture-depth/" title="Latest editor's draft of Media Capture Depth Stream Extensions">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Anssi Kostiainen
                            <li>Ningxin Hu
                            <li>Aleksandar Stojiljkovic
                            <li>Rob Manson
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="beacon" data-tag="performance" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2017/CR-beacon-20170413/" title="Latest draft of Beacon formally approved by the group">Beacon</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2017-04-13 - <a title="Beacon publication history" href="/standards/history/beacon">History</a>
                        - <a href="https://w3c.github.io/beacon/" title="Latest editor's draft of Beacon">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ilya Grigorik
                            <li>Alois Reitbauer
                            <li>Arvind Jain
                            <li>Jatinder Mann
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css fill and stroke module level 3" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2017/WD-fill-stroke-3-20170413/" title="Latest draft of CSS Fill and Stroke Module Level 3 formally approved by the group">CSS  Fill  and  Stroke  Module  Level&nbsp;3</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2017-04-13 - <a title="CSS Fill and Stroke Module Level 3 publication history" href="/standards/history/fill-stroke-3">History</a>
                        - <a href="https://drafts.fxtf.org/fill-stroke/" title="Latest editor's draft of CSS Fill and Stroke Module Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Elika Etemad
                            <li>Tab Atkins Jr.
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css image values and replaced content module level 4" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2017/WD-css-images-4-20170413/" title="Latest draft of CSS Image Values and Replaced Content Module Level 4 formally approved by the group">CSS  Image  Values  and  Replaced  Content  Module  Level&nbsp;4</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2017-04-13 - <a title="CSS Image Values and Replaced Content Module Level 4 publication history" href="/standards/history/css-images-4">History</a>
                        - <a href="https://drafts.csswg.org/css-images-4/" title="Latest editor's draft of CSS Image Values and Replaced Content Module Level 4">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tab Atkins Jr.
                            <li>Elika Etemad
                            <li>Lea Verou
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="resource timing level 1" data-tag="performance webapi" data-status="cr" data-version="latest ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2017/CR-resource-timing-1-20170330/" title="Latest draft of Resource Timing Level 1 formally approved by the group">Resource  Timing  Level&nbsp;1</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2017-03-30 - <a title="Resource Timing Level 1 publication history" href="/standards/history/resource-timing-1">History</a>
                        - <a href="https://w3c.github.io/resource-timing/" title="Latest editor's draft of Resource Timing Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Arvind Jain
                            <li>Todd Reifsteck
                            <li>Jatinder Mann
                            <li>Zhiheng Wang
                            <li>Anderson Quach
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                  <li data-title="xqueryx 3.1" data-tag="xml" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2017/REC-xqueryx-31-20170321/" title="Latest draft of XQueryX 3.1 formally approved by the group">XQueryX&nbsp;3.1</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=pubdetails>2017-03-21 - <a title="XQueryX 3.1 publication history" href="/standards/history/xqueryx-31">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jim Melton
                            <li>Josh Spiegel
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="xml path language (xpath) 3.1" data-tag="xml" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2017/REC-xpath-31-20170321/" title="Latest draft of XML Path Language (XPath) 3.1 formally approved by the group">XML  Path  Language  (XPath)&nbsp;3.1</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2017-03-21 - <a title="XML Path Language (XPath) 3.1 publication history" href="/standards/history/xpath-31">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jonathan Robie
                            <li>Michael Dyck
                            <li>Josh Spiegel
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="xslt and xquery serialization 3.1" data-tag="xml" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2017/REC-xslt-xquery-serialization-31-20170321/" title="Latest draft of XSLT and XQuery Serialization 3.1 formally approved by the group">XSLT  and  XQuery  Serialization&nbsp;3.1</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2017-03-21 - <a title="XSLT and XQuery Serialization 3.1 publication history" href="/standards/history/xslt-xquery-serialization-31">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Andrew Coleman
                            <li>Michael Sperberg-McQueen
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xquery 3.1: an xml query language" data-tag="xml" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2017/REC-xquery-31-20170321/" title="Latest draft of XQuery 3.1: An XML Query Language formally approved by the group">XQuery 3.1: An XML Query Language</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=pubdetails>2017-03-21 - <a title="XQuery 3.1: An XML Query Language publication history" href="/standards/history/xquery-31">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jonathan Robie
                            <li>Michael Dyck
                            <li>Josh Spiegel
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="xquery and xpath data model 3.1" data-tag="xml" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2017/REC-xpath-datamodel-31-20170321/" title="Latest draft of XQuery and XPath Data Model 3.1 formally approved by the group">XQuery  and  XPath  Data  Model&nbsp;3.1</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2017-03-21 - <a title="XQuery and XPath Data Model 3.1 publication history" href="/standards/history/xpath-datamodel-31">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Norman Walsh
                            <li>John Snelson
                            <li>Andrew Coleman
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="xpath and xquery functions and operators 3.1" data-tag="xml" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2017/REC-xpath-functions-31-20170321/" title="Latest draft of XPath and XQuery Functions and Operators 3.1 formally approved by the group">XPath  and  XQuery  Functions  and  Operators&nbsp;3.1</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2017-03-21 - <a title="XPath and XQuery Functions and Operators 3.1 publication history" href="/standards/history/xpath-functions-31">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael Kay
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="css rhythmic sizing" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2017/WD-css-rhythm-1-20170302/" title="Latest draft of CSS Rhythmic Sizing formally approved by the group">CSS Rhythmic Sizing</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2017-03-02 - <a title="CSS Rhythmic Sizing publication history" href="/standards/history/css-rhythm-1">History</a>
                        - <a href="https://drafts.csswg.org/css-rhythm/" title="Latest editor's draft of CSS Rhythmic Sizing">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Koji Ishii
                            <li>Elika Etemad
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="requirements for internationalization tag set (its) 2.0" data-tag="i18n" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2017/NOTE-its2req-20170302/" title="Latest draft of Requirements for Internationalization Tag Set (ITS) 2.0 formally approved by the group">Requirements  for  Internationalization  Tag  Set  (ITS)&nbsp;2.0</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2017-03-02 - <a title="Requirements for Internationalization Tag Set (ITS) 2.0 publication history" href="/standards/history/its2req">History</a>
                        - <a href="https://w3c.github.io/its2req/" title="Latest editor's draft of Requirements for Internationalization Tag Set (ITS) 2.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>David Lewis
                            <li>Arle Lommel
                            <li>Felix Sasaki
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                          <li data-title="metadata for the multilingual web - usage scenarios and implementations" data-tag="data html i18n" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2017/NOTE-mlw-metadata-us-impl-20170302/" title="Latest draft of Metadata for the Multilingual Web - Usage Scenarios and Implementations formally approved by the group">Metadata for the Multilingual Web - Usage Scenarios and Implementations</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2017-03-02 - <a title="Metadata for the Multilingual Web - Usage Scenarios and Implementations publication history" href="/standards/history/mlw-metadata-us-impl">History</a>
                        - <a href="https://w3c.github.io/mlw-metadata-us-impl/" title="Latest editor's draft of Metadata for the Multilingual Web - Usage Scenarios and Implementations">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Christian Lieske
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                            <li class="html">HTML
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="poe use cases and requirements" data-tag="data" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2017/WD-poe-ucr-20170223/" title="Latest draft of POE Use Cases and Requirements formally approved by the group">POE Use Cases and Requirements</a></h2>
                        <p class=deliverer>Permissions and Obligations Expression Working Group</p>
                        <p class=pubdetails>2017-02-23 - <a title="POE Use Cases and Requirements publication history" href="/standards/history/poe-ucr">History</a>
                        - <a href="https://w3c.github.io/poe/ucr/" title="Latest editor's draft of POE Use Cases and Requirements">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael Steidl
                            <li>Simon Steyskal
                            <li>Benedict Whittam Smith
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="embedding web annotations in html" data-tag="data" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2017/NOTE-annotation-html-20170223/" title="Latest draft of Embedding Web Annotations in HTML formally approved by the group">Embedding Web Annotations in HTML</a></h2>
                        <p class=deliverer>Web Annotation Working Group</p>
                        <p class=pubdetails>2017-02-23 - <a title="Embedding Web Annotations in HTML publication history" href="/standards/history/annotation-html">History</a>
                        - <a href="http://w3c.github.io/web-annotation/serialization-html-note/" title="Latest editor's draft of Embedding Web Annotations in HTML">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Timothy Cole
                            <li>Sarven Capadisli
                            <li>Benjamin Young
                            <li>Ivan Herman
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="web annotation data model" data-tag="data" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2017/REC-annotation-model-20170223/" title="Latest draft of Web Annotation Data Model formally approved by the group">Web Annotation Data Model</a></h2>
                        <p class=deliverer>Web Annotation Working Group</p>
                        <p class=pubdetails>2017-02-23 - <a title="Web Annotation Data Model publication history" href="/standards/history/annotation-model">History</a>
                        - <a href="http://w3c.github.io/web-annotation/" title="Latest editor's draft of Web Annotation Data Model">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Robert Sanderson
                            <li>Paolo Ciccarese
                            <li>Benjamin Young
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="selectors and states" data-tag="data" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2017/NOTE-selectors-states-20170223/" title="Latest draft of Selectors and States formally approved by the group">Selectors and States</a></h2>
                        <p class=deliverer>Web Annotation Working Group</p>
                        <p class=pubdetails>2017-02-23 - <a title="Selectors and States publication history" href="/standards/history/selectors-states">History</a>
                        - <a href="http://w3c.github.io/web-annotation/selector-note/" title="Latest editor's draft of Selectors and States">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ivan Herman
                            <li>Robert Sanderson
                            <li>Paolo Ciccarese
                            <li>Benjamin Young
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="web annotation protocol" data-tag="data" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2017/REC-annotation-protocol-20170223/" title="Latest draft of Web Annotation Protocol formally approved by the group">Web Annotation Protocol</a></h2>
                        <p class=deliverer>Web Annotation Working Group</p>
                        <p class=pubdetails>2017-02-23 - <a title="Web Annotation Protocol publication history" href="/standards/history/annotation-protocol">History</a>
                        - <a href="https://w3c.github.io/web-annotation/protocol/wd/" title="Latest editor's draft of Web Annotation Protocol">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Robert Sanderson
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="web annotation vocabulary" data-tag="data" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2017/REC-annotation-vocab-20170223/" title="Latest draft of Web Annotation Vocabulary formally approved by the group">Web Annotation Vocabulary</a></h2>
                        <p class=deliverer>Web Annotation Working Group</p>
                        <p class=pubdetails>2017-02-23 - <a title="Web Annotation Vocabulary publication history" href="/standards/history/annotation-vocab">History</a>
                        - <a href="http://w3c.github.io/web-annotation/" title="Latest editor's draft of Web Annotation Vocabulary">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Robert Sanderson
                            <li>Paolo Ciccarese
                            <li>Benjamin Young
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="indic layout requirements" data-tag="accessibility" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2017/WD-ilreq-20170220/" title="Latest draft of Indic Layout Requirements formally approved by the group">Indic Layout Requirements</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2017-02-20 - <a title="Indic Layout Requirements publication history" href="/standards/history/ilreq">History</a>
                        - <a href="https://w3c.github.io/ilreq/" title="Latest editor's draft of Indic Layout Requirements">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Swaran Lata
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="ready-made counter styles" data-tag="css i18n xml" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2017/NOTE-predefined-counter-styles-20170216/" title="Latest draft of Ready-made Counter Styles formally approved by the group">Ready-made Counter Styles</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2017-02-16 - <a title="Ready-made Counter Styles publication history" href="/standards/history/predefined-counter-styles">History</a>
                        - <a href="https://w3c.github.io/predefined-counter-styles/" title="Latest editor's draft of Ready-made Counter Styles">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Marcos Caceres
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                            <li class="i18n">i18n
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="emma: extensible multimodal annotation markup language version 2.0" data-tag="" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2017/NOTE-emma20-20170202/" title="Latest draft of EMMA: Extensible MultiModal Annotation markup language Version 2.0 formally approved by the group">EMMA:  Extensible  MultiModal  Annotation  markup  language  Version&nbsp;2.0</a></h2>
                        <p class=deliverer>Multimodal Interaction Working Group</p>
                        <p class=pubdetails>2017-02-02 - <a title="EMMA: Extensible MultiModal Annotation markup language Version 2.0 publication history" href="/standards/history/emma20">History</a>
                        - <a href="https://w3c.github.io/emma/emma2_0/emma_2_0_editor_draft.html" title="Latest editor's draft of EMMA: Extensible MultiModal Annotation markup language Version 2.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael Johnston
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="developers&#039; guide to features of web accessibility evaluation tools" data-tag="accessibility" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2017/NOTE-WAET-20170202/" title="Latest draft of Developers&#039; Guide to Features of Web Accessibility Evaluation Tools formally approved by the group">Developers' Guide to Features of Web Accessibility Evaluation Tools</a></h2>
                        <p class=deliverer>Evaluation and Repair Tools Working Group</p>
                        <p class=pubdetails>2017-02-02 - <a title="Developers&#039; Guide to Features of Web Accessibility Evaluation Tools publication history" href="/standards/history/WAET">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Carlos A. Velasco
                            <li>Shadi Abou-Zahra
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="pointer methods in rdf 1.0" data-tag="accessibility" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2017/NOTE-Pointers-in-RDF10-20170202/" title="Latest draft of Pointer Methods in RDF 1.0 formally approved by the group">Pointer  Methods  in  RDF&nbsp;1.0</a></h2>
                        <p class=deliverer>Evaluation and Repair Tools Working Group</p>
                        <p class=pubdetails>2017-02-02 - <a title="Pointer Methods in RDF 1.0 publication history" href="/standards/history/Pointers-in-RDF10">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Carlos Iglesias
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="developer guide for evaluation and report language (earl) 1.0" data-tag="accessibility" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2017/NOTE-EARL10-Guide-20170202/" title="Latest draft of Developer Guide for Evaluation and Report Language (EARL) 1.0 formally approved by the group">Developer  Guide  for  Evaluation  and  Report  Language  (EARL)&nbsp;1.0</a></h2>
                        <p class=deliverer>Evaluation and Repair Tools Working Group</p>
                        <p class=pubdetails>2017-02-02 - <a title="Developer Guide for Evaluation and Report Language (EARL) 1.0 publication history" href="/standards/history/EARL10-Guide">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Carlos A. Velasco
                            <li>Shadi Abou-Zahra
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="http vocabulary in rdf 1.0" data-tag="accessibility http" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2017/NOTE-HTTP-in-RDF10-20170202/" title="Latest draft of HTTP Vocabulary in RDF 1.0 formally approved by the group">HTTP  Vocabulary  in  RDF&nbsp;1.0</a></h2>
                        <p class=deliverer>Evaluation and Repair Tools Working Group</p>
                        <p class=pubdetails>2017-02-02 - <a title="HTTP Vocabulary in RDF 1.0 publication history" href="/standards/history/HTTP-in-RDF10">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Johannes Koch
                            <li>Carlos A. Velasco
                            <li>Philip Ackermann
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                            <li class="http">HTTP
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="requirements for the evaluation and report language (earl) 1.0" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2017/NOTE-EARL10-Requirements-20170202/" title="Latest draft of Requirements for the Evaluation and Report Language (EARL) 1.0 formally approved by the group">Requirements  for  the  Evaluation  and  Report  Language  (EARL)&nbsp;1.0</a></h2>
                        <p class=deliverer>Evaluation and Repair Tools Working Group</p>
                        <p class=pubdetails>2017-02-02 - <a title="Requirements for the Evaluation and Report Language (EARL) 1.0 publication history" href="/standards/history/EARL10-Requirements">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael Squillace
                            <li>Shadi Abou-Zahra
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                          <li data-title="discovery &amp; registration of multimodal modality components" data-tag="" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2017/NOTE-mmi-mc-discovery-20170202/" title="Latest draft of Discovery &amp; Registration of Multimodal Modality Components formally approved by the group">Discovery & Registration of Multimodal Modality Components</a></h2>
                        <p class=deliverer>Multimodal Interaction Working Group</p>
                        <p class=pubdetails>2017-02-02 - <a title="Discovery &amp; Registration of Multimodal Modality Components publication history" href="/standards/history/mmi-mc-discovery">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>B Helena RODRIGUEZ
                            <li>James Barnett
                            <li>Deborah Dahl
                            <li>Raj Tumuluri
                            <li>Nagesh Kharidi
                            <li>Kazuyuki Ashimura
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="representing content in rdf 1.0" data-tag="accessibility http" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2017/NOTE-Content-in-RDF10-20170202/" title="Latest draft of Representing Content in RDF 1.0 formally approved by the group">Representing  Content  in  RDF&nbsp;1.0</a></h2>
                        <p class=deliverer>Evaluation and Repair Tools Working Group</p>
                        <p class=pubdetails>2017-02-02 - <a title="Representing Content in RDF 1.0 publication history" href="/standards/history/Content-in-RDF10">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Johannes Koch
                            <li>Carlos A. Velasco
                            <li>Philip Ackermann
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                            <li class="http">HTTP
                          </ul>
                      </li>
                                                                                                                                                <li data-title="evaluation and report language (earl) 1.0 schema" data-tag="accessibility" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2017/NOTE-EARL10-Schema-20170202/" title="Latest draft of Evaluation and Report Language (EARL) 1.0 Schema formally approved by the group">Evaluation and Report Language (EARL) 1.0 Schema</a></h2>
                        <p class=deliverer>Evaluation and Repair Tools Working Group</p>
                        <p class=pubdetails>2017-02-02 - <a title="Evaluation and Report Language (EARL) 1.0 Schema publication history" href="/standards/history/EARL10-Schema">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Shadi Abou-Zahra
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                          <li data-title="css snapshot 2017" data-tag="css" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2017/NOTE-css-2017-20170131/" title="Latest draft of CSS Snapshot 2017 formally approved by the group">CSS Snapshot 2017</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2017-01-31 - <a title="CSS Snapshot 2017 publication history" href="/standards/history/css-2017">History</a>
                        - <a href="https://drafts.csswg.org/css-2017/" title="Latest editor's draft of CSS Snapshot 2017">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tab Atkins Jr.
                            <li>Elika Etemad
                            <li>Florian Rivoal
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="data on the web best practices" data-tag="data" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2017/REC-dwbp-20170131/" title="Latest draft of Data on the Web Best Practices formally approved by the group">Data on the Web Best Practices</a></h2>
                        <p class=deliverer>Data on the Web Best Practices Working Group</p>
                        <p class=pubdetails>2017-01-31 - <a title="Data on the Web Best Practices publication history" href="/standards/history/dwbp">History</a>
                        - <a href="http://w3c.github.io/dwbp/bp.html" title="Latest editor's draft of Data on the Web Best Practices">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Bernadette Farias Loscio
                            <li>Caroline Burle
                            <li>Newton Calegari
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="web cryptography api" data-tag="security webapi" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2017/REC-WebCryptoAPI-20170126/" title="Latest draft of Web Cryptography API formally approved by the group">Web Cryptography API</a></h2>
                        <p class=deliverer>Web Cryptography Working Group</p>
                        <p class=pubdetails>2017-01-26 - <a title="Web Cryptography API publication history" href="/standards/history/WebCryptoAPI">History</a>
                        - <a href="https://w3c.github.io/webcrypto/Overview.html" title="Latest editor's draft of Web Cryptography API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mark Watson
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="referrer policy" data-tag="security" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2017/CR-referrer-policy-20170126/" title="Latest draft of Referrer Policy formally approved by the group">Referrer Policy</a></h2>
                        <p class=deliverer>Web Application Security Working Group</p>
                        <p class=pubdetails>2017-01-26 - <a title="Referrer Policy publication history" href="/standards/history/referrer-policy">History</a>
                        - <a href="https://w3c.github.io/webappsec-referrer-policy/" title="Latest editor's draft of Referrer Policy">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jochen Eisinger
                            <li>Emily Stark
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="xquery update facility 3.0" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2017/NOTE-xquery-update-30-20170124/" title="Latest draft of XQuery Update Facility 3.0 formally approved by the group">XQuery  Update  Facility&nbsp;3.0</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=pubdetails>2017-01-24 - <a title="XQuery Update Facility 3.0 publication history" href="/standards/history/xquery-update-30">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>John Snelson
                            <li>Jim Melton
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xquery update facility 3.0 requirements and use cases" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2017/NOTE-xquery-update-30-requirements-use-cases-20170124/" title="Latest draft of XQuery Update Facility 3.0 Requirements and Use Cases formally approved by the group">XQuery Update Facility 3.0 Requirements and Use Cases</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=pubdetails>2017-01-24 - <a title="XQuery Update Facility 3.0 Requirements and Use Cases publication history" href="/standards/history/xquery-update-30-requirements-use-cases">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Andrew Coleman
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="webmention" data-tag="" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2017/REC-webmention-20170112/" title="Latest draft of Webmention formally approved by the group">Webmention</a></h2>
                        <p class=deliverer>Social Web Working Group</p>
                        <p class=pubdetails>2017-01-12 - <a title="Webmention publication history" href="/standards/history/webmention">History</a>
                        - <a href="https://webmention.net/draft/" title="Latest editor's draft of Webmention">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Aaron Parecki
                          </ul>
                                  </li>
                                                                                                                          <li data-title="network service discovery" data-tag="webapi" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2017/NOTE-discovery-api-20170112/" title="Latest draft of Network Service Discovery formally approved by the group">Network Service Discovery</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2017-01-12 - <a title="Network Service Discovery publication history" href="/standards/history/discovery-api">History</a>
                        - <a href="http://dvcs.w3.org/hg/dap/raw-file/tip/discovery-api/Overview.html" title="Latest editor's draft of Network Service Discovery">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Rich Tibbett
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css round display level 1" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2016/WD-css-round-display-1-20161222/" title="Latest draft of CSS Round Display Level 1 formally approved by the group">CSS  Round  Display  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2016-12-22 - <a title="CSS Round Display Level 1 publication history" href="/standards/history/css-round-display-1">History</a>
                        - <a href="https://drafts.csswg.org/css-round-display/" title="Latest editor's draft of CSS Round Display Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jihye Hong
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="data on the web best practices: data quality vocabulary" data-tag="data" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2016/NOTE-vocab-dqv-20161215/" title="Latest draft of Data on the Web Best Practices: Data Quality Vocabulary formally approved by the group">Data on the Web Best Practices: Data Quality Vocabulary</a></h2>
                        <p class=deliverer>Data on the Web Best Practices Working Group</p>
                        <p class=pubdetails>2016-12-15 - <a title="Data on the Web Best Practices: Data Quality Vocabulary publication history" href="/standards/history/vocab-dqv">History</a>
                        - <a href="http://w3c.github.io/dwbp/vocab-dqg.html" title="Latest editor's draft of Data on the Web Best Practices: Data Quality Vocabulary">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Riccardo Albertoni
                            <li>Antoine Isaac
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="content security policy level 2" data-tag="security" data-status="rec" data-version="latest ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2016/REC-CSP2-20161215/" title="Latest draft of Content Security Policy Level 2 formally approved by the group">Content  Security  Policy  Level&nbsp;2</a></h2>
                        <p class=deliverer>Web Application Security Working Group</p>
                        <p class=pubdetails>2016-12-15 - <a title="Content Security Policy Level 2 publication history" href="/standards/history/CSP2">History</a>
                        - <a href="https://w3c.github.io/webappsec-csp/" title="Latest editor's draft of Content Security Policy Level 2">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mike West
                            <li>Adam Barth
                            <li>Daniel Veditz
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="data on the web best practices: dataset usage vocabulary" data-tag="data" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2016/NOTE-vocab-duv-20161215/" title="Latest draft of Data on the Web Best Practices: Dataset Usage Vocabulary formally approved by the group">Data on the Web Best Practices: Dataset Usage Vocabulary</a></h2>
                        <p class=deliverer>Data on the Web Best Practices Working Group</p>
                        <p class=pubdetails>2016-12-15 - <a title="Data on the Web Best Practices: Dataset Usage Vocabulary publication history" href="/standards/history/vocab-duv">History</a>
                        - <a href="http://w3c.github.io/dwbp/vocab-du.html" title="Latest editor's draft of Data on the Web Best Practices: Dataset Usage Vocabulary">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Bernadette Farias Loscio
                            <li>Eric Stephan
                            <li>Sumit Purohit
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                          <li data-title="webidl level 1" data-tag="webapi" data-status="rec" data-version="latest ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2016/REC-WebIDL-1-20161215/" title="Latest draft of WebIDL Level 1 formally approved by the group">WebIDL  Level&nbsp;1</a></h2>
                        <p class=deliverer>Web Platform Working Group</p>
                        <p class=pubdetails>2016-12-15 - <a title="WebIDL Level 1 publication history" href="/standards/history/WebIDL-1">History</a>
                        - <a href="https://heycam.github.io/webidl/" title="Latest editor's draft of WebIDL Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Cameron McCormack
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xquery 3.1 requirements and use cases" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2016/NOTE-xquery-31-requirements-20161213/" title="Latest draft of XQuery 3.1 Requirements and Use Cases formally approved by the group">XQuery 3.1 Requirements and Use Cases</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=pubdetails>2016-12-13 - <a title="XQuery 3.1 Requirements and Use Cases publication history" href="/standards/history/xquery-31-requirements">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jonathan Robie
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="url" data-tag="webapi" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2016/NOTE-url-1-20161206/" title="Latest draft of URL formally approved by the group">URL</a></h2>
                        <p class=deliverer>Web Platform Working Group</p>
                        <p class=pubdetails>2016-12-06 - <a title="URL publication history" href="/standards/history/url-1">History</a>
                        - <a href="https://url.spec.whatwg.org/" title="Latest editor's draft of URL">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Anne van Kesteren
                            <li>Sam Ruby
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="streams api" data-tag="webapi" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2016/NOTE-streams-api-20161129/" title="Latest draft of Streams API formally approved by the group">Streams API</a></h2>
                        <p class=deliverer>Web Platform Working Group</p>
                        <p class=pubdetails>2016-11-29 - <a title="Streams API publication history" href="/standards/history/streams-api">History</a>
                        - <a href="https://streams.spec.whatwg.org/" title="Latest editor's draft of Streams API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Feras Moussa
                            <li>Takeshi Yoshino
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="media source extensions™" data-tag="html webapi" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2016/REC-media-source-20161117/" title="Latest draft of Media Source Extensions™ formally approved by the group">Media Source Extensions™</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2016-11-17 - <a title="Media Source Extensions™ publication history" href="/standards/history/media-source">History</a>
                        - <a href="https://w3c.github.io/media-source/" title="Latest editor's draft of Media Source Extensions™">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Matthew Wolenetz
                            <li>Jerry Smith
                            <li>Mark Watson
                            <li>Aaron Colwell
                            <li>Adrian Bateman
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="ethiopic layout requirements" data-tag="css graphics i18n xml" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2016/WD-elreq-20161115/" title="Latest draft of Ethiopic Layout Requirements formally approved by the group">Ethiopic Layout Requirements</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2016-11-15 - <a title="Ethiopic Layout Requirements publication history" href="/standards/history/elreq">History</a>
                        - <a href="https://w3c.github.io/elreq/" title="Latest editor's draft of Ethiopic Layout Requirements">Editor's Draft</a>
                        </p>
                                    <ul class="taglist">
                            <li class="css">CSS
                            <li class="graphics">Graphics
                            <li class="i18n">i18n
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="geolocation api specification 2nd edition" data-tag="webapi" data-status="rec" data-version="latest ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2016/REC-geolocation-API-20161108/" title="Latest draft of Geolocation API Specification 2nd Edition formally approved by the group">Geolocation API Specification 2nd Edition</a></h2>
                        <p class=deliverer>Geolocation Working Group</p>
                        <p class=pubdetails>2016-11-08 - <a title="Geolocation API Specification 2nd Edition publication history" href="/standards/history/geolocation-API">History</a>
                        - <a href="https://w3c.github.io/geolocation-api/" title="Latest editor's draft of Geolocation API Specification 2nd Edition">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Andrei Popescu
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                <li data-title="pointer lock" data-tag="webapi" data-status="rec" data-version="latest ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2016/REC-pointerlock-20161027/" title="Latest draft of Pointer Lock formally approved by the group">Pointer Lock</a></h2>
                        <p class=deliverer>Web Platform Working Group</p>
                        <p class=pubdetails>2016-10-27 - <a title="Pointer Lock publication history" href="/standards/history/pointerlock">History</a>
                        - <a href="https://w3c.github.io/pointerlock/" title="Latest editor's draft of Pointer Lock">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Vincent Scheib
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="spatial data on the web use cases &amp; requirements" data-tag="data" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2016/NOTE-sdw-ucr-20161025/" title="Latest draft of Spatial Data on the Web Use Cases &amp; Requirements formally approved by the group">Spatial Data on the Web Use Cases & Requirements</a></h2>
                        <p class=deliverer>Spatial Data on the Web Working Group</p>
                        <p class=pubdetails>2016-10-25 - <a title="Spatial Data on the Web Use Cases &amp; Requirements publication history" href="/standards/history/sdw-ucr">History</a>
                        - <a href="http://w3c.github.io/sdw/UseCases/SDWUseCasesAndRequirements.html" title="Latest editor's draft of Spatial Data on the Web Use Cases &amp; Requirements">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Frans Knibbe
                            <li>Alejandro Llaves
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="vibration api (second edition)" data-tag="webapi" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="https://www.w3.org/TR/2016/REC-vibration-20161018/" title="Latest draft of Vibration API (Second Edition) formally approved by the group">Vibration API (Second Edition)</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2016-10-18 - <a title="Vibration API (Second Edition) publication history" href="/standards/history/vibration">History</a>
                        - <a href="https://w3c.github.io/vibration/" title="Latest editor's draft of Vibration API (Second Edition)">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Anssi Kostiainen
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                        <li data-title="web payments overview 1.0" data-tag="" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2016/NOTE-webpayments-overview-20161013/" title="Latest draft of Web Payments Overview 1.0 formally approved by the group">Web  Payments  Overview&nbsp;1.0</a></h2>
                        <p class=deliverer>Web Payments Working Group</p>
                        <p class=pubdetails>2016-10-13 - <a title="Web Payments Overview 1.0 publication history" href="/standards/history/webpayments-overview">History</a>
                        - <a href="https://w3c.github.io/webpayments-overview/" title="Latest editor's draft of Web Payments Overview 1.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Manu Sporny
                            <li>Adrian Hope-Bailie
                            <li>Nick Telford-Reed
                            <li>Roy McElmurry
                            <li>Dapeng Liu
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                    <li data-title="understanding wcag 2.0" data-tag="accessibility" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2016/NOTE-UNDERSTANDING-WCAG20-20161007/" title="Latest draft of Understanding WCAG 2.0 formally approved by the group">Understanding  WCAG&nbsp;2.0</a></h2>
                        <p class=deliverer>Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2016-10-07 - <a title="Understanding WCAG 2.0 publication history" href="/standards/history/UNDERSTANDING-WCAG20">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael Cooper
                            <li>Andrew Kirkpatrick
                            <li>Joshue O Connor
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="techniques for wcag 2.0" data-tag="accessibility" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2016/NOTE-WCAG20-TECHS-20161007/" title="Latest draft of Techniques for WCAG 2.0 formally approved by the group">Techniques  for  WCAG&nbsp;2.0</a></h2>
                        <p class=deliverer>Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2016-10-07 - <a title="Techniques for WCAG 2.0 publication history" href="/standards/history/WCAG20-TECHS">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael Cooper
                            <li>Andrew Kirkpatrick
                            <li>Joshue O Connor
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="internationalization best practices for spec developers" data-tag="i18n" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2016/WD-international-specs-20161007/" title="Latest draft of Internationalization Best Practices for Spec Developers formally approved by the group">Internationalization Best Practices for Spec Developers</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2016-10-07 - <a title="Internationalization Best Practices for Spec Developers publication history" href="/standards/history/international-specs">History</a>
                        - <a href="https://w3c.github.io/bp-i18n-specdev/" title="Latest editor's draft of Internationalization Best Practices for Spec Developers">Editor's Draft</a>
                        </p>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                    <li data-title="xmlhttprequest level 1" data-tag="webapi" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="https://www.w3.org/TR/2016/NOTE-XMLHttpRequest-20161006/" title="Latest draft of XMLHttpRequest Level 1 formally approved by the group">XMLHttpRequest  Level&nbsp;1</a></h2>
                        <p class=deliverer>Web Platform Working Group</p>
                        <p class=pubdetails>2016-10-06 - <a title="XMLHttpRequest Level 1 publication history" href="/standards/history/XMLHttpRequest">History</a>
                        - <a href="https://xhr.spec.whatwg.org/" title="Latest editor's draft of XMLHttpRequest Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Anne van Kesteren
                            <li>Julian Aubourg
                            <li>Jungkee Song
                            <li>Hallvord Steen
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="iso bmff byte stream format" data-tag="html webapi" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2016/NOTE-mse-byte-stream-format-isobmff-20161004/" title="Latest draft of ISO BMFF Byte Stream Format formally approved by the group">ISO BMFF Byte Stream Format</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2016-10-04 - <a title="ISO BMFF Byte Stream Format publication history" href="/standards/history/mse-byte-stream-format-isobmff">History</a>
                        - <a href="https://w3c.github.io/media-source/isobmff-byte-stream-format.html" title="Latest editor's draft of ISO BMFF Byte Stream Format">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Matthew Wolenetz
                            <li>Jerry Smith
                            <li>Mark Watson
                            <li>Aaron Colwell
                            <li>Adrian Bateman
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="mpeg-2 ts byte stream format" data-tag="html webapi" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2016/NOTE-mse-byte-stream-format-mp2t-20161004/" title="Latest draft of MPEG-2 TS Byte Stream Format formally approved by the group">MPEG-2 TS Byte Stream Format</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2016-10-04 - <a title="MPEG-2 TS Byte Stream Format publication history" href="/standards/history/mse-byte-stream-format-mp2t">History</a>
                        - <a href="https://w3c.github.io/media-source/mp2t-byte-stream-format.html" title="Latest editor's draft of MPEG-2 TS Byte Stream Format">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Matthew Wolenetz
                            <li>Jerry Smith
                            <li>Mark Watson
                            <li>Aaron Colwell
                            <li>Adrian Bateman
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="mpeg audio byte stream format" data-tag="html webapi" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2016/NOTE-mse-byte-stream-format-mpeg-audio-20161004/" title="Latest draft of MPEG Audio Byte Stream Format formally approved by the group">MPEG Audio Byte Stream Format</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2016-10-04 - <a title="MPEG Audio Byte Stream Format publication history" href="/standards/history/mse-byte-stream-format-mpeg-audio">History</a>
                        - <a href="https://w3c.github.io/media-source/mpeg-audio-byte-stream-format.html" title="Latest editor's draft of MPEG Audio Byte Stream Format">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Matthew Wolenetz
                            <li>Aaron Colwell
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="media source extensions byte stream format registry" data-tag="html webapi" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2016/NOTE-mse-byte-stream-format-registry-20161004/" title="Latest draft of Media Source Extensions Byte Stream Format Registry formally approved by the group">Media Source Extensions Byte Stream Format Registry</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2016-10-04 - <a title="Media Source Extensions Byte Stream Format Registry publication history" href="/standards/history/mse-byte-stream-format-registry">History</a>
                        - <a href="https://w3c.github.io/media-source/byte-stream-format-registry.html" title="Latest editor's draft of Media Source Extensions Byte Stream Format Registry">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Matthew Wolenetz
                            <li>Jerry Smith
                            <li>Aaron Colwell
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="webm byte stream format" data-tag="html webapi" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2016/NOTE-mse-byte-stream-format-webm-20161004/" title="Latest draft of WebM Byte Stream Format formally approved by the group">WebM Byte Stream Format</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2016-10-04 - <a title="WebM Byte Stream Format publication history" href="/standards/history/mse-byte-stream-format-webm">History</a>
                        - <a href="https://w3c.github.io/media-source/webm-byte-stream-format.html" title="Latest editor's draft of WebM Byte Stream Format">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Matthew Wolenetz
                            <li>Jerry Smith
                            <li>Aaron Colwell
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="&quot;webm&quot; initialization data format" data-tag="html webapi" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2016/NOTE-eme-initdata-webm-20160915/" title="Latest draft of &quot;webm&quot; Initialization Data Format formally approved by the group">"webm" Initialization Data Format</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2016-09-15 - <a title="&quot;webm&quot; Initialization Data Format publication history" href="/standards/history/eme-initdata-webm">History</a>
                        - <a href="https://w3c.github.io/encrypted-media/format-registry/initdata/webm.html" title="Latest editor's draft of &quot;webm&quot; Initialization Data Format">Editor's Draft</a>
                        </p>
                                    <ul class="taglist">
                            <li class="html">HTML
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="web payments http messages 1.0" data-tag="" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2016/WD-webpayments-http-messages-20160915/" title="Latest draft of Web Payments HTTP Messages 1.0 formally approved by the group">Web  Payments  HTTP  Messages&nbsp;1.0</a></h2>
                        <p class=deliverer>Web Payments Working Group</p>
                        <p class=pubdetails>2016-09-15 - <a title="Web Payments HTTP Messages 1.0 publication history" href="/standards/history/webpayments-http-messages">History</a>
                        - <a href="https://w3c.github.io/webpayments-http-messages/" title="Latest editor's draft of Web Payments HTTP Messages 1.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Manu Sporny
                            <li>Dave Longley
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="iso common encryption (&#039;cenc&#039;) protection scheme for iso base media file format stream format" data-tag="html webapi" data-status="note" data-version="latest ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2016/NOTE-eme-stream-mp4-20160915/" title="Latest draft of ISO Common Encryption (&#039;cenc&#039;) Protection Scheme for ISO Base Media File Format Stream Format formally approved by the group">ISO Common Encryption ('cenc') Protection Scheme for ISO Base Media File Format Stream Format</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2016-09-15 - <a title="ISO Common Encryption (&#039;cenc&#039;) Protection Scheme for ISO Base Media File Format Stream Format publication history" href="/standards/history/eme-stream-mp4">History</a>
                        - <a href="https://w3c.github.io/encrypted-media/format-registry/stream/mp4.html" title="Latest editor's draft of ISO Common Encryption (&#039;cenc&#039;) Protection Scheme for ISO Base Media File Format Stream Format">Editor's Draft</a>
                        </p>
                                    <ul class="taglist">
                            <li class="html">HTML
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="encrypted media extensions stream format registry" data-tag="html webapi" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2016/NOTE-eme-stream-registry-20160915/" title="Latest draft of Encrypted Media Extensions Stream Format Registry formally approved by the group">Encrypted Media Extensions Stream Format Registry</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2016-09-15 - <a title="Encrypted Media Extensions Stream Format Registry publication history" href="/standards/history/eme-stream-registry">History</a>
                        - <a href="https://w3c.github.io/encrypted-media/format-registry/stream/" title="Latest editor's draft of Encrypted Media Extensions Stream Format Registry">Editor's Draft</a>
                        </p>
                                    <ul class="taglist">
                            <li class="html">HTML
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                <li data-title="secure contexts" data-tag="security" data-status="cr" data-version="latest ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2016/CR-secure-contexts-20160915/" title="Latest draft of Secure Contexts formally approved by the group">Secure Contexts</a></h2>
                        <p class=deliverer>Web Application Security Working Group</p>
                        <p class=pubdetails>2016-09-15 - <a title="Secure Contexts publication history" href="/standards/history/secure-contexts">History</a>
                        - <a href="https://w3c.github.io/webappsec-secure-contexts/" title="Latest editor's draft of Secure Contexts">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mike West
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="webm stream format" data-tag="html webapi" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2016/NOTE-eme-stream-webm-20160915/" title="Latest draft of WebM Stream Format formally approved by the group">WebM Stream Format</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2016-09-15 - <a title="WebM Stream Format publication history" href="/standards/history/eme-stream-webm">History</a>
                        - <a href="https://w3c.github.io/encrypted-media/format-registry/stream/webm.html" title="Latest editor's draft of WebM Stream Format">Editor's Draft</a>
                        </p>
                                    <ul class="taglist">
                            <li class="html">HTML
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="&quot;cenc&quot; initialization data format" data-tag="html webapi" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2016/NOTE-eme-initdata-cenc-20160915/" title="Latest draft of &quot;cenc&quot; Initialization Data Format formally approved by the group">"cenc" Initialization Data Format</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2016-09-15 - <a title="&quot;cenc&quot; Initialization Data Format publication history" href="/standards/history/eme-initdata-cenc">History</a>
                        - <a href="https://w3c.github.io/encrypted-media/format-registry/initdata/cenc.html" title="Latest editor's draft of &quot;cenc&quot; Initialization Data Format">Editor's Draft</a>
                        </p>
                                    <ul class="taglist">
                            <li class="html">HTML
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="&quot;keyids&quot; initialization data format" data-tag="html webapi" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2016/NOTE-eme-initdata-keyids-20160915/" title="Latest draft of &quot;keyids&quot; Initialization Data Format formally approved by the group">"keyids" Initialization Data Format</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2016-09-15 - <a title="&quot;keyids&quot; Initialization Data Format publication history" href="/standards/history/eme-initdata-keyids">History</a>
                        - <a href="https://w3c.github.io/encrypted-media/format-registry/initdata/keyids.html" title="Latest editor's draft of &quot;keyids&quot; Initialization Data Format">Editor's Draft</a>
                        </p>
                                    <ul class="taglist">
                            <li class="html">HTML
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="encrypted media extensions initialization data format registry" data-tag="html webapi" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2016/NOTE-eme-initdata-registry-20160915/" title="Latest draft of Encrypted Media Extensions Initialization Data Format Registry formally approved by the group">Encrypted Media Extensions Initialization Data Format Registry</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2016-09-15 - <a title="Encrypted Media Extensions Initialization Data Format Registry publication history" href="/standards/history/eme-initdata-registry">History</a>
                        - <a href="https://w3c.github.io/encrypted-media/format-registry/initdata/" title="Latest editor's draft of Encrypted Media Extensions Initialization Data Format Registry">Editor's Draft</a>
                        </p>
                                    <ul class="taglist">
                            <li class="html">HTML
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="content security policy pinning" data-tag="security" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2016/NOTE-csp-pinning-20160913/" title="Latest draft of Content Security Policy Pinning formally approved by the group">Content Security Policy Pinning</a></h2>
                        <p class=deliverer>Web Application Security Working Group</p>
                        <p class=pubdetails>2016-09-13 - <a title="Content Security Policy Pinning publication history" href="/standards/history/csp-pinning">History</a>
                        - <a href="https://w3c.github.io/webappsec-csp/pinning/" title="Latest editor's draft of Content Security Policy Pinning">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mike West
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="entry point regulation" data-tag="security" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2016/NOTE-epr-20160913/" title="Latest draft of Entry Point Regulation formally approved by the group">Entry Point Regulation</a></h2>
                        <p class=deliverer>Web Application Security Working Group</p>
                        <p class=pubdetails>2016-09-13 - <a title="Entry Point Regulation publication history" href="/standards/history/epr">History</a>
                        - <a href="https://w3c.github.io/webappsec-epr/" title="Latest editor's draft of Entry Point Regulation">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mike West
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="content security policy: cookie controls" data-tag="security" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="https://www.w3.org/TR/2016/NOTE-csp-cookies-20160913/" title="Latest draft of Content Security Policy: Cookie Controls formally approved by the group">Content Security Policy: Cookie Controls</a></h2>
                        <p class=deliverer>Web Application Security Working Group</p>
                        <p class=pubdetails>2016-09-13 - <a title="Content Security Policy: Cookie Controls publication history" href="/standards/history/csp-cookies">History</a>
                        - <a href="https://w3c.github.io/webappsec-csp/cookies/" title="Latest editor's draft of Content Security Policy: Cookie Controls">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mike West
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="content security policy: embedded enforcement" data-tag="security" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="https://www.w3.org/TR/2016/WD-csp-embedded-enforcement-20160909/" title="Latest draft of Content Security Policy: Embedded Enforcement formally approved by the group">Content Security Policy: Embedded Enforcement</a></h2>
                        <p class=deliverer>Web Application Security Working Group</p>
                        <p class=pubdetails>2016-09-09 - <a title="Content Security Policy: Embedded Enforcement publication history" href="/standards/history/csp-embedded-enforcement">History</a>
                        - <a href="https://w3c.github.io/webappsec-cspee/" title="Latest editor's draft of Content Security Policy: Embedded Enforcement">Editor's Draft</a>
                        </p>
                                    <ul class="taglist">
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="mixed content" data-tag="security" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="https://www.w3.org/TR/2016/CR-mixed-content-20160802/" title="Latest draft of Mixed Content formally approved by the group">Mixed Content</a></h2>
                        <p class=deliverer>Web Application Security Working Group</p>
                        <p class=pubdetails>2016-08-02 - <a title="Mixed Content publication history" href="/standards/history/mixed-content">History</a>
                        - <a href="https://w3c.github.io/webappsec-mixed-content/" title="Latest editor's draft of Mixed Content">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mike West
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="xml inclusions (xinclude) version 1.1" data-tag="xml" data-status="note" data-version="upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2016/NOTE-xinclude-11-20160721/" title="Latest draft of XML Inclusions (XInclude) Version 1.1 formally approved by the group">XML  Inclusions  (XInclude)  Version&nbsp;1.1</a></h2>
                        <p class=deliverer>XML Core Working Group</p>
                        <p class=pubdetails>2016-07-21 - <a title="XML Inclusions (XInclude) Version 1.1 publication history" href="/standards/history/xinclude-11">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jonathan Marsh
                            <li>David Orchard
                            <li>Daniel Veillard
                            <li>Norman Walsh
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xproc 2.0: standard step library" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2016/NOTE-xproc20-steps-20160721/" title="Latest draft of XProc 2.0: Standard Step Library formally approved by the group">XProc 2.0: Standard Step Library</a></h2>
                        <p class=deliverer>XML Processing Model Working Group</p>
                        <p class=pubdetails>2016-07-21 - <a title="XProc 2.0: Standard Step Library publication history" href="/standards/history/xproc20-steps">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Norman Walsh
                            <li>Alex Milowski
                            <li>Henry Thompson
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="xproc 2.0: an xml pipeline language" data-tag="xml" data-status="note" data-version="upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2016/NOTE-xproc20-20160721/" title="Latest draft of XProc 2.0: An XML Pipeline Language formally approved by the group">XProc 2.0: An XML Pipeline Language</a></h2>
                        <p class=deliverer>XML Processing Model Working Group</p>
                        <p class=pubdetails>2016-07-21 - <a title="XProc 2.0: An XML Pipeline Language publication history" href="/standards/history/xproc20">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Norman Walsh
                            <li>Alex Milowski
                            <li>Henry Thompson
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="frame timing" data-tag="performance webapi" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2016/NOTE-frame-timing-20160720/" title="Latest draft of Frame Timing formally approved by the group">Frame Timing</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2016-07-20 - <a title="Frame Timing publication history" href="/standards/history/frame-timing">History</a>
                        - <a href="https://w3c.github.io/frame-timing/" title="Latest editor's draft of Frame Timing">Editor's Draft</a>
                        </p>
                                    <ul class="taglist">
                            <li class="performance">Performance
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="wai-aria 1.0 authoring practices" data-tag="accessibility" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2016/WD-wai-aria-practices-20160714/" title="Latest draft of WAI-ARIA 1.0 Authoring Practices formally approved by the group">WAI-ARIA 1.0 Authoring Practices</a></h2>
                        <p class=deliverer>Accessible Rich Internet Applications Working Group</p>
                        <p class=pubdetails>2016-07-14 - <a title="WAI-ARIA 1.0 Authoring Practices publication history" href="/standards/history/wai-aria-practices">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Joseph Scheuhammer
                            <li>Michael Cooper
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                          <li data-title="wai-aria 1.0 primer" data-tag="accessibility" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2016/WD-wai-aria-primer-20160714/" title="Latest draft of WAI-ARIA 1.0 Primer formally approved by the group">WAI-ARIA 1.0 Primer</a></h2>
                        <p class=deliverer>Accessible Rich Internet Applications Working Group</p>
                        <p class=pubdetails>2016-07-14 - <a title="WAI-ARIA 1.0 Primer publication history" href="/standards/history/wai-aria-primer">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Lisa Pappas
                            <li>Richard Schwerdtfeger
                            <li>Michael Cooper
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="battery status api" data-tag="webapi" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="http://www.w3.org/TR/2016/CR-battery-status-20160707/" title="Latest draft of Battery Status API formally approved by the group">Battery Status API</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2016-07-07 - <a title="Battery Status API publication history" href="/standards/history/battery-status">History</a>
                        - <a href="https://w3c.github.io/battery/" title="Latest editor's draft of Battery Status API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Anssi Kostiainen
                            <li>Mounir Lamouri
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="subresource integrity" data-tag="security" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2016/REC-SRI-20160623/" title="Latest draft of Subresource Integrity formally approved by the group">Subresource Integrity</a></h2>
                        <p class=deliverer>Web Application Security Working Group</p>
                        <p class=pubdetails>2016-06-23 - <a title="Subresource Integrity publication history" href="/standards/history/SRI">History</a>
                        - <a href="https://w3c.github.io/webappsec-subresource-integrity/" title="Latest editor's draft of Subresource Integrity">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Devdatta Akhawe
                            <li>Frederik Braun
                            <li>Francois Marier
                            <li>Joel Weinberger
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                                                <li data-title="user interface security and the visibility api" data-tag="security" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2016/WD-UISecurity-20160607/" title="Latest draft of User Interface Security and the Visibility API formally approved by the group">User Interface Security and the Visibility API</a></h2>
                        <p class=deliverer>Web Application Security Working Group</p>
                        <p class=pubdetails>2016-06-07 - <a title="User Interface Security and the Visibility API publication history" href="/standards/history/UISecurity">History</a>
                        - <a href="http://w3c.github.io/webappsec-uisecurity/index.html" title="Latest editor's draft of User Interface Security and the Visibility API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Brad Hill
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                          <li data-title="worklets level 1" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2016/WD-worklets-1-20160607/" title="Latest draft of Worklets Level 1 formally approved by the group">Worklets  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=deliverer>Technical Architecture Group</p>
                        <p class=pubdetails>2016-06-07 - <a title="Worklets Level 1 publication history" href="/standards/history/worklets-1">History</a>
                        - <a href="https://drafts.css-houdini.org/worklets/" title="Latest editor's draft of Worklets Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ian Kilpatrick
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                          <li data-title="input method editor api" data-tag="webapi" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2016/NOTE-ime-api-20160524/" title="Latest draft of Input Method Editor API formally approved by the group">Input Method Editor API</a></h2>
                        <p class=deliverer>Web Platform Working Group</p>
                        <p class=pubdetails>2016-05-24 - <a title="Input Method Editor API publication history" href="/standards/history/ime-api">History</a>
                        - <a href="http://w3c.github.io/ime-api/" title="Latest editor's draft of Input Method Editor API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Travis Leithead
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="quota management api" data-tag="webapi" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2016/NOTE-quota-api-20160523/" title="Latest draft of Quota Management API formally approved by the group">Quota Management API</a></h2>
                        <p class=deliverer>Web Platform Working Group</p>
                        <p class=pubdetails>2016-05-23 - <a title="Quota Management API publication history" href="/standards/history/quota-api">History</a>
                        - <a href="http://w3c.github.io/quota-api/" title="Latest editor's draft of Quota Management API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Kinuko Yasuda
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="css positioned layout module level 3" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2016/WD-css-position-3-20160517/" title="Latest draft of CSS Positioned Layout Module Level 3 formally approved by the group">CSS  Positioned  Layout  Module  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2016-05-17 - <a title="CSS Positioned Layout Module Level 3 publication history" href="/standards/history/css-position-3">History</a>
                        - <a href="https://drafts.csswg.org/css-position/" title="Latest editor's draft of CSS Positioned Layout Module Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Rossen Atanassov
                            <li>Arron Eicholz
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="dom parsing and serialization" data-tag="dom" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2016/WD-DOM-Parsing-20160517/" title="Latest draft of DOM Parsing and Serialization formally approved by the group">DOM Parsing and Serialization</a></h2>
                        <p class=deliverer>Web Platform Working Group</p>
                        <p class=pubdetails>2016-05-17 - <a title="DOM Parsing and Serialization publication history" href="/standards/history/DOM-Parsing">History</a>
                        - <a href="https://w3c.github.io/DOM-Parsing/" title="Latest editor's draft of DOM Parsing and Serialization">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Travis Leithead
                          </ul>
                                    <ul class="taglist">
                            <li class="dom">DOM
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="digital publishing and accessibility in w3c documents" data-tag="accessibility" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2016/NOTE-dpub-accessibility-20160503/" title="Latest draft of Digital Publishing and Accessibility in W3C Documents formally approved by the group">Digital Publishing and Accessibility in W3C Documents</a></h2>
                        <p class=deliverer>Digital Publishing Interest Group</p>
                        <p class=pubdetails>2016-05-03 - <a title="Digital Publishing and Accessibility in W3C Documents publication history" href="/standards/history/dpub-accessibility">History</a>
                        - <a href="http://w3c.github.io/dpub-accessibility/" title="Latest editor's draft of Digital Publishing and Accessibility in W3C Documents">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Deborah Kaplan
                            <li>Charles LaPierre
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="web storage (second edition)" data-tag="html webapi" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2016/REC-webstorage-20160419/" title="Latest draft of Web Storage (Second Edition) formally approved by the group">Web Storage (Second Edition)</a></h2>
                        <p class=deliverer>Web Platform Working Group</p>
                        <p class=pubdetails>2016-04-19 - <a title="Web Storage (Second Edition) publication history" href="/standards/history/webstorage">History</a>
                        - <a href="https://w3c.github.io/webstorage/" title="Latest editor's draft of Web Storage (Second Edition)">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ian Hickson
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                <li data-title="cascading style sheets level 2 revision 2 (css 2.2) specification" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2016/WD-CSS22-20160412/" title="Latest draft of Cascading Style Sheets Level 2 Revision 2 (CSS 2.2) Specification formally approved by the group">Cascading Style Sheets Level 2 Revision 2 (CSS 2.2) Specification</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2016-04-12 - <a title="Cascading Style Sheets Level 2 Revision 2 (CSS 2.2) Specification publication history" href="/standards/history/CSS22">History</a>
                        - <a href="https://drafts.csswg.org/css2/" title="Latest editor's draft of Cascading Style Sheets Level 2 Revision 2 (CSS 2.2) Specification">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Bert Bos
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="css device adaptation module level 1" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2016/WD-css-device-adapt-1-20160329/" title="Latest draft of CSS Device Adaptation Module Level 1 formally approved by the group">CSS  Device  Adaptation  Module  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2016-03-29 - <a title="CSS Device Adaptation Module Level 1 publication history" href="/standards/history/css-device-adapt-1">History</a>
                        - <a href="https://drafts.csswg.org/css-device-adapt/" title="Latest editor's draft of CSS Device Adaptation Module Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Rune Lillesveen
                            <li>Florian Rivoal
                            <li>Matt Rakow
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="webcrypto key discovery" data-tag="security" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2016/NOTE-webcrypto-key-discovery-20160329/" title="Latest draft of WebCrypto Key Discovery formally approved by the group">WebCrypto Key Discovery</a></h2>
                        <p class=deliverer>Web Cryptography Working Group</p>
                        <p class=pubdetails>2016-03-29 - <a title="WebCrypto Key Discovery publication history" href="/standards/history/webcrypto-key-discovery">History</a>
                        - <a href="http://dvcs.w3.org/hg/webcrypto-keydiscovery/raw-file/tip/Overview.html" title="Latest editor's draft of WebCrypto Key Discovery">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mark Watson
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="accessibility requirements for people with low vision" data-tag="accessibility" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2016/WD-low-vision-needs-20160317/" title="Latest draft of Accessibility Requirements for People with Low Vision formally approved by the group">Accessibility Requirements for People with Low Vision</a></h2>
                        <p class=deliverer>Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2016-03-17 - <a title="Accessibility Requirements for People with Low Vision publication history" href="/standards/history/low-vision-needs">History</a>
                        - <a href="http://w3c.github.io/low-vision-a11y-tf/requirements.html" title="Latest editor's draft of Accessibility Requirements for People with Low Vision">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jim Allan
                            <li>Andrew Kirkpatrick
                            <li>Shawn Lawton Henry (TAdER)
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                <li data-title="css object model (cssom)" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2016/WD-cssom-1-20160317/" title="Latest draft of CSS Object Model (CSSOM) formally approved by the group">CSS Object Model (CSSOM)</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2016-03-17 - <a title="CSS Object Model (CSSOM) publication history" href="/standards/history/cssom-1">History</a>
                        - <a href="https://drafts.csswg.org/cssom/" title="Latest editor's draft of CSS Object Model (CSSOM)">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Simon Pieters
                            <li>Glenn Adams
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                <li data-title="cssom view module" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2016/WD-cssom-view-1-20160317/" title="Latest draft of CSSOM View Module formally approved by the group">CSSOM View Module</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2016-03-17 - <a title="CSSOM View Module publication history" href="/standards/history/cssom-view-1">History</a>
                        - <a href="https://drafts.csswg.org/cssom-view/" title="Latest editor's draft of CSSOM View Module">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Simon Pieters
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="woff 2.0 evaluation report" data-tag="" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2016/NOTE-WOFF20ER-20160315/" title="Latest draft of WOFF 2.0 Evaluation Report formally approved by the group">WOFF 2.0 Evaluation Report</a></h2>
                        <p class=deliverer>Web Fonts Working Group</p>
                        <p class=pubdetails>2016-03-15 - <a title="WOFF 2.0 Evaluation Report publication history" href="/standards/history/WOFF20ER">History</a>
                        - <a href="http://www.w3.org/Fonts/WG/WOFF2ER/" title="Latest editor's draft of WOFF 2.0 Evaluation Report">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Chris Lilley
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="embedding tabular metadata in html" data-tag="data" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2016/NOTE-csvw-html-20160225/" title="Latest draft of Embedding Tabular Metadata in HTML formally approved by the group">Embedding Tabular Metadata in HTML</a></h2>
                        <p class=deliverer>CSV on the Web Working Group</p>
                        <p class=pubdetails>2016-02-25 - <a title="Embedding Tabular Metadata in HTML publication history" href="/standards/history/csvw-html">History</a>
                        - <a href="http://w3c.github.io/csvw/html-note/" title="Latest editor's draft of Embedding Tabular Metadata in HTML">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Gregg Kellogg
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="csv on the web: use cases and requirements" data-tag="data" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2016/NOTE-csvw-ucr-20160225/" title="Latest draft of CSV on the Web: Use Cases and Requirements formally approved by the group">CSV on the Web: Use Cases and Requirements</a></h2>
                        <p class=deliverer>CSV on the Web Working Group</p>
                        <p class=pubdetails>2016-02-25 - <a title="CSV on the Web: Use Cases and Requirements publication history" href="/standards/history/csvw-ucr">History</a>
                        - <a href="http://w3c.github.io/csvw/use-cases-and-requirements/" title="Latest editor's draft of CSV on the Web: Use Cases and Requirements">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jeremy Tandy
                            <li>Davide Ceolin
                            <li>Eric Stephan
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="csv on the web: a primer" data-tag="data" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2016/NOTE-tabular-data-primer-20160225/" title="Latest draft of CSV on the Web: A Primer formally approved by the group">CSV on the Web: A Primer</a></h2>
                        <p class=deliverer>CSV on the Web Working Group</p>
                        <p class=pubdetails>2016-02-25 - <a title="CSV on the Web: A Primer publication history" href="/standards/history/tabular-data-primer">History</a>
                        - <a href="http://w3c.github.io/csvw/primer/" title="Latest editor's draft of CSV on the Web: A Primer">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jeni Tennison
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="html imports" data-tag="" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2016/WD-html-imports-20160225/" title="Latest draft of HTML Imports formally approved by the group">HTML Imports</a></h2>
                        <p class=deliverer>Web Platform Working Group</p>
                        <p class=pubdetails>2016-02-25 - <a title="HTML Imports publication history" href="/standards/history/html-imports">History</a>
                        - <a href="http://w3c.github.io/webcomponents/spec/imports/" title="Latest editor's draft of HTML Imports">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dimitri Glazkov
                            <li>Hajime Morita
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="requirements for wcag 2.0 extensions" data-tag="accessibility" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2016/WD-wcag2-ext-req-20160105/" title="Latest draft of Requirements for WCAG 2.0 Extensions formally approved by the group">Requirements for WCAG 2.0 Extensions</a></h2>
                        <p class=deliverer>Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2016-01-05 - <a title="Requirements for WCAG 2.0 Extensions publication history" href="/standards/history/wcag2-ext-req">History</a>
                        - <a href="http://w3c.github.io/wcag/wcag20/extensions/requirements.html" title="Latest editor's draft of Requirements for WCAG 2.0 Extensions">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael Cooper
                            <li>Andrew Kirkpatrick
                            <li>Joshue O Connor
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="generating rdf from tabular data on the web" data-tag="data" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2015/REC-csv2rdf-20151217/" title="Latest draft of Generating RDF from Tabular Data on the Web formally approved by the group">Generating RDF from Tabular Data on the Web</a></h2>
                        <p class=deliverer>CSV on the Web Working Group</p>
                        <p class=pubdetails>2015-12-17 - <a title="Generating RDF from Tabular Data on the Web publication history" href="/standards/history/csv2rdf">History</a>
                        - <a href="http://w3c.github.io/csvw/csv2rdf/" title="Latest editor's draft of Generating RDF from Tabular Data on the Web">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jeremy Tandy
                            <li>Ivan Herman
                            <li>Gregg Kellogg
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="model for tabular data and metadata on the web" data-tag="data" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2015/REC-tabular-data-model-20151217/" title="Latest draft of Model for Tabular Data and Metadata on the Web formally approved by the group">Model for Tabular Data and Metadata on the Web</a></h2>
                        <p class=deliverer>CSV on the Web Working Group</p>
                        <p class=pubdetails>2015-12-17 - <a title="Model for Tabular Data and Metadata on the Web publication history" href="/standards/history/tabular-data-model">History</a>
                        - <a href="http://w3c.github.io/csvw/syntax/" title="Latest editor's draft of Model for Tabular Data and Metadata on the Web">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jeni Tennison
                            <li>Gregg Kellogg
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="generating json from tabular data on the web" data-tag="data" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2015/REC-csv2json-20151217/" title="Latest draft of Generating JSON from Tabular Data on the Web formally approved by the group">Generating JSON from Tabular Data on the Web</a></h2>
                        <p class=deliverer>CSV on the Web Working Group</p>
                        <p class=pubdetails>2015-12-17 - <a title="Generating JSON from Tabular Data on the Web publication history" href="/standards/history/csv2json">History</a>
                        - <a href="http://w3c.github.io/csvw/csv2json/" title="Latest editor's draft of Generating JSON from Tabular Data on the Web">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jeremy Tandy
                            <li>Ivan Herman
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="metadata vocabulary for tabular data" data-tag="data" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2015/REC-tabular-metadata-20151217/" title="Latest draft of Metadata Vocabulary for Tabular Data formally approved by the group">Metadata Vocabulary for Tabular Data</a></h2>
                        <p class=deliverer>CSV on the Web Working Group</p>
                        <p class=pubdetails>2015-12-17 - <a title="Metadata Vocabulary for Tabular Data publication history" href="/standards/history/tabular-metadata">History</a>
                        - <a href="http://w3c.github.io/csvw/metadata/" title="Latest editor's draft of Metadata Vocabulary for Tabular Data">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jeni Tennison
                            <li>Gregg Kellogg
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="user agent accessibility guidelines (uaag) 2.0" data-tag="accessibility" data-status="note" data-version="upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2015/NOTE-UAAG20-20151215/" title="Latest draft of User Agent Accessibility Guidelines (UAAG) 2.0 formally approved by the group">User  Agent  Accessibility  Guidelines  (UAAG)&nbsp;2.0</a></h2>
                        <p class=deliverer>User Agent Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2015-12-15 - <a title="User Agent Accessibility Guidelines (UAAG) 2.0 publication history" href="/standards/history/UAAG20">History</a>
                        - <a href="http://www.w3.org/TR/2015/NOTE-UAAG20-20151215/" title="Latest editor's draft of User Agent Accessibility Guidelines (UAAG) 2.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>James Allan
                            <li>Greg Lowney
                            <li>Kimberly Patch
                            <li>Jeanne F Spellman
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="uaag 2.0 reference: explanations, examples, and resources for user agent accessibility guidelines 2.0" data-tag="accessibility" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2015/NOTE-UAAG20-Reference-20151215/" title="Latest draft of UAAG 2.0 Reference: Explanations, Examples, and Resources for User Agent Accessibility Guidelines 2.0 formally approved by the group">UAAG  2.0  Reference:  Explanations,  Examples,  and  Resources  for  User  Agent  Accessibility  Guidelines&nbsp;2.0</a></h2>
                        <p class=deliverer>User Agent Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2015-12-15 - <a title="UAAG 2.0 Reference: Explanations, Examples, and Resources for User Agent Accessibility Guidelines 2.0 publication history" href="/standards/history/UAAG20-Reference">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>James Allan
                            <li>Greg Lowney
                            <li>Kimberly Patch
                            <li>Jeanne F Spellman
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xquery and xpath full text 3.0 requirements and use cases" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2015/NOTE-xpath-full-text-30-requirements-use-cases-20151210/" title="Latest draft of XQuery and XPath Full Text 3.0 Requirements and Use Cases formally approved by the group">XQuery and XPath Full Text 3.0 Requirements and Use Cases</a></h2>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=pubdetails>2015-12-10 - <a title="XQuery and XPath Full Text 3.0 Requirements and Use Cases publication history" href="/standards/history/xpath-full-text-30-requirements-use-cases">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Pat Case
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css custom properties for cascading variables module level 1" data-tag="css" data-status="cr" data-version="latest ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="http://www.w3.org/TR/2015/CR-css-variables-1-20151203/" title="Latest draft of CSS Custom Properties for Cascading Variables Module Level 1 formally approved by the group">CSS  Custom  Properties  for  Cascading  Variables  Module  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2015-12-03 - <a title="CSS Custom Properties for Cascading Variables Module Level 1 publication history" href="/standards/history/css-variables-1">History</a>
                        - <a href="https://drafts.csswg.org/css-variables/" title="Latest editor's draft of CSS Custom Properties for Cascading Variables Module Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tab Atkins Jr.
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="css will change module level 1" data-tag="css" data-status="cr" data-version="latest ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="http://www.w3.org/TR/2015/CR-css-will-change-1-20151203/" title="Latest draft of CSS Will Change Module Level 1 formally approved by the group">CSS  Will  Change  Module  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2015-12-03 - <a title="CSS Will Change Module Level 1 publication history" href="/standards/history/css-will-change-1">History</a>
                        - <a href="https://drafts.csswg.org/css-will-change/" title="Latest editor's draft of CSS Will Change Module Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tab Atkins Jr.
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="media accessibility user requirements" data-tag="accessibility html media" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2015/NOTE-media-accessibility-reqs-20151203/" title="Latest draft of Media Accessibility User Requirements formally approved by the group">Media Accessibility User Requirements</a></h2>
                        <p class=deliverer>Protocols and Formats Working Group</p>
                        <p class=pubdetails>2015-12-03 - <a title="Media Accessibility User Requirements publication history" href="/standards/history/media-accessibility-reqs">History</a>
                        - <a href="http://w3c.github.io/pfwg/media-accessibility-reqs/" title="Latest editor's draft of Media Accessibility User Requirements">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Shane McCarron
                            <li>Michael Cooper
                            <li>Mark Sadecki
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                            <li class="html">HTML
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="xquery and xpath full text 3.0" data-tag="xml" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2015/REC-xpath-full-text-30-20151124/" title="Latest draft of XQuery and XPath Full Text 3.0 formally approved by the group">XQuery  and  XPath  Full  Text&nbsp;3.0</a></h2>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=pubdetails>2015-11-24 - <a title="XQuery and XPath Full Text 3.0 publication history" href="/standards/history/xpath-full-text-30">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mary Holstege
                            <li>Jim Melton
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="html canvas 2d context" data-tag="graphics html" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2015/REC-2dcontext-20151119/" title="Latest draft of HTML Canvas 2D Context formally approved by the group">HTML Canvas 2D Context</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2015-11-19 - <a title="HTML Canvas 2D Context publication history" href="/standards/history/2dcontext">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Rik Cabanier
                            <li>Jatinder Mann
                            <li>Jay Munro
                            <li>Tom Wiltzius
                            <li>Ian Hickson
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="web notifications" data-tag="webapi" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2015/REC-notifications-20151022/" title="Latest draft of Web Notifications formally approved by the group">Web Notifications</a></h2>
                        <p class=deliverer>Web Notification Working Group</p>
                        <p class=pubdetails>2015-10-22 - <a title="Web Notifications publication history" href="/standards/history/notifications">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>John Gregg
                            <li>Anne van Kesteren
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="confinement with origin web labels" data-tag="security" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2015/WD-COWL-20151015/" title="Latest draft of Confinement with Origin Web Labels formally approved by the group">Confinement with Origin Web Labels</a></h2>
                        <p class=deliverer>Web Application Security Working Group</p>
                        <p class=pubdetails>2015-10-15 - <a title="Confinement with Origin Web Labels publication history" href="/standards/history/COWL">History</a>
                        - <a href="https://w3c.github.io/webappsec-cowl/" title="Latest editor's draft of Confinement with Origin Web Labels">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Deian Stefan
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                          <li data-title="css snapshot 2015" data-tag="css" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2015/NOTE-css-2015-20151013/" title="Latest draft of CSS Snapshot 2015 formally approved by the group">CSS Snapshot 2015</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2015-10-13 - <a title="CSS Snapshot 2015 publication history" href="/standards/history/css-2015">History</a>
                        - <a href="https://drafts.csswg.org/css-2015/" title="Latest editor's draft of CSS Snapshot 2015">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tab Atkins Jr.
                            <li>Elika Etemad
                            <li>Florian Rivoal
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="upgrade insecure requests" data-tag="security" data-status="cr" data-version="latest upcoming ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="http://www.w3.org/TR/2015/CR-upgrade-insecure-requests-20151008/" title="Latest draft of Upgrade Insecure Requests formally approved by the group">Upgrade Insecure Requests</a></h2>
                        <p class=deliverer>Web Application Security Working Group</p>
                        <p class=pubdetails>2015-10-08 - <a title="Upgrade Insecure Requests publication history" href="/standards/history/upgrade-insecure-requests">History</a>
                        - <a href="https://w3c.github.io/webappsec-upgrade-insecure-requests/" title="Latest editor's draft of Upgrade Insecure Requests">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mike West
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="a transcript extension for html" data-tag="html" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2015/NOTE-html-transcript-src-20151001/" title="Latest draft of A transcript extension for HTML formally approved by the group">A transcript extension for HTML</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2015-10-01 - <a title="A transcript extension for HTML publication history" href="/standards/history/html-transcript-src">History</a>
                        - <a href="http://w3c.github.io/html-transcript/html-transcript-src.html" title="Latest editor's draft of A transcript extension for HTML">Editor's Draft</a>
                        </p>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="html canvas 2d context, level 2" data-tag="graphics html" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2015/NOTE-2dcontext2-20150929/" title="Latest draft of HTML Canvas 2D Context, Level 2 formally approved by the group">HTML  Canvas  2D  Context,  Level&nbsp;2</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2015-09-29 - <a title="HTML Canvas 2D Context, Level 2 publication history" href="/standards/history/2dcontext2">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Rik Cabanier
                            <li>Jatinder Mann
                            <li>Jay Munro
                            <li>Tom Wiltzius
                            <li>Ian Hickson
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                          <li data-title="polyglot markup: a robust profile of the html5 vocabulary" data-tag="html" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2015/NOTE-html-polyglot-20150929/" title="Latest draft of Polyglot Markup: A robust profile of the HTML5 vocabulary formally approved by the group">Polyglot Markup: A robust profile of the HTML5 vocabulary</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2015-09-29 - <a title="Polyglot Markup: A robust profile of the HTML5 vocabulary publication history" href="/standards/history/html-polyglot">History</a>
                        - <a href="http://dev.w3.org/html5/html-polyglot/html-polyglot.html" title="Latest editor's draft of Polyglot Markup: A robust profile of the HTML5 vocabulary">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Eliot Graff
                            <li>Leif Halvard Silli
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                          <li data-title="w3c html json form submission" data-tag="html" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2015/NOTE-html-json-forms-20150929/" title="Latest draft of W3C HTML JSON form submission formally approved by the group">W3C HTML JSON form submission</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2015-09-29 - <a title="W3C HTML JSON form submission publication history" href="/standards/history/html-json-forms">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Robin Berjon
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                          <li data-title="w3c html form http extensions" data-tag="html" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2015/NOTE-form-http-extensions-20150929/" title="Latest draft of W3C HTML Form HTTP Extensions formally approved by the group">W3C HTML Form HTTP Extensions</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2015-09-29 - <a title="W3C HTML Form HTTP Extensions publication history" href="/standards/history/form-http-extensions">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Cameron Jones
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                          <li data-title="html to platform accessibility apis implementation guide" data-tag="html" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2015/NOTE-html-aapi-20150929/" title="Latest draft of HTML to Platform Accessibility APIs Implementation Guide formally approved by the group">HTML to Platform Accessibility APIs Implementation Guide</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2015-09-29 - <a title="HTML to Platform Accessibility APIs Implementation Guide publication history" href="/standards/history/html-aapi">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steve Faulkner
                            <li>Cynthia Shelly
                            <li>Jason Kiss
                            <li>Alexander Surkov
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="authoring tool accessibility guidelines (atag) 2.0" data-tag="accessibility" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2015/REC-ATAG20-20150924/" title="Latest draft of Authoring Tool Accessibility Guidelines (ATAG) 2.0 formally approved by the group">Authoring  Tool  Accessibility  Guidelines  (ATAG)&nbsp;2.0</a></h2>
                        <p class=deliverer>Authoring Tool Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2015-09-24 - <a title="Authoring Tool Accessibility Guidelines (ATAG) 2.0 publication history" href="/standards/history/ATAG20">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jan Richards
                            <li>Jeanne F Spellman
                            <li>Jutta Treviranus
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                    <li data-title="implementing atag 2.0" data-tag="accessibility" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2015/NOTE-IMPLEMENTING-ATAG20-20150924/" title="Latest draft of Implementing ATAG 2.0 formally approved by the group">Implementing  ATAG&nbsp;2.0</a></h2>
                        <p class=deliverer>Authoring Tool Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2015-09-24 - <a title="Implementing ATAG 2.0 publication history" href="/standards/history/IMPLEMENTING-ATAG20">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jan Richards
                            <li>Jeanne F Spellman
                            <li>Jutta Treviranus
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="web workers" data-tag="webapi" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2015/WD-workers-20150924/" title="Latest draft of Web Workers formally approved by the group">Web Workers</a></h2>
                        <p class=deliverer>(historical) Web Applications Working Group</p>
                        <p class=pubdetails>2015-09-24 - <a title="Web Workers publication history" href="/standards/history/workers">History</a>
                        - <a href="https://html.spec.whatwg.org/multipage/workers.html" title="Latest editor's draft of Web Workers">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ian Hickson
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="timing control for script-based animations" data-tag="performance webapi" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2015/NOTE-animation-timing-20150922/" title="Latest draft of Timing control for script-based animations formally approved by the group">Timing control for script-based animations</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2015-09-22 - <a title="Timing control for script-based animations publication history" href="/standards/history/animation-timing">History</a>
                        - <a href="http://w3c.github.io/animation-timing/" title="Latest editor's draft of Timing control for script-based animations">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>James Robinson
                            <li>Cameron McCormack
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                <li data-title="css page floats" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2015/WD-css-page-floats-3-20150915/" title="Latest draft of CSS Page Floats formally approved by the group">CSS Page Floats</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2015-09-15 - <a title="CSS Page Floats publication history" href="/standards/history/css-page-floats-3">History</a>
                        - <a href="https://drafts.csswg.org/css-page-floats/" title="Latest editor's draft of CSS Page Floats">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Johannes Wilm
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                <li data-title="state chart xml (scxml): state machine notation for control abstraction" data-tag="media" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2015/REC-scxml-20150901/" title="Latest draft of State Chart XML (SCXML): State Machine Notation for Control Abstraction formally approved by the group">State Chart XML (SCXML): State Machine Notation for Control Abstraction</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>2015-09-01 - <a title="State Chart XML (SCXML): State Machine Notation for Control Abstraction publication history" href="/standards/history/scxml">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>James Barnett
                            <li>Rahul Akolkar
                            <li>RJ Auburn
                            <li>Michael Bodell
                            <li>Daniel Burnett
                            <li>Jerry Carter
                            <li>Scott McGlashan
                            <li>Torbjörn Lager
                            <li>Marc Helbing
                            <li>Rafah Hosn
                            <li>T.V. Raman
                            <li>Klaus Reifenrath
                            <li>Noam Rosenthal
                            <li>Johan Roxendal
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="priorities for css from the digital publishing interest group" data-tag="css" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2015/WD-dpub-css-priorities-20150820/" title="Latest draft of Priorities for CSS from the Digital Publishing Interest Group formally approved by the group">Priorities for CSS from the Digital Publishing Interest Group</a></h2>
                        <p class=deliverer>Digital Publishing Interest Group</p>
                        <p class=pubdetails>2015-08-20 - <a title="Priorities for CSS from the Digital Publishing Interest Group publication history" href="/standards/history/dpub-css-priorities">History</a>
                        - <a href="http://w3c.github.io/dpub-pagination/priorities.html" title="Latest editor's draft of Priorities for CSS from the Digital Publishing Interest Group">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dave Cramer
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                          <li data-title="dom event i/o processor for scxml" data-tag="media" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2015/NOTE-scxml-dom-iop-20150811/" title="Latest draft of DOM Event I/O Processor for SCXML formally approved by the group">DOM Event I/O Processor for SCXML</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>2015-08-11 - <a title="DOM Event I/O Processor for SCXML publication history" href="/standards/history/scxml-dom-iop">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>James Barnett
                            <li>Rahul Akolkar
                            <li>RJ Auburn
                            <li>Michael Bodell
                            <li>Daniel Burnett
                            <li>Jerry Carter
                            <li>Scott McGlashan
                            <li>Torbjörn Lager
                            <li>Marc Helbing
                            <li>Rafah Hosn
                            <li>T V Raman
                            <li>Klaus Reifenrath
                            <li>Noam Rosenthal
                            <li>Johan Roxendal
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                          <li data-title="xpath data model for scxml" data-tag="media" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2015/NOTE-scxml-xpath-dm-20150811/" title="Latest draft of XPath Data Model for SCXML formally approved by the group">XPath Data Model for SCXML</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>2015-08-11 - <a title="XPath Data Model for SCXML publication history" href="/standards/history/scxml-xpath-dm">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>James Barnett
                            <li>Rahul Akolkar
                            <li>RJ Auburn
                            <li>Michael Bodell
                            <li>Daniel Burnett
                            <li>Jerry Carter
                            <li>Scott McGlashan
                            <li>Torbjörn Lager
                            <li>Marc Helbing
                            <li>Rafah Hosn
                            <li>T V Raman
                            <li>Klaus Reifenrath
                            <li>Noam Rosenthal
                            <li>Johan Roxendal
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                          <li data-title="runtime and security model for web applications" data-tag="security webapi" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2015/NOTE-runtime-20150806/" title="Latest draft of Runtime and Security Model for Web Applications formally approved by the group">Runtime and Security Model for Web Applications</a></h2>
                        <p class=deliverer>System Applications Working Group</p>
                        <p class=pubdetails>2015-08-06 - <a title="Runtime and Security Model for Web Applications publication history" href="/standards/history/runtime">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mounir Lamouri
                            <li>MING JIN
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="linked data patch format" data-tag="data" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2015/NOTE-ldpatch-20150728/" title="Latest draft of Linked Data Patch Format formally approved by the group">Linked Data Patch Format</a></h2>
                        <p class=deliverer>Linked Data Platform (LDP) Working Group</p>
                        <p class=pubdetails>2015-07-28 - <a title="Linked Data Patch Format publication history" href="/standards/history/ldpatch">History</a>
                        - <a href="https://dvcs.w3.org/hg/ldpwg/raw-file/ldpatch/ldpatch.html" title="Latest editor's draft of Linked Data Patch Format">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Alexandre Bertails
                            <li>Pierre-Antoine Champin
                            <li>Andrei Sambra
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                          <li data-title="task scheduler api specification" data-tag="webapi" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2015/NOTE-task-scheduler-20150723/" title="Latest draft of Task Scheduler API Specification formally approved by the group">Task Scheduler API Specification</a></h2>
                        <p class=deliverer>System Applications Working Group</p>
                        <p class=pubdetails>2015-07-23 - <a title="Task Scheduler API Specification publication history" href="/standards/history/task-scheduler">History</a>
                        - <a href="http://www.w3.org/2012/sysapps/web-alarms/" title="Latest editor's draft of Task Scheduler API Specification">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mahesh Kulkarni
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="xml signature syntax and processing version 2.0" data-tag="xml" data-status="note" data-version="upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2015/NOTE-xmldsig-core2-20150723/" title="Latest draft of XML Signature Syntax and Processing Version 2.0 formally approved by the group">XML  Signature  Syntax  and  Processing  Version&nbsp;2.0</a></h2>
                        <p class=deliverer>XML Security Working Group</p>
                        <p class=pubdetails>2015-07-23 - <a title="XML Signature Syntax and Processing Version 2.0 publication history" href="/standards/history/xmldsig-core2">History</a>
                        - <a href="http://www.w3.org/2008/xmlsec/Drafts/xmldsig-core-20/" title="Latest editor's draft of XML Signature Syntax and Processing Version 2.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Donald Eastlake
                            <li>Joseph Reagle
                            <li>David Solo
                            <li>Frederick Hirsch
                            <li>Thomas Roessler
                            <li>Kelvin Yiu
                            <li>Pratik Datta
                            <li>Scott Cantor
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="tcp and udp socket api" data-tag="webapi" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2015/NOTE-tcp-udp-sockets-20150723/" title="Latest draft of TCP and UDP Socket API formally approved by the group">TCP and UDP Socket API</a></h2>
                        <p class=deliverer>System Applications Working Group</p>
                        <p class=pubdetails>2015-07-23 - <a title="TCP and UDP Socket API publication history" href="/standards/history/tcp-udp-sockets">History</a>
                        - <a href="http://www.w3.org/2012/sysapps/tcp-udp-sockets/" title="Latest editor's draft of TCP and UDP Socket API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Claes Nilsson
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="the app: url scheme" data-tag="webapi" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2015/NOTE-app-uri-20150723/" title="Latest draft of The app: URL Scheme formally approved by the group">The app: URL Scheme</a></h2>
                        <p class=deliverer>System Applications Working Group</p>
                        <p class=pubdetails>2015-07-23 - <a title="The app: URL Scheme publication history" href="/standards/history/app-uri">History</a>
                        - <a href="http://app-uri.sysapps.org/" title="Latest editor's draft of The app: URL Scheme">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Marcos Caceres
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="requirements for hangul text layout and typography 한국어 텍스트 레이아웃 및 타이포그래피를 위한 요구사항" data-tag="css graphics i18n xml" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2015/WD-klreq-20150723/" title="Latest draft of Requirements for Hangul Text Layout and Typography 한국어 텍스트 레이아웃 및 타이포그래피를 위한 요구사항 formally approved by the group">Requirements for Hangul Text Layout and Typography 한국어 텍스트 레이아웃 및 타이포그래피를 위한 요구사항</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2015-07-23 - <a title="Requirements for Hangul Text Layout and Typography 한국어 텍스트 레이아웃 및 타이포그래피를 위한 요구사항 publication history" href="/standards/history/klreq">History</a>
                        - <a href="http://w3c.github.io/klreq/" title="Latest editor's draft of Requirements for Hangul Text Layout and Typography 한국어 텍스트 레이아웃 및 타이포그래피를 위한 요구사항">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                            <li class="graphics">Graphics
                            <li class="i18n">i18n
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="additional requirements for bidi in html &amp; css" data-tag="i18n" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2015/NOTE-html-bidi-20150721/" title="Latest draft of Additional Requirements for Bidi in HTML &amp; CSS formally approved by the group">Additional Requirements for Bidi in HTML & CSS</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2015-07-21 - <a title="Additional Requirements for Bidi in HTML &amp; CSS publication history" href="/standards/history/html-bidi">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Aharon Lanin
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                          <li data-title="permissions for device api access" data-tag="webapi" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2015/NOTE-api-perms-20150714/" title="Latest draft of Permissions for Device API Access formally approved by the group">Permissions for Device API Access</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2015-07-14 - <a title="Permissions for Device API Access publication history" href="/standards/history/api-perms">History</a>
                        - <a href="http://dev.w3.org/2009/dap/api-perms/" title="Latest editor's draft of Permissions for Device API Access">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Paddy Byers
                            <li>Frederick Hirsch
                            <li>Dominique Hazaël-Massieux
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="svg paths" data-tag="graphics" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2015/WD-svg-paths-20150709/" title="Latest draft of SVG Paths formally approved by the group">SVG Paths</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2015-07-09 - <a title="SVG Paths publication history" href="/standards/history/svg-paths">History</a>
                        - <a href="https://svgwg.org/specs/paths/" title="Latest editor's draft of SVG Paths">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Cyril Concolato
                            <li>Cameron McCormack
                            <li>Doug Schepers
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <li data-title="linked data platform paging 1.0" data-tag="data" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2015/NOTE-ldp-paging-20150630/" title="Latest draft of Linked Data Platform Paging 1.0 formally approved by the group">Linked  Data  Platform  Paging&nbsp;1.0</a></h2>
                        <p class=deliverer>Linked Data Platform (LDP) Working Group</p>
                        <p class=pubdetails>2015-06-30 - <a title="Linked Data Platform Paging 1.0 publication history" href="/standards/history/ldp-paging">History</a>
                        - <a href="http://www.w3.org/2012/ldp/hg/ldp-paging.html" title="Latest editor's draft of Linked Data Platform Paging 1.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steve Speicher
                            <li>John Arwe
                            <li>Ashok Malhotra
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                          <li data-title="web nfc api" data-tag="webapi" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2015/NOTE-nfc-20150616/" title="Latest draft of Web NFC API formally approved by the group">Web NFC API</a></h2>
                        <p class=deliverer>Near Field Communications Working Group</p>
                        <p class=pubdetails>2015-06-16 - <a title="Web NFC API publication history" href="/standards/history/nfc">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Luc Yriarte
                            <li>Samuel Ortiz
                            <li>Don Coleman
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="messaging api" data-tag="webapi" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2015/NOTE-messaging-20150602/" title="Latest draft of Messaging API formally approved by the group">Messaging API</a></h2>
                        <p class=deliverer>System Applications Working Group</p>
                        <p class=pubdetails>2015-06-02 - <a title="Messaging API publication history" href="/standards/history/messaging">History</a>
                        - <a href="http://www.w3.org/2012/sysapps/messaging/" title="Latest editor's draft of Messaging API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Eduardo Fullea
                            <li>Jose Manuel Cantera Fonseca
                            <li>Zoltan Kis
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="web telephony api" data-tag="webapi" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2015/NOTE-telephony-20150602/" title="Latest draft of Web Telephony API formally approved by the group">Web Telephony API</a></h2>
                        <p class=deliverer>System Applications Working Group</p>
                        <p class=pubdetails>2015-06-02 - <a title="Web Telephony API publication history" href="/standards/history/telephony">History</a>
                        - <a href="http://www.w3.org/2012/sysapps/telephony/" title="Latest editor's draft of Web Telephony API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Marcos Caceres
                            <li>Jose Manuel Cantera Fonseca
                            <li>Eduardo Fullea
                            <li>Zoltan Kis
                            <li>John Lyle
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="contacts manager api" data-tag="webapi" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2015/NOTE-contacts-manager-api-20150602/" title="Latest draft of Contacts Manager API formally approved by the group">Contacts Manager API</a></h2>
                        <p class=deliverer>System Applications Working Group</p>
                        <p class=pubdetails>2015-06-02 - <a title="Contacts Manager API publication history" href="/standards/history/contacts-manager-api">History</a>
                        - <a href="http://www.w3.org/2012/sysapps/contacts-manager-api/" title="Latest editor's draft of Contacts Manager API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Eduardo Fullea
                            <li>Jose Manuel Cantera Fonseca
                            <li>Christophe Dumez
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="html5: techniques for providing useful text alternatives" data-tag="html" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2015/NOTE-html-alt-techniques-20150521/" title="Latest draft of HTML5: Techniques for providing useful text alternatives formally approved by the group">HTML5: Techniques for providing useful text alternatives</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2015-05-21 - <a title="HTML5: Techniques for providing useful text alternatives publication history" href="/standards/history/html-alt-techniques">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Shane McCarron
                            <li>Liam Quin
                            <li>Steve Faulkner
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="html5 web messaging" data-tag="webapi" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2015/REC-webmessaging-20150519/" title="Latest draft of HTML5 Web Messaging formally approved by the group">HTML5 Web Messaging</a></h2>
                        <p class=deliverer>(historical) Web Applications Working Group</p>
                        <p class=pubdetails>2015-05-19 - <a title="HTML5 Web Messaging publication history" href="/standards/history/webmessaging">History</a>
                        - <a href="http://dev.w3.org/html5/postmsg/" title="Latest editor's draft of HTML5 Web Messaging">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ian Hickson
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                <li data-title="dataset descriptions: hcls community profile" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2015/NOTE-hcls-dataset-20150514/" title="Latest draft of Dataset Descriptions: HCLS Community Profile formally approved by the group">Dataset Descriptions: HCLS Community Profile</a></h2>
                        <p class=deliverer>Semantic Web Health Care and Life Sciences Interest Group</p>
                        <p class=pubdetails>2015-05-14 - <a title="Dataset Descriptions: HCLS Community Profile publication history" href="/standards/history/hcls-dataset">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Alasdair Gray
                            <li>M. Scott Marshall
                            <li>Michel Dumontier
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                        <li data-title="indieui: user context 1.0" data-tag="accessibility" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2015/WD-indie-ui-context-20150430/" title="Latest draft of IndieUI: User Context 1.0 formally approved by the group">IndieUI:  User  Context&nbsp;1.0</a></h2>
                        <p class=deliverer>Independent User Interface (Indie UI) Working Group</p>
                        <p class=pubdetails>2015-04-30 - <a title="IndieUI: User Context 1.0 publication history" href="/standards/history/indie-ui-context">History</a>
                        - <a href="https://w3c.github.io/indie-ui/indie-ui-context.html" title="Latest editor's draft of IndieUI: User Context 1.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>James Craig
                            <li>Michael Cooper
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                <li data-title="indieui: events 1.0" data-tag="accessibility" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2015/WD-indie-ui-events-20150430/" title="Latest draft of IndieUI: Events 1.0 formally approved by the group">IndieUI:  Events&nbsp;1.0</a></h2>
                        <p class=deliverer>Independent User Interface (Indie UI) Working Group</p>
                        <p class=pubdetails>2015-04-30 - <a title="IndieUI: Events 1.0 publication history" href="/standards/history/indie-ui-events">History</a>
                        - <a href="https://w3c.github.io/indie-ui/indie-ui-events.html" title="Latest editor's draft of IndieUI: Events 1.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>James Craig
                            <li>Michael Cooper
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="linked data platform 1.0 primer" data-tag="data" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2015/NOTE-ldp-primer-20150423/" title="Latest draft of Linked Data Platform 1.0 Primer formally approved by the group">Linked Data Platform 1.0 Primer</a></h2>
                        <p class=deliverer>Linked Data Platform (LDP) Working Group</p>
                        <p class=pubdetails>2015-04-23 - <a title="Linked Data Platform 1.0 Primer publication history" href="/standards/history/ldp-primer">History</a>
                        - <a href="http://www.w3.org/2012/ldp/hg/ldp-primer/ldp-primer.html" title="Latest editor's draft of Linked Data Platform 1.0 Primer">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Nandana Mihindukulasooriya
                            <li>Roger Menday
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="language tags and locale identifiers for the world wide web" data-tag="i18n" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2015/WD-ltli-20150423/" title="Latest draft of Language Tags and Locale Identifiers for the World Wide Web formally approved by the group">Language Tags and Locale Identifiers for the World Wide Web</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2015-04-23 - <a title="Language Tags and Locale Identifiers for the World Wide Web publication history" href="/standards/history/ltli">History</a>
                        - <a href="http://w3c.github.io/ltli/" title="Latest editor's draft of Language Tags and Locale Identifiers for the World Wide Web">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Felix Sasaki
                            <li>Addison Phillips
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="svg markers" data-tag="graphics" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2015/WD-svg-markers-20150409/" title="Latest draft of SVG Markers formally approved by the group">SVG Markers</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2015-04-09 - <a title="SVG Markers publication history" href="/standards/history/svg-markers">History</a>
                        - <a href="https://svgwg.org/specs/markers/" title="Latest editor's draft of SVG Markers">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Cameron McCormack
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="svg strokes" data-tag="graphics" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2015/WD-svg-strokes-20150409/" title="Latest draft of SVG Strokes formally approved by the group">SVG Strokes</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2015-04-09 - <a title="SVG Strokes publication history" href="/standards/history/svg-strokes">History</a>
                        - <a href="https://svgwg.org/specs/strokes/" title="Latest editor's draft of SVG Strokes">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Cameron McCormack
                            <li>Dirk Schulze
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                                                <li data-title="css template layout module" data-tag="css" data-status="note" data-version="latest ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2015/NOTE-css-template-3-20150326/" title="Latest draft of CSS Template Layout Module formally approved by the group">CSS Template Layout Module</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2015-03-26 - <a title="CSS Template Layout Module publication history" href="/standards/history/css-template-3">History</a>
                        - <a href="https://drafts.csswg.org/css-template/" title="Latest editor's draft of CSS Template Layout Module">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Bert Bos
                            <li>César Acebal
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                <li data-title="rdfa lite 1.1 - second edition" data-tag="data html" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2015/REC-rdfa-lite-20150317/" title="Latest draft of RDFa Lite 1.1 - Second Edition formally approved by the group">RDFa Lite 1.1 - Second Edition</a></h2>
                        <p class=deliverer>RDFa Working Group</p>
                        <p class=pubdetails>2015-03-17 - <a title="RDFa Lite 1.1 - Second Edition publication history" href="/standards/history/rdfa-lite">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Manu Sporny
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                          <li data-title="public identifiers for entity resolution in xhtml" data-tag="html" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2015/NOTE-xhtml-pubid-20150317/" title="Latest draft of Public Identifiers for entity resolution in XHTML formally approved by the group">Public Identifiers for entity resolution in XHTML</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2015-03-17 - <a title="Public Identifiers for entity resolution in XHTML publication history" href="/standards/history/xhtml-pubid">History</a>
                        - <a href="http://www.w3.org/2003/entities/2007doc/xhtml-pubid.html" title="Latest editor's draft of Public Identifiers for entity resolution in XHTML">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>David Carlisle
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="rdfa 1.1 primer - third edition" data-tag="data html" data-status="note" data-version="latest ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2015/NOTE-rdfa-primer-20150317/" title="Latest draft of RDFa 1.1 Primer - Third Edition formally approved by the group">RDFa 1.1 Primer - Third Edition</a></h2>
                        <p class=deliverer>RDFa Working Group</p>
                        <p class=pubdetails>2015-03-17 - <a title="RDFa 1.1 Primer - Third Edition publication history" href="/standards/history/rdfa-primer">History</a>
                        - <a href="http://www.w3.org/2010/02/rdfa/sources/rdfa-primer/Overview-src.html" title="Latest editor's draft of RDFa 1.1 Primer - Third Edition">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ivan Herman
                            <li>Ben Adida
                            <li>Manu Sporny
                            <li>Mark Birbeck
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                          <li data-title="html+rdfa 1.1 - second edition" data-tag="data html" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2015/REC-html-rdfa-20150317/" title="Latest draft of HTML+RDFa 1.1 - Second Edition formally approved by the group">HTML+RDFa 1.1 - Second Edition</a></h2>
                        <p class=deliverer>RDFa Working Group</p>
                        <p class=pubdetails>2015-03-17 - <a title="HTML+RDFa 1.1 - Second Edition publication history" href="/standards/history/html-rdfa">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Manu Sporny
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xhtml+rdfa 1.1 - third edition" data-tag="data html" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2015/REC-xhtml-rdfa-20150317/" title="Latest draft of XHTML+RDFa 1.1 - Third Edition formally approved by the group">XHTML+RDFa 1.1 - Third Edition</a></h2>
                        <p class=deliverer>RDFa Working Group</p>
                        <p class=pubdetails>2015-03-17 - <a title="XHTML+RDFa 1.1 - Third Edition publication history" href="/standards/history/xhtml-rdfa">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Shane McCarron
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="web midi api" data-tag="media" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2015/WD-webmidi-20150317/" title="Latest draft of Web MIDI API formally approved by the group">Web MIDI API</a></h2>
                        <p class=deliverer>Audio Working Group</p>
                        <p class=pubdetails>2015-03-17 - <a title="Web MIDI API publication history" href="/standards/history/webmidi">History</a>
                        - <a href="http://webaudio.github.io/web-midi-api/" title="Latest editor's draft of Web MIDI API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Chris Wilson
                            <li>Jussi Kalliokoski
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                <li data-title="rdfa core 1.1 - third edition" data-tag="data html" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2015/REC-rdfa-core-20150317/" title="Latest draft of RDFa Core 1.1 - Third Edition formally approved by the group">RDFa Core 1.1 - Third Edition</a></h2>
                        <p class=deliverer>RDFa Working Group</p>
                        <p class=pubdetails>2015-03-17 - <a title="RDFa Core 1.1 - Third Edition publication history" href="/standards/history/rdfa-core">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ben Adida
                            <li>Mark Birbeck
                            <li>Shane McCarron
                            <li>Ivan Herman
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="html5 image description extension (longdesc)" data-tag="html" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2015/REC-html-longdesc-20150226/" title="Latest draft of HTML5 Image Description Extension (longdesc) formally approved by the group">HTML5 Image Description Extension (longdesc)</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2015-02-26 - <a title="HTML5 Image Description Extension (longdesc) publication history" href="/standards/history/html-longdesc">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Charles McCathieNevile
                            <li>Mark Sadecki
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                        <li data-title="linked data platform 1.0" data-tag="data" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2015/REC-ldp-20150226/" title="Latest draft of Linked Data Platform 1.0 formally approved by the group">Linked  Data  Platform&nbsp;1.0</a></h2>
                        <p class=deliverer>Linked Data Platform (LDP) Working Group</p>
                        <p class=pubdetails>2015-02-26 - <a title="Linked Data Platform 1.0 publication history" href="/standards/history/ldp">History</a>
                        - <a href="http://www.w3.org/2012/ldp/hg/ldp.html" title="Latest editor's draft of Linked Data Platform 1.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steve Speicher
                            <li>John Arwe
                            <li>Ashok Malhotra
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="mobile accessibility: how wcag 2.0 and other w3c/wai guidelines apply to mobile" data-tag="accessibility" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2015/WD-mobile-accessibility-mapping-20150226/" title="Latest draft of Mobile Accessibility: How WCAG 2.0 and Other W3C/WAI Guidelines Apply to Mobile formally approved by the group">Mobile Accessibility: How WCAG 2.0 and Other W3C/WAI Guidelines Apply to Mobile</a></h2>
                        <p class=deliverer>Accessibility Guidelines Working Group</p>
                        <p class=deliverer>User Agent Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2015-02-26 - <a title="Mobile Accessibility: How WCAG 2.0 and Other W3C/WAI Guidelines Apply to Mobile publication history" href="/standards/history/mobile-accessibility-mapping">History</a>
                        - <a href="http://w3c.github.io/Mobile-A11y-TF-Note/" title="Latest editor's draft of Mobile Accessibility: How WCAG 2.0 and Other W3C/WAI Guidelines Apply to Mobile">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Kimberly Patch
                            <li>Jeanne F Spellman
                            <li>Kathleen Wahlbin
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="data on the web best practices use cases &amp; requirements" data-tag="data" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2015/NOTE-dwbp-ucr-20150224/" title="Latest draft of Data on the Web Best Practices Use Cases &amp; Requirements formally approved by the group">Data on the Web Best Practices Use Cases & Requirements</a></h2>
                        <p class=deliverer>Data on the Web Best Practices Working Group</p>
                        <p class=pubdetails>2015-02-24 - <a title="Data on the Web Best Practices Use Cases &amp; Requirements publication history" href="/standards/history/dwbp-ucr">History</a>
                        - <a href="http://w3c.github.io/dwbp/usecasesv1.html" title="Latest editor's draft of Data on the Web Best Practices Use Cases &amp; Requirements">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Deirdre Lee
                            <li>Bernadette Farias Loscio
                            <li>Phil Archer
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="content security policy 1.0" data-tag="security" data-status="note" data-version="latest ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2015/NOTE-CSP1-20150219/" title="Latest draft of Content Security Policy 1.0 formally approved by the group">Content  Security  Policy&nbsp;1.0</a></h2>
                        <p class=deliverer>Web Application Security Working Group</p>
                        <p class=pubdetails>2015-02-19 - <a title="Content Security Policy 1.0 publication history" href="/standards/history/CSP1">History</a>
                        - <a href="http://dvcs.w3.org/hg/content-security-policy/raw-file/tip/csp-1.0-specification.html" title="Latest editor's draft of Content Security Policy 1.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Brandon Sterne
                            <li>Adam Barth
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="server-sent events" data-tag="dom http webapi" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2015/REC-eventsource-20150203/" title="Latest draft of Server-Sent Events formally approved by the group">Server-Sent Events</a></h2>
                        <p class=deliverer>(historical) Web Applications Working Group</p>
                        <p class=pubdetails>2015-02-03 - <a title="Server-Sent Events publication history" href="/standards/history/eventsource">History</a>
                        - <a href="http://dev.w3.org/html5/eventsource/" title="Latest editor's draft of Server-Sent Events">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ian Hickson
                          </ul>
                                    <ul class="taglist">
                            <li class="dom">DOM
                            <li class="http">HTTP
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="authoring techniques for xhtml &amp; html internationalization: characters and encodings 1.0" data-tag="html i18n" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2015/NOTE-i18n-html-tech-char-20150127/" title="Latest draft of Authoring Techniques for XHTML &amp; HTML Internationalization: Characters and Encodings 1.0 formally approved by the group">Authoring  Techniques  for  XHTML  &  HTML  Internationalization:  Characters  and  Encodings&nbsp;1.0</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2015-01-27 - <a title="Authoring Techniques for XHTML &amp; HTML Internationalization: Characters and Encodings 1.0 publication history" href="/standards/history/i18n-html-tech-char">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css exclusions module level 1" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2015/WD-css3-exclusions-20150115/" title="Latest draft of CSS Exclusions Module Level 1 formally approved by the group">CSS  Exclusions  Module  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2015-01-15 - <a title="CSS Exclusions Module Level 1 publication history" href="/standards/history/css3-exclusions">History</a>
                        - <a href="https://drafts.csswg.org/css-exclusions/" title="Latest editor's draft of CSS Exclusions Module Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Rossen Atanassov
                            <li>Vincent Hardy
                            <li>Alan Stearns
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="cognitive accessibility user research" data-tag="accessibility" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2015/WD-coga-user-research-20150115/" title="Latest draft of Cognitive Accessibility User Research formally approved by the group">Cognitive Accessibility User Research</a></h2>
                        <p class=deliverer>Accessibility Guidelines Working Group</p>
                        <p class=deliverer>Protocols and Formats Working Group</p>
                        <p class=pubdetails>2015-01-15 - <a title="Cognitive Accessibility User Research publication history" href="/standards/history/coga-user-research">History</a>
                        - <a href="https://w3c.github.io/coga/user-research/" title="Latest editor's draft of Cognitive Accessibility User Research">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Lisa Seeman-Kestenbaum
                            <li>Michael Cooper
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="compositing and blending level 1" data-tag="css graphics" data-status="cr" data-version="latest ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="http://www.w3.org/TR/2015/CR-compositing-1-20150113/" title="Latest draft of Compositing and Blending Level 1 formally approved by the group">Compositing  and  Blending  Level&nbsp;1</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2015-01-13 - <a title="Compositing and Blending Level 1 publication history" href="/standards/history/compositing-1">History</a>
                        - <a href="https://drafts.fxtf.org/compositing-1/" title="Latest editor's draft of Compositing and Blending Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Rik Cabanier
                            <li>Nikos Andronikos
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                                                <li data-title="indexed database api" data-tag="webapi" data-status="rec" data-version="latest ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2015/REC-IndexedDB-20150108/" title="Latest draft of Indexed Database API formally approved by the group">Indexed Database API</a></h2>
                        <p class=deliverer>(historical) Web Applications Working Group</p>
                        <p class=pubdetails>2015-01-08 - <a title="Indexed Database API publication history" href="/standards/history/IndexedDB">History</a>
                        - <a href="http://dvcs.w3.org/hg/IndexedDB/raw-file/tip/Overview.html" title="Latest editor's draft of Indexed Database API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Nikunj Mehta
                            <li>Jonas Sicking
                            <li>Eliot Graff
                            <li>Andrei Popescu
                            <li>Jeremy Orlow
                            <li>Joshua Bell
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="dpub ig metadata task force report" data-tag="" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2015/NOTE-dpub-metadata-20150108/" title="Latest draft of DPUB IG Metadata Task Force Report formally approved by the group">DPUB IG Metadata Task Force Report</a></h2>
                        <p class=deliverer>Digital Publishing Interest Group</p>
                        <p class=pubdetails>2015-01-08 - <a title="DPUB IG Metadata Task Force Report publication history" href="/standards/history/dpub-metadata">History</a>
                        - <a href="http://w3c.github.io/dpub-metadata/" title="Latest editor's draft of DPUB IG Metadata Task Force Report">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Bill Kasdorf
                            <li>Madi Solomon
                            <li>Ivan Herman
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="microdata to rdf – second edition" data-tag="data html" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2014/NOTE-microdata-rdf-20141216/" title="Latest draft of Microdata to RDF – Second Edition formally approved by the group">Microdata to RDF – Second Edition</a></h2>
                        <p class=deliverer>Semantic Web Interest Group</p>
                        <p class=pubdetails>2014-12-16 - <a title="Microdata to RDF – Second Edition publication history" href="/standards/history/microdata-rdf">History</a>
                        - <a href="http://w3c.github.io/microdata-rdf/" title="Latest editor's draft of Microdata to RDF – Second Edition">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Gregg Kellogg
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="html5 differences from html4" data-tag="html" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2014/NOTE-html5-diff-20141209/" title="Latest draft of HTML5 Differences from HTML4 formally approved by the group">HTML5 Differences from HTML4</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2014-12-09 - <a title="HTML5 Differences from HTML4 publication history" href="/standards/history/html5-diff">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Simon Pieters
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="digital publishing annotation use cases" data-tag="" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2014/NOTE-dpub-annotation-uc-20141204/" title="Latest draft of Digital Publishing Annotation Use Cases formally approved by the group">Digital Publishing Annotation Use Cases</a></h2>
                        <p class=deliverer>Digital Publishing Interest Group</p>
                        <p class=pubdetails>2014-12-04 - <a title="Digital Publishing Annotation Use Cases publication history" href="/standards/history/dpub-annotation-uc">History</a>
                        - <a href="http://w3c.github.io/dpub-annotation/" title="Latest editor's draft of Digital Publishing Annotation Use Cases">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Robert Sanderson
                          </ul>
                                  </li>
                                                                                                                          <li data-title="fullscreen" data-tag="css webapi" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2014/NOTE-fullscreen-20141118/" title="Latest draft of Fullscreen formally approved by the group">Fullscreen</a></h2>
                        <p class=deliverer>(historical) Web Applications Working Group</p>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2014-11-18 - <a title="Fullscreen publication history" href="/standards/history/fullscreen">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Anne van Kesteren
                            <li>Tantek Çelik
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="resource priorities" data-tag="performance" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2014/NOTE-resource-priorities-20141023/" title="Latest draft of Resource Priorities formally approved by the group">Resource Priorities</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2014-10-23 - <a title="Resource Priorities publication history" href="/standards/history/resource-priorities">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tobin Titus
                            <li>James Simonsen
                            <li>Jatinder Mann
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="css tv profile 1.0" data-tag="css media" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2014/NOTE-css-tv-20141014/" title="Latest draft of CSS TV Profile 1.0 formally approved by the group">CSS  TV  Profile&nbsp;1.0</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2014-10-14 - <a title="CSS TV Profile 1.0 publication history" href="/standards/history/css-tv">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Sean Hayes
                            <li>Glenn Adams
                            <li>Tantek Çelik
                            <li>Håkon Wium Lie
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                          <li data-title="css presentation levels module" data-tag="css" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2014/NOTE-css3-preslev-20141014/" title="Latest draft of CSS Presentation Levels Module formally approved by the group">CSS Presentation Levels Module</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2014-10-14 - <a title="CSS Presentation Levels Module publication history" href="/standards/history/css3-preslev">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ian Hickson
                            <li>Håkon Wium Lie
                            <li>Bert Bos
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                          <li data-title="the css ‘reader’ media type" data-tag="css" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2014/NOTE-css3-reader-20141014/" title="Latest draft of The CSS ‘Reader’ Media Type formally approved by the group">The CSS ‘Reader’ Media Type</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2014-10-14 - <a title="The CSS ‘Reader’ Media Type publication history" href="/standards/history/css3-reader">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Bert Bos
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                          <li data-title="css3 hyperlink presentation module" data-tag="css" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2014/NOTE-css3-hyperlinks-20141014/" title="Latest draft of CSS3 Hyperlink Presentation Module formally approved by the group">CSS3 Hyperlink Presentation Module</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2014-10-14 - <a title="CSS3 Hyperlink Presentation Module publication history" href="/standards/history/css3-hyperlinks">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Bert Bos
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                          <li data-title="behavioral extensions to css" data-tag="css" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2014/NOTE-becss-20141014/" title="Latest draft of Behavioral Extensions to CSS formally approved by the group">Behavioral Extensions to CSS</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2014-10-14 - <a title="Behavioral Extensions to CSS publication history" href="/standards/history/becss">History</a>
                        - <a href="http://dev.w3.org/2006/xbl2/css-module.html" title="Latest editor's draft of Behavioral Extensions to CSS">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ian Hickson
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="css marquee module level 3" data-tag="css" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2014/NOTE-css3-marquee-20141014/" title="Latest draft of CSS Marquee Module Level 3 formally approved by the group">CSS  Marquee  Module  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2014-10-14 - <a title="CSS Marquee Module Level 3 publication history" href="/standards/history/css3-marquee">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Bert Bos
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="css mobile profile 2.0" data-tag="css" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2014/NOTE-css-mobile-20141014/" title="Latest draft of CSS Mobile Profile 2.0 formally approved by the group">CSS  Mobile  Profile&nbsp;2.0</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2014-10-14 - <a title="CSS Mobile Profile 2.0 publication history" href="/standards/history/css-mobile">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Bert Bos
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css regions module level 1" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2014/WD-css-regions-1-20141009/" title="Latest draft of CSS Regions Module Level 1 formally approved by the group">CSS  Regions  Module  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2014-10-09 - <a title="CSS Regions Module Level 1 publication history" href="/standards/history/css-regions-1">History</a>
                        - <a href="https://drafts.csswg.org/css-regions/" title="Latest editor's draft of CSS Regions Module Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Rossen Atanassov
                            <li>Alan Stearns
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                          <li data-title="uniform messaging policy, level one" data-tag="security" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2014/NOTE-UMP-20141002/" title="Latest draft of Uniform Messaging Policy, Level One formally approved by the group">Uniform Messaging Policy, Level One</a></h2>
                        <p class=deliverer>(historical) Web Applications Working Group</p>
                        <p class=pubdetails>2014-10-02 - <a title="Uniform Messaging Policy, Level One publication history" href="/standards/history/UMP">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tyler Close
                            <li>Mark Miller
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="requirements for latin text layout and pagination" data-tag="" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2014/WD-dpub-latinreq-20140930/" title="Latest draft of Requirements for Latin Text Layout and Pagination formally approved by the group">Requirements for Latin Text Layout and Pagination</a></h2>
                        <p class=deliverer>Digital Publishing Interest Group</p>
                        <p class=pubdetails>2014-09-30 - <a title="Requirements for Latin Text Layout and Pagination publication history" href="/standards/history/dpub-latinreq">History</a>
                        - <a href="http://w3c.github.io/dpub-pagination/" title="Latest editor's draft of Requirements for Latin Text Layout and Pagination">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dave Cramer
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="xquery scripting extension 1.0" data-tag="xml" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2014/NOTE-xquery-sx-10-20140918/" title="Latest draft of XQuery Scripting Extension 1.0 formally approved by the group">XQuery  Scripting  Extension&nbsp;1.0</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=pubdetails>2014-09-18 - <a title="XQuery Scripting Extension 1.0 publication history" href="/standards/history/xquery-sx-10">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>John Snelson
                            <li>Don Chamberlin
                            <li>Daniel Engovatov
                            <li>Dana Florescu
                            <li>Giorgio Ghelli
                            <li>Jim Melton
                            <li>Jerome Simeon
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="css line grid module level 1" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2014/WD-css-line-grid-1-20140916/" title="Latest draft of CSS Line Grid Module Level 1 formally approved by the group">CSS  Line  Grid  Module  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2014-09-16 - <a title="CSS Line Grid Module Level 1 publication history" href="/standards/history/css-line-grid-1">History</a>
                        - <a href="https://drafts.csswg.org/css-line-grid/" title="Latest editor's draft of CSS Line Grid Module Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Elika Etemad
                            <li>Koji Ishii
                            <li>Alan Stearns
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="ldp access control" data-tag="data" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2014/NOTE-ldp-acr-20140916/" title="Latest draft of LDP Access Control formally approved by the group">LDP Access Control</a></h2>
                        <p class=deliverer>Linked Data Platform (LDP) Working Group</p>
                        <p class=pubdetails>2014-09-16 - <a title="LDP Access Control publication history" href="/standards/history/ldp-acr">History</a>
                        - <a href="https://dvcs.w3.org/hg/ldpwg/raw-file/default/ldp-acr.html" title="Latest editor's draft of LDP Access Control">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ashok Malhotra
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="efficient xml interchange (exi) profile for limiting usage of dynamic memory" data-tag="xml" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2014/REC-exi-profile-20140909/" title="Latest draft of Efficient XML Interchange (EXI) Profile for limiting usage of dynamic memory formally approved by the group">Efficient XML Interchange (EXI) Profile for limiting usage of dynamic memory</a></h2>
                        <p class=deliverer>Efficient Extensible Interchange  Working Group</p>
                        <p class=pubdetails>2014-09-09 - <a title="Efficient XML Interchange (EXI) Profile for limiting usage of dynamic memory publication history" href="/standards/history/exi-profile">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Youenn Fablet
                            <li>Daniel Peintner
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="linked data platform best practices and guidelines" data-tag="data" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2014/NOTE-ldp-bp-20140828/" title="Latest draft of Linked Data Platform Best Practices and Guidelines formally approved by the group">Linked Data Platform Best Practices and Guidelines</a></h2>
                        <p class=deliverer>Linked Data Platform (LDP) Working Group</p>
                        <p class=pubdetails>2014-08-28 - <a title="Linked Data Platform Best Practices and Guidelines publication history" href="/standards/history/ldp-bp">History</a>
                        - <a href="https://dvcs.w3.org/hg/ldpwg/raw-file/default/ldp-bp/ldp-bp.html" title="Latest editor's draft of Linked Data Platform Best Practices and Guidelines">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Cody Burleson
                            <li>Miguel Esteban Gutiérrez
                            <li>Nandana Mihindukulasooriya
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css masking module level 1" data-tag="css graphics" data-status="cr" data-version="latest ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="http://www.w3.org/TR/2014/CR-css-masking-1-20140826/" title="Latest draft of CSS Masking Module Level 1 formally approved by the group">CSS  Masking  Module  Level&nbsp;1</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2014-08-26 - <a title="CSS Masking Module Level 1 publication history" href="/standards/history/css-masking-1">History</a>
                        - <a href="https://drafts.fxtf.org/css-masking-1/" title="Latest editor's draft of CSS Masking Module Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dirk Schulze
                            <li>Brian Birtles
                            <li>Tab Atkins Jr.
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                          <li data-title="the srcset attribute" data-tag="html" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2014/NOTE-html-srcset-20140819/" title="Latest draft of The srcset attribute formally approved by the group">The srcset attribute</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2014-08-19 - <a title="The srcset attribute publication history" href="/standards/history/html-srcset">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Theresa O&#039;Connor
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="wake lock: use cases" data-tag="webapi" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2014/NOTE-wake-lock-use-cases-20140814/" title="Latest draft of Wake Lock: Use cases formally approved by the group">Wake Lock: Use cases</a></h2>
                        <p class=deliverer>Web and Mobile Interest Group</p>
                        <p class=pubdetails>2014-08-14 - <a title="Wake Lock: Use cases publication history" href="/standards/history/wake-lock-use-cases">History</a>
                        - <a href="https://w3c-webmob.github.io/wake-lock-use-cases/" title="Latest editor's draft of Wake Lock: Use cases">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Marcos Caceres
                            <li>Natasha Rooney
                            <li>Dominique Hazaël-Massieux
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="css ruby layout module level 1" data-tag="css i18n" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2014/WD-css-ruby-1-20140805/" title="Latest draft of CSS Ruby Layout Module Level 1 formally approved by the group">CSS  Ruby  Layout  Module  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2014-08-05 - <a title="CSS Ruby Layout Module Level 1 publication history" href="/standards/history/css-ruby-1">History</a>
                        - <a href="https://drafts.csswg.org/css-ruby-1/" title="Latest editor's draft of CSS Ruby Layout Module Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Elika Etemad
                            <li>Koji Ishii
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                          <li data-title="introduction to web components" data-tag="" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2014/NOTE-components-intro-20140724/" title="Latest draft of Introduction to Web Components formally approved by the group">Introduction to Web Components</a></h2>
                        <p class=deliverer>(historical) Web Applications Working Group</p>
                        <p class=pubdetails>2014-07-24 - <a title="Introduction to Web Components publication history" href="/standards/history/components-intro">History</a>
                        - <a href="http://w3c.github.io/webcomponents/explainer/" title="Latest editor's draft of Introduction to Web Components">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dimitri Glazkov
                            <li>Hayato Ito
                          </ul>
                                  </li>
                                                                                                                          <li data-title="the picture element" data-tag="html" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2014/NOTE-html-picture-element-20140722/" title="Latest draft of The picture Element formally approved by the group">The picture Element</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2014-07-22 - <a title="The picture Element publication history" href="/standards/history/html-picture-element">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tab Atkins Jr.
                            <li>Simon Pieters
                            <li>Yoav Weiss
                            <li>Marcos Caceres
                            <li>Mathew Marquis
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="website accessibility conformance evaluation methodology (wcag-em) 1.0" data-tag="accessibility" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2014/NOTE-WCAG-EM-20140710/" title="Latest draft of Website Accessibility Conformance Evaluation Methodology (WCAG-EM) 1.0 formally approved by the group">Website  Accessibility  Conformance  Evaluation  Methodology  (WCAG-EM)&nbsp;1.0</a></h2>
                        <p class=deliverer>Evaluation and Repair Tools Working Group</p>
                        <p class=deliverer>Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2014-07-10 - <a title="Website Accessibility Conformance Evaluation Methodology (WCAG-EM) 1.0 publication history" href="/standards/history/WCAG-EM">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Eric Velleman
                            <li>Shadi Abou-Zahra
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                <li data-title="rdf 1.1 primer" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2014/NOTE-rdf11-primer-20140624/" title="Latest draft of RDF 1.1 Primer formally approved by the group">RDF 1.1 Primer</a></h2>
                        <p class=deliverer>RDF Working Group</p>
                        <p class=pubdetails>2014-06-24 - <a title="RDF 1.1 Primer publication history" href="/standards/history/rdf11-primer">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Guus Schreiber
                            <li>Yves Raimond
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="authoring html: language declarations" data-tag="html i18n" data-status="note" data-version="latest ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2014/NOTE-i18n-html-tech-lang-20140603/" title="Latest draft of Authoring HTML: Language declarations formally approved by the group">Authoring HTML: Language declarations</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2014-06-03 - <a title="Authoring HTML: Language declarations publication history" href="/standards/history/i18n-html-tech-lang">History</a>
                        - <a href="http://www.w3.org/International/docs/bp-html-lang/" title="Latest editor's draft of Authoring HTML: Language declarations">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="authoring html: handling right-to-left scripts" data-tag="html i18n" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2014/NOTE-i18n-html-tech-bidi-20140603/" title="Latest draft of Authoring HTML: Handling Right-to-left Scripts formally approved by the group">Authoring HTML: Handling Right-to-left Scripts</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2014-06-03 - <a title="Authoring HTML: Handling Right-to-left Scripts publication history" href="/standards/history/i18n-html-tech-bidi">History</a>
                        - <a href="http://www.w3.org/International/docs/bp-html-bidi/" title="Latest editor's draft of Authoring HTML: Handling Right-to-left Scripts">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="emotion markup language (emotionml) 1.0" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2014/REC-emotionml-20140522/" title="Latest draft of Emotion Markup Language (EmotionML) 1.0 formally approved by the group">Emotion  Markup  Language  (EmotionML)&nbsp;1.0</a></h2>
                        <p class=deliverer>Multimodal Interaction Working Group</p>
                        <p class=pubdetails>2014-05-22 - <a title="Emotion Markup Language (EmotionML) 1.0 publication history" href="/standards/history/emotionml">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Felix Burkhardt
                            <li>Marc Schröder
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="vcard ontology - for describing people and organizations" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2014/NOTE-vcard-rdf-20140522/" title="Latest draft of vCard Ontology - for describing People and Organizations formally approved by the group">vCard Ontology - for describing People and Organizations</a></h2>
                        <p class=deliverer>Semantic Web Interest Group</p>
                        <p class=pubdetails>2014-05-22 - <a title="vCard Ontology - for describing People and Organizations publication history" href="/standards/history/vcard-rdf">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Renato Iannella
                            <li>James McKinney
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="css font loading module level 3" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2014/WD-css-font-loading-3-20140522/" title="Latest draft of CSS Font Loading Module Level 3 formally approved by the group">CSS  Font  Loading  Module  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2014-05-22 - <a title="CSS Font Loading Module Level 3 publication history" href="/standards/history/css-font-loading-3">History</a>
                        - <a href="https://drafts.csswg.org/css-font-loading/" title="Latest editor's draft of CSS Font Loading Module Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tab Atkins Jr.
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                <li data-title="css generated content for paged media module" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2014/WD-css-gcpm-3-20140513/" title="Latest draft of CSS Generated Content for Paged Media Module formally approved by the group">CSS Generated Content for Paged Media Module</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2014-05-13 - <a title="CSS Generated Content for Paged Media Module publication history" href="/standards/history/css-gcpm-3">History</a>
                        - <a href="https://drafts.csswg.org/css-gcpm/" title="Latest editor's draft of CSS Generated Content for Paged Media Module">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dave Cramer
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                          <li data-title="file api: directories and system" data-tag="webapi" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2014/NOTE-file-system-api-20140424/" title="Latest draft of File API: Directories and System formally approved by the group">File API: Directories and System</a></h2>
                        <p class=deliverer>(historical) Web Applications Working Group</p>
                        <p class=pubdetails>2014-04-24 - <a title="File API: Directories and System publication history" href="/standards/history/file-system-api">History</a>
                        - <a href="http://dev.w3.org/2009/dap/file-system/file-dir-sys.html" title="Latest editor's draft of File API: Directories and System">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Eric Uhrhane
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="file api: writer" data-tag="webapi" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2014/NOTE-file-writer-api-20140424/" title="Latest draft of File API: Writer formally approved by the group">File API: Writer</a></h2>
                        <p class=deliverer>(historical) Web Applications Working Group</p>
                        <p class=pubdetails>2014-04-24 - <a title="File API: Writer publication history" href="/standards/history/file-writer-api">History</a>
                        - <a href="http://dev.w3.org/2009/dap/file-system/file-writer.html" title="Latest editor's draft of File API: Writer">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Eric Uhrhane
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                <li data-title="efficient xml interchange (exi) primer" data-tag="xml" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2014/WD-exi-primer-20140424/" title="Latest draft of Efficient XML Interchange (EXI) Primer formally approved by the group">Efficient XML Interchange (EXI) Primer</a></h2>
                        <p class=deliverer>Efficient Extensible Interchange  Working Group</p>
                        <p class=pubdetails>2014-04-24 - <a title="Efficient XML Interchange (EXI) Primer publication history" href="/standards/history/exi-primer">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Daniel Peintner
                            <li>Santiago Pericas-Geertsen
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <li data-title="requirements for indieui: events 1.0 and indieui: user context 1.0" data-tag="accessibility" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2014/WD-indie-ui-requirements-20140422/" title="Latest draft of Requirements for IndieUI: Events 1.0 and IndieUI: User Context 1.0 formally approved by the group">Requirements  for  IndieUI:  Events  1.0  and  IndieUI:  User  Context&nbsp;1.0</a></h2>
                        <p class=deliverer>Independent User Interface (Indie UI) Working Group</p>
                        <p class=pubdetails>2014-04-22 - <a title="Requirements for IndieUI: Events 1.0 and IndieUI: User Context 1.0 publication history" href="/standards/history/indie-ui-requirements">History</a>
                        - <a href="https://dvcs.w3.org/hg/IndieUI/raw-file/default/src/indie-ui-requirements.html" title="Latest editor's draft of Requirements for IndieUI: Events 1.0 and IndieUI: User Context 1.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael Cooper
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="svg integration" data-tag="css graphics html" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2014/WD-svg-integration-20140417/" title="Latest draft of SVG Integration formally approved by the group">SVG Integration</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2014-04-17 - <a title="SVG Integration publication history" href="/standards/history/svg-integration">History</a>
                        - <a href="https://svgwg.org/specs/integration/" title="Latest editor's draft of SVG Integration">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Cameron McCormack
                            <li>Doug Schepers
                            <li>Dirk Schulze
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                            <li class="graphics">Graphics
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xml entity definitions for characters (2nd edition)" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2014/REC-xml-entity-names-20140410/" title="Latest draft of XML Entity Definitions for Characters (2nd Edition) formally approved by the group">XML Entity Definitions for Characters (2nd Edition)</a></h2>
                        <p class=deliverer>Math Working Group</p>
                        <p class=pubdetails>2014-04-10 - <a title="XML Entity Definitions for Characters (2nd Edition) publication history" href="/standards/history/xml-entity-names">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>David Carlisle
                            <li>Patrick D F Ion
                          </ul>
                                  </li>
                                                                                                                          <li data-title="the network information api" data-tag="webapi" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2014/NOTE-netinfo-api-20140410/" title="Latest draft of The Network Information API formally approved by the group">The Network Information API</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2014-04-10 - <a title="The Network Information API publication history" href="/standards/history/netinfo-api">History</a>
                        - <a href="http://dvcs.w3.org/hg/dap/raw-file/tip/network-api/Overview.html" title="Latest editor's draft of The Network Information API">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mounir Lamouri
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                <li data-title="mathematical markup language (mathml) version 3.0 2nd edition" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2014/REC-MathML3-20140410/" title="Latest draft of Mathematical Markup Language (MathML) Version 3.0 2nd Edition formally approved by the group">Mathematical Markup Language (MathML) Version 3.0 2nd Edition</a></h2>
                        <p class=deliverer>Math Working Group</p>
                        <p class=pubdetails>2014-04-10 - <a title="Mathematical Markup Language (MathML) Version 3.0 2nd Edition publication history" href="/standards/history/MathML3">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>David Carlisle
                            <li>Patrick D F Ion
                            <li>Robert R Miner
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="xslt and xquery serialization 3.0" data-tag="xml" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2014/REC-xslt-xquery-serialization-30-20140408/" title="Latest draft of XSLT and XQuery Serialization 3.0 formally approved by the group">XSLT  and  XQuery  Serialization&nbsp;3.0</a></h2>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=pubdetails>2014-04-08 - <a title="XSLT and XQuery Serialization 3.0 publication history" href="/standards/history/xslt-xquery-serialization-30">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Henry Zongaro
                            <li>Andrew Coleman
                            <li>Michael Sperberg-McQueen
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="mbui - task models" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2014/NOTE-task-models-20140408/" title="Latest draft of MBUI - Task Models formally approved by the group">MBUI - Task Models</a></h2>
                        <p class=deliverer>Model-Based User Interfaces Working Group</p>
                        <p class=pubdetails>2014-04-08 - <a title="MBUI - Task Models publication history" href="/standards/history/task-models">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Fabio Paternò
                            <li>Carmen Santoro
                            <li>Spano Lucio Davide
                            <li>Dave Raggett
                          </ul>
                                  </li>
                                                                                                                          <li data-title="xquery 3.0: an xml query language" data-tag="xml" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2014/REC-xquery-30-20140408/" title="Latest draft of XQuery 3.0: An XML Query Language formally approved by the group">XQuery 3.0: An XML Query Language</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=pubdetails>2014-04-08 - <a title="XQuery 3.0: An XML Query Language publication history" href="/standards/history/xquery-30">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jonathan Robie
                            <li>Don Chamberlin
                            <li>Michael Dyck
                            <li>John Snelson
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="mbui - abstract user interface models" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2014/NOTE-abstract-ui-20140408/" title="Latest draft of MBUI - Abstract User Interface Models formally approved by the group">MBUI - Abstract User Interface Models</a></h2>
                        <p class=deliverer>Model-Based User Interfaces Working Group</p>
                        <p class=pubdetails>2014-04-08 - <a title="MBUI - Abstract User Interface Models publication history" href="/standards/history/abstract-ui">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jean Vanderdonckt
                            <li>Ricardo Tesoriero
                            <li>Nesrine Mezhoudi
                            <li>Vivian Genaro Motti
                            <li>François Beuvens
                            <li>Jérémie Melchior
                          </ul>
                                  </li>
                                                                                                                          <li data-title="xquery 3.0 requirements" data-tag="xml" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2014/NOTE-xquery-30-requirements-20140408/" title="Latest draft of XQuery 3.0 Requirements formally approved by the group">XQuery 3.0 Requirements</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=pubdetails>2014-04-08 - <a title="XQuery 3.0 Requirements publication history" href="/standards/history/xquery-30-requirements">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jonathan Robie
                            <li>Daniel Engovatov
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="xquery 3.0 use cases" data-tag="xml" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2014/NOTE-xquery-30-use-cases-20140408/" title="Latest draft of XQuery 3.0 Use Cases formally approved by the group">XQuery 3.0 Use Cases</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=pubdetails>2014-04-08 - <a title="XQuery 3.0 Use Cases publication history" href="/standards/history/xquery-30-use-cases">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jonathan Robie
                            <li>Tim Kraska
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="xquery and xpath data model 3.0" data-tag="xml" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2014/REC-xpath-datamodel-30-20140408/" title="Latest draft of XQuery and XPath Data Model 3.0 formally approved by the group">XQuery  and  XPath  Data  Model&nbsp;3.0</a></h2>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=pubdetails>2014-04-08 - <a title="XQuery and XPath Data Model 3.0 publication history" href="/standards/history/xpath-datamodel-30">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Norman Walsh
                            <li>Anders Berglund
                            <li>John Snelson
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="xpath and xquery functions and operators 3.0" data-tag="xml" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2014/REC-xpath-functions-30-20140408/" title="Latest draft of XPath and XQuery Functions and Operators 3.0 formally approved by the group">XPath  and  XQuery  Functions  and  Operators&nbsp;3.0</a></h2>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=pubdetails>2014-04-08 - <a title="XPath and XQuery Functions and Operators 3.0 publication history" href="/standards/history/xpath-functions-30">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael Kay
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                            <li data-title="xqueryx 3.0" data-tag="xml" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2014/REC-xqueryx-30-20140408/" title="Latest draft of XQueryX 3.0 formally approved by the group">XQueryX&nbsp;3.0</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=pubdetails>2014-04-08 - <a title="XQueryX 3.0 publication history" href="/standards/history/xqueryx-30">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jim Melton
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="xml path language (xpath) 3.0" data-tag="xml" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2014/REC-xpath-30-20140408/" title="Latest draft of XML Path Language (XPath) 3.0 formally approved by the group">XML  Path  Language  (XPath)&nbsp;3.0</a></h2>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=pubdetails>2014-04-08 - <a title="XML Path Language (XPath) 3.0 publication history" href="/standards/history/xpath-30">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jonathan Robie
                            <li>Don Chamberlin
                            <li>Michael Dyck
                            <li>John Snelson
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css scoping module level 1" data-tag="css" data-status="wd" data-version="latest ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2014/WD-css-scoping-1-20140403/" title="Latest draft of CSS Scoping Module Level 1 formally approved by the group">CSS  Scoping  Module  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2014-04-03 - <a title="CSS Scoping Module Level 1 publication history" href="/standards/history/css-scoping-1">History</a>
                        - <a href="https://drafts.csswg.org/css-scoping/" title="Latest editor's draft of CSS Scoping Module Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tab Atkins Jr.
                            <li>Elika Etemad
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="review of apps that use network information" data-tag="webapi" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2014/NOTE-netinfo-usecases-20140403/" title="Latest draft of Review of apps that use network information formally approved by the group">Review of apps that use network information</a></h2>
                        <p class=deliverer>Web and Mobile Interest Group</p>
                        <p class=pubdetails>2014-04-03 - <a title="Review of apps that use network information publication history" href="/standards/history/netinfo-usecases">History</a>
                        - <a href="http://w3c-webmob.github.io/netinfo-usecases/" title="Latest editor's draft of Review of apps that use network information">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Marcos Caceres
                            <li>Fernando Jiménez Moreno
                            <li>Ernesto Jimenez
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                <li data-title="vocabularies for emotionml" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2014/NOTE-emotion-voc-20140401/" title="Latest draft of Vocabularies for EmotionML formally approved by the group">Vocabularies for EmotionML</a></h2>
                        <p class=deliverer>Multimodal Interaction Working Group</p>
                        <p class=pubdetails>2014-04-01 - <a title="Vocabularies for EmotionML publication history" href="/standards/history/emotion-voc">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Felix Burkhardt
                            <li>Marc Schröder
                            <li>Catherine Pelachaud
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css shapes module level 1" data-tag="css" data-status="cr" data-version="latest ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="http://www.w3.org/TR/2014/CR-css-shapes-1-20140320/" title="Latest draft of CSS Shapes Module Level 1 formally approved by the group">CSS  Shapes  Module  Level&nbsp;1</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2014-03-20 - <a title="CSS Shapes Module Level 1 publication history" href="/standards/history/css-shapes-1">History</a>
                        - <a href="https://drafts.csswg.org/css-shapes/" title="Latest editor's draft of CSS Shapes Module Level 1">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Vincent Hardy
                            <li>Rossen Atanassov
                            <li>Alan Stearns
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="css namespaces module level 3" data-tag="css" data-status="rec" data-version="latest ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2014/REC-css-namespaces-3-20140320/" title="Latest draft of CSS Namespaces Module Level 3 formally approved by the group">CSS  Namespaces  Module  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2014-03-20 - <a title="CSS Namespaces Module Level 3 publication history" href="/standards/history/css-namespaces-3">History</a>
                        - <a href="https://drafts.csswg.org/css-namespaces/" title="Latest editor's draft of CSS Namespaces Module Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Elika Etemad
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                          <li data-title="wai-aria 1.0 user agent implementation guide" data-tag="accessibility" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2014/REC-wai-aria-implementation-20140320/" title="Latest draft of WAI-ARIA 1.0 User Agent Implementation Guide formally approved by the group">WAI-ARIA 1.0 User Agent Implementation Guide</a></h2>
                        <p class=deliverer>Protocols and Formats Working Group</p>
                        <p class=pubdetails>2014-03-20 - <a title="WAI-ARIA 1.0 User Agent Implementation Guide publication history" href="/standards/history/wai-aria-implementation">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Joseph Scheuhammer
                            <li>Michael Cooper
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="accessible rich internet applications (wai-aria) 1.0" data-tag="accessibility" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2014/REC-wai-aria-20140320/" title="Latest draft of Accessible Rich Internet Applications (WAI-ARIA) 1.0 formally approved by the group">Accessible  Rich  Internet  Applications  (WAI-ARIA)&nbsp;1.0</a></h2>
                        <p class=deliverer>Protocols and Formats Working Group</p>
                        <p class=pubdetails>2014-03-20 - <a title="Accessible Rich Internet Applications (WAI-ARIA) 1.0 publication history" href="/standards/history/wai-aria">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>James Craig
                            <li>Michael Cooper
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="html templates" data-tag="" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2014/NOTE-html-templates-20140318/" title="Latest draft of HTML Templates formally approved by the group">HTML Templates</a></h2>
                        <p class=deliverer>(historical) Web Applications Working Group</p>
                        <p class=pubdetails>2014-03-18 - <a title="HTML Templates publication history" href="/standards/history/html-templates">History</a>
                        - <a href="https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/templates/index.html" title="Latest editor's draft of HTML Templates">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dimitri Glazkov
                            <li>Rafael Weinstein
                            <li>Tony Ross
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="linked data platform use cases and requirements" data-tag="data" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2014/NOTE-ldp-ucr-20140313/" title="Latest draft of Linked Data Platform Use Cases and Requirements formally approved by the group">Linked Data Platform Use Cases and Requirements</a></h2>
                        <p class=deliverer>Linked Data Platform (LDP) Working Group</p>
                        <p class=pubdetails>2014-03-13 - <a title="Linked Data Platform Use Cases and Requirements publication history" href="/standards/history/ldp-ucr">History</a>
                        - <a href="http://www.w3.org/2012/ldp/hg/ldp-ucr.html" title="Latest editor's draft of Linked Data Platform Use Cases and Requirements">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steve Battle
                            <li>Steve Speicher
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="metadata api for media resources 1.0" data-tag="media webapi" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2014/REC-mediaont-api-1.0-20140313/" title="Latest draft of Metadata API for Media Resources 1.0 formally approved by the group">Metadata  API  for  Media  Resources&nbsp;1.0</a></h2>
                        <p class=deliverer>Media Annotations Working Group</p>
                        <p class=pubdetails>2014-03-13 - <a title="Metadata API for Media Resources 1.0 publication history" href="/standards/history/mediaont-api-1.0">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Florian Stegmaier
                            <li>Werner Bailer
                            <li>Martin Höffernig
                            <li>WonSuk Lee
                            <li>Chris Poppe
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                <li data-title="rdf 1.1 semantics" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2014/REC-rdf11-mt-20140225/" title="Latest draft of RDF 1.1 Semantics formally approved by the group">RDF 1.1 Semantics</a></h2>
                        <p class=deliverer>RDF Working Group</p>
                        <p class=pubdetails>2014-02-25 - <a title="RDF 1.1 Semantics publication history" href="/standards/history/rdf11-mt">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Patrick Hayes
                            <li>Peter Patel-Schneider
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="rdf 1.1 turtle" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2014/REC-turtle-20140225/" title="Latest draft of RDF 1.1 Turtle formally approved by the group">RDF 1.1 Turtle</a></h2>
                        <p class=deliverer>RDF Working Group</p>
                        <p class=pubdetails>2014-02-25 - <a title="RDF 1.1 Turtle publication history" href="/standards/history/turtle">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Eric Prud&#039;hommeaux
                            <li>Gavin Carothers
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="what’s new in rdf 1.1" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2014/NOTE-rdf11-new-20140225/" title="Latest draft of What’s New in RDF 1.1 formally approved by the group">What’s  New  in  RDF&nbsp;1.1</a></h2>
                        <p class=deliverer>RDF Working Group</p>
                        <p class=pubdetails>2014-02-25 - <a title="What’s New in RDF 1.1 publication history" href="/standards/history/rdf11-new">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>David Wood
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="rdf 1.1 trig" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2014/REC-trig-20140225/" title="Latest draft of RDF 1.1 TriG formally approved by the group">RDF 1.1 TriG</a></h2>
                        <p class=deliverer>RDF Working Group</p>
                        <p class=pubdetails>2014-02-25 - <a title="RDF 1.1 TriG publication history" href="/standards/history/trig">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Gavin Carothers
                            <li>Andy Seaborne
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="rdf 1.1 xml syntax" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2014/REC-rdf-syntax-grammar-20140225/" title="Latest draft of RDF 1.1 XML Syntax formally approved by the group">RDF 1.1 XML Syntax</a></h2>
                        <p class=deliverer>RDF Working Group</p>
                        <p class=pubdetails>2014-02-25 - <a title="RDF 1.1 XML Syntax publication history" href="/standards/history/rdf-syntax-grammar">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Fabien Gandon
                            <li>Guus Schreiber
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="rdf 1.1 test cases" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2014/NOTE-rdf11-testcases-20140225/" title="Latest draft of RDF 1.1 Test Cases formally approved by the group">RDF 1.1 Test Cases</a></h2>
                        <p class=deliverer>RDF Working Group</p>
                        <p class=pubdetails>2014-02-25 - <a title="RDF 1.1 Test Cases publication history" href="/standards/history/rdf11-testcases">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Gregg Kellogg
                            <li>Markus Lanthaler
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                          <li data-title="rdf schema 1.1" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2014/REC-rdf-schema-20140225/" title="Latest draft of RDF Schema 1.1 formally approved by the group">RDF  Schema&nbsp;1.1</a></h2>
                        <p class=deliverer>RDF Working Group</p>
                        <p class=pubdetails>2014-02-25 - <a title="RDF Schema 1.1 publication history" href="/standards/history/rdf-schema">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dan Brickley
                            <li>Ramanathan Guha
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="rdf 1.1 concepts and abstract syntax" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2014/REC-rdf11-concepts-20140225/" title="Latest draft of RDF 1.1 Concepts and Abstract Syntax formally approved by the group">RDF 1.1 Concepts and Abstract Syntax</a></h2>
                        <p class=deliverer>RDF Working Group</p>
                        <p class=pubdetails>2014-02-25 - <a title="RDF 1.1 Concepts and Abstract Syntax publication history" href="/standards/history/rdf11-concepts">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Richard Cyganiak
                            <li>David Wood
                            <li>Markus Lanthaler
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="rdf 1.1 n-quads" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2014/REC-n-quads-20140225/" title="Latest draft of RDF 1.1 N-Quads formally approved by the group">RDF 1.1 N-Quads</a></h2>
                        <p class=deliverer>RDF Working Group</p>
                        <p class=pubdetails>2014-02-25 - <a title="RDF 1.1 N-Quads publication history" href="/standards/history/n-quads">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Gavin Carothers
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="rdf 1.1: on semantics of rdf datasets" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2014/NOTE-rdf11-datasets-20140225/" title="Latest draft of RDF 1.1: On Semantics of RDF Datasets formally approved by the group">RDF 1.1: On Semantics of RDF Datasets</a></h2>
                        <p class=deliverer>RDF Working Group</p>
                        <p class=pubdetails>2014-02-25 - <a title="RDF 1.1: On Semantics of RDF Datasets publication history" href="/standards/history/rdf11-datasets">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Antoine Zimmermann
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="rdf 1.1 n-triples" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2014/REC-n-triples-20140225/" title="Latest draft of RDF 1.1 N-Triples formally approved by the group">RDF 1.1 N-Triples</a></h2>
                        <p class=deliverer>RDF Working Group</p>
                        <p class=pubdetails>2014-02-25 - <a title="RDF 1.1 N-Triples publication history" href="/standards/history/n-triples">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Gavin Carothers
                            <li>Andy Seaborne
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="good practices for capability urls" data-tag="" data-status="wd" data-version="latest upcoming ed">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2014/WD-capability-urls-20140218/" title="Latest draft of Good Practices for Capability URLs formally approved by the group">Good Practices for Capability URLs</a></h2>
                        <p class=deliverer>Technical Architecture Group</p>
                        <p class=pubdetails>2014-02-18 - <a title="Good Practices for Capability URLs publication history" href="/standards/history/capability-urls">History</a>
                        - <a href="http://w3ctag.github.io/capability-urls/" title="Latest editor's draft of Good Practices for Capability URLs">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jeni Tennison
                          </ul>
                                  </li>
                                                                                                                                                                      <li data-title="progress events" data-tag="dom webapi" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2014/REC-progress-events-20140211/" title="Latest draft of Progress Events formally approved by the group">Progress Events</a></h2>
                        <p class=deliverer>(historical) Web Applications Working Group</p>
                        <p class=pubdetails>2014-02-11 - <a title="Progress Events publication history" href="/standards/history/progress-events">History</a>
                        - <a href="http://dvcs.w3.org/hg/progress/raw-file/tip/Overview.html" title="Latest editor's draft of Progress Events">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Anne van Kesteren
                            <li>Charles &#039;chaals&#039; (McCathie) Nevile
                            <li>Jungkee Song
                          </ul>
                                    <ul class="taglist">
                            <li class="dom">DOM
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                <li data-title="efficient xml interchange (exi) format 1.0 (second edition)" data-tag="xml" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2014/REC-exi-20140211/" title="Latest draft of Efficient XML Interchange (EXI) Format 1.0 (Second Edition) formally approved by the group">Efficient XML Interchange (EXI) Format 1.0 (Second Edition)</a></h2>
                        <p class=deliverer>Efficient Extensible Interchange  Working Group</p>
                        <p class=pubdetails>2014-02-11 - <a title="Efficient XML Interchange (EXI) Format 1.0 (Second Edition) publication history" href="/standards/history/exi">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>John Schneider
                            <li>Takuki Kamiya
                            <li>Daniel Peintner
                            <li>Rumen Kyusakov
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xml processor profiles" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2014/NOTE-xml-proc-profiles-20140206/" title="Latest draft of XML processor profiles formally approved by the group">XML processor profiles</a></h2>
                        <p class=deliverer>XML Processing Model Working Group</p>
                        <p class=pubdetails>2014-02-06 - <a title="XML processor profiles publication history" href="/standards/history/xml-proc-profiles">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Henry Thompson
                            <li>Norman Walsh
                            <li>James Fuller
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="w3c html ruby markup extensions" data-tag="html" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2014/NOTE-html-ruby-extensions-20140204/" title="Latest draft of W3C HTML Ruby Markup Extensions formally approved by the group">W3C HTML Ruby Markup Extensions</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2014-02-04 - <a title="W3C HTML Ruby Markup Extensions publication history" href="/standards/history/html-ruby-extensions">History</a>
                        - <a href="http://darobin.github.com/html-ruby/" title="Latest editor's draft of W3C HTML Ruby Markup Extensions">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Robin Berjon
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                      <li data-title="json-ld 1.0" data-tag="data" data-status="rec" data-version="">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2014/REC-json-ld-20140116/" title="Latest draft of JSON-LD 1.0 formally approved by the group">JSON-LD&nbsp;1.0</a></h2>
                        <p class=deliverer>RDF Working Group</p>
                        <p class=pubdetails>2014-01-16 - <a title="JSON-LD 1.0 publication history" href="/standards/history/json-ld">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Manu Sporny
                            <li>Gregg Kellogg
                            <li>Markus Lanthaler
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                    <li data-title="json-ld 1.0 processing algorithms and api" data-tag="data webapi" data-status="rec" data-version="">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2014/REC-json-ld-api-20140116/" title="Latest draft of JSON-LD 1.0 Processing Algorithms and API formally approved by the group">JSON-LD 1.0 Processing Algorithms and API</a></h2>
                        <p class=deliverer>RDF Working Group</p>
                        <p class=pubdetails>2014-01-16 - <a title="JSON-LD 1.0 Processing Algorithms and API publication history" href="/standards/history/json-ld-api">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Markus Lanthaler
                            <li>Gregg Kellogg
                            <li>Manu Sporny
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                <li data-title="cross-origin resource sharing" data-tag="security" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2014/REC-cors-20140116/" title="Latest draft of Cross-Origin Resource Sharing formally approved by the group">Cross-Origin Resource Sharing</a></h2>
                        <p class=deliverer>(historical) Web Applications Working Group</p>
                        <p class=deliverer>Web Application Security Working Group</p>
                        <p class=pubdetails>2014-01-16 - <a title="Cross-Origin Resource Sharing publication history" href="/standards/history/cors">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Anne van Kesteren
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                                                <li data-title="the rdf data cube vocabulary" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2014/REC-vocab-data-cube-20140116/" title="Latest draft of The RDF Data Cube Vocabulary formally approved by the group">The RDF Data Cube Vocabulary</a></h2>
                        <p class=deliverer>Government Linked Data Working Group</p>
                        <p class=pubdetails>2014-01-16 - <a title="The RDF Data Cube Vocabulary publication history" href="/standards/history/vocab-data-cube">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Richard Cyganiak
                            <li>Dave Reynolds
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="the organization ontology" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2014/REC-vocab-org-20140116/" title="Latest draft of The Organization Ontology formally approved by the group">The Organization Ontology</a></h2>
                        <p class=deliverer>Government Linked Data Working Group</p>
                        <p class=pubdetails>2014-01-16 - <a title="The Organization Ontology publication history" href="/standards/history/vocab-org">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dave Reynolds
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                          <li data-title="calendar api" data-tag="webapi" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2014/NOTE-calendar-api-20140114/" title="Latest draft of Calendar API formally approved by the group">Calendar API</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2014-01-14 - <a title="Calendar API publication history" href="/standards/history/calendar-api">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Richard Tibbett
                            <li>Suresh Chitturi
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="pick media intent" data-tag="webapi" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2014/NOTE-gallery-20140114/" title="Latest draft of Pick Media Intent formally approved by the group">Pick Media Intent</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2014-01-14 - <a title="Pick Media Intent publication history" href="/standards/history/gallery">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jungkee Song
                            <li>WonSuk Lee
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="web intents addendum - local services" data-tag="webapi" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2014/NOTE-webintents-local-services-20140114/" title="Latest draft of Web Intents Addendum - Local Services formally approved by the group">Web Intents Addendum - Local Services</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2014-01-14 - <a title="Web Intents Addendum - Local Services publication history" href="/standards/history/webintents-local-services">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Claes Nilsson
                            <li>Norifumi Kikkawa
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="the system information api" data-tag="webapi" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2014/NOTE-system-info-api-20140114/" title="Latest draft of The System Information API formally approved by the group">The System Information API</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2014-01-14 - <a title="The System Information API publication history" href="/standards/history/system-info-api">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Max Froumentin
                            <li>Dzung Tran
                            <li>Bryan Sullivan
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="pick contacts intent" data-tag="webapi" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2014/NOTE-contacts-api-20140114/" title="Latest draft of Pick Contacts Intent formally approved by the group">Pick Contacts Intent</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2014-01-14 - <a title="Pick Contacts Intent publication history" href="/standards/history/contacts-api">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Richard Tibbett
                            <li>Robin Berjon
                            <li>Jungkee Song
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="the messaging api" data-tag="webapi" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2014/NOTE-messaging-api-20140114/" title="Latest draft of The Messaging API formally approved by the group">The Messaging API</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2014-01-14 - <a title="The Messaging API publication history" href="/standards/history/messaging-api">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dominique Hazaël-Massieux
                            <li>Suresh Chitturi
                            <li>Max Froumentin
                            <li>Maria Angeles Oteo
                            <li>Niklas Widell
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                <li data-title="best practices for publishing linked data" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2014/NOTE-ld-bp-20140109/" title="Latest draft of Best Practices for Publishing Linked Data formally approved by the group">Best Practices for Publishing Linked Data</a></h2>
                        <p class=deliverer>Government Linked Data Working Group</p>
                        <p class=pubdetails>2014-01-09 - <a title="Best Practices for Publishing Linked Data publication history" href="/standards/history/ld-bp">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Bernadette Hyland
                            <li>Ghislain Auguste Atemezing
                            <li>Boris Villazón-Terrazas
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="introduction to model-based user interfaces" data-tag="" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2014/NOTE-mbui-intro-20140107/" title="Latest draft of Introduction to Model-Based User Interfaces formally approved by the group">Introduction to Model-Based User Interfaces</a></h2>
                        <p class=deliverer>Model-Based User Interfaces Working Group</p>
                        <p class=pubdetails>2014-01-07 - <a title="Introduction to Model-Based User Interfaces publication history" href="/standards/history/mbui-intro">History</a>
                        - <a href="http://www.w3.org/2011/mbui/drafts/mbui-intro/" title="Latest editor's draft of Introduction to Model-Based User Interfaces">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Gerrit Meixner
                            <li>Gaelle Calvary
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="mbui - glossary" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2014/NOTE-mbui-glossary-20140107/" title="Latest draft of MBUI - Glossary formally approved by the group">MBUI - Glossary</a></h2>
                        <p class=deliverer>Model-Based User Interfaces Working Group</p>
                        <p class=pubdetails>2014-01-07 - <a title="MBUI - Glossary publication history" href="/standards/history/mbui-glossary">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jaroslav Pullmann
                          </ul>
                                  </li>
                                                                                                                          <li data-title="performance timeline" data-tag="performance webapi" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2013/REC-performance-timeline-20131212/" title="Latest draft of Performance Timeline formally approved by the group">Performance Timeline</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2013-12-12 - <a title="Performance Timeline publication history" href="/standards/history/performance-timeline">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jatinder Mann
                            <li>Zhiheng Wang
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                <li data-title="rdf 1.1 json alternate serialization (rdf/json)" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2013/NOTE-rdf-json-20131107/" title="Latest draft of RDF 1.1 JSON Alternate Serialization (RDF/JSON) formally approved by the group">RDF 1.1 JSON Alternate Serialization (RDF/JSON)</a></h2>
                        <p class=deliverer>RDF Working Group</p>
                        <p class=pubdetails>2013-11-07 - <a title="RDF 1.1 JSON Alternate Serialization (RDF/JSON) publication history" href="/standards/history/rdf-json">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ian Davis
                            <li>Thomas Steiner
                            <li>Arnaud Le Hors
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="css style attributes" data-tag="css html" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2013/REC-css-style-attr-20131107/" title="Latest draft of CSS Style Attributes formally approved by the group">CSS Style Attributes</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2013-11-07 - <a title="CSS Style Attributes publication history" href="/standards/history/css-style-attr">History</a>
                        - <a href="https://drafts.csswg.org/css-style-attr/" title="Latest editor's draft of CSS Style Attributes">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tantek Çelik
                            <li>Elika Etemad
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="use cases and requirements for standardizing responsive images" data-tag="html" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2013/NOTE-respimg-usecases-20131107/" title="Latest draft of Use Cases and Requirements for Standardizing Responsive Images formally approved by the group">Use Cases and Requirements for Standardizing Responsive Images</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2013-11-07 - <a title="Use Cases and Requirements for Standardizing Responsive Images publication history" href="/standards/history/respimg-usecases">History</a>
                        - <a href="http://usecases.responsiveimages.org" title="Latest editor's draft of Use Cases and Requirements for Standardizing Responsive Images">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Marcos Caceres
                            <li>Mathew Marquis
                            <li>Yoav Weiss
                            <li>David Newton
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xproc v2.0 requirements" data-tag="xml" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2013/WD-xproc-v2-req-20131105/" title="Latest draft of XProc V2.0 Requirements formally approved by the group">XProc V2.0 Requirements</a></h2>
                        <p class=deliverer>XML Processing Model Working Group</p>
                        <p class=pubdetails>2013-11-05 - <a title="XProc V2.0 Requirements publication history" href="/standards/history/xproc-v2-req">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Alex Milowski
                            <li>James Fuller
                            <li>Norman Walsh
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="touch events extensions" data-tag="dom webapi" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2013/NOTE-touch-events-extensions-20131031/" title="Latest draft of Touch Events Extensions formally approved by the group">Touch Events Extensions</a></h2>
                        <p class=deliverer>Web Events Working Group</p>
                        <p class=pubdetails>2013-10-31 - <a title="Touch Events Extensions publication history" href="/standards/history/touch-events-extensions">History</a>
                        - <a href="http://dvcs.w3.org/hg/webevents/raw-file/default/touchevents.html" title="Latest editor's draft of Touch Events Extensions">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Doug Schepers
                            <li>Sangwhan Moon
                            <li>Matt Brubeck
                          </ul>
                                    <ul class="taglist">
                            <li class="dom">DOM
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="internationalization tag set (its) version 2.0" data-tag="data html i18n" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2013/REC-its20-20131029/" title="Latest draft of Internationalization Tag Set (ITS) Version 2.0 formally approved by the group">Internationalization  Tag  Set  (ITS)  Version&nbsp;2.0</a></h2>
                        <p class=deliverer>MultilingualWeb-LT Working Group</p>
                        <p class=pubdetails>2013-10-29 - <a title="Internationalization Tag Set (ITS) Version 2.0 publication history" href="/standards/history/its20">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>David Filip
                            <li>Shaun McCance
                            <li>David Lewis
                            <li>Christian Lieske
                            <li>Arle Lommel
                            <li>Jirka Kosek
                            <li>Felix Sasaki
                            <li>Yves Savourel
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                            <li class="html">HTML
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                          <li data-title="page visibility (second edition)" data-tag="performance webapi" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2013/REC-page-visibility-20131029/" title="Latest draft of Page Visibility (Second Edition) formally approved by the group">Page Visibility (Second Edition)</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2013-10-29 - <a title="Page Visibility (Second Edition) publication history" href="/standards/history/page-visibility">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jatinder Mann
                            <li>Arvind Jain
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="selectors api level 2" data-tag="css webapi" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2013/NOTE-selectors-api2-20131017/" title="Latest draft of Selectors API Level 2 formally approved by the group">Selectors  API  Level&nbsp;2</a></h2>
                        <p class=deliverer>(historical) Web Applications Working Group</p>
                        <p class=pubdetails>2013-10-17 - <a title="Selectors API Level 2 publication history" href="/standards/history/selectors-api2">History</a>
                        - <a href="http://dev.w3.org/2006/webapi/selectors-api2/" title="Latest editor's draft of Selectors API Level 2">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Lachlan Hunt
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="touch events" data-tag="webapi" data-status="rec" data-version="latest upcoming ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2013/REC-touch-events-20131010/" title="Latest draft of Touch Events formally approved by the group">Touch Events</a></h2>
                        <p class=deliverer>Web Events Working Group</p>
                        <p class=pubdetails>2013-10-10 - <a title="Touch Events publication history" href="/standards/history/touch-events">History</a>
                        - <a href="https://w3c.github.io/touch-events/" title="Latest editor's draft of Touch Events">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Doug Schepers
                            <li>Sangwhan Moon
                            <li>Matt Brubeck
                            <li>Arthur Barstow
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="use cases &amp; exploratory approaches for ruby markup" data-tag="html i18n" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2013/NOTE-ruby-use-cases-20131008/" title="Latest draft of Use Cases &amp; Exploratory Approaches for Ruby Markup formally approved by the group">Use Cases & Exploratory Approaches for Ruby Markup</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2013-10-08 - <a title="Use Cases &amp; Exploratory Approaches for Ruby Markup publication history" href="/standards/history/ruby-use-cases">History</a>
                        - <a href="http://www.w3.org/International/docs/ruby/" title="Latest editor's draft of Use Cases &amp; Exploratory Approaches for Ruby Markup">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="web cryptography api use cases" data-tag="security" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2013/NOTE-webcrypto-usecases-20130910/" title="Latest draft of Web Cryptography API Use Cases formally approved by the group">Web Cryptography API Use Cases</a></h2>
                        <p class=deliverer>Web Cryptography Working Group</p>
                        <p class=pubdetails>2013-09-10 - <a title="Web Cryptography API Use Cases publication history" href="/standards/history/webcrypto-usecases">History</a>
                        - <a href="https://dvcs.w3.org/hg/webcrypto-usecases/raw-file/tip/Overview.html" title="Latest editor's draft of Web Cryptography API Use Cases">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Arun Ranganathan
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                                                                      <li data-title="guidance on applying wcag 2.0 to non-web information and communications technologies (wcag2ict)" data-tag="accessibility" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2013/NOTE-wcag2ict-20130905/" title="Latest draft of Guidance on Applying WCAG 2.0 to Non-Web Information and Communications Technologies (WCAG2ICT) formally approved by the group">Guidance on Applying WCAG 2.0 to Non-Web Information and Communications Technologies (WCAG2ICT)</a></h2>
                        <p class=deliverer>Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2013-09-05 - <a title="Guidance on Applying WCAG 2.0 to Non-Web Information and Communications Technologies (WCAG2ICT) publication history" href="/standards/history/wcag2ict">History</a>
                        - <a href="http://www.w3.org/WAI/GL/wcag2ict/" title="Latest editor's draft of Guidance on Applying WCAG 2.0 to Non-Web Information and Communications Technologies (WCAG2ICT)">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael Cooper
                            <li>Peter Korn
                            <li>Andi Snow-Weaver
                            <li>Gregg Vanderheiden
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                <li data-title="use cases and lessons for the data cube vocabulary" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2013/NOTE-vocab-data-cube-use-cases-20130801/" title="Latest draft of Use Cases and Lessons for the Data Cube Vocabulary formally approved by the group">Use Cases and Lessons for the Data Cube Vocabulary</a></h2>
                        <p class=deliverer>Government Linked Data Working Group</p>
                        <p class=pubdetails>2013-08-01 - <a title="Use Cases and Lessons for the Data Cube Vocabulary publication history" href="/standards/history/vocab-data-cube-use-cases">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Benedikt Kaempgen
                            <li>Richard Cyganiak
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="registered organization vocabulary" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2013/NOTE-vocab-regorg-20130801/" title="Latest draft of Registered Organization Vocabulary formally approved by the group">Registered Organization Vocabulary</a></h2>
                        <p class=deliverer>Government Linked Data Working Group</p>
                        <p class=pubdetails>2013-08-01 - <a title="Registered Organization Vocabulary publication history" href="/standards/history/vocab-regorg">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Phil Archer
                            <li>Marios Meimaris
                            <li>Agis Papantoniou
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="asset description metadata schema (adms)" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2013/NOTE-vocab-adms-20130801/" title="Latest draft of Asset Description Metadata Schema (ADMS) formally approved by the group">Asset Description Metadata Schema (ADMS)</a></h2>
                        <p class=deliverer>Government Linked Data Working Group</p>
                        <p class=pubdetails>2013-08-01 - <a title="Asset Description Metadata Schema (ADMS) publication history" href="/standards/history/vocab-adms">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Phil Archer
                            <li>Gofran Shukair
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="emma: extensible multimodal annotation markup language version 1.1" data-tag="" data-status="wd" data-version="latest">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2013/WD-emma11-20130627/" title="Latest draft of EMMA: Extensible MultiModal Annotation markup language Version 1.1 formally approved by the group">EMMA:  Extensible  MultiModal  Annotation  markup  language  Version&nbsp;1.1</a></h2>
                        <p class=deliverer>Multimodal Interaction Working Group</p>
                        <p class=pubdetails>2013-06-27 - <a title="EMMA: Extensible MultiModal Annotation markup language Version 1.1 publication history" href="/standards/history/emma11">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael Johnston
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="linked data glossary" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2013/NOTE-ld-glossary-20130627/" title="Latest draft of Linked Data Glossary formally approved by the group">Linked Data Glossary</a></h2>
                        <p class=deliverer>Government Linked Data Working Group</p>
                        <p class=pubdetails>2013-06-27 - <a title="Linked Data Glossary publication history" href="/standards/history/ld-glossary">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Bernadette Hyland
                            <li>Ghislain Auguste Atemezing
                            <li>Michael Pendleton
                            <li>Biplav Srivastava
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <li data-title="test cases for canonical xml 2.0" data-tag="xml" data-status="note" data-version="latest upcoming ed">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2013/NOTE-xml-c14n2-testcases-20130618/" title="Latest draft of Test cases for Canonical XML 2.0 formally approved by the group">Test  cases  for  Canonical  XML&nbsp;2.0</a></h2>
                        <p class=deliverer>XML Security Working Group</p>
                        <p class=pubdetails>2013-06-18 - <a title="Test cases for Canonical XML 2.0 publication history" href="/standards/history/xml-c14n2-testcases">History</a>
                        - <a href="http://www.w3.org/2008/xmlsec/Drafts/c14n-20/test-cases/" title="Latest editor's draft of Test cases for Canonical XML 2.0">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Pratik Datta
                            <li>Frederick Hirsch
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="widget updates" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2013/NOTE-widgets-updates-20130606/" title="Latest draft of Widget Updates formally approved by the group">Widget Updates</a></h2>
                        <p class=deliverer>(historical) Web Applications Working Group</p>
                        <p class=pubdetails>2013-06-06 - <a title="Widget Updates publication history" href="/standards/history/widgets-updates">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Marcos Caceres
                            <li>Richard Tibbett
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="urls in data primer" data-tag="" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2013/WD-urls-in-data-20130604/" title="Latest draft of URLs in Data Primer formally approved by the group">URLs in Data Primer</a></h2>
                        <p class=deliverer>Technical Architecture Group</p>
                        <p class=pubdetails>2013-06-04 - <a title="URLs in Data Primer publication history" href="/standards/history/urls-in-data">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jeni Tennison
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="main element - an html5 extension specification" data-tag="html" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2013/NOTE-html-main-element-20130528/" title="Latest draft of main element - an HTML5 extension specification formally approved by the group">main element - an HTML5 extension specification</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2013-05-28 - <a title="main element - an HTML5 extension specification publication history" href="/standards/history/html-main-element">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steve Faulkner
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="html: the markup language (an html language reference)" data-tag="html" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2013/NOTE-html-markup-20130528/" title="Latest draft of HTML: The Markup Language (an HTML language reference) formally approved by the group">HTML: The Markup Language (an HTML language reference)</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2013-05-28 - <a title="HTML: The Markup Language (an HTML language reference) publication history" href="/standards/history/html-markup">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael[tm] Smith
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="html5: edition for web authors" data-tag="html" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2013/NOTE-html5-author-20130528/" title="Latest draft of HTML5: Edition for Web Authors formally approved by the group">HTML5: Edition for Web Authors</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2013-05-28 - <a title="HTML5: Edition for Web Authors publication history" href="/standards/history/html5-author">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Robin Berjon
                            <li>Travis Leithead
                            <li>Silvia Pfeiffer
                            <li>Erika Doyle Navara
                            <li>Theresa O&#039;Connor
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                          <li data-title="web intents" data-tag="webapi" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2013/NOTE-web-intents-20130523/" title="Latest draft of Web Intents formally approved by the group">Web Intents</a></h2>
                        <p class=deliverer>(historical) Web Applications Working Group</p>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2013-05-23 - <a title="Web Intents publication history" href="/standards/history/web-intents">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Greg Billock
                            <li>James Hawkins
                            <li>Paul Kinlan
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                <li data-title="java language binding for web idl" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2013/NOTE-WebIDL-Java-20130514/" title="Latest draft of Java language binding for Web IDL formally approved by the group">Java language binding for Web IDL</a></h2>
                        <p class=deliverer>(historical) Web Applications Working Group</p>
                        <p class=pubdetails>2013-05-14 - <a title="Java language binding for Web IDL publication history" href="/standards/history/WebIDL-Java">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Cameron McCormack
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="semantics of the prov data model" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2013/NOTE-prov-sem-20130430/" title="Latest draft of Semantics of the PROV Data Model formally approved by the group">Semantics of the PROV Data Model</a></h2>
                        <p class=deliverer>Provenance Working Group</p>
                        <p class=pubdetails>2013-04-30 - <a title="Semantics of the PROV Data Model publication history" href="/standards/history/prov-sem">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>James Cheney
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="prov implementation report" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2013/NOTE-prov-implementations-20130430/" title="Latest draft of PROV Implementation Report formally approved by the group">PROV Implementation Report</a></h2>
                        <p class=deliverer>Provenance Working Group</p>
                        <p class=pubdetails>2013-04-30 - <a title="PROV Implementation Report publication history" href="/standards/history/prov-implementations">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Trung Dong Huynh
                            <li>Paul Groth
                            <li>Stephan Zednik
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="prov-xml: the prov xml schema" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2013/NOTE-prov-xml-20130430/" title="Latest draft of PROV-XML: The PROV XML Schema formally approved by the group">PROV-XML: The PROV XML Schema</a></h2>
                        <p class=deliverer>Provenance Working Group</p>
                        <p class=pubdetails>2013-04-30 - <a title="PROV-XML: The PROV XML Schema publication history" href="/standards/history/prov-xml">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Hook Hua
                            <li>Curt Tilmes
                            <li>Stephan Zednik
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="linking across provenance bundles" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2013/NOTE-prov-links-20130430/" title="Latest draft of Linking Across Provenance Bundles formally approved by the group">Linking Across Provenance Bundles</a></h2>
                        <p class=deliverer>Provenance Working Group</p>
                        <p class=pubdetails>2013-04-30 - <a title="Linking Across Provenance Bundles publication history" href="/standards/history/prov-links">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Luc Moreau
                            <li>Timothy Lebo
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="prov-aq: provenance access and query" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2013/NOTE-prov-aq-20130430/" title="Latest draft of PROV-AQ: Provenance Access and Query formally approved by the group">PROV-AQ: Provenance Access and Query</a></h2>
                        <p class=deliverer>Provenance Working Group</p>
                        <p class=pubdetails>2013-04-30 - <a title="PROV-AQ: Provenance Access and Query publication history" href="/standards/history/prov-aq">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Graham Klyne
                            <li>Paul Groth
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="prov-n: the provenance notation" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2013/REC-prov-n-20130430/" title="Latest draft of PROV-N: The Provenance Notation formally approved by the group">PROV-N: The Provenance Notation</a></h2>
                        <p class=deliverer>Provenance Working Group</p>
                        <p class=pubdetails>2013-04-30 - <a title="PROV-N: The Provenance Notation publication history" href="/standards/history/prov-n">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Luc Moreau
                            <li>Paolo Missier
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="constraints of the prov data model" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2013/REC-prov-constraints-20130430/" title="Latest draft of Constraints of the PROV Data Model formally approved by the group">Constraints of the PROV Data Model</a></h2>
                        <p class=deliverer>Provenance Working Group</p>
                        <p class=pubdetails>2013-04-30 - <a title="Constraints of the PROV Data Model publication history" href="/standards/history/prov-constraints">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>James Cheney
                            <li>Paolo Missier
                            <li>Luc Moreau
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="prov-o: the prov ontology" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2013/REC-prov-o-20130430/" title="Latest draft of PROV-O: The PROV Ontology formally approved by the group">PROV-O: The PROV Ontology</a></h2>
                        <p class=deliverer>Provenance Working Group</p>
                        <p class=pubdetails>2013-04-30 - <a title="PROV-O: The PROV Ontology publication history" href="/standards/history/prov-o">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Timothy Lebo
                            <li>Satya Sahoo
                            <li>Deborah McGuinness
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="dublin core to prov mapping" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2013/NOTE-prov-dc-20130430/" title="Latest draft of Dublin Core to PROV Mapping formally approved by the group">Dublin Core to PROV Mapping</a></h2>
                        <p class=deliverer>Provenance Working Group</p>
                        <p class=pubdetails>2013-04-30 - <a title="Dublin Core to PROV Mapping publication history" href="/standards/history/prov-dc">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Daniel Garijo
                            <li>Kai Eckert
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="prov-overview" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2013/NOTE-prov-overview-20130430/" title="Latest draft of PROV-Overview formally approved by the group">PROV-Overview</a></h2>
                        <p class=deliverer>Provenance Working Group</p>
                        <p class=pubdetails>2013-04-30 - <a title="PROV-Overview publication history" href="/standards/history/prov-overview">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Paul Groth
                            <li>Luc Moreau
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="publishing and linking on the web" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2013/NOTE-publishing-linking-20130430/" title="Latest draft of Publishing and Linking on the Web formally approved by the group">Publishing and Linking on the Web</a></h2>
                        <p class=deliverer>Technical Architecture Group</p>
                        <p class=pubdetails>2013-04-30 - <a title="Publishing and Linking on the Web publication history" href="/standards/history/publishing-linking">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ashok Malhotra
                            <li>Larry Masinter
                            <li>Jeni Tennison
                            <li>Daniel Appelquist
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="prov-dictionary: modeling provenance for dictionary data structures" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2013/NOTE-prov-dictionary-20130430/" title="Latest draft of PROV-Dictionary: Modeling Provenance for Dictionary Data Structures formally approved by the group">PROV-Dictionary: Modeling Provenance for Dictionary Data Structures</a></h2>
                        <p class=deliverer>Provenance Working Group</p>
                        <p class=pubdetails>2013-04-30 - <a title="PROV-Dictionary: Modeling Provenance for Dictionary Data Structures publication history" href="/standards/history/prov-dictionary">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tom De Nies
                            <li>Sam Coppens
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="prov model primer" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2013/NOTE-prov-primer-20130430/" title="Latest draft of PROV Model Primer formally approved by the group">PROV Model Primer</a></h2>
                        <p class=deliverer>Provenance Working Group</p>
                        <p class=pubdetails>2013-04-30 - <a title="PROV Model Primer publication history" href="/standards/history/prov-primer">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Yolanda Gil
                            <li>Simon Miles
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="prov-dm: the prov data model" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2013/REC-prov-dm-20130430/" title="Latest draft of PROV-DM: The PROV Data Model formally approved by the group">PROV-DM: The PROV Data Model</a></h2>
                        <p class=deliverer>Provenance Working Group</p>
                        <p class=pubdetails>2013-04-30 - <a title="PROV-DM: The PROV Data Model publication history" href="/standards/history/prov-dm">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Luc Moreau
                            <li>Paolo Missier
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="xml signature streaming profile of xpath 1.0" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2013/NOTE-xmldsig-xpath-20130411/" title="Latest draft of XML Signature Streaming Profile of XPath 1.0 formally approved by the group">XML  Signature  Streaming  Profile  of  XPath&nbsp;1.0</a></h2>
                        <p class=deliverer>XML Security Working Group</p>
                        <p class=pubdetails>2013-04-11 - <a title="XML Signature Streaming Profile of XPath 1.0 publication history" href="/standards/history/xmldsig-xpath">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Pratik Datta
                            <li>Frederick Hirsch
                            <li>Meiko Jensen
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="xml encryption 1.1 cipherreference processing using 2.0 transforms" data-tag="xml" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2013/NOTE-xmlenc-transform20-20130411/" title="Latest draft of XML Encryption 1.1 CipherReference Processing using 2.0 Transforms formally approved by the group">XML Encryption 1.1 CipherReference Processing using 2.0 Transforms</a></h2>
                        <p class=deliverer>XML Security Working Group</p>
                        <p class=pubdetails>2013-04-11 - <a title="XML Encryption 1.1 CipherReference Processing using 2.0 Transforms publication history" href="/standards/history/xmlenc-transform20">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Frederick Hirsch
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xml security 2.0 requirements and design considerations" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2013/NOTE-xmlsec-reqs2-20130411/" title="Latest draft of XML Security 2.0 Requirements and Design Considerations formally approved by the group">XML Security 2.0 Requirements and Design Considerations</a></h2>
                        <p class=deliverer>XML Security Working Group</p>
                        <p class=pubdetails>2013-04-11 - <a title="XML Security 2.0 Requirements and Design Considerations publication history" href="/standards/history/xmlsec-reqs2">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Frederick Hirsch
                            <li>Pratik Datta
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xml security relax ng schemas" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2013/NOTE-xmlsec-rngschema-20130411/" title="Latest draft of XML Security RELAX NG Schemas formally approved by the group">XML Security RELAX NG Schemas</a></h2>
                        <p class=deliverer>XML Security Working Group</p>
                        <p class=pubdetails>2013-04-11 - <a title="XML Security RELAX NG Schemas publication history" href="/standards/history/xmlsec-rngschema">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Murata Makoto
                            <li>Frederick Hirsch
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="xml encryption syntax and processing version 1.1" data-tag="xml" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2013/REC-xmlenc-core1-20130411/" title="Latest draft of XML Encryption Syntax and Processing Version 1.1 formally approved by the group">XML  Encryption  Syntax  and  Processing  Version&nbsp;1.1</a></h2>
                        <p class=deliverer>XML Security Working Group</p>
                        <p class=pubdetails>2013-04-11 - <a title="XML Encryption Syntax and Processing Version 1.1 publication history" href="/standards/history/xmlenc-core1">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Donald Eastlake
                            <li>Joseph Reagle
                            <li>Frederick Hirsch
                            <li>Thomas Roessler
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="functional explanation of changes in xml encryption 1.1" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2013/NOTE-xmlenc-core1-explain-20130411/" title="Latest draft of Functional Explanation of Changes in XML Encryption 1.1 formally approved by the group">Functional  Explanation  of  Changes  in  XML  Encryption&nbsp;1.1</a></h2>
                        <p class=deliverer>XML Security Working Group</p>
                        <p class=pubdetails>2013-04-11 - <a title="Functional Explanation of Changes in XML Encryption 1.1 publication history" href="/standards/history/xmlenc-core1-explain">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Frederick Hirsch
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xml security algorithm cross-reference" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2013/NOTE-xmlsec-algorithms-20130411/" title="Latest draft of XML Security Algorithm Cross-Reference formally approved by the group">XML Security Algorithm Cross-Reference</a></h2>
                        <p class=deliverer>XML Security Working Group</p>
                        <p class=pubdetails>2013-04-11 - <a title="XML Security Algorithm Cross-Reference publication history" href="/standards/history/xmlsec-algorithms">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Frederick Hirsch
                            <li>Thomas Roessler
                            <li>Kelvin Yiu
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xml signature properties" data-tag="xml" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2013/REC-xmldsig-properties-20130411/" title="Latest draft of XML Signature Properties formally approved by the group">XML Signature Properties</a></h2>
                        <p class=deliverer>XML Security Working Group</p>
                        <p class=pubdetails>2013-04-11 - <a title="XML Signature Properties publication history" href="/standards/history/xmldsig-properties">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Frederick Hirsch
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xml signature best practices" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2013/NOTE-xmldsig-bestpractices-20130411/" title="Latest draft of XML Signature Best Practices formally approved by the group">XML Signature Best Practices</a></h2>
                        <p class=deliverer>XML Security Working Group</p>
                        <p class=pubdetails>2013-04-11 - <a title="XML Signature Best Practices publication history" href="/standards/history/xmldsig-bestpractices">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Frederick Hirsch
                            <li>Pratik Datta
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="canonical xml version 2.0" data-tag="xml" data-status="note" data-version="upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2013/NOTE-xml-c14n2-20130411/" title="Latest draft of Canonical XML Version 2.0 formally approved by the group">Canonical  XML  Version&nbsp;2.0</a></h2>
                        <p class=deliverer>XML Security Working Group</p>
                        <p class=pubdetails>2013-04-11 - <a title="Canonical XML Version 2.0 publication history" href="/standards/history/xml-c14n2">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>John Boyer
                            <li>Glenn Marcy
                            <li>Pratik Datta
                            <li>Frederick Hirsch
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="xml signature syntax and processing version 1.1" data-tag="xml" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2013/REC-xmldsig-core1-20130411/" title="Latest draft of XML Signature Syntax and Processing Version 1.1 formally approved by the group">XML  Signature  Syntax  and  Processing  Version&nbsp;1.1</a></h2>
                        <p class=deliverer>XML Security Working Group</p>
                        <p class=pubdetails>2013-04-11 - <a title="XML Signature Syntax and Processing Version 1.1 publication history" href="/standards/history/xmldsig-core1">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Donald Eastlake
                            <li>Joseph Reagle
                            <li>David Solo
                            <li>Frederick Hirsch
                            <li>Magnus Nyström
                            <li>Thomas Roessler
                            <li>Kelvin Yiu
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xml security generic hybrid ciphers" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2013/NOTE-xmlsec-generic-hybrid-20130411/" title="Latest draft of XML Security Generic Hybrid Ciphers formally approved by the group">XML Security Generic Hybrid Ciphers</a></h2>
                        <p class=deliverer>XML Security Working Group</p>
                        <p class=pubdetails>2013-04-11 - <a title="XML Security Generic Hybrid Ciphers publication history" href="/standards/history/xmlsec-generic-hybrid">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Magnus Nyström
                            <li>Frederick Hirsch
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="functional explanation of changes in xml signature 1.1" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2013/NOTE-xmldsig-core1-explain-20130411/" title="Latest draft of Functional Explanation of Changes in XML Signature 1.1 formally approved by the group">Functional  Explanation  of  Changes  in  XML  Signature&nbsp;1.1</a></h2>
                        <p class=deliverer>XML Security Working Group</p>
                        <p class=pubdetails>2013-04-11 - <a title="Functional Explanation of Changes in XML Signature 1.1 publication history" href="/standards/history/xmldsig-core1-explain">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Frederick Hirsch
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="xml security 1.1 requirements and design considerations" data-tag="xml" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2013/NOTE-xmlsec-reqs-20130411/" title="Latest draft of XML Security 1.1 Requirements and Design Considerations formally approved by the group">XML Security 1.1 Requirements and Design Considerations</a></h2>
                        <p class=deliverer>XML Security Working Group</p>
                        <p class=pubdetails>2013-04-11 - <a title="XML Security 1.1 Requirements and Design Considerations publication history" href="/standards/history/xmlsec-reqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Frederick Hirsch
                            <li>Thomas Roessler
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="css conditional rules module level 3" data-tag="css" data-status="cr" data-version="latest ed">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="http://www.w3.org/TR/2013/CR-css3-conditional-20130404/" title="Latest draft of CSS Conditional Rules Module Level 3 formally approved by the group">CSS  Conditional  Rules  Module  Level&nbsp;3</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2013-04-04 - <a title="CSS Conditional Rules Module Level 3 publication history" href="/standards/history/css3-conditional">History</a>
                        - <a href="https://drafts.csswg.org/css-conditional-3/" title="Latest editor's draft of CSS Conditional Rules Module Level 3">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>David Baron
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                          <li data-title="role attribute 1.0" data-tag="accessibility" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2013/REC-role-attribute-20130328/" title="Latest draft of Role Attribute 1.0 formally approved by the group">Role  Attribute&nbsp;1.0</a></h2>
                        <p class=deliverer>Protocols and Formats Working Group</p>
                        <p class=pubdetails>2013-03-28 - <a title="Role Attribute 1.0 publication history" href="/standards/history/role-attribute">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Shane McCarron
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                <li data-title="sparql 1.1 service description" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2013/REC-sparql11-service-description-20130321/" title="Latest draft of SPARQL 1.1 Service Description formally approved by the group">SPARQL 1.1 Service Description</a></h2>
                        <p class=deliverer>SPARQL Working Group</p>
                        <p class=pubdetails>2013-03-21 - <a title="SPARQL 1.1 Service Description publication history" href="/standards/history/sparql11-service-description">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Gregory Williams
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="sparql 1.1 overview" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2013/REC-sparql11-overview-20130321/" title="Latest draft of SPARQL 1.1 Overview formally approved by the group">SPARQL 1.1 Overview</a></h2>
                        <p class=deliverer>SPARQL Working Group</p>
                        <p class=pubdetails>2013-03-21 - <a title="SPARQL 1.1 Overview publication history" href="/standards/history/sparql11-overview">History</a>
                        </p>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="sparql 1.1 update" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2013/REC-sparql11-update-20130321/" title="Latest draft of SPARQL 1.1 Update formally approved by the group">SPARQL 1.1 Update</a></h2>
                        <p class=deliverer>SPARQL Working Group</p>
                        <p class=pubdetails>2013-03-21 - <a title="SPARQL 1.1 Update publication history" href="/standards/history/sparql11-update">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Paula Gearon
                            <li>Alexandre Passant
                            <li>Axel Polleres
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="sparql query results xml format (second edition)" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2013/REC-rdf-sparql-XMLres-20130321/" title="Latest draft of SPARQL Query Results XML Format (Second Edition) formally approved by the group">SPARQL Query Results XML Format (Second Edition)</a></h2>
                        <p class=deliverer>SPARQL Working Group</p>
                        <p class=pubdetails>2013-03-21 - <a title="SPARQL Query Results XML Format (Second Edition) publication history" href="/standards/history/rdf-sparql-XMLres">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dave Beckett
                            <li>Jeen Broekstra
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="sparql 1.1 protocol" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2013/REC-sparql11-protocol-20130321/" title="Latest draft of SPARQL 1.1 Protocol formally approved by the group">SPARQL 1.1 Protocol</a></h2>
                        <p class=deliverer>SPARQL Working Group</p>
                        <p class=pubdetails>2013-03-21 - <a title="SPARQL 1.1 Protocol publication history" href="/standards/history/sparql11-protocol">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Lee Feigenbaum
                            <li>Gregory Williams
                            <li>Kendall Clark
                            <li>Elias Torres
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="sparql 1.1 entailment regimes" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2013/REC-sparql11-entailment-20130321/" title="Latest draft of SPARQL 1.1 Entailment Regimes formally approved by the group">SPARQL 1.1 Entailment Regimes</a></h2>
                        <p class=deliverer>SPARQL Working Group</p>
                        <p class=pubdetails>2013-03-21 - <a title="SPARQL 1.1 Entailment Regimes publication history" href="/standards/history/sparql11-entailment">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Birte Glimm
                            <li>Chimezie Ogbuji
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="sparql 1.1 query language" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2013/REC-sparql11-query-20130321/" title="Latest draft of SPARQL 1.1 Query Language formally approved by the group">SPARQL 1.1 Query Language</a></h2>
                        <p class=deliverer>SPARQL Working Group</p>
                        <p class=pubdetails>2013-03-21 - <a title="SPARQL 1.1 Query Language publication history" href="/standards/history/sparql11-query">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steven Harris
                            <li>Andy Seaborne
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="sparql 1.1 federated query" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2013/REC-sparql11-federated-query-20130321/" title="Latest draft of SPARQL 1.1 Federated Query formally approved by the group">SPARQL 1.1 Federated Query</a></h2>
                        <p class=deliverer>SPARQL Working Group</p>
                        <p class=pubdetails>2013-03-21 - <a title="SPARQL 1.1 Federated Query publication history" href="/standards/history/sparql11-federated-query">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Eric Prud&#039;hommeaux
                            <li>Carlos Buil Aranda
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="sparql 1.1 query results csv and tsv formats" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2013/REC-sparql11-results-csv-tsv-20130321/" title="Latest draft of SPARQL 1.1 Query Results CSV and TSV Formats formally approved by the group">SPARQL 1.1 Query Results CSV and TSV Formats</a></h2>
                        <p class=deliverer>SPARQL Working Group</p>
                        <p class=pubdetails>2013-03-21 - <a title="SPARQL 1.1 Query Results CSV and TSV Formats publication history" href="/standards/history/sparql11-results-csv-tsv">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Andy Seaborne
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="sparql 1.1 query results json format" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2013/REC-sparql11-results-json-20130321/" title="Latest draft of SPARQL 1.1 Query Results JSON Format formally approved by the group">SPARQL 1.1 Query Results JSON Format</a></h2>
                        <p class=deliverer>SPARQL Working Group</p>
                        <p class=pubdetails>2013-03-21 - <a title="SPARQL 1.1 Query Results JSON Format publication history" href="/standards/history/sparql11-results-json">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Andy Seaborne
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="sparql 1.1 graph store http protocol" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2013/REC-sparql11-http-rdf-update-20130321/" title="Latest draft of SPARQL 1.1 Graph Store HTTP Protocol formally approved by the group">SPARQL 1.1 Graph Store HTTP Protocol</a></h2>
                        <p class=deliverer>SPARQL Working Group</p>
                        <p class=pubdetails>2013-03-21 - <a title="SPARQL 1.1 Graph Store HTTP Protocol publication history" href="/standards/history/sparql11-http-rdf-update">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Chimezie Ogbuji
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                          <li data-title="css print profile" data-tag="css" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2013/NOTE-css-print-20130314/" title="Latest draft of CSS Print Profile formally approved by the group">CSS Print Profile</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2013-03-14 - <a title="CSS Print Profile publication history" href="/standards/history/css-print">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Elika Etemad
                            <li>Melinda Grant
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="selectors api level 1" data-tag="css webapi" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2013/REC-selectors-api-20130221/" title="Latest draft of Selectors API Level 1 formally approved by the group">Selectors  API  Level&nbsp;1</a></h2>
                        <p class=deliverer>(historical) Web Applications Working Group</p>
                        <p class=pubdetails>2013-02-21 - <a title="Selectors API Level 1 publication history" href="/standards/history/selectors-api">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Anne van Kesteren
                            <li>Lachlan Hunt
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                <li data-title="rif basic logic dialect (second edition)" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2013/REC-rif-bld-20130205/" title="Latest draft of RIF Basic Logic Dialect (Second Edition) formally approved by the group">RIF Basic Logic Dialect (Second Edition)</a></h2>
                        <p class=deliverer>Rule Interchange Format Working Group</p>
                        <p class=pubdetails>2013-02-05 - <a title="RIF Basic Logic Dialect (Second Edition) publication history" href="/standards/history/rif-bld">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Harold Boley
                            <li>Michael Kifer
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="owl 2 rl in rif (second edition)" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2013/NOTE-rif-owl-rl-20130205/" title="Latest draft of OWL 2 RL in RIF (Second Edition) formally approved by the group">OWL 2 RL in RIF (Second Edition)</a></h2>
                        <p class=deliverer>Rule Interchange Format Working Group</p>
                        <p class=pubdetails>2013-02-05 - <a title="OWL 2 RL in RIF (Second Edition) publication history" href="/standards/history/rif-owl-rl">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dave Reynolds
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="rif core dialect (second edition)" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2013/REC-rif-core-20130205/" title="Latest draft of RIF Core Dialect (Second Edition) formally approved by the group">RIF Core Dialect (Second Edition)</a></h2>
                        <p class=deliverer>Rule Interchange Format Working Group</p>
                        <p class=pubdetails>2013-02-05 - <a title="RIF Core Dialect (Second Edition) publication history" href="/standards/history/rif-core">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Harold Boley
                            <li>Gary Hallmark
                            <li>Michael Kifer
                            <li>Adrian Paschke
                            <li>Axel Polleres
                            <li>Dave Reynolds
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="rif production rule dialect (second edition)" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2013/REC-rif-prd-20130205/" title="Latest draft of RIF Production Rule Dialect (Second Edition) formally approved by the group">RIF Production Rule Dialect (Second Edition)</a></h2>
                        <p class=deliverer>Rule Interchange Format Working Group</p>
                        <p class=pubdetails>2013-02-05 - <a title="RIF Production Rule Dialect (Second Edition) publication history" href="/standards/history/rif-prd">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Christian de Sainte Marie
                            <li>Gary Hallmark
                            <li>Adrian Paschke
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="rif datatypes and built-ins 1.0 (second edition)" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2013/REC-rif-dtb-20130205/" title="Latest draft of RIF Datatypes and Built-Ins 1.0 (Second Edition) formally approved by the group">RIF Datatypes and Built-Ins 1.0 (Second Edition)</a></h2>
                        <p class=deliverer>Rule Interchange Format Working Group</p>
                        <p class=pubdetails>2013-02-05 - <a title="RIF Datatypes and Built-Ins 1.0 (Second Edition) publication history" href="/standards/history/rif-dtb">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Axel Polleres
                            <li>Harold Boley
                            <li>Michael Kifer
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="rif primer (second edition)" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2013/NOTE-rif-primer-20130205/" title="Latest draft of RIF Primer (Second Edition) formally approved by the group">RIF Primer (Second Edition)</a></h2>
                        <p class=deliverer>Rule Interchange Format Working Group</p>
                        <p class=pubdetails>2013-02-05 - <a title="RIF Primer (Second Edition) publication history" href="/standards/history/rif-primer">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Leora Morgenstern
                            <li>Christopher Welty
                            <li>Harold Boley
                            <li>Gary Hallmark
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="rif rdf and owl compatibility (second edition)" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2013/REC-rif-rdf-owl-20130205/" title="Latest draft of RIF RDF and OWL Compatibility (Second Edition) formally approved by the group">RIF RDF and OWL Compatibility (Second Edition)</a></h2>
                        <p class=deliverer>Rule Interchange Format Working Group</p>
                        <p class=pubdetails>2013-02-05 - <a title="RIF RDF and OWL Compatibility (Second Edition) publication history" href="/standards/history/rif-rdf-owl">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jos de Bruijn
                            <li>Christopher Welty
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="rif framework for logic dialects (second edition)" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2013/REC-rif-fld-20130205/" title="Latest draft of RIF Framework for Logic Dialects (Second Edition) formally approved by the group">RIF Framework for Logic Dialects (Second Edition)</a></h2>
                        <p class=deliverer>Rule Interchange Format Working Group</p>
                        <p class=pubdetails>2013-02-05 - <a title="RIF Framework for Logic Dialects (Second Edition) publication history" href="/standards/history/rif-fld">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Harold Boley
                            <li>Michael Kifer
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="rif test cases (second edition)" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2013/NOTE-rif-test-20130205/" title="Latest draft of RIF Test Cases (Second Edition) formally approved by the group">RIF Test Cases (Second Edition)</a></h2>
                        <p class=deliverer>Rule Interchange Format Working Group</p>
                        <p class=pubdetails>2013-02-05 - <a title="RIF Test Cases (Second Edition) publication history" href="/standards/history/rif-test">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Stella Mitchell
                            <li>Leora Morgenstern
                            <li>Adrian Paschke
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="ttml simple delivery profile for closed captions (us)" data-tag="media" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2013/NOTE-ttml10-sdp-us-20130205/" title="Latest draft of TTML Simple Delivery Profile for Closed Captions (US) formally approved by the group">TTML Simple Delivery Profile for Closed Captions (US)</a></h2>
                        <p class=deliverer>Timed Text Working Group</p>
                        <p class=pubdetails>2013-02-05 - <a title="TTML Simple Delivery Profile for Closed Captions (US) publication history" href="/standards/history/ttml10-sdp-us">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Glenn Adams
                            <li>Monica Martin
                            <li>Sean Hayes
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                <li data-title="rif in rdf (second edition)" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2013/NOTE-rif-in-rdf-20130205/" title="Latest draft of RIF In RDF (Second Edition) formally approved by the group">RIF In RDF (Second Edition)</a></h2>
                        <p class=deliverer>Rule Interchange Format Working Group</p>
                        <p class=pubdetails>2013-02-05 - <a title="RIF In RDF (Second Edition) publication history" href="/standards/history/rif-in-rdf">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Sandro Hawke
                            <li>Axel Polleres
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="rif use cases and requirements (second edition)" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2013/NOTE-rif-ucr-20130205/" title="Latest draft of RIF Use Cases and Requirements (Second Edition) formally approved by the group">RIF Use Cases and Requirements (Second Edition)</a></h2>
                        <p class=deliverer>Rule Interchange Format Working Group</p>
                        <p class=pubdetails>2013-02-05 - <a title="RIF Use Cases and Requirements (Second Edition) publication history" href="/standards/history/rif-ucr">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Adrian Paschke
                            <li>Leora Morgenstern
                            <li>David Hirtle
                            <li>Allen Ginsberg
                            <li>Paula-Lavinia Patranjan
                            <li>Francis McCabe
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="rif overview (second edition)" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2013/NOTE-rif-overview-20130205/" title="Latest draft of RIF Overview (Second Edition) formally approved by the group">RIF Overview (Second Edition)</a></h2>
                        <p class=deliverer>Rule Interchange Format Working Group</p>
                        <p class=pubdetails>2013-02-05 - <a title="RIF Overview (Second Edition) publication history" href="/standards/history/rif-overview">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael Kifer
                            <li>Harold Boley
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="rif combination with xml data (second edition)" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2013/NOTE-rif-xml-data-20130205/" title="Latest draft of RIF Combination with XML data (Second Edition) formally approved by the group">RIF Combination with XML data (Second Edition)</a></h2>
                        <p class=deliverer>Rule Interchange Format Working Group</p>
                        <p class=pubdetails>2013-02-05 - <a title="RIF Combination with XML data (Second Edition) publication history" href="/standards/history/rif-xml-data">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Christian de Sainte Marie
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="web audio processing: use cases and requirements" data-tag="media webapi" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2013/NOTE-webaudio-usecases-20130129/" title="Latest draft of Web Audio Processing: Use Cases and Requirements formally approved by the group">Web Audio Processing: Use Cases and Requirements</a></h2>
                        <p class=deliverer>Audio Working Group</p>
                        <p class=pubdetails>2013-01-29 - <a title="Web Audio Processing: Use Cases and Requirements publication history" href="/standards/history/webaudio-usecases">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Joe Berkovitz
                            <li>Olivier Thereaux
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="navigation timing" data-tag="performance webapi" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2012/REC-navigation-timing-20121217/" title="Latest draft of Navigation Timing formally approved by the group">Navigation Timing</a></h2>
                        <p class=deliverer>Web Performance Working Group</p>
                        <p class=pubdetails>2012-12-17 - <a title="Navigation Timing publication history" href="/standards/history/navigation-timing">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Zhiheng Wang
                          </ul>
                                    <ul class="taglist">
                            <li class="performance">Performance
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="woff file format 1.0" data-tag="" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2012/REC-WOFF-20121213/" title="Latest draft of WOFF File Format 1.0 formally approved by the group">WOFF  File  Format&nbsp;1.0</a></h2>
                        <p class=deliverer>Web Fonts Working Group</p>
                        <p class=pubdetails>2012-12-13 - <a title="WOFF File Format 1.0 publication history" href="/standards/history/WOFF">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jonathan Kew
                            <li>Tal Leming
                            <li>Erik van Blokland
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="owl 2 web ontology language rdf-based semantics (second edition)" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2012/REC-owl2-rdf-based-semantics-20121211/" title="Latest draft of OWL 2 Web Ontology Language RDF-Based Semantics (Second Edition) formally approved by the group">OWL 2 Web Ontology Language RDF-Based Semantics (Second Edition)</a></h2>
                        <p class=deliverer>OWL Working Group</p>
                        <p class=pubdetails>2012-12-11 - <a title="OWL 2 Web Ontology Language RDF-Based Semantics (Second Edition) publication history" href="/standards/history/owl2-rdf-based-semantics">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael Schneider
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                          <li data-title="owl 2 web ontology language mapping to rdf graphs (second edition)" data-tag="data" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2012/REC-owl2-mapping-to-rdf-20121211/" title="Latest draft of OWL 2 Web Ontology Language Mapping to RDF Graphs (Second Edition) formally approved by the group">OWL 2 Web Ontology Language Mapping to RDF Graphs (Second Edition)</a></h2>
                        <p class=deliverer>OWL Working Group</p>
                        <p class=pubdetails>2012-12-11 - <a title="OWL 2 Web Ontology Language Mapping to RDF Graphs (Second Edition) publication history" href="/standards/history/owl2-mapping-to-rdf">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Peter Patel-Schneider
                            <li>Boris Motik
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                          <li data-title="owl 2 web ontology language structural specification and functional-style syntax (second edition)" data-tag="data" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2012/REC-owl2-syntax-20121211/" title="Latest draft of OWL 2 Web Ontology Language Structural Specification and Functional-Style Syntax (Second Edition) formally approved by the group">OWL 2 Web Ontology Language Structural Specification and Functional-Style Syntax (Second Edition)</a></h2>
                        <p class=deliverer>OWL Working Group</p>
                        <p class=pubdetails>2012-12-11 - <a title="OWL 2 Web Ontology Language Structural Specification and Functional-Style Syntax (Second Edition) publication history" href="/standards/history/owl2-syntax">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Boris Motik
                            <li>Peter Patel-Schneider
                            <li>Bijan Parsia
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="owl 2 web ontology language new features and rationale (second edition)" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2012/REC-owl2-new-features-20121211/" title="Latest draft of OWL 2 Web Ontology Language New Features and Rationale (Second Edition) formally approved by the group">OWL 2 Web Ontology Language New Features and Rationale (Second Edition)</a></h2>
                        <p class=deliverer>OWL Working Group</p>
                        <p class=pubdetails>2012-12-11 - <a title="OWL 2 Web Ontology Language New Features and Rationale (Second Edition) publication history" href="/standards/history/owl2-new-features">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Christine Golbreich
                            <li>Evan Wallace
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="owl 2 web ontology language xml serialization (second edition)" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2012/REC-owl2-xml-serialization-20121211/" title="Latest draft of OWL 2 Web Ontology Language XML Serialization (Second Edition) formally approved by the group">OWL 2 Web Ontology Language XML Serialization (Second Edition)</a></h2>
                        <p class=deliverer>OWL Working Group</p>
                        <p class=pubdetails>2012-12-11 - <a title="OWL 2 Web Ontology Language XML Serialization (Second Edition) publication history" href="/standards/history/owl2-xml-serialization">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Boris Motik
                            <li>Bijan Parsia
                            <li>Peter Patel-Schneider
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                          <li data-title="rdf:plainliteral: a datatype for rdf plain literals (second edition)" data-tag="data" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2012/REC-rdf-plain-literal-20121211/" title="Latest draft of rdf:PlainLiteral: A Datatype for RDF Plain Literals (Second Edition) formally approved by the group">rdf:PlainLiteral: A Datatype for RDF Plain Literals (Second Edition)</a></h2>
                        <p class=deliverer>OWL Working Group</p>
                        <p class=deliverer>Rule Interchange Format Working Group</p>
                        <p class=pubdetails>2012-12-11 - <a title="rdf:PlainLiteral: A Datatype for RDF Plain Literals (Second Edition) publication history" href="/standards/history/rdf-plain-literal">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jie Bao
                            <li>Sandro Hawke
                            <li>Boris Motik
                            <li>Peter Patel-Schneider
                            <li>Axel Polleres
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                          <li data-title="owl 2 web ontology language conformance (second edition)" data-tag="data" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2012/REC-owl2-conformance-20121211/" title="Latest draft of OWL 2 Web Ontology Language Conformance (Second Edition) formally approved by the group">OWL 2 Web Ontology Language Conformance (Second Edition)</a></h2>
                        <p class=deliverer>OWL Working Group</p>
                        <p class=pubdetails>2012-12-11 - <a title="OWL 2 Web Ontology Language Conformance (Second Edition) publication history" href="/standards/history/owl2-conformance">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael[tm] Smith
                            <li>Ian Horrocks
                            <li>Markus Krötzsch
                            <li>Birte Glimm
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="owl 2 web ontology language document overview (second edition)" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2012/REC-owl2-overview-20121211/" title="Latest draft of OWL 2 Web Ontology Language Document Overview (Second Edition) formally approved by the group">OWL 2 Web Ontology Language Document Overview (Second Edition)</a></h2>
                        <p class=deliverer>OWL Working Group</p>
                        <p class=pubdetails>2012-12-11 - <a title="OWL 2 Web Ontology Language Document Overview (Second Edition) publication history" href="/standards/history/owl2-overview">History</a>
                        </p>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                          <li data-title="owl 2 web ontology language direct semantics (second edition)" data-tag="data" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2012/REC-owl2-direct-semantics-20121211/" title="Latest draft of OWL 2 Web Ontology Language Direct Semantics (Second Edition) formally approved by the group">OWL 2 Web Ontology Language Direct Semantics (Second Edition)</a></h2>
                        <p class=deliverer>OWL Working Group</p>
                        <p class=pubdetails>2012-12-11 - <a title="OWL 2 Web Ontology Language Direct Semantics (Second Edition) publication history" href="/standards/history/owl2-direct-semantics">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Boris Motik
                            <li>Peter Patel-Schneider
                            <li>Bernardo Cuenca Grau
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="owl 2 web ontology language primer (second edition)" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2012/REC-owl2-primer-20121211/" title="Latest draft of OWL 2 Web Ontology Language Primer (Second Edition) formally approved by the group">OWL 2 Web Ontology Language Primer (Second Edition)</a></h2>
                        <p class=deliverer>OWL Working Group</p>
                        <p class=pubdetails>2012-12-11 - <a title="OWL 2 Web Ontology Language Primer (Second Edition) publication history" href="/standards/history/owl2-primer">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Pascal Hitzler
                            <li>Markus Krötzsch
                            <li>Bijan Parsia
                            <li>Peter Patel-Schneider
                            <li>Sebastian Rudolph
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="owl 2 web ontology language profiles (second edition)" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2012/REC-owl2-profiles-20121211/" title="Latest draft of OWL 2 Web Ontology Language Profiles (Second Edition) formally approved by the group">OWL 2 Web Ontology Language Profiles (Second Edition)</a></h2>
                        <p class=deliverer>OWL Working Group</p>
                        <p class=pubdetails>2012-12-11 - <a title="OWL 2 Web Ontology Language Profiles (Second Edition) publication history" href="/standards/history/owl2-profiles">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Boris Motik
                            <li>Bernardo Cuenca Grau
                            <li>Ian Horrocks
                            <li>Zhe Wu
                            <li>Achille Fokoue
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="owl 2 web ontology language data range extension: linear equations (second edition)" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2012/NOTE-owl2-dr-linear-20121211/" title="Latest draft of OWL 2 Web Ontology Language Data Range Extension: Linear Equations (Second Edition) formally approved by the group">OWL 2 Web Ontology Language Data Range Extension: Linear Equations (Second Edition)</a></h2>
                        <p class=deliverer>OWL Working Group</p>
                        <p class=pubdetails>2012-12-11 - <a title="OWL 2 Web Ontology Language Data Range Extension: Linear Equations (Second Edition) publication history" href="/standards/history/owl2-dr-linear">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Bijan Parsia
                            <li>Uli Sattler
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="owl 2 web ontology language quick reference guide (second edition)" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2012/REC-owl2-quick-reference-20121211/" title="Latest draft of OWL 2 Web Ontology Language Quick Reference Guide (Second Edition) formally approved by the group">OWL 2 Web Ontology Language Quick Reference Guide (Second Edition)</a></h2>
                        <p class=deliverer>OWL Working Group</p>
                        <p class=pubdetails>2012-12-11 - <a title="OWL 2 Web Ontology Language Quick Reference Guide (Second Edition) publication history" href="/standards/history/owl2-quick-reference">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jie Bao
                            <li>Elisa Kendall
                            <li>Deborah McGuinness
                            <li>Peter Patel-Schneider
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="owl 2 web ontology language manchester syntax (second edition)" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2012/NOTE-owl2-manchester-syntax-20121211/" title="Latest draft of OWL 2 Web Ontology Language Manchester Syntax (Second Edition) formally approved by the group">OWL 2 Web Ontology Language Manchester Syntax (Second Edition)</a></h2>
                        <p class=deliverer>OWL Working Group</p>
                        <p class=pubdetails>2012-12-11 - <a title="OWL 2 Web Ontology Language Manchester Syntax (Second Edition) publication history" href="/standards/history/owl2-manchester-syntax">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Matthew Horridge
                            <li>Peter Patel-Schneider
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xml signature 1.1 interop test report" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2012/NOTE-xmldsig-core1-interop-20121113/" title="Latest draft of XML Signature 1.1 Interop Test Report formally approved by the group">XML Signature 1.1 Interop Test Report</a></h2>
                        <p class=deliverer>XML Security Working Group</p>
                        <p class=pubdetails>2012-11-13 - <a title="XML Signature 1.1 Interop Test Report publication history" href="/standards/history/xmldsig-core1-interop">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Frederick Hirsch
                            <li>Pratik Datta
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xml encryption 1.1 interop test report" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2012/NOTE-xmlenc-core1-interop-20121113/" title="Latest draft of XML Encryption 1.1 Interop Test Report formally approved by the group">XML Encryption 1.1 Interop Test Report</a></h2>
                        <p class=deliverer>XML Security Working Group</p>
                        <p class=pubdetails>2012-11-13 - <a title="XML Encryption 1.1 Interop Test Report publication history" href="/standards/history/xmlenc-core1-interop">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Pratik Datta
                            <li>Frederick Hirsch
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="best practices for fragment identifiers and media type definitions" data-tag="" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2012/WD-fragid-best-practices-20121025/" title="Latest draft of Best Practices for Fragment Identifiers and Media Type Definitions formally approved by the group">Best Practices for Fragment Identifiers and Media Type Definitions</a></h2>
                        <p class=deliverer>Technical Architecture Group</p>
                        <p class=pubdetails>2012-10-25 - <a title="Best Practices for Fragment Identifiers and Media Type Definitions publication history" href="/standards/history/fragid-best-practices">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jeni Tennison
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="multimodal architecture and interfaces" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2012/REC-mmi-arch-20121025/" title="Latest draft of Multimodal Architecture and Interfaces formally approved by the group">Multimodal Architecture and Interfaces</a></h2>
                        <p class=deliverer>Multimodal Interaction Working Group</p>
                        <p class=pubdetails>2012-10-25 - <a title="Multimodal Architecture and Interfaces publication history" href="/standards/history/mmi-arch">History</a>
                        </p>
                                  </li>
                                                                                                                                                <li data-title="associating schemas with xml documents 1.0 (third edition)" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2012/NOTE-xml-model-20121009/" title="Latest draft of Associating Schemas with XML documents 1.0 (Third Edition) formally approved by the group">Associating Schemas with XML documents 1.0 (Third Edition)</a></h2>
                        <p class=deliverer>XML Core Working Group</p>
                        <p class=pubdetails>2012-10-09 - <a title="Associating Schemas with XML documents 1.0 (Third Edition) publication history" href="/standards/history/xml-model">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Paul Grosso
                            <li>Jirka Kosek
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="web api design cookbook" data-tag="webapi" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2012/NOTE-api-design-20121002/" title="Latest draft of Web API Design Cookbook formally approved by the group">Web API Design Cookbook</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2012-10-02 - <a title="Web API Design Cookbook publication history" href="/standards/history/api-design">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Robin Berjon
                            <li>Jungkee Song
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                <li data-title="r2rml: rdb to rdf mapping language" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2012/REC-r2rml-20120927/" title="Latest draft of R2RML: RDB to RDF Mapping Language formally approved by the group">R2RML: RDB to RDF Mapping Language</a></h2>
                        <p class=deliverer>RDB2RDF Working Group</p>
                        <p class=pubdetails>2012-09-27 - <a title="R2RML: RDB to RDF Mapping Language publication history" href="/standards/history/r2rml">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Souripriya Das
                            <li>Seema Sundara
                            <li>Richard Cyganiak
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="a direct mapping of relational data to rdf" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2012/REC-rdb-direct-mapping-20120927/" title="Latest draft of A Direct Mapping of Relational Data to RDF formally approved by the group">A Direct Mapping of Relational Data to RDF</a></h2>
                        <p class=deliverer>RDB2RDF Working Group</p>
                        <p class=pubdetails>2012-09-27 - <a title="A Direct Mapping of Relational Data to RDF publication history" href="/standards/history/rdb-direct-mapping">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Marcelo Arenas
                            <li>Alexandre Bertails
                            <li>Eric Prud&#039;hommeaux
                            <li>Juan Sequeda
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="media fragments uri 1.0 (basic)" data-tag="media" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2012/REC-media-frags-20120925/" title="Latest draft of Media Fragments URI 1.0 (basic) formally approved by the group">Media Fragments URI 1.0 (basic)</a></h2>
                        <p class=deliverer>Media Fragments Working Group</p>
                        <p class=pubdetails>2012-09-25 - <a title="Media Fragments URI 1.0 (basic) publication history" href="/standards/history/media-frags">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Raphaël Troncy
                            <li>Erik Mannens
                            <li>Silvia Pfeiffer
                            <li>Davy Van Deursen
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                <li data-title="the websocket api" data-tag="webapi" data-status="cr" data-version="latest upcoming">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="http://www.w3.org/TR/2012/CR-websockets-20120920/" title="Latest draft of The WebSocket API formally approved by the group">The WebSocket API</a></h2>
                        <p class=deliverer>(historical) Web Applications Working Group</p>
                        <p class=pubdetails>2012-09-20 - <a title="The WebSocket API publication history" href="/standards/history/websockets">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ian Hickson
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                <li data-title="research report on web accessibility metrics" data-tag="accessibility" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2012/WD-accessibility-metrics-report-20120830/" title="Latest draft of Research Report on Web Accessibility Metrics formally approved by the group">Research Report on Web Accessibility Metrics</a></h2>
                        <p class=deliverer>Research and Development Working Group</p>
                        <p class=pubdetails>2012-08-30 - <a title="Research Report on Web Accessibility Metrics publication history" href="/standards/history/accessibility-metrics-report">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Markel Vigo
                            <li>Giorgio Brajnik
                            <li>Joshue O Connor
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                <li data-title="r2rml and direct mapping test cases" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2012/NOTE-rdb2rdf-test-cases-20120814/" title="Latest draft of R2RML and Direct Mapping Test Cases formally approved by the group">R2RML and Direct Mapping Test Cases</a></h2>
                        <p class=deliverer>RDB2RDF Working Group</p>
                        <p class=pubdetails>2012-08-14 - <a title="R2RML and Direct Mapping Test Cases publication history" href="/standards/history/rdb2rdf-test-cases">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Boris Villazón-Terrazas
                            <li>Michael Hausenblas
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="rdb2rdf implementation report" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2012/NOTE-rdb2rdf-implementations-20120814/" title="Latest draft of RDB2RDF Implementation Report formally approved by the group">RDB2RDF Implementation Report</a></h2>
                        <p class=deliverer>RDB2RDF Working Group</p>
                        <p class=pubdetails>2012-08-14 - <a title="RDB2RDF Implementation Report publication history" href="/standards/history/rdb2rdf-implementations">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Boris Villazón-Terrazas
                            <li>Michael Hausenblas
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xforms 2.0: xpath expression module" data-tag="xml" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2012/WD-xforms-xpath-20120807/" title="Latest draft of XForms 2.0: XPath expression module formally approved by the group">XForms 2.0: XPath expression module</a></h2>
                        <p class=deliverer>Forms Working Group</p>
                        <p class=pubdetails>2012-08-07 - <a title="XForms 2.0: XPath expression module publication history" href="/standards/history/xforms-xpath">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Nick Van Den Bleeken
                            <li>John Boyer
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                            <li data-title="xforms 2.0" data-tag="xml" data-status="wd" data-version="upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2012/WD-xforms20-20120807/" title="Latest draft of XForms 2.0 formally approved by the group">XForms&nbsp;2.0</a></h2>
                        <p class=deliverer>Forms Working Group</p>
                        <p class=pubdetails>2012-08-07 - <a title="XForms 2.0 publication history" href="/standards/history/xforms20">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>John Boyer
                            <li>L Klotz
                            <li>Steven Pemberton
                            <li>Nick Van Den Bleeken
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="registration &amp; discovery of multimodal modality components in multimodal systems: use cases and requirements" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2012/NOTE-mmi-discovery-20120705/" title="Latest draft of Registration &amp; Discovery of Multimodal Modality Components in Multimodal Systems: Use Cases and Requirements formally approved by the group">Registration & Discovery of Multimodal Modality Components in Multimodal Systems: Use Cases and Requirements</a></h2>
                        <p class=deliverer>Multimodal Interaction Working Group</p>
                        <p class=pubdetails>2012-07-05 - <a title="Registration &amp; Discovery of Multimodal Modality Components in Multimodal Systems: Use Cases and Requirements publication history" href="/standards/history/mmi-discovery">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>B Helena RODRIGUEZ
                          </ul>
                                  </li>
                                                                                                                          <li data-title="rdf api" data-tag="webapi" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2012/NOTE-rdf-api-20120705/" title="Latest draft of RDF API formally approved by the group">RDF API</a></h2>
                        <p class=deliverer>RDFa Working Group</p>
                        <p class=pubdetails>2012-07-05 - <a title="RDF API publication history" href="/standards/history/rdf-api">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Nathan Rixham
                            <li>Manu Sporny
                            <li>Benjamin Adrian
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="rdfa api" data-tag="data html webapi" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2012/NOTE-rdfa-api-20120705/" title="Latest draft of RDFa API formally approved by the group">RDFa API</a></h2>
                        <p class=deliverer>RDFa Working Group</p>
                        <p class=pubdetails>2012-07-05 - <a title="RDFa API publication history" href="/standards/history/rdfa-api">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Manu Sporny
                            <li>Benjamin Adrian
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                            <li class="html">HTML
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="rdf interfaces" data-tag="data webapi" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2012/NOTE-rdf-interfaces-20120705/" title="Latest draft of RDF Interfaces formally approved by the group">RDF Interfaces</a></h2>
                        <p class=deliverer>RDFa Working Group</p>
                        <p class=pubdetails>2012-07-05 - <a title="RDF Interfaces publication history" href="/standards/history/rdf-interfaces">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Nathan Rixham
                            <li>Manu Sporny
                            <li>Benjamin Adrian
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                <li data-title="web application privacy best practices" data-tag="webapi" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2012/NOTE-app-privacy-bp-20120703/" title="Latest draft of Web Application Privacy Best Practices formally approved by the group">Web Application Privacy Best Practices</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2012-07-03 - <a title="Web Application Privacy Best Practices publication history" href="/standards/history/app-privacy-bp">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Frederick Hirsch
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                <li data-title="media queries" data-tag="css" data-status="rec" data-version="latest ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2012/REC-css3-mediaqueries-20120619/" title="Latest draft of Media Queries formally approved by the group">Media Queries</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2012-06-19 - <a title="Media Queries publication history" href="/standards/history/css3-mediaqueries">History</a>
                        - <a href="http://dev.w3.org/csswg/css3-mediaqueries/" title="Latest editor's draft of Media Queries">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Florian Rivoal
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                          <li data-title="mediastream processing api" data-tag="media webapi" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2012/NOTE-streamproc-20120531/" title="Latest draft of MediaStream Processing API formally approved by the group">MediaStream Processing API</a></h2>
                        <p class=deliverer>Audio Working Group</p>
                        <p class=pubdetails>2012-05-31 - <a title="MediaStream Processing API publication history" href="/standards/history/streamproc">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Robert O&#039;Callahan
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                <li data-title="the from-origin header" data-tag="security" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2012/NOTE-from-origin-20120529/" title="Latest draft of The From-Origin Header formally approved by the group">The From-Origin Header</a></h2>
                        <p class=deliverer>(historical) Web Applications Working Group</p>
                        <p class=pubdetails>2012-05-29 - <a title="The From-Origin Header publication history" href="/standards/history/from-origin">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Anne van Kesteren
                          </ul>
                                    <ul class="taglist">
                            <li class="security">Security
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                  <li data-title="xbl 2.0" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2012/NOTE-xbl-20120524/" title="Latest draft of XBL 2.0 formally approved by the group">XBL&nbsp;2.0</a></h2>
                        <p class=deliverer>(historical) Web Applications Working Group</p>
                        <p class=pubdetails>2012-05-24 - <a title="XBL 2.0 publication history" href="/standards/history/xbl">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ian Hickson
                          </ul>
                                  </li>
                                                                                                                          <li data-title="web services internationalization (ws-i18n)" data-tag="i18n" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2012/NOTE-ws-i18n-20120522/" title="Latest draft of Web Services Internationalization (WS-I18N) formally approved by the group">Web Services Internationalization (WS-I18N)</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2012-05-22 - <a title="Web Services Internationalization (WS-I18N) publication history" href="/standards/history/ws-i18n">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Addison Phillips
                            <li>Mary Trumble
                            <li>Felix Sasaki
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                          <li data-title="w3c xml schema definition language (xsd) 1.1 part 1: structures" data-tag="xml" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2012/REC-xmlschema11-1-20120405/" title="Latest draft of W3C XML Schema Definition Language (XSD) 1.1 Part 1: Structures formally approved by the group">W3C XML Schema Definition Language (XSD) 1.1 Part 1: Structures</a></h2>
                        <p class=deliverer>XML Schema Working Group</p>
                        <p class=pubdetails>2012-04-05 - <a title="W3C XML Schema Definition Language (XSD) 1.1 Part 1: Structures publication history" href="/standards/history/xmlschema11-1">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Sandy Gao
                            <li>Michael Sperberg-McQueen
                            <li>Henry Thompson
                            <li>Noah Mendelsohn
                            <li>David Beech
                            <li>Murray Maloney
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="w3c xml schema definition language (xsd) 1.1 part 2: datatypes" data-tag="xml" data-status="rec" data-version="upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2012/REC-xmlschema11-2-20120405/" title="Latest draft of W3C XML Schema Definition Language (XSD) 1.1 Part 2: Datatypes formally approved by the group">W3C XML Schema Definition Language (XSD) 1.1 Part 2: Datatypes</a></h2>
                        <p class=deliverer>XML Schema Working Group</p>
                        <p class=pubdetails>2012-04-05 - <a title="W3C XML Schema Definition Language (XSD) 1.1 Part 2: Datatypes publication history" href="/standards/history/xmlschema11-2">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>David Peterson
                            <li>Sandy Gao
                            <li>Ashok Malhotra
                            <li>Michael Sperberg-McQueen
                            <li>Henry Thompson
                            <li>Paul V. Biron
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="terms for describing people" data-tag="data" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2012/WD-vocab-people-20120405/" title="Latest draft of Terms for describing people formally approved by the group">Terms for describing people</a></h2>
                        <p class=deliverer>Government Linked Data Working Group</p>
                        <p class=pubdetails>2012-04-05 - <a title="Terms for describing people publication history" href="/standards/history/vocab-people">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael Hausenblas
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="requirements for japanese text layout" data-tag="css graphics i18n xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2012/NOTE-jlreq-20120403/" title="Latest draft of Requirements for Japanese Text Layout formally approved by the group">Requirements for Japanese Text Layout</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2012-04-03 - <a title="Requirements for Japanese Text Layout publication history" href="/standards/history/jlreq">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Yasuhiro Anan
                            <li>Hiroyuki Chiba
                            <li>Junzaburo Edamoto
                            <li>Richard Ishida
                            <li>Tatsuo KOBAYASHI
                            <li>Toshi Kobayashi
                            <li>Kenzou Onozawa
                            <li>Felix Sasaki
                            <li>Seiichi Kato
                            <li>Hajime Shiozawa
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                            <li class="graphics">Graphics
                            <li class="i18n">i18n
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                          <li data-title="smil timesheets 1.0" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2012/NOTE-timesheets-20120328/" title="Latest draft of SMIL Timesheets 1.0 formally approved by the group">SMIL  Timesheets&nbsp;1.0</a></h2>
                        <p class=deliverer>SYMM Working Group</p>
                        <p class=pubdetails>2012-03-28 - <a title="SMIL Timesheets 1.0 publication history" href="/standards/history/timesheets">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Petri Vuorimaa
                            <li>Dick Bulterman
                            <li>Pablo Cesar
                          </ul>
                                  </li>
                                                                                                                          <li data-title="the media capture api" data-tag="media webapi" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2012/NOTE-media-capture-api-20120322/" title="Latest draft of The Media Capture API formally approved by the group">The Media Capture API</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2012-03-22 - <a title="The Media Capture API publication history" href="/standards/history/media-capture-api">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dzung Tran
                            <li>Ilkka Oksanen
                            <li>Ingmar Kliche
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                <li data-title="widget uri scheme" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2012/NOTE-widgets-uri-20120313/" title="Latest draft of Widget URI scheme formally approved by the group">Widget URI scheme</a></h2>
                        <p class=deliverer>(historical) Web Applications Working Group</p>
                        <p class=pubdetails>2012-03-13 - <a title="Widget URI scheme publication history" href="/standards/history/widgets-uri">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Marcos Caceres
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="html data guide" data-tag="data html" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2012/NOTE-html-data-guide-20120308/" title="Latest draft of HTML Data Guide formally approved by the group">HTML Data Guide</a></h2>
                        <p class=deliverer>Semantic Web Interest Group</p>
                        <p class=pubdetails>2012-03-08 - <a title="HTML Data Guide publication history" href="/standards/history/html-data-guide">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jeni Tennison
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="mediastream capture scenarios" data-tag="media webapi" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2012/WD-capture-scenarios-20120306/" title="Latest draft of MediaStream Capture Scenarios formally approved by the group">MediaStream Capture Scenarios</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=deliverer>Web Real-Time Communications Working Group</p>
                        <p class=pubdetails>2012-03-06 - <a title="MediaStream Capture Scenarios publication history" href="/standards/history/capture-scenarios">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Travis Leithead
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="soap over java message service 1.0" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2012/REC-soapjms-20120216/" title="Latest draft of SOAP over Java Message Service 1.0 formally approved by the group">SOAP  over  Java  Message  Service&nbsp;1.0</a></h2>
                        <p class=deliverer>SOAP-JMS Binding Working Group</p>
                        <p class=pubdetails>2012-02-16 - <a title="SOAP over Java Message Service 1.0 publication history" href="/standards/history/soapjms">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Phil Adams
                            <li>Peter Easton
                            <li>Eric Johnson
                            <li>Roland Merrick
                            <li>Mark Phillips
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="xinclude 1.1 requirement and use cases" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2012/NOTE-xinclude-11-requirements-20120214/" title="Latest draft of XInclude 1.1 Requirement and Use Cases formally approved by the group">XInclude 1.1 Requirement and Use Cases</a></h2>
                        <p class=deliverer>XML Core Working Group</p>
                        <p class=pubdetails>2012-02-14 - <a title="XInclude 1.1 Requirement and Use Cases publication history" href="/standards/history/xinclude-11-requirements">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Norman Walsh
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="html/xml task force report" data-tag="html" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2012/NOTE-html-xml-tf-report-20120209/" title="Latest draft of HTML/XML Task Force Report formally approved by the group">HTML/XML Task Force Report</a></h2>
                        <p class=deliverer>Technical Architecture Group</p>
                        <p class=pubdetails>2012-02-09 - <a title="HTML/XML Task Force Report publication history" href="/standards/history/html-xml-tf-report">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Norman Walsh
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="ontology for media resources 1.0" data-tag="media" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2012/REC-mediaont-10-20120209/" title="Latest draft of Ontology for Media Resources 1.0 formally approved by the group">Ontology  for  Media  Resources&nbsp;1.0</a></h2>
                        <p class=deliverer>Media Annotations Working Group</p>
                        <p class=pubdetails>2012-02-09 - <a title="Ontology for Media Resources 1.0 publication history" href="/standards/history/mediaont-10">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>WonSuk Lee
                            <li>Werner Bailer
                            <li>Tobias Bürger
                            <li>Pierre-Antoine Champin
                            <li>Jean-Pierre EVAIN
                            <li>Véronique Malaisé
                            <li>Thierry Michel
                            <li>Felix Sasaki
                            <li>Joakim Söderberg
                            <li>Florian Stegmaier
                            <li>John Strassner
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                <li data-title="usage patterns for client-side uri parameters" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2012/NOTE-hash-in-uri-20120209/" title="Latest draft of Usage Patterns For Client-Side URI parameters formally approved by the group">Usage Patterns For Client-Side URI parameters</a></h2>
                        <p class=deliverer>Technical Architecture Group</p>
                        <p class=pubdetails>2012-02-09 - <a title="Usage Patterns For Client-Side URI parameters publication history" href="/standards/history/hash-in-uri">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>T.V. Raman
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="mmi interoperability test report" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2012/NOTE-mmi-interop-20120124/" title="Latest draft of MMI interoperability test report formally approved by the group">MMI interoperability test report</a></h2>
                        <p class=deliverer>Multimodal Interaction Working Group</p>
                        <p class=pubdetails>2012-01-24 - <a title="MMI interoperability test report publication history" href="/standards/history/mmi-interop">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ingmar Kliche
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="extensible stylesheet language (xsl) version 2.0" data-tag="xml" data-status="wd" data-version="latest">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2012/WD-xslfo20-20120117/" title="Latest draft of Extensible Stylesheet Language (XSL) Version 2.0 formally approved by the group">Extensible  Stylesheet  Language  (XSL)  Version&nbsp;2.0</a></h2>
                        <p class=deliverer>XML Print and Page Layout Working Group</p>
                        <p class=pubdetails>2012-01-17 - <a title="Extensible Stylesheet Language (XSL) Version 2.0 publication history" href="/standards/history/xslfo20">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dave Pawson
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="audio processing api" data-tag="media webapi" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2011/WD-audioproc-20111215/" title="Latest draft of Audio Processing API formally approved by the group">Audio Processing API</a></h2>
                        <p class=deliverer>Audio Working Group</p>
                        <p class=pubdetails>2011-12-15 - <a title="Audio Processing API publication history" href="/standards/history/audioproc">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Robert O&#039;Callahan
                            <li>Chris Rogers
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                <li data-title="web services enumeration (ws-enumeration)" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2011/REC-ws-enumeration-20111213/" title="Latest draft of Web Services Enumeration (WS-Enumeration) formally approved by the group">Web Services Enumeration (WS-Enumeration)</a></h2>
                        <p class=deliverer>Web Services Resource Access Working Group</p>
                        <p class=pubdetails>2011-12-13 - <a title="Web Services Enumeration (WS-Enumeration) publication history" href="/standards/history/ws-enumeration">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Doug Davis
                            <li>Ashok Malhotra
                            <li>Katy Warr
                            <li>Wu Chou
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="web services event descriptions (ws-eventdescriptions)" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2011/REC-ws-event-descriptions-20111213/" title="Latest draft of Web Services Event Descriptions (WS-EventDescriptions) formally approved by the group">Web Services Event Descriptions (WS-EventDescriptions)</a></h2>
                        <p class=deliverer>Web Services Resource Access Working Group</p>
                        <p class=pubdetails>2011-12-13 - <a title="Web Services Event Descriptions (WS-EventDescriptions) publication history" href="/standards/history/ws-event-descriptions">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Doug Davis
                            <li>Ashok Malhotra
                            <li>Katy Warr
                            <li>Wu Chou
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="web services soap assertions (ws-soapassertions)" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2011/REC-ws-soap-assertions-20111213/" title="Latest draft of Web Services SOAP Assertions (WS-SOAPAssertions) formally approved by the group">Web Services SOAP Assertions (WS-SOAPAssertions)</a></h2>
                        <p class=deliverer>Web Services Resource Access Working Group</p>
                        <p class=pubdetails>2011-12-13 - <a title="Web Services SOAP Assertions (WS-SOAPAssertions) publication history" href="/standards/history/ws-soap-assertions">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Doug Davis
                            <li>Ashok Malhotra
                            <li>Katy Warr
                            <li>Wu Chou
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="web services metadata exchange (ws-metadataexchange)" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2011/REC-ws-metadata-exchange-20111213/" title="Latest draft of Web Services Metadata Exchange (WS-MetadataExchange) formally approved by the group">Web Services Metadata Exchange (WS-MetadataExchange)</a></h2>
                        <p class=deliverer>Web Services Resource Access Working Group</p>
                        <p class=pubdetails>2011-12-13 - <a title="Web Services Metadata Exchange (WS-MetadataExchange) publication history" href="/standards/history/ws-metadata-exchange">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Doug Davis
                            <li>Ashok Malhotra
                            <li>Katy Warr
                            <li>Wu Chou
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="web services eventing (ws-eventing)" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2011/REC-ws-eventing-20111213/" title="Latest draft of Web Services Eventing (WS-Eventing) formally approved by the group">Web Services Eventing (WS-Eventing)</a></h2>
                        <p class=deliverer>Web Services Resource Access Working Group</p>
                        <p class=pubdetails>2011-12-13 - <a title="Web Services Eventing (WS-Eventing) publication history" href="/standards/history/ws-eventing">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Doug Davis
                            <li>Ashok Malhotra
                            <li>Katy Warr
                            <li>Wu Chou
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="web services transfer (ws-transfer)" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2011/REC-ws-transfer-20111213/" title="Latest draft of Web Services Transfer (WS-Transfer) formally approved by the group">Web Services Transfer (WS-Transfer)</a></h2>
                        <p class=deliverer>Web Services Resource Access Working Group</p>
                        <p class=pubdetails>2011-12-13 - <a title="Web Services Transfer (WS-Transfer) publication history" href="/standards/history/ws-transfer">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Doug Davis
                            <li>Ashok Malhotra
                            <li>Katy Warr
                            <li>Wu Chou
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="web services fragment (ws-fragment)" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2011/REC-ws-fragment-20111213/" title="Latest draft of Web Services Fragment (WS-Fragment) formally approved by the group">Web Services Fragment (WS-Fragment)</a></h2>
                        <p class=deliverer>Web Services Resource Access Working Group</p>
                        <p class=pubdetails>2011-12-13 - <a title="Web Services Fragment (WS-Fragment) publication history" href="/standards/history/ws-fragment">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Doug Davis
                            <li>Ashok Malhotra
                            <li>Katy Warr
                            <li>Wu Chou
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="requirements for home networking scenarios" data-tag="media" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2011/NOTE-hnreq-20111201/" title="Latest draft of Requirements for Home Networking Scenarios formally approved by the group">Requirements for Home Networking Scenarios</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=deliverer>Media and Entertainment Interest Group</p>
                        <p class=pubdetails>2011-12-01 - <a title="Requirements for Home Networking Scenarios publication history" href="/standards/history/hnreq">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Giuseppe Pascale
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                <li data-title="protocol for media fragments 1.0 resolution in http" data-tag="media" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2011/WD-media-frags-recipes-20111201/" title="Latest draft of Protocol for Media Fragments 1.0 Resolution in HTTP formally approved by the group">Protocol for Media Fragments 1.0 Resolution in HTTP</a></h2>
                        <p class=deliverer>Media Fragments Working Group</p>
                        <p class=pubdetails>2011-12-01 - <a title="Protocol for Media Fragments 1.0 Resolution in HTTP publication history" href="/standards/history/media-frags-recipes">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Raphaël Troncy
                            <li>Erik Mannens
                            <li>Silvia Pfeiffer
                            <li>Davy Van Deursen
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                <li data-title="ontology of rhetorical blocks (orb)" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2011/NOTE-hcls-orb-20111020/" title="Latest draft of Ontology of Rhetorical Blocks (ORB) formally approved by the group">Ontology of Rhetorical Blocks (ORB)</a></h2>
                        <p class=deliverer>Semantic Web Health Care and Life Sciences Interest Group</p>
                        <p class=pubdetails>2011-10-20 - <a title="Ontology of Rhetorical Blocks (ORB) publication history" href="/standards/history/hcls-orb">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Paolo Ciccarese
                            <li>Tudor Groza
                          </ul>
                                  </li>
                                                                                                                          <li data-title="requirement for standardizing widgets" data-tag="" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2011/NOTE-widgets-reqs-20110927/" title="Latest draft of Requirement For Standardizing Widgets formally approved by the group">Requirement For Standardizing Widgets</a></h2>
                        <p class=deliverer>(historical) Web Applications Working Group</p>
                        <p class=pubdetails>2011-09-27 - <a title="Requirement For Standardizing Widgets publication history" href="/standards/history/widgets-reqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Marcos Caceres
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="ink markup language (inkml)" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2011/REC-InkML-20110920/" title="Latest draft of Ink Markup Language (InkML) formally approved by the group">Ink Markup Language (InkML)</a></h2>
                        <p class=deliverer>Multimodal Interaction Working Group</p>
                        <p class=pubdetails>2011-09-20 - <a title="Ink Markup Language (InkML) publication history" href="/standards/history/InkML">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Stephen Watt
                            <li>Tom Underhill
                          </ul>
                                  </li>
                                                                                                    <li data-title="scalable vector graphics (svg) 1.1 (second edition)" data-tag="graphics" data-status="rec" data-version="">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2011/REC-SVG11-20110816/" title="Latest draft of Scalable Vector Graphics (SVG) 1.1 (Second Edition) formally approved by the group">Scalable Vector Graphics (SVG) 1.1 (Second Edition)</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2011-08-16 - <a title="Scalable Vector Graphics (SVG) 1.1 (Second Edition) publication history" href="/standards/history/SVG11">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Erik Dahlström
                            <li>Patrick Dengler
                            <li>Anthony Grasso
                            <li>Chris Lilley
                            <li>Cameron McCormack
                            <li>Doug Schepers
                            <li>Jonathan Watt
                            <li>Jon Ferraiolo
                            <li>Jun Fujisawa
                            <li>Dean Jackson
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                                                <li data-title="working with time zones" data-tag="i18n" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2011/NOTE-timezone-20110705/" title="Latest draft of Working with Time Zones formally approved by the group">Working with Time Zones</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2011-07-05 - <a title="Working with Time Zones publication history" href="/standards/history/timezone">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Addison Phillips
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="voice browser call control: ccxml version 1.0" data-tag="media" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2011/REC-ccxml-20110705/" title="Latest draft of Voice Browser Call Control: CCXML Version 1.0 formally approved by the group">Voice  Browser  Call  Control:  CCXML  Version&nbsp;1.0</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>2011-07-05 - <a title="Voice Browser Call Control: CCXML Version 1.0 publication history" href="/standards/history/ccxml">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Paolo Baggia
                            <li>Mark Scott
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                <li data-title="an xsd datatype for ieee floating-point decimal" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2011/NOTE-xsd-precisionDecimal-20110609/" title="Latest draft of An XSD datatype for IEEE floating-point decimal formally approved by the group">An XSD datatype for IEEE floating-point decimal</a></h2>
                        <p class=deliverer>XML Schema Working Group</p>
                        <p class=pubdetails>2011-06-09 - <a title="An XSD datatype for IEEE floating-point decimal publication history" href="/standards/history/xsd-precisionDecimal">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>David Peterson
                            <li>Michael Sperberg-McQueen
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="unicode block names for use in xsd regular expressions" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2011/NOTE-xsd-unicode-blocknames-20110609/" title="Latest draft of Unicode block names for use in XSD regular expressions formally approved by the group">Unicode block names for use in XSD regular expressions</a></h2>
                        <p class=deliverer>XML Schema Working Group</p>
                        <p class=pubdetails>2011-06-09 - <a title="Unicode block names for use in XSD regular expressions publication history" href="/standards/history/xsd-unicode-blocknames">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael Sperberg-McQueen
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="a mathml for css profile" data-tag="css" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2011/REC-mathml-for-css-20110607/" title="Latest draft of A MathML for CSS Profile formally approved by the group">A MathML for CSS Profile</a></h2>
                        <p class=deliverer>Math Working Group</p>
                        <p class=pubdetails>2011-06-07 - <a title="A MathML for CSS Profile publication history" href="/standards/history/mathml-for-css">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Bert Bos
                            <li>David Carlisle
                            <li>Giorgi Chavchanidze
                            <li>Patrick D F Ion
                            <li>Bruce Miller
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                <li data-title="cascading style sheets level 2 revision 1 (css 2.1) specification" data-tag="css" data-status="rec" data-version="latest ed">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2011/REC-CSS2-20110607/" title="Latest draft of Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification formally approved by the group">Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2011-06-07 - <a title="Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification publication history" href="/standards/history/CSS2">History</a>
                        - <a href="http://dev.w3.org/csswg/css2/" title="Latest editor's draft of Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification">Editor's Draft</a>
                        </p>
                        <ul class="editorlist">
                            <li>Bert Bos
                            <li>Tantek Çelik
                            <li>Ian Hickson
                            <li>Håkon Wium Lie
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                          <li data-title="cascading style sheets (css) snapshot 2007" data-tag="css" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2011/NOTE-css-beijing-20110512/" title="Latest draft of Cascading Style Sheets (CSS) Snapshot 2007 formally approved by the group">Cascading Style Sheets (CSS) Snapshot 2007</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2011-05-12 - <a title="Cascading Style Sheets (CSS) Snapshot 2007 publication history" href="/standards/history/css-beijing">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Elika Etemad
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                <li data-title="points of interest core" data-tag="" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2011/WD-poi-core-20110512/" title="Latest draft of Points of Interest Core formally approved by the group">Points of Interest Core</a></h2>
                        <p class=deliverer>Points of Interest Working Group</p>
                        <p class=pubdetails>2011-05-12 - <a title="Points of Interest Core publication history" href="/standards/history/poi-core">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Matt Womer
                          </ul>
                                  </li>
                                                                                                                          <li data-title="cascading style sheets (css) snapshot 2010" data-tag="css" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2011/NOTE-css-2010-20110512/" title="Latest draft of Cascading Style Sheets (CSS) Snapshot 2010 formally approved by the group">Cascading Style Sheets (CSS) Snapshot 2010</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2011-05-12 - <a title="Cascading Style Sheets (CSS) Snapshot 2010 publication history" href="/standards/history/css-2010">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Elika Etemad
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                          <li data-title="programmable http caching and serving" data-tag="webapi" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2011/NOTE-DataCache-20110329/" title="Latest draft of Programmable HTTP Caching and Serving formally approved by the group">Programmable HTTP Caching and Serving</a></h2>
                        <p class=deliverer>(historical) Web Applications Working Group</p>
                        <p class=pubdetails>2011-03-29 - <a title="Programmable HTTP Caching and Serving publication history" href="/standards/history/DataCache">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Nikunj Mehta
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                <li data-title="device api access control use cases and requirements" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2011/NOTE-dap-policy-reqs-20110317/" title="Latest draft of Device API Access Control Use Cases and Requirements formally approved by the group">Device API Access Control Use Cases and Requirements</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2011-03-17 - <a title="Device API Access Control Use Cases and Requirements publication history" href="/standards/history/dap-policy-reqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Laura Arribas
                            <li>Frederick Hirsch
                            <li>Dominique Hazaël-Massieux
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="xquery update facility 1.0" data-tag="xml" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2011/REC-xquery-update-10-20110317/" title="Latest draft of XQuery Update Facility 1.0 formally approved by the group">XQuery  Update  Facility&nbsp;1.0</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=pubdetails>2011-03-17 - <a title="XQuery Update Facility 1.0 publication history" href="/standards/history/xquery-update-10">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Don Chamberlin
                            <li>Jonathan Robie
                            <li>Michael Dyck
                            <li>Daniela Florescu
                            <li>Jim Melton
                            <li>Jerome Simeon
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="xquery and xpath full text 1.0" data-tag="xml" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2011/REC-xpath-full-text-10-20110317/" title="Latest draft of XQuery and XPath Full Text 1.0 formally approved by the group">XQuery  and  XPath  Full  Text&nbsp;1.0</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2011-03-17 - <a title="XQuery and XPath Full Text 1.0 publication history" href="/standards/history/xpath-full-text-10">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Pat Case
                            <li>Michael Dyck
                            <li>Mary Holstege
                            <li>Sihem Amer-Yahia
                            <li>Chavdar Botev
                            <li>Stephen Buxton
                            <li>Jochen Dörre
                            <li>Jim Melton
                            <li>Michael Rys
                            <li>Jayavel Shanmugasundaram
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="describing linked datasets with the void vocabulary" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2011/NOTE-void-20110303/" title="Latest draft of Describing Linked Datasets with the VoID Vocabulary formally approved by the group">Describing Linked Datasets with the VoID Vocabulary</a></h2>
                        <p class=deliverer>Semantic Web Interest Group</p>
                        <p class=pubdetails>2011-03-03 - <a title="Describing Linked Datasets with the VoID Vocabulary publication history" href="/standards/history/void">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Keith Alexander
                            <li>Richard Cyganiak
                            <li>Michael Hausenblas
                            <li>Jun Zhao
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="best practices for creating mmi modality components" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2011/NOTE-mmi-mcbp-20110301/" title="Latest draft of Best practices for creating MMI Modality Components formally approved by the group">Best practices for creating MMI Modality Components</a></h2>
                        <p class=deliverer>Multimodal Interaction Working Group</p>
                        <p class=pubdetails>2011-03-01 - <a title="Best practices for creating MMI Modality Components publication history" href="/standards/history/mmi-mcbp">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ingmar Kliche
                          </ul>
                                  </li>
                                                                                                                          <li data-title="xquery and xpath full text 1.0 use cases" data-tag="xml" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2011/NOTE-xpath-full-text-10-use-cases-20110125/" title="Latest draft of XQuery and XPath Full Text 1.0 Use Cases formally approved by the group">XQuery and XPath Full Text 1.0 Use Cases</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2011-01-25 - <a title="XQuery and XPath Full Text 1.0 Use Cases publication history" href="/standards/history/xpath-full-text-10-use-cases">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Pat Case
                            <li>Sihem Amer-Yahia
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="document templating steps for xproc" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2011/NOTE-xproc-template-20110125/" title="Latest draft of Document Templating Steps for XProc formally approved by the group">Document Templating Steps for XProc</a></h2>
                        <p class=deliverer>XML Processing Model Working Group</p>
                        <p class=pubdetails>2011-01-25 - <a title="Document Templating Steps for XProc publication history" href="/standards/history/xproc-template">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Norman Walsh
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="xquery update facility 1.0 requirements" data-tag="xml" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2011/NOTE-xquery-update-10-requirements-20110125/" title="Latest draft of XQuery Update Facility 1.0 Requirements formally approved by the group">XQuery Update Facility 1.0 Requirements</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=pubdetails>2011-01-25 - <a title="XQuery Update Facility 1.0 Requirements publication history" href="/standards/history/xquery-update-10-requirements">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Don Chamberlin
                            <li>Jonathan Robie
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="xquery and xpath full text 1.0 requirements" data-tag="xml" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2011/NOTE-xpath-full-text-10-requirements-20110125/" title="Latest draft of XQuery and XPath Full Text 1.0 Requirements formally approved by the group">XQuery and XPath Full Text 1.0 Requirements</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2011-01-25 - <a title="XQuery and XPath Full Text 1.0 Requirements publication history" href="/standards/history/xpath-full-text-10-requirements">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Stephen Buxton
                            <li>Pat Case
                            <li>Michael Rys
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="xquery update facility 1.0 use cases" data-tag="xml" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2011/NOTE-xquery-update-10-use-cases-20110125/" title="Latest draft of XQuery Update Facility 1.0 Use Cases formally approved by the group">XQuery Update Facility 1.0 Use Cases</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=pubdetails>2011-01-25 - <a title="XQuery Update Facility 1.0 Use Cases publication history" href="/standards/history/xquery-update-10-use-cases">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ioana Manolescu
                            <li>Jonathan Robie
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xhtml access module" data-tag="accessibility html" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2010/NOTE-xhtml-access-20101216/" title="Latest draft of XHTML Access Module formally approved by the group">XHTML Access Module</a></h2>
                        <p class=deliverer>XHTML2 Working Group</p>
                        <p class=pubdetails>2010-12-16 - <a title="XHTML Access Module publication history" href="/standards/history/xhtml-access">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mark Birbeck
                            <li>Shane McCarron
                            <li>Steven Pemberton
                            <li>T.V. Raman
                            <li>Richard Schwerdtfeger
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                    <li data-title="xml events 2" data-tag="" data-status="note" data-version="upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2010/NOTE-xml-events2-20101216/" title="Latest draft of XML Events 2 formally approved by the group">XML  Events&nbsp;2</a></h2>
                        <p class=deliverer>Forms Working Group</p>
                        <p class=deliverer>XHTML2 Working Group</p>
                        <p class=pubdetails>2010-12-16 - <a title="XML Events 2 publication history" href="/standards/history/xml-events2">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Shane McCarron
                            <li>Mark Birbeck
                            <li>Roland Merrick
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                            <li data-title="xhtml™ 2.0" data-tag="" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2010/NOTE-xhtml2-20101216/" title="Latest draft of XHTML™ 2.0 formally approved by the group">XHTML™&nbsp;2.0</a></h2>
                        <p class=deliverer>XHTML2 Working Group</p>
                        <p class=pubdetails>2010-12-16 - <a title="XHTML™ 2.0 publication history" href="/standards/history/xhtml2">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mark Birbeck
                            <li>Markus Gylling
                            <li>Shane McCarron
                            <li>Steven Pemberton
                            <li>Jonny Axelsson
                            <li>Micah Dubinko
                            <li>Beth Epperson
                            <li>Masayasu Ishikawa
                            <li>Ann Navarro
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                          <li data-title="curie syntax 1.0" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2010/NOTE-curie-20101216/" title="Latest draft of CURIE Syntax 1.0 formally approved by the group">CURIE  Syntax&nbsp;1.0</a></h2>
                        <p class=deliverer>XHTML2 Working Group</p>
                        <p class=pubdetails>2010-12-16 - <a title="CURIE Syntax 1.0 publication history" href="/standards/history/curie">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mark Birbeck
                            <li>Shane McCarron
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="xhtml role attribute module" data-tag="accessibility html" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2010/NOTE-xhtml-role-20101216/" title="Latest draft of XHTML Role Attribute Module formally approved by the group">XHTML Role Attribute Module</a></h2>
                        <p class=deliverer>XHTML2 Working Group</p>
                        <p class=deliverer>Protocols and Formats Working Group</p>
                        <p class=pubdetails>2010-12-16 - <a title="XHTML Role Attribute Module publication history" href="/standards/history/xhtml-role">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mark Birbeck
                            <li>Shane McCarron
                            <li>Steven Pemberton
                            <li>T.V. Raman
                            <li>Richard Schwerdtfeger
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="voice extensible markup language (voicexml) 3.0" data-tag="media" data-status="wd" data-version="upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2010/WD-voicexml30-20101216/" title="Latest draft of Voice Extensible Markup Language (VoiceXML) 3.0 formally approved by the group">Voice  Extensible  Markup  Language  (VoiceXML)&nbsp;3.0</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>2010-12-16 - <a title="Voice Extensible Markup Language (VoiceXML) 3.0 publication history" href="/standards/history/voicexml30">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Scott McGlashan
                            <li>Daniel Burnett
                            <li>Rahul Akolkar
                            <li>RJ Auburn
                            <li>Paolo Baggia
                            <li>Michael Bodell
                            <li>Jerry Carter
                            <li>Mangesh Deshmukh
                            <li>Matt Oshry
                            <li>Kenneth Rehor
                            <li>Xu Yang
                            <li>Milan Young
                            <li>Rafah Hosn
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xframes" data-tag="html" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2010/NOTE-xframes-20101216/" title="Latest draft of XFrames formally approved by the group">XFrames</a></h2>
                        <p class=deliverer>XHTML2 Working Group</p>
                        <p class=pubdetails>2010-12-16 - <a title="XFrames publication history" href="/standards/history/xframes">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steven Pemberton
                            <li>Masayasu Ishikawa
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="hlink" data-tag="html" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2010/NOTE-hlink-20101216/" title="Latest draft of HLink formally approved by the group">HLink</a></h2>
                        <p class=deliverer>XHTML2 Working Group</p>
                        <p class=pubdetails>2010-12-16 - <a title="HLink publication history" href="/standards/history/hlink">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steven Pemberton
                            <li>Masayasu Ishikawa
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                          <li data-title="xml path language (xpath) 2.0 (second edition)" data-tag="xml" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2010/REC-xpath20-20101214/" title="Latest draft of XML Path Language (XPath) 2.0 (Second Edition) formally approved by the group">XML Path Language (XPath) 2.0 (Second Edition)</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2010-12-14 - <a title="XML Path Language (XPath) 2.0 (Second Edition) publication history" href="/standards/history/xpath20">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Anders Berglund
                            <li>Scott Boag
                            <li>Don Chamberlin
                            <li>Mary Fernandez
                            <li>Michael Kay
                            <li>Jonathan Robie
                            <li>Jerome Simeon
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="xquery 1.0 and xpath 2.0 formal semantics (second edition)" data-tag="xml" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2010/REC-xquery-semantics-20101214/" title="Latest draft of XQuery 1.0 and XPath 2.0 Formal Semantics (Second Edition) formally approved by the group">XQuery 1.0 and XPath 2.0 Formal Semantics (Second Edition)</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2010-12-14 - <a title="XQuery 1.0 and XPath 2.0 Formal Semantics (Second Edition) publication history" href="/standards/history/xquery-semantics">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Denise Draper
                            <li>Michael Dyck
                            <li>Peter Fankhauser
                            <li>Mary Fernandez
                            <li>Ashok Malhotra
                            <li>Kristoffer Rose
                            <li>Michael Rys
                            <li>Jerome Simeon
                            <li>Philip Wadler
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="xquery 1.0 and xpath 2.0 data model (xdm) (second edition)" data-tag="xml" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2010/REC-xpath-datamodel-20101214/" title="Latest draft of XQuery 1.0 and XPath 2.0 Data Model (XDM) (Second Edition) formally approved by the group">XQuery 1.0 and XPath 2.0 Data Model (XDM) (Second Edition)</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2010-12-14 - <a title="XQuery 1.0 and XPath 2.0 Data Model (XDM) (Second Edition) publication history" href="/standards/history/xpath-datamodel">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Anders Berglund
                            <li>Mary Fernandez
                            <li>Ashok Malhotra
                            <li>Jonathan Marsh
                            <li>Marton Nagy
                            <li>Norman Walsh
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="mobile web application best practices" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2010/REC-mwabp-20101214/" title="Latest draft of Mobile Web Application Best Practices formally approved by the group">Mobile Web Application Best Practices</a></h2>
                        <p class=deliverer>Mobile Web Best Practices Working Group</p>
                        <p class=pubdetails>2010-12-14 - <a title="Mobile Web Application Best Practices publication history" href="/standards/history/mwabp">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Adam Connors
                            <li>Bryan Sullivan
                          </ul>
                                  </li>
                                                                                                                          <li data-title="xquery 1.0 and xpath 2.0 functions and operators (second edition)" data-tag="xml" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2010/REC-xpath-functions-20101214/" title="Latest draft of XQuery 1.0 and XPath 2.0 Functions and Operators (Second Edition) formally approved by the group">XQuery 1.0 and XPath 2.0 Functions and Operators (Second Edition)</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2010-12-14 - <a title="XQuery 1.0 and XPath 2.0 Functions and Operators (Second Edition) publication history" href="/standards/history/xpath-functions">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ashok Malhotra
                            <li>Jim Melton
                            <li>Norman Walsh
                            <li>Michael Kay
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="xml syntax for xquery 1.0 (xqueryx) (second edition)" data-tag="xml" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2010/REC-xqueryx-20101214/" title="Latest draft of XML Syntax for XQuery 1.0 (XQueryX) (Second Edition) formally approved by the group">XML Syntax for XQuery 1.0 (XQueryX) (Second Edition)</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=pubdetails>2010-12-14 - <a title="XML Syntax for XQuery 1.0 (XQueryX) (Second Edition) publication history" href="/standards/history/xqueryx">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jim Melton
                            <li>Subramanian Muralidhar
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="xslt 2.0 and xquery 1.0 serialization (second edition)" data-tag="xml" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2010/REC-xslt-xquery-serialization-20101214/" title="Latest draft of XSLT 2.0 and XQuery 1.0 Serialization (Second Edition) formally approved by the group">XSLT 2.0 and XQuery 1.0 Serialization (Second Edition)</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2010-12-14 - <a title="XSLT 2.0 and XQuery 1.0 Serialization (Second Edition) publication history" href="/standards/history/xslt-xquery-serialization">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Scott Boag
                            <li>Michael Kay
                            <li>Joanne Tong
                            <li>Norman Walsh
                            <li>Henry Zongaro
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="xquery 1.0: an xml query language (second edition)" data-tag="xml" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2010/REC-xquery-20101214/" title="Latest draft of XQuery 1.0: An XML Query Language (Second Edition) formally approved by the group">XQuery 1.0: An XML Query Language (Second Edition)</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=pubdetails>2010-12-14 - <a title="XQuery 1.0: An XML Query Language (Second Edition) publication history" href="/standards/history/xquery">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Scott Boag
                            <li>Don Chamberlin
                            <li>Mary Fernandez
                            <li>Daniela Florescu
                            <li>Jonathan Robie
                            <li>Jerome Simeon
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="web sql database" data-tag="webapi" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2010/NOTE-webdatabase-20101118/" title="Latest draft of Web SQL Database formally approved by the group">Web SQL Database</a></h2>
                        <p class=deliverer>(historical) Web Applications Working Group</p>
                        <p class=pubdetails>2010-11-18 - <a title="Web SQL Database publication history" href="/standards/history/webdatabase">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ian Hickson
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="associating style sheets with xml documents 1.0 (second edition)" data-tag="css xml" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2010/REC-xml-stylesheet-20101028/" title="Latest draft of Associating Style Sheets with XML documents 1.0 (Second Edition) formally approved by the group">Associating Style Sheets with XML documents 1.0 (Second Edition)</a></h2>
                        <p class=deliverer>XML Core Working Group</p>
                        <p class=pubdetails>2010-10-28 - <a title="Associating Style Sheets with XML documents 1.0 (Second Edition) publication history" href="/standards/history/xml-stylesheet">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>James Clark
                            <li>Simon Pieters
                            <li>Henry Thompson
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="guidelines for web content transformation proxies 1.0" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2010/NOTE-ct-guidelines-20101026/" title="Latest draft of Guidelines for Web Content Transformation Proxies 1.0 formally approved by the group">Guidelines  for  Web  Content  Transformation  Proxies&nbsp;1.0</a></h2>
                        <p class=deliverer>Mobile Web Best Practices Working Group</p>
                        <p class=pubdetails>2010-10-26 - <a title="Guidelines for Web Content Transformation Proxies 1.0 publication history" href="/standards/history/ct-guidelines">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jo Rabin
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="speech synthesis markup language (ssml) version 1.1" data-tag="media" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2010/REC-speech-synthesis11-20100907/" title="Latest draft of Speech Synthesis Markup Language (SSML) Version 1.1 formally approved by the group">Speech  Synthesis  Markup  Language  (SSML)  Version&nbsp;1.1</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>2010-09-07 - <a title="Speech Synthesis Markup Language (SSML) Version 1.1 publication history" href="/standards/history/speech-synthesis11">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Daniel Burnett
                            <li>Zhi Wei Shuang
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="compound document by reference framework 1.0" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2010/NOTE-CDR-20100819/" title="Latest draft of Compound Document by Reference Framework 1.0 formally approved by the group">Compound  Document  by  Reference  Framework&nbsp;1.0</a></h2>
                        <p class=deliverer>Compound Document Formats Working Group</p>
                        <p class=pubdetails>2010-08-19 - <a title="Compound Document by Reference Framework 1.0 publication history" href="/standards/history/CDR">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Timur Mehrvarz
                            <li>Lasse Pajunen
                            <li>Julien Quint
                            <li>Daniel Appelquist
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                          <li data-title="wicd core 1.0" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2010/NOTE-WICD-20100819/" title="Latest draft of WICD Core 1.0 formally approved by the group">WICD  Core&nbsp;1.0</a></h2>
                        <p class=deliverer>Compound Document Formats Working Group</p>
                        <p class=pubdetails>2010-08-19 - <a title="WICD Core 1.0 publication history" href="/standards/history/WICD">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Timur Mehrvarz
                            <li>Lasse Pajunen
                            <li>Julien Quint
                            <li>Daniel Appelquist
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                          <li data-title="wicd full 1.0" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2010/NOTE-WICDFull-20100819/" title="Latest draft of WICD Full 1.0 formally approved by the group">WICD  Full&nbsp;1.0</a></h2>
                        <p class=deliverer>Compound Document Formats Working Group</p>
                        <p class=pubdetails>2010-08-19 - <a title="WICD Full 1.0 publication history" href="/standards/history/WICDFull">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Timur Mehrvarz
                            <li>Lasse Pajunen
                            <li>Julien Quint
                            <li>Daniel Appelquist
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                          <li data-title="wicd mobile 1.0" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2010/NOTE-WICDMobile-20100819/" title="Latest draft of WICD Mobile 1.0 formally approved by the group">WICD  Mobile&nbsp;1.0</a></h2>
                        <p class=deliverer>Compound Document Formats Working Group</p>
                        <p class=pubdetails>2010-08-19 - <a title="WICD Mobile 1.0 publication history" href="/standards/history/WICDMobile">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Timur Mehrvarz
                            <li>Lasse Pajunen
                            <li>Julien Quint
                            <li>Daniel Appelquist
                          </ul>
                                  </li>
                                                                                                                          <li data-title="web security context: user interface guidelines" data-tag="" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2010/REC-wsc-ui-20100812/" title="Latest draft of Web Security Context: User Interface Guidelines formally approved by the group">Web Security Context: User Interface Guidelines</a></h2>
                        <p class=deliverer>Web Security Context Working Group</p>
                        <p class=pubdetails>2010-08-12 - <a title="Web Security Context: User Interface Guidelines publication history" href="/standards/history/wsc-ui">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Thomas Roessler
                            <li>Anil Saldhana
                          </ul>
                                  </li>
                                                                                                                          <li data-title="web services resource transfer (ws-rt)" data-tag="" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2010/NOTE-ws-resource-transfer-20100713/" title="Latest draft of Web Services Resource Transfer (WS-RT) formally approved by the group">Web Services Resource Transfer (WS-RT)</a></h2>
                        <p class=deliverer>Web Services Resource Access Working Group</p>
                        <p class=pubdetails>2010-07-13 - <a title="Web Services Resource Transfer (WS-RT) publication history" href="/standards/history/ws-resource-transfer">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Doug Davis
                            <li>Ashok Malhotra
                            <li>Katy Warr
                            <li>Wu Chou
                          </ul>
                                  </li>
                                                                                                                          <li data-title="device independent authoring language (dial)" data-tag="" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2010/NOTE-dial-20100629/" title="Latest draft of Device Independent Authoring Language (DIAL) formally approved by the group">Device Independent Authoring Language (DIAL)</a></h2>
                        <p class=deliverer>Ubiquitous Web Applications Working Group</p>
                        <p class=pubdetails>2010-06-29 - <a title="Device Independent Authoring Language (DIAL) publication history" href="/standards/history/dial">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Kevin Smith
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="composite capability/preference profiles (cc/pp): structure and vocabularies 2.0" data-tag="data" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2010/NOTE-CCPP-struct-vocab2-20100629/" title="Latest draft of Composite Capability/Preference Profiles (CC/PP): Structure and Vocabularies 2.0 formally approved by the group">Composite  Capability/Preference  Profiles  (CC/PP):  Structure  and  Vocabularies&nbsp;2.0</a></h2>
                        <p class=deliverer>Ubiquitous Web Applications Working Group</p>
                        <p class=pubdetails>2010-06-29 - <a title="Composite Capability/Preference Profiles (CC/PP): Structure and Vocabularies 2.0 publication history" href="/standards/history/CCPP-struct-vocab2">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Cédric Kiss
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                          <li data-title="dial part 0: primer" data-tag="" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2010/NOTE-dial-primer-20100629/" title="Latest draft of DIAL Part 0: Primer formally approved by the group">DIAL Part 0: Primer</a></h2>
                        <p class=deliverer>Ubiquitous Web Applications Working Group</p>
                        <p class=pubdetails>2010-06-29 - <a title="DIAL Part 0: Primer publication history" href="/standards/history/dial-primer">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Kevin Smith
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="delivery context: client interfaces (dcci) 1.0" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2010/NOTE-DPF-20100629/" title="Latest draft of Delivery Context: Client Interfaces (DCCI) 1.0 formally approved by the group">Delivery  Context:  Client  Interfaces  (DCCI)&nbsp;1.0</a></h2>
                        <p class=deliverer>Ubiquitous Web Applications Working Group</p>
                        <p class=pubdetails>2010-06-29 - <a title="Delivery Context: Client Interfaces (DCCI) 1.0 publication history" href="/standards/history/DPF">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Keith Waters
                            <li>Rafah Hosn
                            <li>Dave Raggett
                            <li>Sailesh Sathish
                            <li>Matt Womer
                            <li>Max Froumentin
                            <li>Rhys Lewis
                            <li>Keith Rosenblatt
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="device api privacy requirements" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2010/NOTE-dap-privacy-reqs-20100629/" title="Latest draft of Device API Privacy Requirements formally approved by the group">Device API Privacy Requirements</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2010-06-29 - <a title="Device API Privacy Requirements publication history" href="/standards/history/dap-privacy-reqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Alissa Cooper
                            <li>Frederick Hirsch
                            <li>John Morris
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="content selection for device independence (diselect) 1.0" data-tag="" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2010/NOTE-cselection-20100629/" title="Latest draft of Content Selection for Device Independence (DISelect) 1.0 formally approved by the group">Content  Selection  for  Device  Independence  (DISelect)&nbsp;1.0</a></h2>
                        <p class=deliverer>Ubiquitous Web Applications Working Group</p>
                        <p class=pubdetails>2010-06-29 - <a title="Content Selection for Device Independence (DISelect) 1.0 publication history" href="/standards/history/cselection">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Rhys Lewis
                            <li>Roland Merrick
                            <li>Max Froumentin
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="content selection primer 1.0" data-tag="" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2010/NOTE-cselection-primer-20100629/" title="Latest draft of Content Selection Primer 1.0 formally approved by the group">Content  Selection  Primer&nbsp;1.0</a></h2>
                        <p class=deliverer>Ubiquitous Web Applications Working Group</p>
                        <p class=pubdetails>2010-06-29 - <a title="Content Selection Primer 1.0 publication history" href="/standards/history/cselection-primer">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Rhys Lewis
                            <li>Roland Merrick
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="delivery context: xpath access functions 1.0" data-tag="" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2010/NOTE-cselection-xaf-20100629/" title="Latest draft of Delivery Context: XPath Access Functions 1.0 formally approved by the group">Delivery  Context:  XPath  Access  Functions&nbsp;1.0</a></h2>
                        <p class=deliverer>Ubiquitous Web Applications Working Group</p>
                        <p class=pubdetails>2010-06-29 - <a title="Delivery Context: XPath Access Functions 1.0 publication history" href="/standards/history/cselection-xaf">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Rhys Lewis
                            <li>Roland Merrick
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="delivery context ontology" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2010/NOTE-dcontology-20100629/" title="Latest draft of Delivery Context Ontology formally approved by the group">Delivery Context Ontology</a></h2>
                        <p class=deliverer>Ubiquitous Web Applications Working Group</p>
                        <p class=pubdetails>2010-06-29 - <a title="Delivery Context Ontology publication history" href="/standards/history/dcontology">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jose Manuel Cantera Fonseca
                            <li>Rhys Lewis
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="requirements and use cases for xslt 2.1" data-tag="xml" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2010/WD-xslt-21-requirements-20100610/" title="Latest draft of Requirements and Use Cases for XSLT 2.1 formally approved by the group">Requirements  and  Use  Cases  for  XSLT&nbsp;2.1</a></h2>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2010-06-10 - <a title="Requirements and Use Cases for XSLT 2.1 publication history" href="/standards/history/xslt-21-requirements">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Petr Cimprich
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="use cases and requirements for mapping relational databases to rdf" data-tag="data" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2010/WD-rdb2rdf-ucr-20100608/" title="Latest draft of Use Cases and Requirements for Mapping Relational Databases to RDF formally approved by the group">Use Cases and Requirements for Mapping Relational Databases to RDF</a></h2>
                        <p class=deliverer>RDB2RDF Working Group</p>
                        <p class=pubdetails>2010-06-08 - <a title="Use Cases and Requirements for Mapping Relational Databases to RDF publication history" href="/standards/history/rdb2rdf-ucr">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Eric Prud&#039;hommeaux
                            <li>Michael Hausenblas
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                          <li data-title="xproc: an xml pipeline language" data-tag="xml" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2010/REC-xproc-20100511/" title="Latest draft of XProc: An XML Pipeline Language formally approved by the group">XProc: An XML Pipeline Language</a></h2>
                        <p class=deliverer>XML Processing Model Working Group</p>
                        <p class=pubdetails>2010-05-11 - <a title="XProc: An XML Pipeline Language publication history" href="/standards/history/xproc">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Norman Walsh
                            <li>Alex Milowski
                            <li>Henry Thompson
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="xml linking language (xlink) version 1.1" data-tag="xml" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2010/REC-xlink11-20100506/" title="Latest draft of XML Linking Language (XLink) Version 1.1 formally approved by the group">XML  Linking  Language  (XLink)  Version&nbsp;1.1</a></h2>
                        <p class=deliverer>XML Core Working Group</p>
                        <p class=pubdetails>2010-05-06 - <a title="XML Linking Language (XLink) Version 1.1 publication history" href="/standards/history/xlink11">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steven DeRose
                            <li>Eve Maler
                            <li>David Orchard
                            <li>Norman Walsh
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                  <li data-title="webcgm 2.1" data-tag="graphics" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2010/REC-webcgm21-20100301/" title="Latest draft of WebCGM 2.1 formally approved by the group">WebCGM&nbsp;2.1</a></h2>
                        <p class=deliverer>WebCGM Working Group</p>
                        <p class=pubdetails>2010-03-01 - <a title="WebCGM 2.1 publication history" href="/standards/history/webcgm21">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Benoit Bezaire
                            <li>Lofton Henderson
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xml signature transform simplification: requirements and design" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2010/NOTE-xmldsig-simplify-20100204/" title="Latest draft of XML Signature Transform Simplification: Requirements and Design formally approved by the group">XML Signature Transform Simplification: Requirements and Design</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>2010-02-04 - <a title="XML Signature Transform Simplification: Requirements and Design publication history" href="/standards/history/xmldsig-simplify">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Frederick Hirsch
                            <li>Pratik Datta
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="a method for writing testable conformance requirements" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2010/NOTE-test-methodology-20100128/" title="Latest draft of A Method for Writing Testable Conformance Requirements formally approved by the group">A Method for Writing Testable Conformance Requirements</a></h2>
                        <p class=deliverer>Mobile Web Test Suites Working Group</p>
                        <p class=pubdetails>2010-01-28 - <a title="A Method for Writing Testable Conformance Requirements publication history" href="/standards/history/test-methodology">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dominique Hazaël-Massieux
                            <li>Marcos Caceres
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="sparql 1.1 property paths" data-tag="data" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2010/WD-sparql11-property-paths-20100126/" title="Latest draft of SPARQL 1.1 Property Paths formally approved by the group">SPARQL 1.1 Property Paths</a></h2>
                        <p class=deliverer>SPARQL Working Group</p>
                        <p class=pubdetails>2010-01-26 - <a title="SPARQL 1.1 Property Paths publication history" href="/standards/history/sparql11-property-paths">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Andy Seaborne
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="use cases and requirements for ontology and api for media resource 1.0" data-tag="media" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2010/WD-media-annot-reqs-20100121/" title="Latest draft of Use Cases and Requirements for Ontology and API for Media Resource 1.0 formally approved by the group">Use  Cases  and  Requirements  for  Ontology  and  API  for  Media  Resource&nbsp;1.0</a></h2>
                        <p class=deliverer>Media Annotations Working Group</p>
                        <p class=pubdetails>2010-01-21 - <a title="Use Cases and Requirements for Ontology and API for Media Resource 1.0 publication history" href="/standards/history/media-annot-reqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>WonSuk Lee
                            <li>Tobias Bürger
                            <li>Felix Sasaki
                            <li>Véronique Malaisé
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                <li data-title="w3c xml schema definition language (xsd): component designators" data-tag="xml" data-status="cr" data-version="latest upcoming">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="http://www.w3.org/TR/2010/CR-xmlschema-ref-20100119/" title="Latest draft of W3C XML Schema Definition Language (XSD): Component Designators formally approved by the group">W3C XML Schema Definition Language (XSD): Component Designators</a></h2>
                        <p class=deliverer>XML Schema Working Group</p>
                        <p class=pubdetails>2010-01-19 - <a title="W3C XML Schema Definition Language (XSD): Component Designators publication history" href="/standards/history/xmlschema-ref">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mary Holstege
                            <li>Asir Vedamuthu
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="use cases and requirements for media fragments" data-tag="media" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2009/WD-media-frags-reqs-20091217/" title="Latest draft of Use cases and requirements for Media Fragments formally approved by the group">Use cases and requirements for Media Fragments</a></h2>
                        <p class=deliverer>Media Fragments Working Group</p>
                        <p class=pubdetails>2009-12-17 - <a title="Use cases and requirements for Media Fragments publication history" href="/standards/history/media-frags-reqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Raphaël Troncy
                            <li>Erik Mannens
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                <li data-title="use cases for possible future emma features" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2009/NOTE-emma-usecases-20091215/" title="Latest draft of Use Cases for Possible Future EMMA Features formally approved by the group">Use Cases for Possible Future EMMA Features</a></h2>
                        <p class=deliverer>Multimodal Interaction Working Group</p>
                        <p class=pubdetails>2009-12-15 - <a title="Use Cases for Possible Future EMMA Features publication history" href="/standards/history/emma-usecases">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael Johnston
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="mobile web for social development roadmap" data-tag="media" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2009/NOTE-mw4d-roadmap-20091208/" title="Latest draft of Mobile Web for Social Development Roadmap formally approved by the group">Mobile Web for Social Development Roadmap</a></h2>
                        <p class=deliverer>Mobile Web For Social Development (MW4D) Interest Group</p>
                        <p class=pubdetails>2009-12-08 - <a title="Mobile Web for Social Development Roadmap publication history" href="/standards/history/mw4d-roadmap">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Stéphane Boyera
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                          <li data-title="namespaces in xml 1.0 (third edition)" data-tag="xml" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2009/REC-xml-names-20091208/" title="Latest draft of Namespaces in XML 1.0 (Third Edition) formally approved by the group">Namespaces in XML 1.0 (Third Edition)</a></h2>
                        <p class=deliverer>XML Core Working Group</p>
                        <p class=pubdetails>2009-12-08 - <a title="Namespaces in XML 1.0 (Third Edition) publication history" href="/standards/history/xml-names">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tim Bray
                            <li>Dave Hollander
                            <li>Andrew Layman
                            <li>Richard Tobin
                            <li>Henry Thompson
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="pics 1.1 label distribution -- label syntax and communication protocols" data-tag="" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2009/REC-PICS-labels-20091124/" title="Latest draft of PICS 1.1 Label Distribution -- Label Syntax and Communication Protocols formally approved by the group">PICS 1.1 Label Distribution -- Label Syntax and Communication Protocols</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>2009-11-24 - <a title="PICS 1.1 Label Distribution -- Label Syntax and Communication Protocols publication history" href="/standards/history/REC-PICS-labels">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tim Krauskopf
                            <li>Jim Miller
                            <li>Paul Resnick
                            <li>Win Treese
                          </ul>
                                  </li>
                                                                                                                          <li data-title="pics 1.1 rating services and rating systems -- and their machine readable descriptions" data-tag="" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2009/REC-PICS-services-20091124/" title="Latest draft of PICS 1.1 Rating Services and Rating Systems -- and Their Machine Readable Descriptions formally approved by the group">PICS 1.1 Rating Services and Rating Systems -- and Their Machine Readable Descriptions</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>2009-11-24 - <a title="PICS 1.1 Rating Services and Rating Systems -- and Their Machine Readable Descriptions publication history" href="/standards/history/REC-PICS-services">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jim Miller
                            <li>Paul Resnick
                            <li>David Singer
                          </ul>
                                  </li>
                                                                                                                          <li data-title="picsrules 1.1 specification" data-tag="" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2009/REC-PICSRules-20091124/" title="Latest draft of PICSRules 1.1 Specification formally approved by the group">PICSRules 1.1 Specification</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>2009-11-24 - <a title="PICSRules 1.1 Specification publication history" href="/standards/history/REC-PICSRules">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Christopher Evans
                            <li>Alex Hopmann
                            <li>Martin PreslerMarshall
                            <li>Paul Resnick
                          </ul>
                                  </li>
                                                                                                                          <li data-title="pics signed labels (dsig) 1.0 specification" data-tag="" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2009/REC-DSig-label-20091124/" title="Latest draft of PICS Signed Labels (DSig) 1.0 Specification formally approved by the group">PICS Signed Labels (DSig) 1.0 Specification</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>2009-11-24 - <a title="PICS Signed Labels (DSig) 1.0 Specification publication history" href="/standards/history/REC-DSig-label">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Yanghua Chu
                            <li>Philip DesAutels
                            <li>Brian LaMacchia
                            <li>Peter Lipp
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="content transformation landscape 1.0" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2009/NOTE-ct-landscape-20091027/" title="Latest draft of Content Transformation Landscape 1.0 formally approved by the group">Content  Transformation  Landscape&nbsp;1.0</a></h2>
                        <p class=deliverer>Mobile Web Best Practices Working Group</p>
                        <p class=pubdetails>2009-10-27 - <a title="Content Transformation Landscape 1.0 publication history" href="/standards/history/ct-landscape">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jo Rabin
                            <li>Andrew Swainston
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="the sml xlink reference scheme" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2009/NOTE-sml-xlink-ref-scheme-20091023/" title="Latest draft of The SML XLink Reference Scheme formally approved by the group">The SML XLink Reference Scheme</a></h2>
                        <p class=deliverer>Service Modeling Language Working Group</p>
                        <p class=pubdetails>2009-10-23 - <a title="The SML XLink Reference Scheme publication history" href="/standards/history/sml-xlink-ref-scheme">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Pratul Dublish
                            <li>Len Charest
                            <li>Virginia Smith
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="sioc, sioc types and health care and life sciences" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2009/NOTE-hcls-sioc-20091020/" title="Latest draft of SIOC, SIOC Types and Health Care and Life Sciences formally approved by the group">SIOC, SIOC Types and Health Care and Life Sciences</a></h2>
                        <p class=deliverer>Semantic Web Health Care and Life Sciences Interest Group</p>
                        <p class=pubdetails>2009-10-20 - <a title="SIOC, SIOC Types and Health Care and Life Sciences publication history" href="/standards/history/hcls-sioc">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Alexandre Passant
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="extended guidelines for mobile web best practices 1.0" data-tag="html" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2009/NOTE-mwbp-guidelines-20091020/" title="Latest draft of Extended Guidelines for Mobile Web Best Practices 1.0 formally approved by the group">Extended  Guidelines  for  Mobile  Web  Best  Practices&nbsp;1.0</a></h2>
                        <p class=deliverer>Mobile Web Best Practices Working Group</p>
                        <p class=pubdetails>2009-10-20 - <a title="Extended Guidelines for Mobile Web Best Practices 1.0 publication history" href="/standards/history/mwbp-guidelines">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Kai Scheppe
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                            <li data-title="xforms 1.1" data-tag="xml" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2009/REC-xforms-20091020/" title="Latest draft of XForms 1.1 formally approved by the group">XForms&nbsp;1.1</a></h2>
                        <p class=deliverer>Forms Working Group</p>
                        <p class=pubdetails>2009-10-20 - <a title="XForms 1.1 publication history" href="/standards/history/xforms11">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>John Boyer
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="semantic web applications in neuromedicine (swan) ontology" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2009/NOTE-hcls-swan-20091020/" title="Latest draft of Semantic Web Applications in Neuromedicine (SWAN) Ontology formally approved by the group">Semantic Web Applications in Neuromedicine (SWAN) Ontology</a></h2>
                        <p class=deliverer>Semantic Web Health Care and Life Sciences Interest Group</p>
                        <p class=pubdetails>2009-10-20 - <a title="Semantic Web Applications in Neuromedicine (SWAN) Ontology publication history" href="/standards/history/hcls-swan">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Paolo Ciccarese
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="swan/sioc: alignment between the swan and sioc ontologies" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2009/NOTE-hcls-swansioc-20091020/" title="Latest draft of SWAN/SIOC: Alignment Between the SWAN and SIOC Ontologies formally approved by the group">SWAN/SIOC: Alignment Between the SWAN and SIOC Ontologies</a></h2>
                        <p class=deliverer>Semantic Web Health Care and Life Sciences Interest Group</p>
                        <p class=pubdetails>2009-10-20 - <a title="SWAN/SIOC: Alignment Between the SWAN and SIOC Ontologies publication history" href="/standards/history/hcls-swansioc">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Alexandre Passant
                            <li>Paolo Ciccarese
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="device apis requirements" data-tag="webapi" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2009/NOTE-dap-api-reqs-20091015/" title="Latest draft of Device APIs Requirements formally approved by the group">Device APIs Requirements</a></h2>
                        <p class=deliverer>Devices and Sensors Working Group</p>
                        <p class=pubdetails>2009-10-15 - <a title="Device APIs Requirements publication history" href="/standards/history/dap-api-reqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Robin Berjon
                            <li>Daniel Coloma
                            <li>Max Froumentin
                            <li>Marcin Hanclik
                            <li>Jere Käpyaho
                            <li>Kangchan Lee
                            <li>Bryan Sullivan
                            <li>Dzung Tran
                          </ul>
                                    <ul class="taglist">
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                          <li data-title="svg color 1.2, part 2: language" data-tag="graphics" data-status="wd" data-version="latest">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2009/WD-SVGColor12-20091001/" title="Latest draft of SVG Color 1.2, Part 2: Language formally approved by the group">SVG Color 1.2, Part 2: Language</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2009-10-01 - <a title="SVG Color 1.2, Part 2: Language publication history" href="/standards/history/SVGColor12">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Chris Lilley
                            <li>Anthony Grasso
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                          <li data-title="svg color 1.2, part 1: primer" data-tag="graphics" data-status="wd" data-version="latest">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2009/WD-SVGColorPrimer12-20091001/" title="Latest draft of SVG Color 1.2, Part 1: Primer formally approved by the group">SVG Color 1.2, Part 1: Primer</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2009-10-01 - <a title="SVG Color 1.2, Part 1: Primer publication history" href="/standards/history/SVGColorPrimer12">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Chris Lilley
                            <li>Anthony Grasso
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                                                <li data-title="requirements for string identity matching and string indexing" data-tag="i18n" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2009/NOTE-charreq-20090915/" title="Latest draft of Requirements for String Identity Matching and String Indexing formally approved by the group">Requirements for String Identity Matching and String Indexing</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2009-09-15 - <a title="Requirements for String Identity Matching and String Indexing publication history" href="/standards/history/charreq">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Martin Dürst
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                <li data-title="protocol for web description resources (powder): test suite" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2009/NOTE-powder-test-20090910/" title="Latest draft of Protocol for Web Description Resources (POWDER): Test Suite formally approved by the group">Protocol for Web Description Resources (POWDER): Test Suite</a></h2>
                        <p class=deliverer>Protocol for Web Description Resources (POWDER) Working Group</p>
                        <p class=pubdetails>2009-09-10 - <a title="Protocol for Web Description Resources (POWDER): Test Suite publication history" href="/standards/history/powder-test">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Antonis Kukurikos
                            <li>Phil Archer
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="publishing open government data" data-tag="" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2009/WD-gov-data-20090908/" title="Latest draft of Publishing Open Government Data formally approved by the group">Publishing Open Government Data</a></h2>
                        <p class=deliverer>eGovernment Interest Group</p>
                        <p class=pubdetails>2009-09-08 - <a title="Publishing Open Government Data publication history" href="/standards/history/gov-data">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Daniel Bennett
                            <li>Adam Harvey
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="protocol for web description resources (powder): grouping of resources" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2009/REC-powder-grouping-20090901/" title="Latest draft of Protocol for Web Description Resources (POWDER): Grouping of Resources formally approved by the group">Protocol for Web Description Resources (POWDER): Grouping of Resources</a></h2>
                        <p class=deliverer>Protocol for Web Description Resources (POWDER) Working Group</p>
                        <p class=pubdetails>2009-09-01 - <a title="Protocol for Web Description Resources (POWDER): Grouping of Resources publication history" href="/standards/history/powder-grouping">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Phil Archer
                            <li>Andrea Perego
                            <li>Kevin Smith
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="protocol for web description resources (powder): primer" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2009/NOTE-powder-primer-20090901/" title="Latest draft of Protocol for Web Description Resources (POWDER): Primer formally approved by the group">Protocol for Web Description Resources (POWDER): Primer</a></h2>
                        <p class=deliverer>Protocol for Web Description Resources (POWDER) Working Group</p>
                        <p class=pubdetails>2009-09-01 - <a title="Protocol for Web Description Resources (POWDER): Primer publication history" href="/standards/history/powder-primer">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Kai Scheppe
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="protocol for web description resources (powder): description resources" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2009/REC-powder-dr-20090901/" title="Latest draft of Protocol for Web Description Resources (POWDER): Description Resources formally approved by the group">Protocol for Web Description Resources (POWDER): Description Resources</a></h2>
                        <p class=deliverer>Protocol for Web Description Resources (POWDER) Working Group</p>
                        <p class=pubdetails>2009-09-01 - <a title="Protocol for Web Description Resources (POWDER): Description Resources publication history" href="/standards/history/powder-dr">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Phil Archer
                            <li>Kevin Smith
                            <li>Andrea Perego
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="protocol for web description resources (powder): formal semantics" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2009/REC-powder-formal-20090901/" title="Latest draft of Protocol for Web Description Resources (POWDER): Formal Semantics formally approved by the group">Protocol for Web Description Resources (POWDER): Formal Semantics</a></h2>
                        <p class=deliverer>Protocol for Web Description Resources (POWDER) Working Group</p>
                        <p class=pubdetails>2009-09-01 - <a title="Protocol for Web Description Resources (POWDER): Formal Semantics publication history" href="/standards/history/powder-formal">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Stasinos Konstantopoulos
                            <li>Phil Archer
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="w3c mobileok scheme 1.0" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2009/NOTE-mobileOK-20090825/" title="Latest draft of W3C mobileOK Scheme 1.0 formally approved by the group">W3C  mobileOK  Scheme&nbsp;1.0</a></h2>
                        <p class=deliverer>Mobile Web Best Practices Working Group</p>
                        <p class=pubdetails>2009-08-25 - <a title="W3C mobileOK Scheme 1.0 publication history" href="/standards/history/mobileOK">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jo Rabin
                            <li>Phil Archer
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="skos simple knowledge organization system primer" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2009/NOTE-skos-primer-20090818/" title="Latest draft of SKOS Simple Knowledge Organization System Primer formally approved by the group">SKOS Simple Knowledge Organization System Primer</a></h2>
                        <p class=deliverer>Semantic Web Deployment Working Group</p>
                        <p class=pubdetails>2009-08-18 - <a title="SKOS Simple Knowledge Organization System Primer publication history" href="/standards/history/skos-primer">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Antoine Isaac
                            <li>Ed Summers
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="skos simple knowledge organization system reference" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2009/REC-skos-reference-20090818/" title="Latest draft of SKOS Simple Knowledge Organization System Reference formally approved by the group">SKOS Simple Knowledge Organization System Reference</a></h2>
                        <p class=deliverer>Semantic Web Deployment Working Group</p>
                        <p class=pubdetails>2009-08-18 - <a title="SKOS Simple Knowledge Organization System Reference publication history" href="/standards/history/skos-reference">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Alistair Miles
                            <li>Sean Bechhofer
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="skos use cases and requirements" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2009/NOTE-skos-ucr-20090818/" title="Latest draft of SKOS Use Cases and Requirements formally approved by the group">SKOS Use Cases and Requirements</a></h2>
                        <p class=deliverer>Semantic Web Deployment Working Group</p>
                        <p class=pubdetails>2009-08-18 - <a title="SKOS Use Cases and Requirements publication history" href="/standards/history/skos-ucr">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Antoine Isaac
                            <li>Jon Phipps
                            <li>Daniel Rubin
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xml security derived keys" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2009/NOTE-xmlsec-derivedkeys-20090730/" title="Latest draft of XML Security Derived Keys formally approved by the group">XML Security Derived Keys</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>2009-07-30 - <a title="XML Security Derived Keys publication history" href="/standards/history/xmlsec-derivedkeys">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Magnus Nyström
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="relationship between mobile web best practices (mwbp) and web content accessibility guidelines (wcag)" data-tag="accessibility" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2009/NOTE-mwbp-wcag-20090709/" title="Latest draft of Relationship between Mobile Web Best Practices (MWBP) and Web Content Accessibility Guidelines (WCAG) formally approved by the group">Relationship between Mobile Web Best Practices (MWBP) and Web Content Accessibility Guidelines (WCAG)</a></h2>
                        <p class=deliverer>Mobile Web Best Practices Working Group</p>
                        <p class=deliverer>Education and Outreach Working Group</p>
                        <p class=pubdetails>2009-07-09 - <a title="Relationship between Mobile Web Best Practices (MWBP) and Web Content Accessibility Guidelines (WCAG) publication history" href="/standards/history/mwbp-wcag">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Alan Chuter
                            <li>Yeliz Yesilada
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                <li data-title="sparql new features and rationale" data-tag="data" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2009/WD-sparql-features-20090702/" title="Latest draft of SPARQL New Features and Rationale formally approved by the group">SPARQL New Features and Rationale</a></h2>
                        <p class=deliverer>SPARQL Working Group</p>
                        <p class=pubdetails>2009-07-02 - <a title="SPARQL New Features and Rationale publication history" href="/standards/history/sparql-features">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Kjetil Kjernsmo
                            <li>Alexandre Passant
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="framework for sml epr-based reference schemes" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2009/NOTE-sml-epr-ref-scheme-20090630/" title="Latest draft of Framework for SML EPR-Based Reference Schemes formally approved by the group">Framework for SML EPR-Based Reference Schemes</a></h2>
                        <p class=deliverer>Service Modeling Language Working Group</p>
                        <p class=pubdetails>2009-06-30 - <a title="Framework for SML EPR-Based Reference Schemes publication history" href="/standards/history/sml-epr-ref-scheme">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Len Charest
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="svg parameters 1.0, part 2: language" data-tag="graphics" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2009/WD-SVGParam-20090616/" title="Latest draft of SVG Parameters 1.0, Part 2: Language formally approved by the group">SVG Parameters 1.0, Part 2: Language</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2009-06-16 - <a title="SVG Parameters 1.0, Part 2: Language publication history" href="/standards/history/SVGParam">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Doug Schepers
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                                                <li data-title="svg parameters 1.0, part 1: primer" data-tag="graphics" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2009/WD-SVGParamPrimer-20090616/" title="Latest draft of SVG Parameters 1.0, Part 1: Primer formally approved by the group">SVG Parameters 1.0, Part 1: Primer</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2009-06-16 - <a title="SVG Parameters 1.0, Part 1: Primer publication history" href="/standards/history/SVGParamPrimer">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Doug Schepers
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                                                <li data-title="improving access to government through better use of the web" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2009/NOTE-egov-improving-20090512/" title="Latest draft of Improving Access to Government through Better Use of the Web formally approved by the group">Improving Access to Government through Better Use of the Web</a></h2>
                        <p class=deliverer>eGovernment Interest Group</p>
                        <p class=pubdetails>2009-05-12 - <a title="Improving Access to Government through Better Use of the Web publication history" href="/standards/history/egov-improving">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Suzanne Acar
                            <li>José Manuel Alonso
                            <li>Kevin Novak
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="service modeling language, version 1.1" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2009/REC-sml-20090512/" title="Latest draft of Service Modeling Language, Version 1.1 formally approved by the group">Service  Modeling  Language,  Version&nbsp;1.1</a></h2>
                        <p class=deliverer>Service Modeling Language Working Group</p>
                        <p class=pubdetails>2009-05-12 - <a title="Service Modeling Language, Version 1.1 publication history" href="/standards/history/sml">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Valentina Popescu
                            <li>Virginia Smith
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="service modeling language interchange format version 1.1" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2009/REC-sml-if-20090512/" title="Latest draft of Service Modeling Language Interchange Format Version 1.1 formally approved by the group">Service  Modeling  Language  Interchange  Format  Version&nbsp;1.1</a></h2>
                        <p class=deliverer>Service Modeling Language Working Group</p>
                        <p class=pubdetails>2009-05-12 - <a title="Service Modeling Language Interchange Format Version 1.1 publication history" href="/standards/history/sml-if">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Valentina Popescu
                            <li>Virginia Smith
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="guidelines for writing device independent tests" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2009/NOTE-di-testing-20090512/" title="Latest draft of Guidelines for writing device independent tests formally approved by the group">Guidelines for writing device independent tests</a></h2>
                        <p class=deliverer>Mobile Web Test Suites Working Group</p>
                        <p class=pubdetails>2009-05-12 - <a title="Guidelines for writing device independent tests publication history" href="/standards/history/di-testing">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dominique Hazaël-Massieux
                            <li>Carmelo Montanez
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="basic xml schema patterns for databinding version 1.0" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2009/NOTE-xmlschema-patterns-20090505/" title="Latest draft of Basic XML Schema Patterns for Databinding Version 1.0 formally approved by the group">Basic  XML  Schema  Patterns  for  Databinding  Version&nbsp;1.0</a></h2>
                        <p class=deliverer>XML Schema Patterns for Databinding Working Group</p>
                        <p class=pubdetails>2009-05-05 - <a title="Basic XML Schema Patterns for Databinding Version 1.0 publication history" href="/standards/history/xmlschema-patterns">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jonathan Calladine
                            <li>George Cowe
                            <li>Paul Downey
                            <li>Yves Lafon
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="advanced xml schema patterns for databinding version 1.0" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2009/NOTE-xmlschema-patterns-advanced-20090505/" title="Latest draft of Advanced XML Schema Patterns for Databinding Version 1.0 formally approved by the group">Advanced  XML  Schema  Patterns  for  Databinding  Version&nbsp;1.0</a></h2>
                        <p class=deliverer>XML Schema Patterns for Databinding Working Group</p>
                        <p class=pubdetails>2009-05-05 - <a title="Advanced XML Schema Patterns for Databinding Version 1.0 publication history" href="/standards/history/xmlschema-patterns-advanced">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jonathan Calladine
                            <li>George Cowe
                            <li>Paul Downey
                            <li>Yves Lafon
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="xsl transformations (xslt) version 2.0 (second edition)" data-tag="xml" data-status="per" data-version="latest">
            <div class="profile">PER</div>
            <h2 class="ProposedEditedRecommendation"><a href="http://www.w3.org/TR/2009/PER-xslt20-20090421/" title="Latest draft of XSL Transformations (XSLT) Version 2.0 (Second Edition) formally approved by the group">XSL Transformations (XSLT) Version 2.0 (Second Edition)</a></h2>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2009-04-21 - <a title="XSL Transformations (XSLT) Version 2.0 (Second Edition) publication history" href="/standards/history/xslt20">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael Kay
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="w3c personalization roadmap: ubiquitous web integration of accessforall 1.0" data-tag="" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2009/NOTE-UWA-personalization-roadmap-20090409/" title="Latest draft of W3C Personalization Roadmap: Ubiquitous Web Integration of AccessForAll 1.0 formally approved by the group">W3C  Personalization  Roadmap:  Ubiquitous  Web  Integration  of  AccessForAll&nbsp;1.0</a></h2>
                        <p class=deliverer>Ubiquitous Web Applications Working Group</p>
                        <p class=pubdetails>2009-04-09 - <a title="W3C Personalization Roadmap: Ubiquitous Web Integration of AccessForAll 1.0 publication history" href="/standards/history/UWA-personalization-roadmap">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Andy Heath
                            <li>Richard Schwerdtfeger
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="efficient xml interchange evaluation" data-tag="xml" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2009/WD-exi-evaluation-20090407/" title="Latest draft of Efficient XML Interchange Evaluation formally approved by the group">Efficient XML Interchange Evaluation</a></h2>
                        <p class=deliverer>Efficient Extensible Interchange  Working Group</p>
                        <p class=pubdetails>2009-04-07 - <a title="Efficient XML Interchange Evaluation publication history" href="/standards/history/exi-evaluation">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Carine Bournez
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="svg transforms 1.0, part 2: language" data-tag="graphics" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2009/WD-SVG-Transforms-20090320/" title="Latest draft of SVG Transforms 1.0, Part 2: Language formally approved by the group">SVG Transforms 1.0, Part 2: Language</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2009-03-20 - <a title="SVG Transforms 1.0, Part 2: Language publication history" href="/standards/history/SVG-Transforms">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jun Fujisawa
                            <li>Anthony Grasso
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                          <li data-title="emma: extensible multimodal annotation markup language" data-tag="" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2009/REC-emma-20090210/" title="Latest draft of EMMA: Extensible MultiModal Annotation markup language formally approved by the group">EMMA: Extensible MultiModal Annotation markup language</a></h2>
                        <p class=deliverer>Multimodal Interaction Working Group</p>
                        <p class=pubdetails>2009-02-10 - <a title="EMMA: Extensible MultiModal Annotation markup language publication history" href="/standards/history/emma">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael Johnston
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="xml base (second edition)" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2009/REC-xmlbase-20090128/" title="Latest draft of XML Base (Second Edition) formally approved by the group">XML Base (Second Edition)</a></h2>
                        <p class=deliverer>XML Core Working Group</p>
                        <p class=pubdetails>2009-01-28 - <a title="XML Base (Second Edition) publication history" href="/standards/history/xmlbase">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jonathan Marsh
                            <li>Richard Tobin
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="xhtml media types - second edition" data-tag="html" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2009/NOTE-xhtml-media-types-20090116/" title="Latest draft of XHTML Media Types - Second Edition formally approved by the group">XHTML Media Types - Second Edition</a></h2>
                        <p class=deliverer>XHTML2 Working Group</p>
                        <p class=pubdetails>2009-01-16 - <a title="XHTML Media Types - Second Edition publication history" href="/standards/history/xhtml-media-types">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Shane McCarron
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="element traversal specification" data-tag="dom webapi" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2008/REC-ElementTraversal-20081222/" title="Latest draft of Element Traversal Specification formally approved by the group">Element Traversal Specification</a></h2>
                        <p class=deliverer>(historical) Web Applications Working Group</p>
                        <p class=pubdetails>2008-12-22 - <a title="Element Traversal Specification publication history" href="/standards/history/ElementTraversal">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Doug Schepers
                            <li>Robin Berjon
                          </ul>
                                    <ul class="taglist">
                            <li class="dom">DOM
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                <li data-title="scalable vector graphics (svg) tiny 1.2 specification" data-tag="graphics" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2008/REC-SVGTiny12-20081222/" title="Latest draft of Scalable Vector Graphics (SVG) Tiny 1.2 Specification formally approved by the group">Scalable Vector Graphics (SVG) Tiny 1.2 Specification</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2008-12-22 - <a title="Scalable Vector Graphics (SVG) Tiny 1.2 Specification publication history" href="/standards/history/SVGTiny12">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ola Andersson
                            <li>Robin Berjon
                            <li>Erik Dahlström
                            <li>Andrew Emmons
                            <li>Jon Ferraiolo
                            <li>Anthony Grasso
                            <li>Vincent Hardy
                            <li>Scott Hayman
                            <li>Dean Jackson
                            <li>Chris Lilley
                            <li>Cameron McCormack
                            <li>Andreas Neumann
                            <li>Craig Northway
                            <li>Antoine Quint
                            <li>Nandini Ramani
                            <li>Doug Schepers
                            <li>Andrew Shellshear
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xforms for html" data-tag="html xml" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2008/WD-XForms-for-HTML-20081219/" title="Latest draft of XForms for HTML formally approved by the group">XForms for HTML</a></h2>
                        <p class=deliverer>Forms Working Group</p>
                        <p class=pubdetails>2008-12-19 - <a title="XForms for HTML publication history" href="/standards/history/XForms-for-HTML">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>John Boyer
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="web content accessibility guidelines (wcag) 2.0" data-tag="accessibility" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2008/REC-WCAG20-20081211/" title="Latest draft of Web Content Accessibility Guidelines (WCAG) 2.0 formally approved by the group">Web  Content  Accessibility  Guidelines  (WCAG)&nbsp;2.0</a></h2>
                        <p class=deliverer>Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2008-12-11 - <a title="Web Content Accessibility Guidelines (WCAG) 2.0 publication history" href="/standards/history/WCAG20">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ben Caldwell
                            <li>Michael Cooper
                            <li>Loretta Guarino Reid
                            <li>Gregg Vanderheiden
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="w3c mobileok basic tests 1.0" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2008/REC-mobileOK-basic10-tests-20081208/" title="Latest draft of W3C mobileOK Basic Tests 1.0 formally approved by the group">W3C  mobileOK  Basic  Tests&nbsp;1.0</a></h2>
                        <p class=deliverer>Mobile Web Best Practices Working Group</p>
                        <p class=pubdetails>2008-12-08 - <a title="W3C mobileOK Basic Tests 1.0 publication history" href="/standards/history/mobileOK-basic10-tests">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Sean Owen
                            <li>Jo Rabin
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="device description structures" data-tag="" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2008/WD-dd-structures-20081205/" title="Latest draft of Device Description Structures formally approved by the group">Device Description Structures</a></h2>
                        <p class=deliverer>Mobile Web Initiative Device Description Working Group</p>
                        <p class=pubdetails>2008-12-05 - <a title="Device Description Structures publication history" href="/standards/history/dd-structures">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jose Manuel Cantera Fonseca
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="device description repository simple api" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2008/REC-DDR-Simple-API-20081205/" title="Latest draft of Device Description Repository Simple API formally approved by the group">Device Description Repository Simple API</a></h2>
                        <p class=deliverer>Mobile Web Initiative Device Description Working Group</p>
                        <p class=pubdetails>2008-12-05 - <a title="Device Description Repository Simple API publication history" href="/standards/history/DDR-Simple-API">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jo Rabin
                            <li>Jose Manuel Cantera Fonseca
                            <li>Rotan Hanrahan
                            <li>Ignacio Marin
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="cool uris for the semantic web" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2008/NOTE-cooluris-20081203/" title="Latest draft of Cool URIs for the Semantic Web formally approved by the group">Cool URIs for the Semantic Web</a></h2>
                        <p class=deliverer>Semantic Web Deployment Working Group</p>
                        <p class=deliverer>Technical Architecture Group</p>
                        <p class=pubdetails>2008-12-03 - <a title="Cool URIs for the Semantic Web publication history" href="/standards/history/cooluris">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Leo Sauermann
                            <li>Richard Cyganiak
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="synchronized multimedia integration language (smil 3.0)" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2008/REC-SMIL3-20081201/" title="Latest draft of Synchronized Multimedia Integration Language (SMIL 3.0) formally approved by the group">Synchronized Multimedia Integration Language (SMIL 3.0)</a></h2>
                        <p class=deliverer>SYMM Working Group</p>
                        <p class=pubdetails>2008-12-01 - <a title="Synchronized Multimedia Integration Language (SMIL 3.0) publication history" href="/standards/history/SMIL3">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dick Bulterman
                          </ul>
                                  </li>
                                                                                                                          <li data-title="extensible markup language (xml) 1.0 (fifth edition)" data-tag="xml" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2008/REC-xml-20081126/" title="Latest draft of Extensible Markup Language (XML) 1.0 (Fifth Edition) formally approved by the group">Extensible Markup Language (XML) 1.0 (Fifth Edition)</a></h2>
                        <p class=deliverer>XML Core Working Group</p>
                        <p class=pubdetails>2008-11-26 - <a title="Extensible Markup Language (XML) 1.0 (Fifth Edition) publication history" href="/standards/history/xml">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tim Bray
                            <li>Jean Paoli
                            <li>Michael Sperberg-McQueen
                            <li>Eve Maler
                            <li>François Yergeau
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="legacy extended iris for xml resource identification" data-tag="i18n xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2008/NOTE-leiri-20081103/" title="Latest draft of Legacy extended IRIs for XML resource identification formally approved by the group">Legacy extended IRIs for XML resource identification</a></h2>
                        <p class=deliverer>XML Core Working Group</p>
                        <p class=pubdetails>2008-11-03 - <a title="Legacy extended IRIs for XML resource identification publication history" href="/standards/history/leiri">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Henry Thompson
                            <li>Richard Tobin
                            <li>Norman Walsh
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="pronunciation lexicon specification (pls) version 1.0" data-tag="media" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2008/REC-pronunciation-lexicon-20081014/" title="Latest draft of Pronunciation Lexicon Specification (PLS) Version 1.0 formally approved by the group">Pronunciation  Lexicon  Specification  (PLS)  Version&nbsp;1.0</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>2008-10-14 - <a title="Pronunciation Lexicon Specification (PLS) Version 1.0 publication history" href="/standards/history/pronunciation-lexicon">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Paolo Baggia
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                <li data-title="efficient xml interchange (exi) impacts" data-tag="xml" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2008/WD-exi-impacts-20080903/" title="Latest draft of Efficient XML Interchange (EXI) Impacts formally approved by the group">Efficient XML Interchange (EXI) Impacts</a></h2>
                        <p class=deliverer>Efficient Extensible Interchange  Working Group</p>
                        <p class=pubdetails>2008-09-03 - <a title="Efficient XML Interchange (EXI) Impacts publication history" href="/standards/history/exi-impacts">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jaakko Kangasharju
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="best practice recipes for publishing rdf vocabularies" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2008/NOTE-swbp-vocab-pub-20080828/" title="Latest draft of Best Practice Recipes for Publishing RDF Vocabularies formally approved by the group">Best Practice Recipes for Publishing RDF Vocabularies</a></h2>
                        <p class=deliverer>Semantic Web Deployment Working Group</p>
                        <p class=pubdetails>2008-08-28 - <a title="Best Practice Recipes for Publishing RDF Vocabularies publication history" href="/standards/history/swbp-vocab-pub">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Diego Berrueta
                            <li>Jon Phipps
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="voice extensible markup language (voicexml) 3.0 requirements" data-tag="media" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2008/WD-vxml30reqs-20080808/" title="Latest draft of Voice Extensible Markup Language (VoiceXML) 3.0 Requirements formally approved by the group">Voice Extensible Markup Language (VoiceXML) 3.0 Requirements</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>2008-08-08 - <a title="Voice Extensible Markup Language (VoiceXML) 3.0 Requirements publication history" href="/standards/history/vxml30reqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jeff Hoepfinger
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="mobile web best practices 1.0" data-tag="html" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2008/REC-mobile-bp-20080729/" title="Latest draft of Mobile Web Best Practices 1.0 formally approved by the group">Mobile  Web  Best  Practices&nbsp;1.0</a></h2>
                        <p class=deliverer>Mobile Web Best Practices Working Group</p>
                        <p class=pubdetails>2008-07-29 - <a title="Mobile Web Best Practices 1.0 publication history" href="/standards/history/mobile-bp">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jo Rabin
                            <li>Charles McCathieNevile
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="authoring applications for the multimodal architecture" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2008/NOTE-mmi-auth-20080702/" title="Latest draft of Authoring Applications for the Multimodal Architecture formally approved by the group">Authoring Applications for the Multimodal Architecture</a></h2>
                        <p class=deliverer>Multimodal Interaction Working Group</p>
                        <p class=pubdetails>2008-07-02 - <a title="Authoring Applications for the Multimodal Architecture publication history" href="/standards/history/mmi-auth">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ingmar Kliche
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="test cases for c14n 1.1 and xmldsig interoperability" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2008/NOTE-xmldsig2ed-tests-20080610/" title="Latest draft of Test Cases for C14N 1.1 and XMLDSig Interoperability formally approved by the group">Test Cases for C14N 1.1 and XMLDSig Interoperability</a></h2>
                        <p class=deliverer>XML Security Specifications Maintenance Working Group</p>
                        <p class=deliverer>XML Security Working Group</p>
                        <p class=pubdetails>2008-06-10 - <a title="Test Cases for C14N 1.1 and XMLDSig Interoperability publication history" href="/standards/history/xmldsig2ed-tests">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Juan Carlos Cruellas
                            <li>Konrad Lanz
                            <li>Sean Mullan
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="html 5 publication notes" data-tag="html" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2008/NOTE-html5-pubnotes-20080610/" title="Latest draft of HTML 5 Publication Notes formally approved by the group">HTML 5 Publication Notes</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2008-06-10 - <a title="HTML 5 Publication Notes publication history" href="/standards/history/html5-pubnotes">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael[tm] Smith
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="experiences with the conversion of senselab databases to rdf/owl" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2008/NOTE-hcls-senselab-20080604/" title="Latest draft of Experiences with the conversion of SenseLab databases to RDF/OWL formally approved by the group">Experiences with the conversion of SenseLab databases to RDF/OWL</a></h2>
                        <p class=deliverer>Semantic Web Health Care and Life Sciences Interest Group</p>
                        <p class=pubdetails>2008-06-04 - <a title="Experiences with the conversion of SenseLab databases to RDF/OWL publication history" href="/standards/history/hcls-senselab">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Matthias Samwald
                            <li>Kei-Hoi Cheung
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="a prototype knowledge base for the life sciences" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2008/NOTE-hcls-kb-20080604/" title="Latest draft of A Prototype Knowledge Base for the Life Sciences formally approved by the group">A Prototype Knowledge Base for the Life Sciences</a></h2>
                        <p class=deliverer>Semantic Web Health Care and Life Sciences Interest Group</p>
                        <p class=pubdetails>2008-06-04 - <a title="A Prototype Knowledge Base for the Life Sciences publication history" href="/standards/history/hcls-kb">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>M. Scott Marshall
                            <li>Eric Prud&#039;hommeaux
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="offline web applications" data-tag="html webapi" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2008/NOTE-offline-webapps-20080530/" title="Latest draft of Offline Web Applications formally approved by the group">Offline Web Applications</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2008-05-30 - <a title="Offline Web Applications publication history" href="/standards/history/offline-webapps">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Anne van Kesteren
                            <li>Ian Hickson
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                            <li class="webapi">Web API
                          </ul>
                      </li>
                                                                                                                                                <li data-title="web accessibility for older users: a literature review" data-tag="accessibility" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2008/WD-wai-age-literature-20080514/" title="Latest draft of Web Accessibility for Older Users: A Literature Review formally approved by the group">Web Accessibility for Older Users: A Literature Review</a></h2>
                        <p class=deliverer>Education and Outreach Working Group</p>
                        <p class=pubdetails>2008-05-14 - <a title="Web Accessibility for Older Users: A Literature Review publication history" href="/standards/history/wai-age-literature">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Andrew Arch
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="canonical xml version 1.1" data-tag="xml" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2008/REC-xml-c14n11-20080502/" title="Latest draft of Canonical XML Version 1.1 formally approved by the group">Canonical  XML  Version&nbsp;1.1</a></h2>
                        <p class=deliverer>XML Core Working Group</p>
                        <p class=pubdetails>2008-05-02 - <a title="Canonical XML Version 1.1 publication history" href="/standards/history/xml-c14n11">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>John Boyer
                            <li>Glenn Marcy
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="device description repository core vocabulary" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2008/NOTE-ddr-core-vocabulary-20080414/" title="Latest draft of Device Description Repository Core Vocabulary formally approved by the group">Device Description Repository Core Vocabulary</a></h2>
                        <p class=deliverer>Mobile Web Initiative Device Description Working Group</p>
                        <p class=pubdetails>2008-04-14 - <a title="Device Description Repository Core Vocabulary publication history" href="/standards/history/ddr-core-vocabulary">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jo Rabin
                            <li>Andrea Trasatti
                            <li>Rotan Hanrahan
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="widgets 1.0: the widget landscape (q1 2008)" data-tag="" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2008/WD-widgets-land-20080414/" title="Latest draft of Widgets 1.0: The Widget Landscape (Q1 2008) formally approved by the group">Widgets 1.0: The Widget Landscape (Q1 2008)</a></h2>
                        <p class=deliverer>Web Application Formats Working Group</p>
                        <p class=pubdetails>2008-04-14 - <a title="Widgets 1.0: The Widget Landscape (Q1 2008) publication history" href="/standards/history/widgets-land">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Marcos Caceres
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="extensible stylesheet language (xsl) requirements version 2.0" data-tag="xml" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2008/WD-xslfo20-req-20080326/" title="Latest draft of Extensible Stylesheet Language (XSL) Requirements Version 2.0 formally approved by the group">Extensible  Stylesheet  Language  (XSL)  Requirements  Version&nbsp;2.0</a></h2>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2008-03-26 - <a title="Extensible Stylesheet Language (XSL) Requirements Version 2.0 publication history" href="/standards/history/xslfo20-req">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Klaas Bals
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="web security experience, indicators and trust: scope and use cases" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2008/NOTE-wsc-usecases-20080306/" title="Latest draft of Web Security Experience, Indicators and Trust: Scope and Use Cases formally approved by the group">Web Security Experience, Indicators and Trust: Scope and Use Cases</a></h2>
                        <p class=deliverer>Web Security Context Working Group</p>
                        <p class=pubdetails>2008-03-06 - <a title="Web Security Experience, Indicators and Trust: Scope and Use Cases publication history" href="/standards/history/wsc-usecases">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tyler Close
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="best practices for xml internationalization" data-tag="i18n" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2008/NOTE-xml-i18n-bp-20080213/" title="Latest draft of Best Practices for XML Internationalization formally approved by the group">Best Practices for XML Internationalization</a></h2>
                        <p class=deliverer>Internationalization Tag Set (ITS) Working Group</p>
                        <p class=pubdetails>2008-02-13 - <a title="Best Practices for XML Internationalization publication history" href="/standards/history/xml-i18n-bp">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Yves Savourel
                            <li>Jirka Kosek
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                          <li data-title="roadmap for accessible rich internet applications (wai-aria roadmap)" data-tag="accessibility" data-status="wd" data-version="latest">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2008/WD-wai-aria-roadmap-20080204/" title="Latest draft of Roadmap for Accessible Rich Internet Applications (WAI-ARIA Roadmap) formally approved by the group">Roadmap for Accessible Rich Internet Applications (WAI-ARIA Roadmap)</a></h2>
                        <p class=deliverer>Protocols and Formats Working Group</p>
                        <p class=pubdetails>2008-02-04 - <a title="Roadmap for Accessible Rich Internet Applications (WAI-ARIA Roadmap) publication history" href="/standards/history/wai-aria-roadmap">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Richard Schwerdtfeger
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                <li data-title="sparql protocol for rdf" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2008/REC-rdf-sparql-protocol-20080115/" title="Latest draft of SPARQL Protocol for RDF formally approved by the group">SPARQL Protocol for RDF</a></h2>
                        <p class=deliverer>SPARQL Working Group</p>
                        <p class=pubdetails>2008-01-15 - <a title="SPARQL Protocol for RDF publication history" href="/standards/history/rdf-sparql-protocol">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Kendall Clark
                            <li>Lee Feigenbaum
                            <li>Elias Torres
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="sparql query language for rdf" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2008/REC-rdf-sparql-query-20080115/" title="Latest draft of SPARQL Query Language for RDF formally approved by the group">SPARQL Query Language for RDF</a></h2>
                        <p class=deliverer>SPARQL Working Group</p>
                        <p class=pubdetails>2008-01-15 - <a title="SPARQL Query Language for RDF publication history" href="/standards/history/rdf-sparql-query">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Eric Prud&#039;hommeaux
                            <li>Andy Seaborne
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                          <li data-title="svg print 1.2, part 2: language" data-tag="graphics" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2007/WD-SVGPrint12-20071221/" title="Latest draft of SVG Print 1.2, Part 2: Language formally approved by the group">SVG Print 1.2, Part 2: Language</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2007-12-21 - <a title="SVG Print 1.2, Part 2: Language publication history" href="/standards/history/SVGPrint12">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Alex Danilo
                            <li>Craig Northway
                            <li>Andrew Shellshear
                            <li>Anthony Grasso
                            <li>Chris Lilley
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                          <li data-title="svg print 1.2, part 1: primer" data-tag="graphics" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2007/WD-SVGPrintPrimer12-20071221/" title="Latest draft of SVG Print 1.2, Part 1: Primer formally approved by the group">SVG Print 1.2, Part 1: Primer</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2007-12-21 - <a title="SVG Print 1.2, Part 1: Primer publication history" href="/standards/history/SVGPrintPrimer12">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Anthony Grasso
                            <li>Andrew Shellshear
                            <li>Chris Lilley
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                                                <li data-title="efficient xml interchange (exi) best practices" data-tag="xml" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2007/WD-exi-best-practices-20071219/" title="Latest draft of Efficient XML Interchange (EXI) Best Practices formally approved by the group">Efficient XML Interchange (EXI) Best Practices</a></h2>
                        <p class=deliverer>Efficient Extensible Interchange  Working Group</p>
                        <p class=pubdetails>2007-12-19 - <a title="Efficient XML Interchange (EXI) Best Practices publication history" href="/standards/history/exi-best-practices">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael Cokus
                            <li>Daniel Vogelheim
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="device description repository requirements 1.0" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2007/NOTE-DDR-requirements-20071217/" title="Latest draft of Device Description Repository Requirements 1.0 formally approved by the group">Device  Description  Repository  Requirements&nbsp;1.0</a></h2>
                        <p class=deliverer>Mobile Web Initiative Device Description Working Group</p>
                        <p class=pubdetails>2007-12-17 - <a title="Device Description Repository Requirements 1.0 publication history" href="/standards/history/DDR-requirements">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Kevin Smith
                            <li>David Sanders
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="html design principles" data-tag="html" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2007/WD-html-design-principles-20071126/" title="Latest draft of HTML Design Principles formally approved by the group">HTML Design Principles</a></h2>
                        <p class=deliverer>HTML Media Extensions Working Group</p>
                        <p class=pubdetails>2007-11-26 - <a title="HTML Design Principles publication history" href="/standards/history/html-design-principles">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Anne van Kesteren
                            <li>Maciej Stachowiak
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="web services policy 1.5 - guidelines for policy assertion authors" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2007/NOTE-ws-policy-guidelines-20071112/" title="Latest draft of Web Services Policy 1.5 - Guidelines for Policy Assertion Authors formally approved by the group">Web Services Policy 1.5 - Guidelines for Policy Assertion Authors</a></h2>
                        <p class=deliverer>Web Services Policy Working Group</p>
                        <p class=pubdetails>2007-11-12 - <a title="Web Services Policy 1.5 - Guidelines for Policy Assertion Authors publication history" href="/standards/history/ws-policy-guidelines">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Asir Vedamuthu
                            <li>David Orchard
                            <li>Frederick Hirsch
                            <li>Maryann Hondo
                            <li>Prasad Yendluri
                            <li>Toufic Boubez
                            <li>Ümit Yalçinalp
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="web services policy 1.5 - primer" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2007/NOTE-ws-policy-primer-20071112/" title="Latest draft of Web Services Policy 1.5 - Primer formally approved by the group">Web Services Policy 1.5 - Primer</a></h2>
                        <p class=deliverer>Web Services Policy Working Group</p>
                        <p class=pubdetails>2007-11-12 - <a title="Web Services Policy 1.5 - Primer publication history" href="/standards/history/ws-policy-primer">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Asir Vedamuthu
                            <li>David Orchard
                            <li>Frederick Hirsch
                            <li>Maryann Hondo
                            <li>Prasad Yendluri
                            <li>Toufic Boubez
                            <li>Ümit Yalçinalp
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="web user interaction: threat trees" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2007/NOTE-wsc-threats-20071101/" title="Latest draft of Web User Interaction: Threat Trees formally approved by the group">Web User Interaction: Threat Trees</a></h2>
                        <p class=deliverer>Web Security Context Working Group</p>
                        <p class=pubdetails>2007-11-01 - <a title="Web User Interaction: Threat Trees publication history" href="/standards/history/wsc-threats">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Thomas Roessler
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="device description ecosystem 1.0" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2007/NOTE-dd-ecosystem-20071031/" title="Latest draft of Device Description Ecosystem 1.0 formally approved by the group">Device  Description  Ecosystem&nbsp;1.0</a></h2>
                        <p class=deliverer>Mobile Web Initiative Device Description Working Group</p>
                        <p class=pubdetails>2007-10-31 - <a title="Device Description Ecosystem 1.0 publication history" href="/standards/history/dd-ecosystem">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Rotan Hanrahan
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="device description landscape 1.0" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2007/NOTE-dd-landscape-20071031/" title="Latest draft of Device Description Landscape 1.0 formally approved by the group">Device  Description  Landscape&nbsp;1.0</a></h2>
                        <p class=deliverer>Mobile Web Initiative Device Description Working Group</p>
                        <p class=pubdetails>2007-10-31 - <a title="Device Description Landscape 1.0 publication history" href="/standards/history/dd-landscape">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Emmanuel Nkeze
                            <li>Gavin James Pearce
                            <li>Matt Womer
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="user agent accessibility guidelines 2.0 requirements" data-tag="accessibility" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2007/WD-UAAG20-requirements-20071031/" title="Latest draft of User Agent Accessibility Guidelines 2.0 Requirements formally approved by the group">User Agent Accessibility Guidelines 2.0 Requirements</a></h2>
                        <p class=deliverer>User Agent Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2007-10-31 - <a title="User Agent Accessibility Guidelines 2.0 Requirements publication history" href="/standards/history/UAAG20-requirements">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jim Allan
                            <li>Jan Richards
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                <li data-title="powder: use cases and requirements" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2007/NOTE-powder-use-cases-20071031/" title="Latest draft of POWDER: Use Cases and Requirements formally approved by the group">POWDER: Use Cases and Requirements</a></h2>
                        <p class=deliverer>Protocol for Web Description Resources (POWDER) Working Group</p>
                        <p class=pubdetails>2007-10-31 - <a title="POWDER: Use Cases and Requirements publication history" href="/standards/history/powder-use-cases">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Phil Archer
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                          <li data-title="protocol for web description resources (powder): web description resources (wdr) vocabulary" data-tag="data" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2007/WD-powder-voc-20070925/" title="Latest draft of Protocol for Web Description Resources (POWDER): Web Description Resources (WDR) Vocabulary formally approved by the group">Protocol for Web Description Resources (POWDER): Web Description Resources (WDR) Vocabulary</a></h2>
                        <p class=deliverer>Protocol for Web Description Resources (POWDER) Working Group</p>
                        <p class=pubdetails>2007-09-25 - <a title="Protocol for Web Description Resources (POWDER): Web Description Resources (WDR) Vocabulary publication history" href="/standards/history/powder-voc">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Andrea Perego
                            <li>Phil Archer
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                          <li data-title="protocol for web description resources (powder): web description resources datatypes (wdrd)" data-tag="data" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2007/WD-powder-xsd-20070925/" title="Latest draft of Protocol for Web Description Resources (POWDER): Web Description Resources Datatypes (WDRD) formally approved by the group">Protocol for Web Description Resources (POWDER): Web Description Resources Datatypes (WDRD)</a></h2>
                        <p class=deliverer>Protocol for Web Description Resources (POWDER) Working Group</p>
                        <p class=pubdetails>2007-09-25 - <a title="Protocol for Web Description Resources (POWDER): Web Description Resources Datatypes (WDRD) publication history" href="/standards/history/powder-xsd">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Andrea Perego
                            <li>Phil Archer
                            <li>Kevin Smith
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="mtom serialization policy assertion 1.1" data-tag="" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2007/WD-soap12-mtom-policy-20070918/" title="Latest draft of MTOM Serialization Policy Assertion 1.1 formally approved by the group">MTOM  Serialization  Policy  Assertion&nbsp;1.1</a></h2>
                        <p class=deliverer>XML Protocol Working Group</p>
                        <p class=pubdetails>2007-09-18 - <a title="MTOM Serialization Policy Assertion 1.1 publication history" href="/standards/history/soap12-mtom-policy">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Christopher Ferris
                            <li>Yves Lafon
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="declarative formats for applications and user interfaces" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2007/NOTE-dfaui-20070912/" title="Latest draft of Declarative Formats for Applications and User Interfaces formally approved by the group">Declarative Formats for Applications and User Interfaces</a></h2>
                        <p class=deliverer>Web Application Formats Working Group</p>
                        <p class=pubdetails>2007-09-12 - <a title="Declarative Formats for Applications and User Interfaces publication history" href="/standards/history/dfaui">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Arthur Barstow
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="grddl test cases" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2007/REC-grddl-tests-20070911/" title="Latest draft of GRDDL Test Cases formally approved by the group">GRDDL Test Cases</a></h2>
                        <p class=deliverer>GRDDL Working Group</p>
                        <p class=pubdetails>2007-09-11 - <a title="GRDDL Test Cases publication history" href="/standards/history/grddl-tests">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Chimezie Ogbuji
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="gleaning resource descriptions from dialects of languages (grddl)" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2007/REC-grddl-20070911/" title="Latest draft of Gleaning Resource Descriptions from Dialects of Languages (GRDDL) formally approved by the group">Gleaning Resource Descriptions from Dialects of Languages (GRDDL)</a></h2>
                        <p class=deliverer>GRDDL Working Group</p>
                        <p class=pubdetails>2007-09-11 - <a title="Gleaning Resource Descriptions from Dialects of Languages (GRDDL) publication history" href="/standards/history/grddl">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dan Connolly
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                          <li data-title="web services addressing 1.0 - metadata" data-tag="" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2007/REC-ws-addr-metadata-20070904/" title="Latest draft of Web Services Addressing 1.0 - Metadata formally approved by the group">Web Services Addressing 1.0 - Metadata</a></h2>
                        <p class=deliverer>Web Services Addressing Working Group</p>
                        <p class=pubdetails>2007-09-04 - <a title="Web Services Addressing 1.0 - Metadata publication history" href="/standards/history/ws-addr-metadata">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Martin Gudgin
                            <li>Marc Hadley
                            <li>Tony Rogers
                            <li>Ümit Yalçinalp
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="web services policy 1.5 - framework" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2007/REC-ws-policy-20070904/" title="Latest draft of Web Services Policy 1.5 - Framework formally approved by the group">Web Services Policy 1.5 - Framework</a></h2>
                        <p class=deliverer>Web Services Policy Working Group</p>
                        <p class=pubdetails>2007-09-04 - <a title="Web Services Policy 1.5 - Framework publication history" href="/standards/history/ws-policy">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Asir Vedamuthu
                            <li>David Orchard
                            <li>Frederick Hirsch
                            <li>Maryann Hondo
                            <li>Prasad Yendluri
                            <li>Toufic Boubez
                            <li>Ümit Yalçinalp
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="web services policy 1.5 - attachment" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2007/REC-ws-policy-attach-20070904/" title="Latest draft of Web Services Policy 1.5 - Attachment formally approved by the group">Web Services Policy 1.5 - Attachment</a></h2>
                        <p class=deliverer>Web Services Policy Working Group</p>
                        <p class=pubdetails>2007-09-04 - <a title="Web Services Policy 1.5 - Attachment publication history" href="/standards/history/ws-policy-attach">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Asir Vedamuthu
                            <li>David Orchard
                            <li>Frederick Hirsch
                            <li>Maryann Hondo
                            <li>Prasad Yendluri
                            <li>Toufic Boubez
                            <li>Ümit Yalçinalp
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="semantic annotations for wsdl and xml schema — usage guide" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2007/NOTE-sawsdl-guide-20070828/" title="Latest draft of Semantic Annotations for WSDL and XML Schema — Usage Guide formally approved by the group">Semantic Annotations for WSDL and XML Schema — Usage Guide</a></h2>
                        <p class=deliverer>Semantic Annotations for Web Services Description Language Working Group</p>
                        <p class=pubdetails>2007-08-28 - <a title="Semantic Annotations for WSDL and XML Schema — Usage Guide publication history" href="/standards/history/sawsdl-guide">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Rama Akkiraju
                            <li>Brahmananda Sapkota
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="semantic annotations for wsdl and xml schema" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2007/REC-sawsdl-20070828/" title="Latest draft of Semantic Annotations for WSDL and XML Schema formally approved by the group">Semantic Annotations for WSDL and XML Schema</a></h2>
                        <p class=deliverer>Semantic Annotations for Web Services Description Language Working Group</p>
                        <p class=pubdetails>2007-08-28 - <a title="Semantic Annotations for WSDL and XML Schema publication history" href="/standards/history/sawsdl">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Joel Farrell
                            <li>Holger Lausen
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="efficient xml interchange measurements note" data-tag="xml" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2007/WD-exi-measurements-20070725/" title="Latest draft of Efficient XML Interchange Measurements Note formally approved by the group">Efficient XML Interchange Measurements Note</a></h2>
                        <p class=deliverer>Efficient Extensible Interchange  Working Group</p>
                        <p class=pubdetails>2007-07-25 - <a title="Efficient XML Interchange Measurements Note publication history" href="/standards/history/exi-measurements">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Greg White
                            <li>Jaakko Kangasharju
                            <li>Don Brutzman
                            <li>Stephen Williams
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="wsdl 1.1 element identifiers" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2007/NOTE-wsdl11elementidentifiers-20070720/" title="Latest draft of WSDL 1.1 Element Identifiers formally approved by the group">WSDL 1.1 Element Identifiers</a></h2>
                        <p class=deliverer>Web Services Policy Working Group</p>
                        <p class=pubdetails>2007-07-20 - <a title="WSDL 1.1 Element Identifiers publication history" href="/standards/history/wsdl11elementidentifiers">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>David Orchard
                            <li>Asir Vedamuthu
                            <li>Frederick Hirsch
                            <li>Maryann Hondo
                            <li>Prasad Yendluri
                            <li>Toufic Boubez
                            <li>Ümit Yalçinalp
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="guide to versioning xml languages using new xml schema 1.1 features" data-tag="" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2007/WD-xmlschema-guide2versioning-20070720/" title="Latest draft of Guide to Versioning XML Languages using new XML Schema 1.1 features formally approved by the group">Guide to Versioning XML Languages using new XML Schema 1.1 features</a></h2>
                        <p class=deliverer>XML Schema Working Group</p>
                        <p class=pubdetails>2007-07-20 - <a title="Guide to Versioning XML Languages using new XML Schema 1.1 features publication history" href="/standards/history/xmlschema-guide2versioning">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>David Orchard
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="xbl 2.0 primer: an introduction for developers" data-tag="" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2007/WD-xbl-primer-20070718/" title="Latest draft of XBL 2.0 Primer: An Introduction for Developers formally approved by the group">XBL 2.0 Primer: An Introduction for Developers</a></h2>
                        <p class=deliverer>Web Application Formats Working Group</p>
                        <p class=pubdetails>2007-07-18 - <a title="XBL 2.0 Primer: An Introduction for Developers publication history" href="/standards/history/xbl-primer">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Lachlan Hunt
                            <li>Marcos Caceres
                          </ul>
                                  </li>
                                                                                                                          <li data-title="soap 1.2 part 3: one-way mep" data-tag="" data-status="note" data-version="upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2007/NOTE-soap12-part3-20070702/" title="Latest draft of SOAP 1.2 Part 3: One-Way MEP formally approved by the group">SOAP 1.2 Part 3: One-Way MEP</a></h2>
                        <p class=deliverer>XML Protocol Working Group</p>
                        <p class=pubdetails>2007-07-02 - <a title="SOAP 1.2 Part 3: One-Way MEP publication history" href="/standards/history/soap12-part3">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>David Orchard
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="grddl primer" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2007/NOTE-grddl-primer-20070628/" title="Latest draft of GRDDL Primer formally approved by the group">GRDDL Primer</a></h2>
                        <p class=deliverer>GRDDL Working Group</p>
                        <p class=pubdetails>2007-06-28 - <a title="GRDDL Primer publication history" href="/standards/history/grddl-primer">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Harry Halpin
                            <li>Ian Davis
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="web services description language (wsdl) version 2.0 part 0: primer" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2007/REC-wsdl20-primer-20070626/" title="Latest draft of Web Services Description Language (WSDL) Version 2.0 Part 0: Primer formally approved by the group">Web Services Description Language (WSDL) Version 2.0 Part 0: Primer</a></h2>
                        <p class=deliverer>Web Services Description Working Group</p>
                        <p class=pubdetails>2007-06-26 - <a title="Web Services Description Language (WSDL) Version 2.0 Part 0: Primer publication history" href="/standards/history/wsdl20-primer">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>David Booth
                            <li>Kevin Liu
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="web services description language (wsdl) version 2.0: rdf mapping" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2007/NOTE-wsdl20-rdf-20070626/" title="Latest draft of Web Services Description Language (WSDL) Version 2.0: RDF Mapping formally approved by the group">Web Services Description Language (WSDL) Version 2.0: RDF Mapping</a></h2>
                        <p class=deliverer>Web Services Description Working Group</p>
                        <p class=pubdetails>2007-06-26 - <a title="Web Services Description Language (WSDL) Version 2.0: RDF Mapping publication history" href="/standards/history/wsdl20-rdf">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jacek Kopecky
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="web services description language (wsdl) version 2.0 soap 1.1 binding" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2007/NOTE-wsdl20-soap11-binding-20070626/" title="Latest draft of Web Services Description Language (WSDL) Version 2.0 SOAP 1.1 Binding formally approved by the group">Web Services Description Language (WSDL) Version 2.0 SOAP 1.1 Binding</a></h2>
                        <p class=deliverer>Web Services Description Working Group</p>
                        <p class=pubdetails>2007-06-26 - <a title="Web Services Description Language (WSDL) Version 2.0 SOAP 1.1 Binding publication history" href="/standards/history/wsdl20-soap11-binding">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Asir Vedamuthu
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="web services description language (wsdl) version 2.0 part 1: core language" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2007/REC-wsdl20-20070626/" title="Latest draft of Web Services Description Language (WSDL) Version 2.0 Part 1: Core Language formally approved by the group">Web Services Description Language (WSDL) Version 2.0 Part 1: Core Language</a></h2>
                        <p class=deliverer>Web Services Description Working Group</p>
                        <p class=pubdetails>2007-06-26 - <a title="Web Services Description Language (WSDL) Version 2.0 Part 1: Core Language publication history" href="/standards/history/wsdl20">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Roberto Chinnici
                            <li>Jean-Jacques Moreau
                            <li>Arthur Ryman
                            <li>Sanjiva Weerawarana
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="web services description language (wsdl) version 2.0: additional meps" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2007/NOTE-wsdl20-additional-meps-20070626/" title="Latest draft of Web Services Description Language (WSDL) Version 2.0: Additional MEPs formally approved by the group">Web Services Description Language (WSDL) Version 2.0: Additional MEPs</a></h2>
                        <p class=deliverer>Web Services Description Working Group</p>
                        <p class=pubdetails>2007-06-26 - <a title="Web Services Description Language (WSDL) Version 2.0: Additional MEPs publication history" href="/standards/history/wsdl20-additional-meps">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Amelia Lewis
                          </ul>
                                  </li>
                                                                                                                          <li data-title="web services description language (wsdl) version 2.0 part 2: adjuncts" data-tag="" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2007/REC-wsdl20-adjuncts-20070626/" title="Latest draft of Web Services Description Language (WSDL) Version 2.0 Part 2: Adjuncts formally approved by the group">Web Services Description Language (WSDL) Version 2.0 Part 2: Adjuncts</a></h2>
                        <p class=deliverer>Web Services Description Working Group</p>
                        <p class=pubdetails>2007-06-26 - <a title="Web Services Description Language (WSDL) Version 2.0 Part 2: Adjuncts publication history" href="/standards/history/wsdl20-adjuncts">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Roberto Chinnici
                            <li>Hugo Haas
                            <li>Amelia Lewis
                            <li>Jean-Jacques Moreau
                            <li>David Orchard
                            <li>Sanjiva Weerawarana
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="voice extensible markup language (voicexml) 2.1" data-tag="media" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2007/REC-voicexml21-20070619/" title="Latest draft of Voice Extensible Markup Language (VoiceXML) 2.1 formally approved by the group">Voice  Extensible  Markup  Language  (VoiceXML)&nbsp;2.1</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>2007-06-19 - <a title="Voice Extensible Markup Language (VoiceXML) 2.1 publication history" href="/standards/history/voicexml21">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Matt Oshry
                            <li>RJ Auburn
                            <li>Paolo Baggia
                            <li>Michael Bodell
                            <li>David Burke
                            <li>Daniel Burnett
                            <li>Jerry Carter
                            <li>Scott McGlashan
                            <li>Alex Lee
                            <li>Brandon Porter
                            <li>Kenneth Rehor
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                <li data-title="serializing sparql query results in json" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2007/NOTE-rdf-sparql-json-res-20070618/" title="Latest draft of Serializing SPARQL Query Results in JSON formally approved by the group">Serializing SPARQL Query Results in JSON</a></h2>
                        <p class=deliverer>SPARQL Working Group</p>
                        <p class=pubdetails>2007-06-18 - <a title="Serializing SPARQL Query Results in JSON publication history" href="/standards/history/rdf-sparql-json-res">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Kendall Clark
                            <li>Lee Feigenbaum
                            <li>Elias Torres
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="speech synthesis markup language version 1.1 requirements" data-tag="media" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2007/WD-ssml11reqs-20070611/" title="Latest draft of Speech Synthesis Markup Language Version 1.1 Requirements formally approved by the group">Speech Synthesis Markup Language Version 1.1 Requirements</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>2007-06-11 - <a title="Speech Synthesis Markup Language Version 1.1 Requirements publication history" href="/standards/history/ssml11reqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Daniel Burnett
                            <li>Zhi Wei Shuang
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                          <li data-title="svg filters 1.2, part 2: language" data-tag="graphics" data-status="wd" data-version="latest">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2007/WD-SVGFilter12-20070501/" title="Latest draft of SVG Filters 1.2, Part 2: Language formally approved by the group">SVG Filters 1.2, Part 2: Language</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2007-05-01 - <a title="SVG Filters 1.2, Part 2: Language publication history" href="/standards/history/SVGFilter12">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Erik Dahlström
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                          <li data-title="svg filters 1.2, part 1: primer" data-tag="graphics" data-status="wd" data-version="latest">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2007/WD-SVGFilterPrimer12-20070501/" title="Latest draft of SVG Filters 1.2, Part 1: Primer formally approved by the group">SVG Filters 1.2, Part 1: Primer</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2007-05-01 - <a title="SVG Filters 1.2, Part 1: Primer publication history" href="/standards/history/SVGFilterPrimer12">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Erik Dahlström
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                          <li data-title="soap version 1.2 part 0: primer (second edition)" data-tag="" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2007/REC-soap12-part0-20070427/" title="Latest draft of SOAP Version 1.2 Part 0: Primer (Second Edition) formally approved by the group">SOAP Version 1.2 Part 0: Primer (Second Edition)</a></h2>
                        <p class=deliverer>XML Protocol Working Group</p>
                        <p class=pubdetails>2007-04-27 - <a title="SOAP Version 1.2 Part 0: Primer (Second Edition) publication history" href="/standards/history/soap12-part0">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Nilo Mitra
                            <li>Yves Lafon
                          </ul>
                                  </li>
                                                                                                                          <li data-title="soap version 1.2 part 1: messaging framework (second edition)" data-tag="" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2007/REC-soap12-part1-20070427/" title="Latest draft of SOAP Version 1.2 Part 1: Messaging Framework (Second Edition) formally approved by the group">SOAP Version 1.2 Part 1: Messaging Framework (Second Edition)</a></h2>
                        <p class=deliverer>XML Protocol Working Group</p>
                        <p class=pubdetails>2007-04-27 - <a title="SOAP Version 1.2 Part 1: Messaging Framework (Second Edition) publication history" href="/standards/history/soap12-part1">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Martin Gudgin
                            <li>Marc Hadley
                            <li>Noah Mendelsohn
                            <li>Jean-Jacques Moreau
                            <li>Henrik Frystyk Nielsen
                            <li>Anish Karmarkar
                            <li>Yves Lafon
                          </ul>
                                  </li>
                                                                                                                          <li data-title="soap version 1.2 part 2: adjuncts (second edition)" data-tag="" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2007/REC-soap12-part2-20070427/" title="Latest draft of SOAP Version 1.2 Part 2: Adjuncts (Second Edition) formally approved by the group">SOAP Version 1.2 Part 2: Adjuncts (Second Edition)</a></h2>
                        <p class=deliverer>XML Protocol Working Group</p>
                        <p class=pubdetails>2007-04-27 - <a title="SOAP Version 1.2 Part 2: Adjuncts (Second Edition) publication history" href="/standards/history/soap12-part2">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Martin Gudgin
                            <li>Marc Hadley
                            <li>Noah Mendelsohn
                            <li>Jean-Jacques Moreau
                            <li>Henrik Frystyk Nielsen
                            <li>Anish Karmarkar
                            <li>Yves Lafon
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="soap version 1.2 specification assertions and test collection (second edition)" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2007/REC-soap12-testcollection-20070427/" title="Latest draft of SOAP Version 1.2 Specification Assertions and Test Collection (Second Edition) formally approved by the group">SOAP Version 1.2 Specification Assertions and Test Collection (Second Edition)</a></h2>
                        <p class=deliverer>XML Protocol Working Group</p>
                        <p class=pubdetails>2007-04-27 - <a title="SOAP Version 1.2 Specification Assertions and Test Collection (Second Edition) publication history" href="/standards/history/soap12-testcollection">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Hugo Haas
                            <li>Oisin Hurley
                            <li>Anish Karmarkar
                            <li>Jeff Mischkinsky
                            <li>Mark Jones
                            <li>Lynne R. Thompson
                            <li>Richard D. Martin
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="grddl use cases: scenarios of extracting rdf data from xml documents" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2007/NOTE-grddl-scenarios-20070406/" title="Latest draft of GRDDL Use Cases: Scenarios of extracting RDF data from XML documents formally approved by the group">GRDDL Use Cases: Scenarios of extracting RDF data from XML documents</a></h2>
                        <p class=deliverer>GRDDL Working Group</p>
                        <p class=pubdetails>2007-04-06 - <a title="GRDDL Use Cases: Scenarios of extracting RDF data from XML documents publication history" href="/standards/history/grddl-scenarios">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Fabien Gandon
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="semantic interpretation for speech recognition (sisr) version 1.0" data-tag="media" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2007/REC-semantic-interpretation-20070405/" title="Latest draft of Semantic Interpretation for Speech Recognition (SISR) Version 1.0 formally approved by the group">Semantic  Interpretation  for  Speech  Recognition  (SISR)  Version&nbsp;1.0</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>2007-04-05 - <a title="Semantic Interpretation for Speech Recognition (SISR) Version 1.0 publication history" href="/standards/history/semantic-interpretation">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Luc Van Tichelen
                            <li>David Burke
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="internationalization tag set (its) version 1.0" data-tag="i18n" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2007/REC-its-20070403/" title="Latest draft of Internationalization Tag Set (ITS) Version 1.0 formally approved by the group">Internationalization  Tag  Set  (ITS)  Version&nbsp;1.0</a></h2>
                        <p class=deliverer>Internationalization Tag Set (ITS) Working Group</p>
                        <p class=pubdetails>2007-04-03 - <a title="Internationalization Tag Set (ITS) Version 1.0 publication history" href="/standards/history/its">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Christian Lieske
                            <li>Felix Sasaki
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                          <li data-title="rdfa use cases: scenarios for embedding rdf in html" data-tag="data" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2007/WD-xhtml-rdfa-scenarios-20070330/" title="Latest draft of RDFa Use Cases: Scenarios for Embedding RDF in HTML formally approved by the group">RDFa Use Cases: Scenarios for Embedding RDF in HTML</a></h2>
                        <p class=deliverer>Semantic Web Deployment Working Group</p>
                        <p class=pubdetails>2007-03-30 - <a title="RDFa Use Cases: Scenarios for Embedding RDF in HTML publication history" href="/standards/history/xhtml-rdfa-scenarios">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ben Adida
                            <li>Michael Hausenblas
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                          <li data-title="xml query use cases" data-tag="xml" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2007/NOTE-xquery-use-cases-20070323/" title="Latest draft of XML Query Use Cases formally approved by the group">XML Query Use Cases</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=pubdetails>2007-03-23 - <a title="XML Query Use Cases publication history" href="/standards/history/xquery-use-cases">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Don Chamberlin
                            <li>Peter Fankhauser
                            <li>Daniela Florescu
                            <li>Massimo Marchiori
                            <li>Jonathan Robie
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="xml query (xquery) requirements" data-tag="xml" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2007/NOTE-xquery-requirements-20070323/" title="Latest draft of XML Query (XQuery) Requirements formally approved by the group">XML Query (XQuery) Requirements</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=pubdetails>2007-03-23 - <a title="XML Query (XQuery) Requirements publication history" href="/standards/history/xquery-requirements">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Don Chamberlin
                            <li>Peter Fankhauser
                            <li>Massimo Marchiori
                            <li>Jonathan Robie
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="xsl transformations (xslt) version 2.0" data-tag="xml" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2007/REC-xslt20-20070123/" title="Latest draft of XSL Transformations (XSLT) Version 2.0 formally approved by the group">XSL  Transformations  (XSLT)  Version&nbsp;2.0</a></h2>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2007-01-23 - <a title="XSL Transformations (XSLT) Version 2.0 publication history" href="/standards/history/xslt20">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael Kay
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="using xml digital signatures in the 2006 xml environment" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2006/NOTE-DSig-usage-20061220/" title="Latest draft of Using XML Digital Signatures in the 2006 XML Environment formally approved by the group">Using XML Digital Signatures in the 2006 XML Environment</a></h2>
                        <p class=deliverer>XML Core Working Group</p>
                        <p class=pubdetails>2006-12-20 - <a title="Using XML Digital Signatures in the 2006 XML Environment publication history" href="/standards/history/DSig-usage">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Thomas Roessler
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="known issues with canonical xml 1.0 (c14n/1.0)" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2006/NOTE-C14N-issues-20061220/" title="Latest draft of Known Issues with Canonical XML 1.0 (C14N/1.0) formally approved by the group">Known Issues with Canonical XML 1.0 (C14N/1.0)</a></h2>
                        <p class=deliverer>XML Core Working Group</p>
                        <p class=pubdetails>2006-12-20 - <a title="Known Issues with Canonical XML 1.0 (C14N/1.0) publication history" href="/standards/history/C14N-issues">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>José Kahan
                            <li>Konrad Lanz
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="extensible stylesheet language (xsl) version 1.1" data-tag="xml" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2006/REC-xsl11-20061205/" title="Latest draft of Extensible Stylesheet Language (XSL) Version 1.1 formally approved by the group">Extensible  Stylesheet  Language  (XSL)  Version&nbsp;1.1</a></h2>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2006-12-05 - <a title="Extensible Stylesheet Language (XSL) Version 1.1 publication history" href="/standards/history/xsl11">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Anders Berglund
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="rich web application backplane" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2006/NOTE-backplane-20061116/" title="Latest draft of Rich Web Application Backplane formally approved by the group">Rich Web Application Backplane</a></h2>
                        <p class=deliverer>Hypertext Coordination Group (Member)</p>
                        <p class=pubdetails>2006-11-16 - <a title="Rich Web Application Backplane publication history" href="/standards/history/backplane">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mark Birbeck
                            <li>John Boyer
                            <li>Alfred S. Gilman
                            <li>Kevin Kelly
                            <li>Steven Pemberton
                            <li>Charles Wiecha
                          </ul>
                                  </li>
                                                                                                                          <li data-title="xml inclusions (xinclude) version 1.0 (second edition)" data-tag="xml" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2006/REC-xinclude-20061115/" title="Latest draft of XML Inclusions (XInclude) Version 1.0 (Second Edition) formally approved by the group">XML Inclusions (XInclude) Version 1.0 (Second Edition)</a></h2>
                        <p class=deliverer>XML Core Working Group</p>
                        <p class=pubdetails>2006-11-15 - <a title="XML Inclusions (XInclude) Version 1.0 (Second Edition) publication history" href="/standards/history/xinclude">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jonathan Marsh
                            <li>David Orchard
                            <li>Daniel Veillard
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="remote events for xml (rex) 1.0" data-tag="dom xml" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2006/WD-rex-20061013/" title="Latest draft of Remote Events for XML (REX) 1.0 formally approved by the group">Remote  Events  for  XML  (REX)&nbsp;1.0</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=deliverer>Web API Working Group</p>
                        <p class=pubdetails>2006-10-13 - <a title="Remote Events for XML (REX) 1.0 publication history" href="/standards/history/rex">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Robin Berjon
                          </ul>
                                    <ul class="taglist">
                            <li class="dom">DOM
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="common sense suggestions for developing multimodal user interfaces" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2006/NOTE-mmi-suggestions-20060911/" title="Latest draft of Common Sense Suggestions for Developing Multimodal User Interfaces formally approved by the group">Common Sense Suggestions for Developing Multimodal User Interfaces</a></h2>
                        <p class=deliverer>Multimodal Interaction Working Group</p>
                        <p class=pubdetails>2006-09-11 - <a title="Common Sense Suggestions for Developing Multimodal User Interfaces publication history" href="/standards/history/mmi-suggestions">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jim Larson
                          </ul>
                                  </li>
                                                                                                                          <li data-title="extensible markup language (xml) 1.1 (second edition)" data-tag="xml" data-status="rec" data-version="upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2006/REC-xml11-20060816/" title="Latest draft of Extensible Markup Language (XML) 1.1 (Second Edition) formally approved by the group">Extensible Markup Language (XML) 1.1 (Second Edition)</a></h2>
                        <p class=deliverer>XML Core Working Group</p>
                        <p class=pubdetails>2006-08-16 - <a title="Extensible Markup Language (XML) 1.1 (Second Edition) publication history" href="/standards/history/xml11">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tim Bray
                            <li>Jean Paoli
                            <li>Michael Sperberg-McQueen
                            <li>Eve Maler
                            <li>François Yergeau
                            <li>John Cowan
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="namespaces in xml 1.1 (second edition)" data-tag="xml" data-status="rec" data-version="upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2006/REC-xml-names11-20060816/" title="Latest draft of Namespaces in XML 1.1 (Second Edition) formally approved by the group">Namespaces in XML 1.1 (Second Edition)</a></h2>
                        <p class=deliverer>XML Core Working Group</p>
                        <p class=pubdetails>2006-08-16 - <a title="Namespaces in XML 1.1 (Second Edition) publication history" href="/standards/history/xml-names11">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tim Bray
                            <li>Dave Hollander
                            <li>Andrew Layman
                            <li>Richard Tobin
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="svgt 1.2 requirements" data-tag="graphics" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2006/WD-SVGTiny12Reqs-20060810/" title="Latest draft of SVGT 1.2 Requirements formally approved by the group">SVGT 1.2 Requirements</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2006-08-10 - <a title="SVGT 1.2 Requirements publication history" href="/standards/history/SVGTiny12Reqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Andrew Emmons
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                          <li data-title="web services choreography description language: primer" data-tag="" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2006/WD-ws-cdl-10-primer-20060619/" title="Latest draft of Web Services Choreography Description Language: Primer formally approved by the group">Web Services Choreography Description Language: Primer</a></h2>
                        <p class=deliverer>Web Services Choreography Working Group</p>
                        <p class=pubdetails>2006-06-19 - <a title="Web Services Choreography Description Language: Primer publication history" href="/standards/history/ws-cdl-10-primer">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steve Ross-Talbot
                            <li>Tony Fletcher
                          </ul>
                                  </li>
                                                                                                                          <li data-title="rdf/owl representation of wordnet" data-tag="data" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2006/WD-wordnet-rdf-20060619/" title="Latest draft of RDF/OWL Representation of WordNet formally approved by the group">RDF/OWL Representation of WordNet</a></h2>
                        <p class=deliverer>Semantic Web Best Practices and Deployment Working Group</p>
                        <p class=pubdetails>2006-06-19 - <a title="RDF/OWL Representation of WordNet publication history" href="/standards/history/wordnet-rdf">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mark van Assem
                            <li>Aldo Gangemi
                            <li>Guus Schreiber
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                          <li data-title="internationalization and localization markup requirements" data-tag="i18n" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2006/WD-itsreq-20060518/" title="Latest draft of Internationalization and Localization Markup Requirements formally approved by the group">Internationalization and Localization Markup Requirements</a></h2>
                        <p class=deliverer>Internationalization Tag Set (ITS) Working Group</p>
                        <p class=pubdetails>2006-05-18 - <a title="Internationalization and Localization Markup Requirements publication history" href="/standards/history/itsreq">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Yves Savourel
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                <li data-title="web services addressing 1.0 - core" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2006/REC-ws-addr-core-20060509/" title="Latest draft of Web Services Addressing 1.0 - Core formally approved by the group">Web Services Addressing 1.0 - Core</a></h2>
                        <p class=deliverer>Web Services Addressing Working Group</p>
                        <p class=pubdetails>2006-05-09 - <a title="Web Services Addressing 1.0 - Core publication history" href="/standards/history/ws-addr-core">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Martin Gudgin
                            <li>Marc Hadley
                            <li>Tony Rogers
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="web services addressing 1.0 - soap binding" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2006/REC-ws-addr-soap-20060509/" title="Latest draft of Web Services Addressing 1.0 - SOAP Binding formally approved by the group">Web Services Addressing 1.0 - SOAP Binding</a></h2>
                        <p class=deliverer>Web Services Addressing Working Group</p>
                        <p class=pubdetails>2006-05-09 - <a title="Web Services Addressing 1.0 - SOAP Binding publication history" href="/standards/history/ws-addr-soap">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Martin Gudgin
                            <li>Marc Hadley
                            <li>Tony Rogers
                          </ul>
                                  </li>
                                                                                                                          <li data-title="timed text (tt) authoring format 1.0 use cases and requirements" data-tag="media" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2006/NOTE-ttaf1-req-20060427/" title="Latest draft of Timed Text (TT) Authoring Format 1.0 Use Cases and Requirements formally approved by the group">Timed Text (TT) Authoring Format 1.0 Use Cases and Requirements</a></h2>
                        <p class=deliverer>Timed Text Working Group</p>
                        <p class=pubdetails>2006-04-27 - <a title="Timed Text (TT) Authoring Format 1.0 Use Cases and Requirements publication history" href="/standards/history/ttaf1-req">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Glenn Adams
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="requirements for wcag 2.0" data-tag="accessibility" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2006/NOTE-wcag2-req-20060425/" title="Latest draft of Requirements for WCAG 2.0 formally approved by the group">Requirements  for  WCAG&nbsp;2.0</a></h2>
                        <p class=deliverer>Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2006-04-25 - <a title="Requirements for WCAG 2.0 publication history" href="/standards/history/wcag2-req">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Gregg Vanderheiden
                            <li>John Slatin
                            <li>Wendy Chisholm
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                <li data-title="multimodal application developer feedback" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2006/NOTE-mmi-dev-feedback-20060414/" title="Latest draft of Multimodal Application Developer Feedback formally approved by the group">Multimodal Application Developer Feedback</a></h2>
                        <p class=deliverer>Multimodal Interaction Working Group</p>
                        <p class=pubdetails>2006-04-14 - <a title="Multimodal Application Developer Feedback publication history" href="/standards/history/mmi-dev-feedback">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Gerald McCobb
                            <li>Klaus Reifenrath
                            <li>Raj Tumuluri
                            <li>Sunil Kumar
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="defining n-ary relations on the semantic web" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2006/NOTE-swbp-n-aryRelations-20060412/" title="Latest draft of Defining N-ary Relations on the Semantic Web formally approved by the group">Defining N-ary Relations on the Semantic Web</a></h2>
                        <p class=deliverer>Semantic Web Best Practices and Deployment Working Group</p>
                        <p class=pubdetails>2006-04-12 - <a title="Defining N-ary Relations on the Semantic Web publication history" href="/standards/history/swbp-n-aryRelations">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Natasha Noy
                            <li>Alan Rector
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xml processing model requirements and use cases" data-tag="xml" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2006/WD-xproc-requirements-20060411/" title="Latest draft of XML Processing Model Requirements and Use Cases formally approved by the group">XML Processing Model Requirements and Use Cases</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>2006-04-11 - <a title="XML Processing Model Requirements and Use Cases publication history" href="/standards/history/xproc-requirements">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Alex Milowski
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="the disposition of names in an xml namespace" data-tag="xml" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2006/WD-namespaceState-20060329/" title="Latest draft of The Disposition of Names in an XML Namespace formally approved by the group">The Disposition of Names in an XML Namespace</a></h2>
                        <p class=deliverer>Technical Architecture Group</p>
                        <p class=pubdetails>2006-03-29 - <a title="The Disposition of Names in an XML Namespace publication history" href="/standards/history/namespaceState">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Norman Walsh
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="image annotation on the semantic web" data-tag="data" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2006/WD-swbp-image-annotation-20060322/" title="Latest draft of Image Annotation on the Semantic Web formally approved by the group">Image Annotation on the Semantic Web</a></h2>
                        <p class=deliverer>Semantic Web Best Practices and Deployment Working Group</p>
                        <p class=pubdetails>2006-03-22 - <a title="Image Annotation on the Semantic Web publication history" href="/standards/history/swbp-image-annotation">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jacco van Ossenbruggen
                            <li>Raphaël Troncy
                            <li>Giorgos Stamou
                            <li>Jeff Pan
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="soap 1.1 request optional response http binding" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2006/NOTE-soap11-ror-httpbinding-20060321/" title="Latest draft of SOAP 1.1 Request Optional Response HTTP Binding formally approved by the group">SOAP 1.1 Request Optional Response HTTP Binding</a></h2>
                        <p class=deliverer>Web Services Addressing Working Group</p>
                        <p class=pubdetails>2006-03-21 - <a title="SOAP 1.1 Request Optional Response HTTP Binding publication history" href="/standards/history/soap11-ror-httpbinding">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>David Orchard
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="delivery context overview for device independence" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2006/NOTE-di-dco-20060320/" title="Latest draft of Delivery Context Overview for Device Independence formally approved by the group">Delivery Context Overview for Device Independence</a></h2>
                        <p class=deliverer>Device Independence Working Group</p>
                        <p class=pubdetails>2006-03-20 - <a title="Delivery Context Overview for Device Independence publication history" href="/standards/history/di-dco">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Roger Gimson
                            <li>Rhys Lewis
                            <li>Sailesh Sathish
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="xml schema datatypes in rdf and owl" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2006/NOTE-swbp-xsch-datatypes-20060314/" title="Latest draft of XML Schema Datatypes in RDF and OWL formally approved by the group">XML Schema Datatypes in RDF and OWL</a></h2>
                        <p class=deliverer>Semantic Web Best Practices and Deployment Working Group</p>
                        <p class=pubdetails>2006-03-14 - <a title="XML Schema Datatypes in RDF and OWL publication history" href="/standards/history/swbp-xsch-datatypes">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jeremy Carroll
                            <li>Jeff Pan
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="a semantic web primer for object-oriented software developers" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2006/NOTE-sw-oosd-primer-20060309/" title="Latest draft of A Semantic Web Primer for Object-Oriented Software Developers formally approved by the group">A Semantic Web Primer for Object-Oriented Software Developers</a></h2>
                        <p class=deliverer>Semantic Web Best Practices and Deployment Working Group</p>
                        <p class=pubdetails>2006-03-09 - <a title="A Semantic Web Primer for Object-Oriented Software Developers publication history" href="/standards/history/sw-oosd-primer">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Holger Knublauch
                            <li>Daniel Oberle
                            <li>Philip Tetlow
                            <li>Evan Wallace
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="a survey of rdf/topic maps interoperability proposals" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2006/NOTE-rdftm-survey-20060210/" title="Latest draft of A Survey of RDF/Topic Maps Interoperability Proposals formally approved by the group">A Survey of RDF/Topic Maps Interoperability Proposals</a></h2>
                        <p class=deliverer>Semantic Web Best Practices and Deployment Working Group</p>
                        <p class=pubdetails>2006-02-10 - <a title="A Survey of RDF/Topic Maps Interoperability Proposals publication history" href="/standards/history/rdftm-survey">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steve Pepper
                            <li>Fabio Vitali
                            <li>Lars Marius Garshol
                            <li>Nicola Gessa
                            <li>Valentina Presutti
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="remote events for xml (rex) requirements" data-tag="dom xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2006/NOTE-rex-reqs-20060202/" title="Latest draft of Remote Events for XML (REX) Requirements formally approved by the group">Remote Events for XML (REX) Requirements</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2006-02-02 - <a title="Remote Events for XML (REX) Requirements publication history" href="/standards/history/rex-reqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Robin Berjon
                          </ul>
                                    <ul class="taglist">
                            <li class="dom">DOM
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="arabic mathematical notation" data-tag="i18n" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2006/NOTE-arabic-math-20060131/" title="Latest draft of Arabic mathematical notation formally approved by the group">Arabic mathematical notation</a></h2>
                        <p class=deliverer>Math Working Group</p>
                        <p class=pubdetails>2006-01-31 - <a title="Arabic mathematical notation publication history" href="/standards/history/arabic-math">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Azzeddine Lazrek
                            <li>Bruce Miller
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                <li data-title="scope of mobile web best practices" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2005/NOTE-mobile-bp-scope-20051220/" title="Latest draft of Scope of Mobile Web Best Practices formally approved by the group">Scope of Mobile Web Best Practices</a></h2>
                        <p class=deliverer>Mobile Web Best Practices Working Group</p>
                        <p class=pubdetails>2005-12-20 - <a title="Scope of Mobile Web Best Practices publication history" href="/standards/history/mobile-bp-scope">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Phil Archer
                            <li>Edward Mitukiewicz
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="compound document by reference use cases and requirements version 1.0" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2005/NOTE-CDRReqs-20051219/" title="Latest draft of Compound Document by Reference Use Cases and Requirements Version 1.0 formally approved by the group">Compound  Document  by  Reference  Use  Cases  and  Requirements  Version&nbsp;1.0</a></h2>
                        <p class=deliverer>Compound Document Formats Working Group</p>
                        <p class=pubdetails>2005-12-19 - <a title="Compound Document by Reference Use Cases and Requirements Version 1.0 publication history" href="/standards/history/CDRReqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Daniel Appelquist
                            <li>Timur Mehrvarz
                            <li>Antoine Quint
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="using xkms with pgp" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2005/NOTE-xkms-pgp-20051219/" title="Latest draft of Using XKMS with PGP formally approved by the group">Using XKMS with PGP</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>2005-12-19 - <a title="Using XKMS with PGP publication history" href="/standards/history/xkms-pgp">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tommy Lindberg
                            <li>José Kahan
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="compound document use cases and requirements version 2.0" data-tag="" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2005/WD-CDFReqs-20051219/" title="Latest draft of Compound Document Use Cases and Requirements Version 2.0 formally approved by the group">Compound  Document  Use  Cases  and  Requirements  Version&nbsp;2.0</a></h2>
                        <p class=deliverer>Compound Document Formats Working Group</p>
                        <p class=pubdetails>2005-12-19 - <a title="Compound Document Use Cases and Requirements Version 2.0 publication history" href="/standards/history/CDFReqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steve Speicher
                            <li>Petri Vuorimaa
                          </ul>
                                  </li>
                                                                                                                          <li data-title="synchronized multimedia integration language (smil 2.1)" data-tag="" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2005/REC-SMIL2-20051213/" title="Latest draft of Synchronized Multimedia Integration Language (SMIL 2.1) formally approved by the group">Synchronized Multimedia Integration Language (SMIL 2.1)</a></h2>
                        <p class=deliverer>SYMM Working Group</p>
                        <p class=pubdetails>2005-12-13 - <a title="Synchronized Multimedia Integration Language (SMIL 2.1) publication history" href="/standards/history/SMIL2">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Thierry Michel
                            <li>Guido Grassel
                            <li>Antti Koivisto
                            <li>Nabil Layaida
                            <li>Jack Jansen
                            <li>Sjoerd Mullender
                            <li>Daniel Zucker
                            <li>Dick Bulterman
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="a wsdl 1.1 description for xkms" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2005/NOTE-xkms-wsdl-20051118/" title="Latest draft of A WSDL 1.1 description for XKMS formally approved by the group">A WSDL 1.1 description for XKMS</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>2005-11-18 - <a title="A WSDL 1.1 description for XKMS publication history" href="/standards/history/xkms-wsdl">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Rich Salz
                            <li>Yunhao Zhang
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="web services choreography description language version 1.0" data-tag="" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2005/CR-ws-cdl-10-20051109/" title="Latest draft of Web Services Choreography Description Language Version 1.0 formally approved by the group">Web  Services  Choreography  Description  Language  Version&nbsp;1.0</a></h2>
                        <p class=deliverer>Web Services Choreography Working Group</p>
                        <p class=pubdetails>2005-11-09 - <a title="Web Services Choreography Description Language Version 1.0 publication history" href="/standards/history/ws-cdl-10">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Nickolas Kavantzas
                            <li>David Burdett
                            <li>Greg Ritzinger
                            <li>Tony Fletcher
                            <li>Yves Lafon
                            <li>Charlton Barreto
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="sparql protocol for rdf using wsdl 1.1" data-tag="data" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2005/WD-sprot11-20051024/" title="Latest draft of SPARQL Protocol for RDF Using WSDL 1.1 formally approved by the group">SPARQL  Protocol  for  RDF  Using  WSDL&nbsp;1.1</a></h2>
                        <p class=deliverer>SPARQL Working Group</p>
                        <p class=pubdetails>2005-10-24 - <a title="SPARQL Protocol for RDF Using WSDL 1.1 publication history" href="/standards/history/sprot11">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Lee Feigenbaum
                            <li>Andy Seaborne
                            <li>Elias Torres
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="rdf calendar - an application of the resource description framework to icalendar data" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2005/NOTE-rdfcal-20050929/" title="Latest draft of RDF Calendar - an application of the Resource Description Framework to iCalendar Data formally approved by the group">RDF Calendar - an application of the Resource Description Framework to iCalendar Data</a></h2>
                        <p class=deliverer>Semantic Web Interest Group</p>
                        <p class=pubdetails>2005-09-29 - <a title="RDF Calendar - an application of the Resource Description Framework to iCalendar Data publication history" href="/standards/history/rdfcal">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dan Connolly
                            <li>Libby Miller
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="test metadata" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2005/NOTE-test-metadata-20050914/" title="Latest draft of Test Metadata formally approved by the group">Test Metadata</a></h2>
                        <p class=deliverer>Quality Assurance Working Group</p>
                        <p class=pubdetails>2005-09-14 - <a title="Test Metadata publication history" href="/standards/history/test-metadata">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Patrick Curran
                            <li>Karl Dubost
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                          <li data-title="xml:id version 1.0" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2005/REC-xml-id-20050909/" title="Latest draft of xml:id Version 1.0 formally approved by the group">xml:id  Version&nbsp;1.0</a></h2>
                        <p class=deliverer>XML Core Working Group</p>
                        <p class=pubdetails>2005-09-09 - <a title="xml:id Version 1.0 publication history" href="/standards/history/xml-id">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jonathan Marsh
                            <li>Daniel Veillard
                            <li>Norman Walsh
                          </ul>
                                  </li>
                                                                                                                          <li data-title="the qa handbook" data-tag="" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2005/NOTE-qa-handbook-20050906/" title="Latest draft of The QA Handbook formally approved by the group">The QA Handbook</a></h2>
                        <p class=deliverer>Quality Assurance Working Group</p>
                        <p class=pubdetails>2005-09-06 - <a title="The QA Handbook publication history" href="/standards/history/qa-handbook">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Lofton Henderson
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="variability in specifications" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2005/NOTE-spec-variability-20050831/" title="Latest draft of Variability in Specifications formally approved by the group">Variability in Specifications</a></h2>
                        <p class=deliverer>Quality Assurance Working Group</p>
                        <p class=pubdetails>2005-08-31 - <a title="Variability in Specifications publication history" href="/standards/history/spec-variability">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dominique Hazaël-Massieux
                            <li>Lynne Rosenthal
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="qa framework: specification guidelines" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2005/REC-qaframe-spec-20050817/" title="Latest draft of QA Framework: Specification Guidelines formally approved by the group">QA Framework: Specification Guidelines</a></h2>
                        <p class=deliverer>Quality Assurance Working Group</p>
                        <p class=pubdetails>2005-08-17 - <a title="QA Framework: Specification Guidelines publication history" href="/standards/history/qaframe-spec">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Karl Dubost
                            <li>Lynne Rosenthal
                            <li>Dominique Hazaël-Massieux
                            <li>Lofton Henderson
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="discussion of alternative schema languages and type system support in wsdl 2.0" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2005/NOTE-wsdl20-altschemalangs-20050817/" title="Latest draft of Discussion of Alternative Schema Languages and Type System Support in WSDL 2.0 formally approved by the group">Discussion  of  Alternative  Schema  Languages  and  Type  System  Support  in  WSDL&nbsp;2.0</a></h2>
                        <p class=deliverer>Web Services Description Working Group</p>
                        <p class=pubdetails>2005-08-17 - <a title="Discussion of Alternative Schema Languages and Type System Support in WSDL 2.0 publication history" href="/standards/history/wsdl20-altschemalangs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Amelia Lewis
                            <li>Bijan Parsia
                          </ul>
                                  </li>
                                                                                                                          <li data-title="svg&#039;s xml binding language (sxbl)" data-tag="graphics" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2005/WD-sXBL-20050815/" title="Latest draft of SVG&#039;s XML Binding Language (sXBL) formally approved by the group">SVG's XML Binding Language (sXBL)</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2005-08-15 - <a title="SVG&#039;s XML Binding Language (sXBL) publication history" href="/standards/history/sXBL">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jon Ferraiolo
                            <li>Ian Hickson
                            <li>David Hyatt
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xml key management specification (xkms 2.0)" data-tag="xml" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2005/REC-xkms2-20050628/" title="Latest draft of XML Key Management Specification (XKMS 2.0) formally approved by the group">XML Key Management Specification (XKMS 2.0)</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>2005-06-28 - <a title="XML Key Management Specification (XKMS 2.0) publication history" href="/standards/history/xkms2">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Phillip Hallam-Baker
                            <li>Shivaram Mysore
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xml key management specification (xkms 2.0) bindings" data-tag="xml" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2005/REC-xkms2-bindings-20050628/" title="Latest draft of XML Key Management Specification (XKMS 2.0) Bindings formally approved by the group">XML Key Management Specification (XKMS 2.0) Bindings</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>2005-06-28 - <a title="XML Key Management Specification (XKMS 2.0) Bindings publication history" href="/standards/history/xkms2-bindings">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Phillip Hallam-Baker
                            <li>Shivaram Mysore
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="xpath requirements version 2.0" data-tag="xml" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2005/WD-xpath20req-20050603/" title="Latest draft of XPath Requirements Version 2.0 formally approved by the group">XPath  Requirements  Version&nbsp;2.0</a></h2>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=pubdetails>2005-06-03 - <a title="XPath Requirements Version 2.0 publication history" href="/standards/history/xpath20req">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mary Fernandez
                            <li>K Karun
                            <li>Mark Scardina
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="ssml 1.0 say-as attribute values" data-tag="media" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2005/NOTE-ssml-sayas-20050526/" title="Latest draft of SSML 1.0 say-as attribute values formally approved by the group">SSML 1.0 say-as attribute values</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>2005-05-26 - <a title="SSML 1.0 say-as attribute values publication history" href="/standards/history/ssml-sayas">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Daniel Burnett
                            <li>Paolo Baggia
                            <li>An Buyle
                            <li>Ellen Eide
                            <li>Luc Van Tichelen
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                <li data-title="representing specified values in owl: &quot;value partitions&quot; and &quot;value sets&quot;" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2005/NOTE-swbp-specified-values-20050517/" title="Latest draft of Representing Specified Values in OWL: &quot;value partitions&quot; and &quot;value sets&quot; formally approved by the group">Representing Specified Values in OWL: "value partitions" and "value sets"</a></h2>
                        <p class=deliverer>Semantic Web Best Practices and Deployment Working Group</p>
                        <p class=pubdetails>2005-05-17 - <a title="Representing Specified Values in OWL: &quot;value partitions&quot; and &quot;value sets&quot; publication history" href="/standards/history/swbp-specified-values">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Alan Rector
                          </ul>
                                  </li>
                                                                                                                          <li data-title="quick guide to publishing a thesaurus on the semantic web" data-tag="" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2005/WD-swbp-thesaurus-pubguide-20050517/" title="Latest draft of Quick Guide to Publishing a Thesaurus on the Semantic Web formally approved by the group">Quick Guide to Publishing a Thesaurus on the Semantic Web</a></h2>
                        <p class=deliverer>Semantic Web Best Practices and Deployment Working Group</p>
                        <p class=pubdetails>2005-05-17 - <a title="Quick Guide to Publishing a Thesaurus on the Semantic Web publication history" href="/standards/history/swbp-thesaurus-pubguide">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Alistair Miles
                          </ul>
                                  </li>
                                                                                                                          <li data-title="processing xml 1.1 documents with xml schema 1.0 processors" data-tag="xml" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2005/NOTE-xml11schema10-20050511/" title="Latest draft of Processing XML 1.1 documents with XML Schema 1.0 processors formally approved by the group">Processing XML 1.1 documents with XML Schema 1.0 processors</a></h2>
                        <p class=deliverer>XML Schema Working Group</p>
                        <p class=pubdetails>2005-05-11 - <a title="Processing XML 1.1 documents with XML Schema 1.0 processors publication history" href="/standards/history/xml11schema10">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Henry Thompson
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="describing media content of binary data in xml" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2005/NOTE-xml-media-types-20050504/" title="Latest draft of Describing Media Content of Binary Data in XML formally approved by the group">Describing Media Content of Binary Data in XML</a></h2>
                        <p class=deliverer>XML Protocol Working Group</p>
                        <p class=deliverer>Web Services Description Working Group</p>
                        <p class=pubdetails>2005-05-04 - <a title="Describing Media Content of Binary Data in XML publication history" href="/standards/history/xml-media-types">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Anish Karmarkar
                            <li>Ümit Yalçinalp
                          </ul>
                                  </li>
                                                                                                                          <li data-title="scalable vector graphics (svg) full 1.2 specification" data-tag="graphics" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2005/WD-SVG12-20050413/" title="Latest draft of Scalable Vector Graphics (SVG) Full 1.2 Specification formally approved by the group">Scalable Vector Graphics (SVG) Full 1.2 Specification</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2005-04-13 - <a title="Scalable Vector Graphics (SVG) Full 1.2 Specification publication history" href="/standards/history/SVG12">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dean Jackson
                            <li>Craig Northway
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                                                <li data-title="representing classes as property values on the semantic web" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2005/NOTE-swbp-classes-as-values-20050405/" title="Latest draft of Representing Classes As Property Values on the Semantic Web formally approved by the group">Representing Classes As Property Values on the Semantic Web</a></h2>
                        <p class=deliverer>Semantic Web Best Practices and Deployment Working Group</p>
                        <p class=pubdetails>2005-04-05 - <a title="Representing Classes As Property Values on the Semantic Web publication history" href="/standards/history/swbp-classes-as-values">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Natasha Noy
                          </ul>
                                  </li>
                                                                                                                          <li data-title="building a tokenizer for xpath or xquery" data-tag="xml" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2005/WD-xquery-xpath-parsing-20050404/" title="Latest draft of Building a Tokenizer for XPath or XQuery formally approved by the group">Building a Tokenizer for XPath or XQuery</a></h2>
                        <p class=deliverer>XML Query Working Group</p>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2005-04-04 - <a title="Building a Tokenizer for XPath or XQuery publication history" href="/standards/history/xquery-xpath-parsing">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Scott Boag
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xml binary characterization measurement methodologies" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2005/NOTE-xbc-measurement-20050331/" title="Latest draft of XML Binary Characterization Measurement Methodologies formally approved by the group">XML Binary Characterization Measurement Methodologies</a></h2>
                        <p class=deliverer>XML Binary Characterization Working Group</p>
                        <p class=pubdetails>2005-03-31 - <a title="XML Binary Characterization Measurement Methodologies publication history" href="/standards/history/xbc-measurement">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Stephen Williams
                            <li>Peter Haggar
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xml binary characterization properties" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2005/NOTE-xbc-properties-20050331/" title="Latest draft of XML Binary Characterization Properties formally approved by the group">XML Binary Characterization Properties</a></h2>
                        <p class=deliverer>XML Binary Characterization Working Group</p>
                        <p class=pubdetails>2005-03-31 - <a title="XML Binary Characterization Properties publication history" href="/standards/history/xbc-properties">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael Cokus
                            <li>Santiago Pericas-Geertsen
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xml binary characterization use cases" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2005/NOTE-xbc-use-cases-20050331/" title="Latest draft of XML Binary Characterization Use Cases formally approved by the group">XML Binary Characterization Use Cases</a></h2>
                        <p class=deliverer>XML Binary Characterization Working Group</p>
                        <p class=pubdetails>2005-03-31 - <a title="XML Binary Characterization Use Cases publication history" href="/standards/history/xbc-use-cases">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael Cokus
                            <li>Santiago Pericas-Geertsen
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xml binary characterization" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2005/NOTE-xbc-characterization-20050331/" title="Latest draft of XML Binary Characterization formally approved by the group">XML Binary Characterization</a></h2>
                        <p class=deliverer>XML Binary Characterization Working Group</p>
                        <p class=pubdetails>2005-03-31 - <a title="XML Binary Characterization publication history" href="/standards/history/xbc-characterization">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Oliver Goldman
                            <li>Dmitry Lenkov
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="rdf data access use cases and requirements" data-tag="data" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2005/WD-rdf-dawg-uc-20050325/" title="Latest draft of RDF Data Access Use Cases and Requirements formally approved by the group">RDF Data Access Use Cases and Requirements</a></h2>
                        <p class=deliverer>SPARQL Working Group</p>
                        <p class=pubdetails>2005-03-25 - <a title="RDF Data Access Use Cases and Requirements publication history" href="/standards/history/rdf-dawg-uc">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Kendall Clark
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="character model for the world wide web 1.0: fundamentals" data-tag="i18n" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2005/REC-charmod-20050215/" title="Latest draft of Character Model for the World Wide Web 1.0: Fundamentals formally approved by the group">Character Model for the World Wide Web 1.0: Fundamentals</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2005-02-15 - <a title="Character Model for the World Wide Web 1.0: Fundamentals publication history" href="/standards/history/charmod">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Martin Dürst
                            <li>François Yergeau
                            <li>Richard Ishida
                            <li>Misha Wolf
                            <li>Tex Texin
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                          <li data-title="extending xlink 1.0" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2005/NOTE-xlink10-ext-20050127/" title="Latest draft of Extending XLink 1.0 formally approved by the group">Extending  XLink&nbsp;1.0</a></h2>
                        <p class=deliverer>XML Core Working Group</p>
                        <p class=pubdetails>2005-01-27 - <a title="Extending XLink 1.0 publication history" href="/standards/history/xlink10-ext">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Norman Walsh
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="xml-binary optimized packaging" data-tag="" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2005/REC-xop10-20050125/" title="Latest draft of XML-binary Optimized Packaging formally approved by the group">XML-binary Optimized Packaging</a></h2>
                        <p class=deliverer>XML Protocol Working Group</p>
                        <p class=pubdetails>2005-01-25 - <a title="XML-binary Optimized Packaging publication history" href="/standards/history/xop10">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Martin Gudgin
                            <li>Noah Mendelsohn
                            <li>Mark Nottingham
                            <li>Hervé Ruellan
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="soap message transmission optimization mechanism" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2005/REC-soap12-mtom-20050125/" title="Latest draft of SOAP Message Transmission Optimization Mechanism formally approved by the group">SOAP Message Transmission Optimization Mechanism</a></h2>
                        <p class=deliverer>XML Protocol Working Group</p>
                        <p class=pubdetails>2005-01-25 - <a title="SOAP Message Transmission Optimization Mechanism publication history" href="/standards/history/soap12-mtom">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Martin Gudgin
                            <li>Noah Mendelsohn
                            <li>Mark Nottingham
                            <li>Hervé Ruellan
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="resource representation soap header block" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2005/REC-soap12-rep-20050125/" title="Latest draft of Resource Representation SOAP Header Block formally approved by the group">Resource Representation SOAP Header Block</a></h2>
                        <p class=deliverer>XML Protocol Working Group</p>
                        <p class=pubdetails>2005-01-25 - <a title="Resource Representation SOAP Header Block publication history" href="/standards/history/soap12-rep">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Anish Karmarkar
                            <li>Martin Gudgin
                            <li>Yves Lafon
                          </ul>
                                  </li>
                                                                                                                          <li data-title="glossary of terms for device independence" data-tag="" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2005/WD-di-gloss-20050118/" title="Latest draft of Glossary of Terms for Device Independence formally approved by the group">Glossary of Terms for Device Independence</a></h2>
                        <p class=deliverer>Device Independence Working Group</p>
                        <p class=pubdetails>2005-01-18 - <a title="Glossary of Terms for Device Independence publication history" href="/standards/history/di-gloss">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Rhys Lewis
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="architecture of the world wide web, volume one" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2004/REC-webarch-20041215/" title="Latest draft of Architecture of the World Wide Web, Volume One formally approved by the group">Architecture of the World Wide Web, Volume One</a></h2>
                        <p class=deliverer>Technical Architecture Group</p>
                        <p class=pubdetails>2004-12-15 - <a title="Architecture of the World Wide Web, Volume One publication history" href="/standards/history/webarch">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ian Jacobs
                            <li>Norman Walsh
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="requirements for the internationalization of web services" data-tag="i18n" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2004/NOTE-ws-i18n-req-20041116/" title="Latest draft of Requirements for the Internationalization of Web Services formally approved by the group">Requirements for the Internationalization of Web Services</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2004-11-16 - <a title="Requirements for the Internationalization of Web Services publication history" href="/standards/history/ws-i18n-req">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Addison Phillips
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                          <li data-title="pronunciation lexicon specification (pls) version 1.0 requirements" data-tag="media" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2004/WD-lexicon-reqs-20041029/" title="Latest draft of Pronunciation Lexicon Specification (PLS) Version 1.0 Requirements formally approved by the group">Pronunciation Lexicon Specification (PLS) Version 1.0 Requirements</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>2004-10-29 - <a title="Pronunciation Lexicon Specification (PLS) Version 1.0 Requirements publication history" href="/standards/history/lexicon-reqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Paolo Baggia
                            <li>Frank Scahill
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                          <li data-title="xml schema part 2: datatypes second edition" data-tag="xml" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2004/REC-xmlschema-2-20041028/" title="Latest draft of XML Schema Part 2: Datatypes Second Edition formally approved by the group">XML Schema Part 2: Datatypes Second Edition</a></h2>
                        <p class=deliverer>XML Schema Working Group</p>
                        <p class=pubdetails>2004-10-28 - <a title="XML Schema Part 2: Datatypes Second Edition publication history" href="/standards/history/xmlschema-2">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Paul V. Biron
                            <li>Ashok Malhotra
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="xml schema part 0: primer second edition" data-tag="xml" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2004/REC-xmlschema-0-20041028/" title="Latest draft of XML Schema Part 0: Primer Second Edition formally approved by the group">XML Schema Part 0: Primer Second Edition</a></h2>
                        <p class=deliverer>XML Schema Working Group</p>
                        <p class=pubdetails>2004-10-28 - <a title="XML Schema Part 0: Primer Second Edition publication history" href="/standards/history/xmlschema-0">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>David Fallside
                            <li>Priscilla Walmsley
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="xml schema part 1: structures second edition" data-tag="xml" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2004/REC-xmlschema-1-20041028/" title="Latest draft of XML Schema Part 1: Structures Second Edition formally approved by the group">XML Schema Part 1: Structures Second Edition</a></h2>
                        <p class=deliverer>XML Schema Working Group</p>
                        <p class=pubdetails>2004-10-28 - <a title="XML Schema Part 1: Structures Second Edition publication history" href="/standards/history/xmlschema-1">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Henry Thompson
                            <li>David Beech
                            <li>Murray Maloney
                            <li>Noah Mendelsohn
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="speech synthesis markup language (ssml) version 1.0" data-tag="media" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2004/REC-speech-synthesis-20040907/" title="Latest draft of Speech Synthesis Markup Language (SSML) Version 1.0 formally approved by the group">Speech  Synthesis  Markup  Language  (SSML)  Version&nbsp;1.0</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>2004-09-07 - <a title="Speech Synthesis Markup Language (SSML) Version 1.0 publication history" href="/standards/history/speech-synthesis">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Daniel Burnett
                            <li>Mark Walker
                            <li>Andrew Hunt
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xforms 1.1 requirements" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2004/NOTE-xforms-11-req-20040831/" title="Latest draft of XForms 1.1 Requirements formally approved by the group">XForms 1.1 Requirements</a></h2>
                        <p class=deliverer>Forms Working Group</p>
                        <p class=pubdetails>2004-08-31 - <a title="XForms 1.1 Requirements publication history" href="/standards/history/xforms-11-req">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>John Boyer
                            <li>Roland Merrick
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="qa framework: test guidelines" data-tag="" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2004/WD-qaframe-test-20040820/" title="Latest draft of QA Framework: Test Guidelines formally approved by the group">QA Framework: Test Guidelines</a></h2>
                        <p class=deliverer>Quality Assurance Working Group</p>
                        <p class=pubdetails>2004-08-20 - <a title="QA Framework: Test Guidelines publication history" href="/standards/history/qaframe-test">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Patrick Curran
                            <li>Dimitris Dimitriadis
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="web services internationalization usage scenarios" data-tag="i18n" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2004/NOTE-ws-i18n-scenarios-20040730/" title="Latest draft of Web Services Internationalization Usage Scenarios formally approved by the group">Web Services Internationalization Usage Scenarios</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2004-07-30 - <a title="Web Services Internationalization Usage Scenarios publication history" href="/standards/history/ws-i18n-scenarios">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Debasish Banerjee
                            <li>Martin Dürst
                            <li>Michael McKenna
                            <li>Addison Phillips
                            <li>Takao Suzuki
                            <li>Tex Texin
                            <li>Mary Trumble
                            <li>Andrea Vine
                            <li>Kentaro Noji
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                          <li data-title="soap optimized serialization use cases and requirements" data-tag="" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2004/WD-soap12-os-ucr-20040608/" title="Latest draft of SOAP Optimized Serialization Use Cases and Requirements formally approved by the group">SOAP Optimized Serialization Use Cases and Requirements</a></h2>
                        <p class=deliverer>XML Protocol Working Group</p>
                        <p class=pubdetails>2004-06-08 - <a title="SOAP Optimized Serialization Use Cases and Requirements publication history" href="/standards/history/soap12-os-ucr">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tony Graham
                            <li>Anish Karmarkar
                            <li>Mark Jones
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="soap 1.2 attachment feature" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2004/NOTE-soap12-af-20040608/" title="Latest draft of SOAP 1.2 Attachment Feature formally approved by the group">SOAP 1.2 Attachment Feature</a></h2>
                        <p class=deliverer>XML Protocol Working Group</p>
                        <p class=pubdetails>2004-06-08 - <a title="SOAP 1.2 Attachment Feature publication history" href="/standards/history/soap12-af">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Henrik Frystyk Nielsen
                            <li>Hervé Ruellan
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="xop inclusion mechanism - frequently asked questions" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2004/NOTE-xopinc-FAQ-20040608/" title="Latest draft of XOP Inclusion Mechanism - Frequently Asked Questions formally approved by the group">XOP Inclusion Mechanism - Frequently Asked Questions</a></h2>
                        <p class=deliverer>XML Protocol Working Group</p>
                        <p class=pubdetails>2004-06-08 - <a title="XOP Inclusion Mechanism - Frequently Asked Questions publication history" href="/standards/history/xopinc-FAQ">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael Mahan
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="modality component to host environment dom requirements and capabilities assessment" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2004/NOTE-modality-interface-20040510/" title="Latest draft of Modality Component to Host Environment DOM Requirements and Capabilities Assessment formally approved by the group">Modality Component to Host Environment DOM Requirements and Capabilities Assessment</a></h2>
                        <p class=deliverer>Multimodal Interaction Working Group</p>
                        <p class=pubdetails>2004-05-10 - <a title="Modality Component to Host Environment DOM Requirements and Capabilities Assessment publication history" href="/standards/history/modality-interface">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Brandon Porter
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="document object model (dom) level 3 core specification" data-tag="dom" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/" title="Latest draft of Document Object Model (DOM) Level 3 Core Specification formally approved by the group">Document Object Model (DOM) Level 3 Core Specification</a></h2>
                        <p class=deliverer>DOM Working Group</p>
                        <p class=pubdetails>2004-04-07 - <a title="Document Object Model (DOM) Level 3 Core Specification publication history" href="/standards/history/DOM-Level-3-Core">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Arnaud Le Hors
                            <li>Philippe Le Hégaret
                            <li>Lauren Wood
                            <li>Gavin Nicol
                            <li>Jonathan Robie
                            <li>Mike Champion
                            <li>Steven B Byrne
                          </ul>
                                    <ul class="taglist">
                            <li class="dom">DOM
                          </ul>
                      </li>
                                                                                                                          <li data-title="document object model (dom) level 3 load and save specification" data-tag="dom" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2004/REC-DOM-Level-3-LS-20040407/" title="Latest draft of Document Object Model (DOM) Level 3 Load and Save Specification formally approved by the group">Document Object Model (DOM) Level 3 Load and Save Specification</a></h2>
                        <p class=deliverer>DOM Working Group</p>
                        <p class=pubdetails>2004-04-07 - <a title="Document Object Model (DOM) Level 3 Load and Save Specification publication history" href="/standards/history/DOM-Level-3-LS">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Johnny Stenback
                            <li>Andy Heninger
                          </ul>
                                    <ul class="taglist">
                            <li class="dom">DOM
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xml processing model requirements" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2004/NOTE-proc-model-req-20040405/" title="Latest draft of XML Processing Model Requirements formally approved by the group">XML Processing Model Requirements</a></h2>
                        <p class=deliverer>XML Core Working Group</p>
                        <p class=pubdetails>2004-04-05 - <a title="XML Processing Model Requirements publication history" href="/standards/history/proc-model-req">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dmitry Lenkov
                            <li>Norman Walsh
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="ws choreography model overview" data-tag="" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2004/WD-ws-chor-model-20040324/" title="Latest draft of WS Choreography Model Overview formally approved by the group">WS Choreography Model Overview</a></h2>
                        <p class=deliverer>Web Services Choreography Working Group</p>
                        <p class=pubdetails>2004-03-24 - <a title="WS Choreography Model Overview publication history" href="/standards/history/ws-chor-model">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>David Burdett
                            <li>Nickolas Kavantzas
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="speech recognition grammar specification version 1.0" data-tag="media" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2004/REC-speech-grammar-20040316/" title="Latest draft of Speech Recognition Grammar Specification Version 1.0 formally approved by the group">Speech  Recognition  Grammar  Specification  Version&nbsp;1.0</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>2004-03-16 - <a title="Speech Recognition Grammar Specification Version 1.0 publication history" href="/standards/history/speech-grammar">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Andrew Hunt
                            <li>Scott McGlashan
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="voice extensible markup language (voicexml) version 2.0" data-tag="media" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2004/REC-voicexml20-20040316/" title="Latest draft of Voice Extensible Markup Language (VoiceXML) Version 2.0 formally approved by the group">Voice  Extensible  Markup  Language  (VoiceXML)  Version&nbsp;2.0</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>2004-03-16 - <a title="Voice Extensible Markup Language (VoiceXML) Version 2.0 publication history" href="/standards/history/voicexml20">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Scott McGlashan
                            <li>Daniel Burnett
                            <li>Jerry Carter
                            <li>Peter Danielsen
                            <li>Jim Ferrans
                            <li>Andrew Hunt
                            <li>Bruce Lucas
                            <li>Brandon Porter
                            <li>Kenneth Rehor
                            <li>Steph Tryphonas
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                          <li data-title="web services choreography requirements" data-tag="" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2004/WD-ws-chor-reqs-20040311/" title="Latest draft of Web Services Choreography Requirements formally approved by the group">Web Services Choreography Requirements</a></h2>
                        <p class=deliverer>Web Services Choreography Working Group</p>
                        <p class=pubdetails>2004-03-11 - <a title="Web Services Choreography Requirements publication history" href="/standards/history/ws-chor-reqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Daniel Austin
                            <li>Abbie Barbir
                            <li>Ed Peters
                            <li>Steve Ross-Talbot
                          </ul>
                                  </li>
                                                                                                                          <li data-title="document object model (dom) requirements" data-tag="dom" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2004/NOTE-DOM-Requirements-20040226/" title="Latest draft of Document Object Model (DOM) Requirements formally approved by the group">Document Object Model (DOM) Requirements</a></h2>
                        <p class=deliverer>DOM Working Group</p>
                        <p class=pubdetails>2004-02-26 - <a title="Document Object Model (DOM) Requirements publication history" href="/standards/history/DOM-Requirements">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ben Chang
                            <li>Philippe Le Hégaret
                            <li>Arnaud Le Hors
                            <li>Ray Whitmer
                            <li>Mike Champion
                            <li>Joseph Kesselman
                            <li>Andy Heninger
                            <li>Angel Diaz
                            <li>James Davidson
                            <li>Lauren Wood
                            <li>Jared Sorensen
                          </ul>
                                    <ul class="taglist">
                            <li class="dom">DOM
                          </ul>
                      </li>
                                                                                                                                                <li data-title="document object model (dom) level 3 views and formatting specification" data-tag="dom" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2004/NOTE-DOM-Level-3-Views-20040226/" title="Latest draft of Document Object Model (DOM) Level 3 Views and Formatting Specification formally approved by the group">Document Object Model (DOM) Level 3 Views and Formatting Specification</a></h2>
                        <p class=deliverer>DOM Working Group</p>
                        <p class=pubdetails>2004-02-26 - <a title="Document Object Model (DOM) Level 3 Views and Formatting Specification publication history" href="/standards/history/DOM-Level-3-Views">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ray Whitmer
                          </ul>
                                    <ul class="taglist">
                            <li class="dom">DOM
                          </ul>
                      </li>
                                                                                                                                                <li data-title="document object model (dom) level 3 xpath specification" data-tag="dom xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2004/NOTE-DOM-Level-3-XPath-20040226/" title="Latest draft of Document Object Model (DOM) Level 3 XPath Specification formally approved by the group">Document Object Model (DOM) Level 3 XPath Specification</a></h2>
                        <p class=deliverer>DOM Working Group</p>
                        <p class=pubdetails>2004-02-26 - <a title="Document Object Model (DOM) Level 3 XPath Specification publication history" href="/standards/history/DOM-Level-3-XPath">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ray Whitmer
                          </ul>
                                    <ul class="taglist">
                            <li class="dom">DOM
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="authoring techniques for device independence" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2004/NOTE-di-atdi-20040218/" title="Latest draft of Authoring Techniques for Device Independence formally approved by the group">Authoring Techniques for Device Independence</a></h2>
                        <p class=deliverer>Device Independence Working Group</p>
                        <p class=pubdetails>2004-02-18 - <a title="Authoring Techniques for Device Independence publication history" href="/standards/history/di-atdi">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Rotan Hanrahan
                            <li>Roland Merrick
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="web service management: service life cycle" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2004/NOTE-wslc-20040211/" title="Latest draft of Web Service Management: Service Life Cycle formally approved by the group">Web Service Management: Service Life Cycle</a></h2>
                        <p class=deliverer>Web Services Architecture Working Group</p>
                        <p class=pubdetails>2004-02-11 - <a title="Web Service Management: Service Life Cycle publication history" href="/standards/history/wslc">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Hao He
                            <li>Mark Potts
                            <li>Igor Sedukhin
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="web services architecture requirements" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2004/NOTE-wsa-reqs-20040211/" title="Latest draft of Web Services Architecture Requirements formally approved by the group">Web Services Architecture Requirements</a></h2>
                        <p class=deliverer>Web Services Architecture Working Group</p>
                        <p class=pubdetails>2004-02-11 - <a title="Web Services Architecture Requirements publication history" href="/standards/history/wsa-reqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Daniel Austin
                            <li>Abbie Barbir
                            <li>Christopher Ferris
                            <li>Sharad Garg
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="web services glossary" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2004/NOTE-ws-gloss-20040211/" title="Latest draft of Web Services Glossary formally approved by the group">Web Services Glossary</a></h2>
                        <p class=deliverer>Web Services Architecture Working Group</p>
                        <p class=pubdetails>2004-02-11 - <a title="Web Services Glossary publication history" href="/standards/history/ws-gloss">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Hugo Haas
                            <li>Allen Brown
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="web services architecture" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2004/NOTE-ws-arch-20040211/" title="Latest draft of Web Services Architecture formally approved by the group">Web Services Architecture</a></h2>
                        <p class=deliverer>Web Services Architecture Working Group</p>
                        <p class=pubdetails>2004-02-11 - <a title="Web Services Architecture publication history" href="/standards/history/ws-arch">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>David Booth
                            <li>Hugo Haas
                            <li>Francis McCabe
                            <li>Eric Newcomer
                            <li>Mike Champion
                            <li>Christopher Ferris
                            <li>David Orchard
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="web services architecture usage scenarios" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2004/NOTE-ws-arch-scenarios-20040211/" title="Latest draft of Web Services Architecture Usage Scenarios formally approved by the group">Web Services Architecture Usage Scenarios</a></h2>
                        <p class=deliverer>Web Services Architecture Working Group</p>
                        <p class=pubdetails>2004-02-11 - <a title="Web Services Architecture Usage Scenarios publication history" href="/standards/history/ws-arch-scenarios">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Hao He
                            <li>Hugo Haas
                            <li>David Orchard
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="owl web ontology language overview" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2004/REC-owl-features-20040210/" title="Latest draft of OWL Web Ontology Language Overview formally approved by the group">OWL Web Ontology Language Overview</a></h2>
                        <p class=deliverer>Web Ontology Working Group</p>
                        <p class=pubdetails>2004-02-10 - <a title="OWL Web Ontology Language Overview publication history" href="/standards/history/owl-features">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Deborah McGuinness
                            <li>Frank van Harmelen
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="rdf semantics" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2004/REC-rdf-mt-20040210/" title="Latest draft of RDF Semantics formally approved by the group">RDF Semantics</a></h2>
                        <p class=deliverer>RDF Core Working Group</p>
                        <p class=pubdetails>2004-02-10 - <a title="RDF Semantics publication history" href="/standards/history/rdf-mt">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Patrick Hayes
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="owl web ontology language guide" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2004/REC-owl-guide-20040210/" title="Latest draft of OWL Web Ontology Language Guide formally approved by the group">OWL Web Ontology Language Guide</a></h2>
                        <p class=deliverer>Web Ontology Working Group</p>
                        <p class=pubdetails>2004-02-10 - <a title="OWL Web Ontology Language Guide publication history" href="/standards/history/owl-guide">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Christopher Welty
                            <li>Deborah McGuinness
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="resource description framework (rdf): concepts and abstract syntax" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2004/REC-rdf-concepts-20040210/" title="Latest draft of Resource Description Framework (RDF): Concepts and Abstract Syntax formally approved by the group">Resource Description Framework (RDF): Concepts and Abstract Syntax</a></h2>
                        <p class=deliverer>RDF Core Working Group</p>
                        <p class=pubdetails>2004-02-10 - <a title="Resource Description Framework (RDF): Concepts and Abstract Syntax publication history" href="/standards/history/rdf-concepts">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Graham Klyne
                            <li>Jeremy Carroll
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="rdf primer" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2004/REC-rdf-primer-20040210/" title="Latest draft of RDF Primer formally approved by the group">RDF Primer</a></h2>
                        <p class=deliverer>RDF Core Working Group</p>
                        <p class=pubdetails>2004-02-10 - <a title="RDF Primer publication history" href="/standards/history/rdf-primer">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Frank Manola
                            <li>Eric Miller
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="rdf test cases" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2004/REC-rdf-testcases-20040210/" title="Latest draft of RDF Test Cases formally approved by the group">RDF Test Cases</a></h2>
                        <p class=deliverer>RDF Core Working Group</p>
                        <p class=pubdetails>2004-02-10 - <a title="RDF Test Cases publication history" href="/standards/history/rdf-testcases">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>jan grant
                            <li>Dave Beckett
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="owl web ontology language reference" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2004/REC-owl-ref-20040210/" title="Latest draft of OWL Web Ontology Language Reference formally approved by the group">OWL Web Ontology Language Reference</a></h2>
                        <p class=deliverer>Web Ontology Working Group</p>
                        <p class=pubdetails>2004-02-10 - <a title="OWL Web Ontology Language Reference publication history" href="/standards/history/owl-ref">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mike Dean
                            <li>Guus Schreiber
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="owl web ontology language use cases and requirements" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2004/REC-webont-req-20040210/" title="Latest draft of OWL Web Ontology Language Use Cases and Requirements formally approved by the group">OWL Web Ontology Language Use Cases and Requirements</a></h2>
                        <p class=deliverer>Web Ontology Working Group</p>
                        <p class=pubdetails>2004-02-10 - <a title="OWL Web Ontology Language Use Cases and Requirements publication history" href="/standards/history/webont-req">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jeff Heflin
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                          <li data-title="owl web ontology language semantics and abstract syntax" data-tag="data" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2004/REC-owl-semantics-20040210/" title="Latest draft of OWL Web Ontology Language Semantics and Abstract Syntax formally approved by the group">OWL Web Ontology Language Semantics and Abstract Syntax</a></h2>
                        <p class=deliverer>Web Ontology Working Group</p>
                        <p class=pubdetails>2004-02-10 - <a title="OWL Web Ontology Language Semantics and Abstract Syntax publication history" href="/standards/history/owl-semantics">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Peter Patel-Schneider
                            <li>Patrick Hayes
                            <li>Ian Horrocks
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="owl web ontology language test cases" data-tag="data" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2004/REC-owl-test-20040210/" title="Latest draft of OWL Web Ontology Language Test Cases formally approved by the group">OWL Web Ontology Language Test Cases</a></h2>
                        <p class=deliverer>Web Ontology Working Group</p>
                        <p class=pubdetails>2004-02-10 - <a title="OWL Web Ontology Language Test Cases publication history" href="/standards/history/owl-test">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jeremy Carroll
                            <li>Jos De Roo
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xml information set (second edition)" data-tag="xml" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2004/REC-xml-infoset-20040204/" title="Latest draft of XML Information Set (Second Edition) formally approved by the group">XML Information Set (Second Edition)</a></h2>
                        <p class=deliverer>XML Core Working Group</p>
                        <p class=pubdetails>2004-02-04 - <a title="XML Information Set (Second Edition) publication history" href="/standards/history/xml-infoset">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>John Cowan
                            <li>Richard Tobin
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="document object model (dom) level 3 validation specification" data-tag="dom" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2004/REC-DOM-Level-3-Val-20040127/" title="Latest draft of Document Object Model (DOM) Level 3 Validation Specification formally approved by the group">Document Object Model (DOM) Level 3 Validation Specification</a></h2>
                        <p class=deliverer>DOM Working Group</p>
                        <p class=pubdetails>2004-01-27 - <a title="Document Object Model (DOM) Level 3 Validation Specification publication history" href="/standards/history/DOM-Level-3-Val">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ben Chang
                            <li>Joseph Kesselman
                            <li>rezaur rahman
                          </ul>
                                    <ul class="taglist">
                            <li class="dom">DOM
                          </ul>
                      </li>
                                                                                                                                                <li data-title="owl web ontology language parsing owl in rdf/xml" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2004/NOTE-owl-parsing-20040121/" title="Latest draft of OWL Web Ontology Language Parsing OWL in RDF/XML formally approved by the group">OWL Web Ontology Language Parsing OWL in RDF/XML</a></h2>
                        <p class=deliverer>Web Ontology Working Group</p>
                        <p class=pubdetails>2004-01-21 - <a title="OWL Web Ontology Language Parsing OWL in RDF/XML publication history" href="/standards/history/owl-parsing">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Sean Bechhofer
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="composite capability/preference profiles (cc/pp): structure and vocabularies 1.0" data-tag="data" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2004/REC-CCPP-struct-vocab-20040115/" title="Latest draft of Composite Capability/Preference Profiles (CC/PP): Structure and Vocabularies 1.0 formally approved by the group">Composite  Capability/Preference  Profiles  (CC/PP):  Structure  and  Vocabularies&nbsp;1.0</a></h2>
                        <p class=deliverer>Device Independence Working Group</p>
                        <p class=pubdetails>2004-01-15 - <a title="Composite Capability/Preference Profiles (CC/PP): Structure and Vocabularies 1.0 publication history" href="/standards/history/CCPP-struct-vocab">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Graham Klyne
                            <li>Franklin Reynolds
                            <li>Christopher Woodrow
                            <li>Hidetaka Ohto
                            <li>Johan Hjelm
                            <li>Mark Butler
                            <li>Luu Tran
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                          <li data-title="extensible stylesheet language (xsl) version 1.1 requirements" data-tag="xml" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2003/WD-xsl11-req-20031217/" title="Latest draft of Extensible Stylesheet Language (XSL) Version 1.1 Requirements formally approved by the group">Extensible Stylesheet Language (XSL) Version 1.1 Requirements</a></h2>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2003-12-17 - <a title="Extensible Stylesheet Language (XSL) Version 1.1 Requirements publication history" href="/standards/history/xsl11-req">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Paul Grosso
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="portable network graphics (png) specification (second edition)" data-tag="graphics" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2003/REC-PNG-20031110/" title="Latest draft of Portable Network Graphics (PNG) Specification (Second Edition) formally approved by the group">Portable Network Graphics (PNG) Specification (Second Edition)</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>2003-11-10 - <a title="Portable Network Graphics (PNG) Specification (Second Edition) publication history" href="/standards/history/PNG">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>David Duce
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="structured types in mathml 2.0" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2003/NOTE-mathml-types-20031110/" title="Latest draft of Structured Types in MathML 2.0 formally approved by the group">Structured  Types  in  MathML&nbsp;2.0</a></h2>
                        <p class=deliverer>Math Working Group</p>
                        <p class=pubdetails>2003-11-10 - <a title="Structured Types in MathML 2.0 publication history" href="/standards/history/mathml-types">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Stan Devitt
                            <li>Michael Kohlhase
                            <li>Max Froumentin
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="units in mathml" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2003/NOTE-mathml-units-20031110/" title="Latest draft of Units in MathML formally approved by the group">Units in MathML</a></h2>
                        <p class=deliverer>Math Working Group</p>
                        <p class=pubdetails>2003-11-10 - <a title="Units in MathML publication history" href="/standards/history/mathml-units">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Douglas Harder
                            <li>Stan Devitt
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="bound variables in mathml" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2003/NOTE-mathml-bvar-20031110/" title="Latest draft of Bound Variables in MathML formally approved by the group">Bound Variables in MathML</a></h2>
                        <p class=deliverer>Math Working Group</p>
                        <p class=pubdetails>2003-11-10 - <a title="Bound Variables in MathML publication history" href="/standards/history/mathml-bvar">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Stan Devitt
                            <li>Michael Kohlhase
                          </ul>
                                  </li>
                                                                                                                          <li data-title="mathematical markup language (mathml) version 2.0 (second edition)" data-tag="" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2003/REC-MathML2-20031021/" title="Latest draft of Mathematical Markup Language (MathML) Version 2.0 (Second Edition) formally approved by the group">Mathematical Markup Language (MathML) Version 2.0 (Second Edition)</a></h2>
                        <p class=deliverer>Math Working Group</p>
                        <p class=pubdetails>2003-10-21 - <a title="Mathematical Markup Language (MathML) Version 2.0 (Second Edition) publication history" href="/standards/history/MathML2">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>David Carlisle
                            <li>Patrick D F Ion
                            <li>Robert R Miner
                            <li>Nico Poppelier
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="xforms 1.0 basic profile" data-tag="xml" data-status="cr" data-version="latest upcoming">
            <div class="profile">CR</div>
            <h2 class="CandidateRecommendation"><a href="http://www.w3.org/TR/2003/CR-xforms-basic-20031014/" title="Latest draft of XForms 1.0 Basic Profile formally approved by the group">XForms 1.0 Basic Profile</a></h2>
                        <p class=deliverer>Forms Working Group</p>
                        <p class=pubdetails>2003-10-14 - <a title="XForms 1.0 Basic Profile publication history" href="/standards/history/xforms-basic">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Micah Dubinko
                            <li>T.V. Raman
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="xml events" data-tag="dom xml" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2003/REC-xml-events-20031014/" title="Latest draft of XML Events formally approved by the group">XML Events</a></h2>
                        <p class=deliverer>XHTML2 Working Group</p>
                        <p class=pubdetails>2003-10-14 - <a title="XML Events publication history" href="/standards/history/xml-events">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Shane McCarron
                            <li>Steven Pemberton
                            <li>T.V. Raman
                          </ul>
                                    <ul class="taglist">
                            <li class="dom">DOM
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="lbase: semantics for languages of the semantic web" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2003/NOTE-lbase-20031010/" title="Latest draft of LBase: Semantics for Languages of the Semantic Web formally approved by the group">LBase: Semantics for Languages of the Semantic Web</a></h2>
                        <p class=deliverer>RDF Core Working Group</p>
                        <p class=pubdetails>2003-10-10 - <a title="LBase: Semantics for Languages of the Semantic Web publication history" href="/standards/history/lbase">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ramanathan Guha
                            <li>Patrick Hayes
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="soap version 1.2 message normalization" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2003/NOTE-soap12-n11n-20031008/" title="Latest draft of SOAP Version 1.2 Message Normalization formally approved by the group">SOAP Version 1.2 Message Normalization</a></h2>
                        <p class=deliverer>XML Protocol Working Group</p>
                        <p class=pubdetails>2003-10-08 - <a title="SOAP Version 1.2 Message Normalization publication history" href="/standards/history/soap12-n11n">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Martin Gudgin
                            <li>Marc Hadley
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="proposal for xml fragment identifier syntax 0.9" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2003/NOTE-xml-fragid-20030912/" title="Latest draft of Proposal for XML Fragment Identifier Syntax 0.9 formally approved by the group">Proposal  for  XML  Fragment  Identifier  Syntax&nbsp;0.9</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>2003-09-12 - <a title="Proposal for XML Fragment Identifier Syntax 0.9 publication history" href="/standards/history/xml-fragid">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Paul Grosso
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="device independence principles" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2003/NOTE-di-princ-20030901/" title="Latest draft of Device Independence Principles formally approved by the group">Device Independence Principles</a></h2>
                        <p class=deliverer>Device Independence Working Group</p>
                        <p class=pubdetails>2003-09-01 - <a title="Device Independence Principles publication history" href="/standards/history/di-princ">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Roger Gimson
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="authoring challenges for device independence" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2003/NOTE-acdi-20030901/" title="Latest draft of Authoring Challenges for Device Independence formally approved by the group">Authoring Challenges for Device Independence</a></h2>
                        <p class=deliverer>Device Independence Working Group</p>
                        <p class=pubdetails>2003-09-01 - <a title="Authoring Challenges for Device Independence publication history" href="/standards/history/acdi">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Rhys Lewis
                          </ul>
                                  </li>
                                                                                                                          <li data-title="xml:id requirements" data-tag="" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2003/WD-xml-id-req-20030806/" title="Latest draft of xml:id Requirements formally approved by the group">xml:id Requirements</a></h2>
                        <p class=deliverer>XML Core Working Group</p>
                        <p class=pubdetails>2003-08-06 - <a title="xml:id Requirements publication history" href="/standards/history/xml-id-req">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jonathan Marsh
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="soap version 1.2 usage scenarios" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2003/NOTE-xmlp-scenarios-20030730/" title="Latest draft of SOAP Version 1.2 Usage Scenarios formally approved by the group">SOAP Version 1.2 Usage Scenarios</a></h2>
                        <p class=deliverer>XML Protocol Working Group</p>
                        <p class=pubdetails>2003-07-30 - <a title="SOAP Version 1.2 Usage Scenarios publication history" href="/standards/history/xmlp-scenarios">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>John Ibbotson
                          </ul>
                                  </li>
                                                                                                                          <li data-title="xml protocol (xmlp) requirements" data-tag="" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2003/NOTE-xmlp-reqs-20030728/" title="Latest draft of XML Protocol (XMLP) Requirements formally approved by the group">XML Protocol (XMLP) Requirements</a></h2>
                        <p class=deliverer>XML Protocol Working Group</p>
                        <p class=pubdetails>2003-07-28 - <a title="XML Protocol (XMLP) Requirements publication history" href="/standards/history/xmlp-reqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Alex Ceponkus
                            <li>Paul Cotton
                            <li>David Ezell
                            <li>David Fallside
                            <li>Martin Gudgin
                            <li>Oisin Hurley
                            <li>John Ibbotson
                            <li>Alex Milowski
                            <li>Kevin Mitchell
                            <li>Jean-Jacques Moreau
                            <li>Eric Newcomer
                            <li>Henrik Frystyk Nielsen
                            <li>Bob Lojek
                            <li>Mark Nottingham
                            <li>Waqar Sadiq
                            <li>Stuart Williams
                            <li>Amr Yassin
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="owl web ontology language xml presentation syntax" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2003/NOTE-owl-xmlsyntax-20030611/" title="Latest draft of OWL Web Ontology Language XML Presentation Syntax formally approved by the group">OWL Web Ontology Language XML Presentation Syntax</a></h2>
                        <p class=deliverer>Web Ontology Working Group</p>
                        <p class=pubdetails>2003-06-11 - <a title="OWL Web Ontology Language XML Presentation Syntax publication history" href="/standards/history/owl-xmlsyntax">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Masahiro Hori
                            <li>Jérôme Euzenat
                            <li>Peter Patel-Schneider
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                          <li data-title="core presentation characteristics: requirements and use cases" data-tag="" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2003/WD-cpc-req-20030510/" title="Latest draft of Core Presentation Characteristics: Requirements and Use Cases formally approved by the group">Core Presentation Characteristics: Requirements and Use Cases</a></h2>
                        <p class=deliverer>Device Independence Working Group</p>
                        <p class=pubdetails>2003-05-10 - <a title="Core Presentation Characteristics: Requirements and Use Cases publication history" href="/standards/history/cpc-req">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Markus Lauff
                            <li>Amy Yu
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="w3c multimodal interaction framework" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2003/NOTE-mmi-framework-20030506/" title="Latest draft of W3C Multimodal Interaction Framework formally approved by the group">W3C Multimodal Interaction Framework</a></h2>
                        <p class=deliverer>Multimodal Interaction Working Group</p>
                        <p class=pubdetails>2003-05-06 - <a title="W3C Multimodal Interaction Framework publication history" href="/standards/history/mmi-framework">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>T.V. Raman
                            <li>Dave Raggett
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="xml key management (xkms 2.0) requirements" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2003/NOTE-xkms2-req-20030505" title="Latest draft of XML Key Management (XKMS 2.0) Requirements formally approved by the group">XML Key Management (XKMS 2.0) Requirements</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>2003-05-05 - <a title="XML Key Management (XKMS 2.0) Requirements publication history" href="/standards/history/xkms2-req">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Frederick Hirsch
                            <li>Mike Just
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="framework document for i18n guidelines 1.0" data-tag="i18n" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2003/WD-i18n-guide-framework-20030417/" title="Latest draft of Framework Document for i18n Guidelines 1.0 formally approved by the group">Framework  Document  for  i18n  Guidelines&nbsp;1.0</a></h2>
                        <p class=deliverer>Internationalization Working Group</p>
                        <p class=pubdetails>2003-04-17 - <a title="Framework Document for i18n Guidelines 1.0 publication history" href="/standards/history/i18n-guide-framework">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Richard Ishida
                          </ul>
                                    <ul class="taglist">
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                          <li data-title="xpointer element() scheme" data-tag="" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2003/REC-xptr-element-20030325/" title="Latest draft of XPointer element() Scheme formally approved by the group">XPointer element() Scheme</a></h2>
                        <p class=deliverer>XML Linking Working Group</p>
                        <p class=pubdetails>2003-03-25 - <a title="XPointer element() Scheme publication history" href="/standards/history/xptr-element">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Paul Grosso
                            <li>Eve Maler
                            <li>Jonathan Marsh
                            <li>Norman Walsh
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="xpointer framework" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2003/REC-xptr-framework-20030325/" title="Latest draft of XPointer Framework formally approved by the group">XPointer Framework</a></h2>
                        <p class=deliverer>XML Linking Working Group</p>
                        <p class=pubdetails>2003-03-25 - <a title="XPointer Framework publication history" href="/standards/history/xptr-framework">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Paul Grosso
                            <li>Eve Maler
                            <li>Jonathan Marsh
                            <li>Norman Walsh
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="xpointer xmlns() scheme" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2003/REC-xptr-xmlns-20030325/" title="Latest draft of XPointer xmlns() Scheme formally approved by the group">XPointer xmlns() Scheme</a></h2>
                        <p class=deliverer>XML Linking Working Group</p>
                        <p class=pubdetails>2003-03-25 - <a title="XPointer xmlns() Scheme publication history" href="/standards/history/xptr-xmlns">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steven DeRose
                            <li>Ron Daniel
                            <li>Eve Maler
                            <li>Jonathan Marsh
                          </ul>
                                  </li>
                                                                                                                          <li data-title="xml protocol abstract model" data-tag="" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2003/WD-xmlp-am-20030220/" title="Latest draft of XML Protocol Abstract Model formally approved by the group">XML Protocol Abstract Model</a></h2>
                        <p class=deliverer>XML Protocol Working Group</p>
                        <p class=pubdetails>2003-02-20 - <a title="XML Protocol Abstract Model publication history" href="/standards/history/xmlp-am">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Stuart Williams
                            <li>Mark Jones
                          </ul>
                                  </li>
                                                                                                                          <li data-title="svg printing requirements" data-tag="graphics" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2003/WD-SVGPrintReqs-20030218/" title="Latest draft of SVG Printing Requirements formally approved by the group">SVG Printing Requirements</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2003-02-18 - <a title="SVG Printing Requirements publication history" href="/standards/history/SVGPrintReqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jun Fujisawa
                            <li>Lee Klosterman
                            <li>Craig Brown
                            <li>Alex Danilo
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                          <li data-title="requirements for wcag 2.0 checklists and techniques" data-tag="accessibility" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2003/WD-wcag2-tech-req-20030207/" title="Latest draft of Requirements for WCAG 2.0 Checklists and Techniques formally approved by the group">Requirements for WCAG 2.0 Checklists and Techniques</a></h2>
                        <p class=deliverer>Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2003-02-07 - <a title="Requirements for WCAG 2.0 Checklists and Techniques publication history" href="/standards/history/wcag2-tech-req">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Michael Cooper
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                <li data-title="requirements for the ink markup language" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2003/NOTE-inkreqs-20030122/" title="Latest draft of Requirements for the Ink Markup Language formally approved by the group">Requirements for the Ink Markup Language</a></h2>
                        <p class=deliverer>Multimodal Interaction Working Group</p>
                        <p class=pubdetails>2003-01-22 - <a title="Requirements for the Ink Markup Language publication history" href="/standards/history/inkreqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Yi-Min Chee
                            <li>Sai Prasad
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="requirements for xml schema 1.1" data-tag="xml" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2003/WD-xmlschema-11-req-20030121/" title="Latest draft of Requirements for XML Schema 1.1 formally approved by the group">Requirements  for  XML  Schema&nbsp;1.1</a></h2>
                        <p class=deliverer>XML Schema Working Group</p>
                        <p class=pubdetails>2003-01-21 - <a title="Requirements for XML Schema 1.1 publication history" href="/standards/history/xmlschema-11-req">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Charles Campbell
                            <li>Ashok Malhotra
                            <li>Priscilla Walmsley
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="mobile svg profiles: svg tiny and svg basic" data-tag="graphics" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2003/REC-SVGMobile-20030114/" title="Latest draft of Mobile SVG Profiles: SVG Tiny and SVG Basic formally approved by the group">Mobile SVG Profiles: SVG Tiny and SVG Basic</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2003-01-14 - <a title="Mobile SVG Profiles: SVG Tiny and SVG Basic publication history" href="/standards/history/SVGMobile">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tolga Capin
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                                                <li data-title="requirements for emma" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2003/NOTE-EMMAreqs-20030113/" title="Latest draft of Requirements for EMMA formally approved by the group">Requirements for EMMA</a></h2>
                        <p class=deliverer>Multimodal Interaction Working Group</p>
                        <p class=pubdetails>2003-01-13 - <a title="Requirements for EMMA publication history" href="/standards/history/EMMAreqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Stéphane Maes
                            <li>Stephen Potter
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="document object model (dom) level 2 html specification" data-tag="dom html" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2003/REC-DOM-Level-2-HTML-20030109/" title="Latest draft of Document Object Model (DOM) Level 2 HTML Specification formally approved by the group">Document Object Model (DOM) Level 2 HTML Specification</a></h2>
                        <p class=deliverer>DOM Working Group</p>
                        <p class=pubdetails>2003-01-09 - <a title="Document Object Model (DOM) Level 2 HTML Specification publication history" href="/standards/history/DOM-Level-2-HTML">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Johnny Stenback
                            <li>Philippe Le Hégaret
                            <li>Arnaud Le Hors
                          </ul>
                                    <ul class="taglist">
                            <li class="dom">DOM
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="multimodal interaction requirements" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2003/NOTE-mmi-reqs-20030108/" title="Latest draft of Multimodal Interaction Requirements formally approved by the group">Multimodal Interaction Requirements</a></h2>
                        <p class=deliverer>Multimodal Interaction Working Group</p>
                        <p class=pubdetails>2003-01-08 - <a title="Multimodal Interaction Requirements publication history" href="/standards/history/mmi-reqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Stéphane Maes
                            <li>Vijay Saraswat
                          </ul>
                                  </li>
                                                                                                                          <li data-title="xpointer xpointer() scheme" data-tag="" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2002/WD-xptr-xpointer-20021219/" title="Latest draft of XPointer xpointer() Scheme formally approved by the group">XPointer xpointer() Scheme</a></h2>
                        <p class=deliverer>XML Linking Working Group</p>
                        <p class=pubdetails>2002-12-19 - <a title="XPointer xpointer() Scheme publication history" href="/standards/history/xptr-xpointer">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steven DeRose
                            <li>Eve Maler
                            <li>Ron Daniel
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="user agent accessibility guidelines 1.0" data-tag="accessibility" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2002/REC-UAAG10-20021217/" title="Latest draft of User Agent Accessibility Guidelines 1.0 formally approved by the group">User  Agent  Accessibility  Guidelines&nbsp;1.0</a></h2>
                        <p class=deliverer>User Agent Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2002-12-17 - <a title="User Agent Accessibility Guidelines 1.0 publication history" href="/standards/history/UAAG10">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ian Jacobs
                            <li>Jon Gunderson
                            <li>Eric Hansen
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="techniques for user agent accessibility guidelines 1.0" data-tag="accessibility html" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2002/NOTE-UAAG10-TECHS-20021217/" title="Latest draft of Techniques for User Agent Accessibility Guidelines 1.0 formally approved by the group">Techniques  for  User  Agent  Accessibility  Guidelines&nbsp;1.0</a></h2>
                        <p class=deliverer>User Agent Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2002-12-17 - <a title="Techniques for User Agent Accessibility Guidelines 1.0 publication history" href="/standards/history/UAAG10-TECHS">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ian Jacobs
                            <li>Jon Gunderson
                            <li>Eric Hansen
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="decryption transform for xml signature" data-tag="xml" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2002/REC-xmlenc-decrypt-20021210" title="Latest draft of Decryption Transform for XML Signature formally approved by the group">Decryption Transform for XML Signature</a></h2>
                        <p class=deliverer>XML Security Working Group</p>
                        <p class=pubdetails>2002-12-10 - <a title="Decryption Transform for XML Signature publication history" href="/standards/history/xmlenc-decrypt">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Merlin Hughes
                            <li>Takeshi Imamura
                            <li>Hiroshi Maruyama
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="multimodal interaction use cases" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2002/NOTE-mmi-use-cases-20021204/" title="Latest draft of Multimodal Interaction Use Cases formally approved by the group">Multimodal Interaction Use Cases</a></h2>
                        <p class=deliverer>Multimodal Interaction Working Group</p>
                        <p class=pubdetails>2002-12-04 - <a title="Multimodal Interaction Use Cases publication history" href="/standards/history/mmi-use-cases">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dave Raggett
                          </ul>
                                  </li>
                                                                                                                          <li data-title="qa framework: operational examples &amp; techniques" data-tag="" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2002/NOTE-qaframe-ops-extech-20021202/" title="Latest draft of QA Framework: Operational Examples &amp; Techniques formally approved by the group">QA Framework: Operational Examples & Techniques</a></h2>
                        <p class=deliverer>Quality Assurance Working Group</p>
                        <p class=pubdetails>2002-12-02 - <a title="QA Framework: Operational Examples &amp; Techniques publication history" href="/standards/history/qaframe-ops-extech">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Lofton Henderson
                            <li>Lynne Rosenthal
                            <li>Dimitris Dimitriadis
                            <li>Kirill Gavrylyuk
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="xml-signature xpath filter 2.0" data-tag="xml" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2002/REC-xmldsig-filter2-20021108/" title="Latest draft of XML-Signature XPath Filter 2.0 formally approved by the group">XML-Signature  XPath  Filter&nbsp;2.0</a></h2>
                        <p class=deliverer>XML Security Working Group</p>
                        <p class=pubdetails>2002-11-08 - <a title="XML-Signature XPath Filter 2.0 publication history" href="/standards/history/xmldsig-filter2">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>John Boyer
                            <li>Merlin Hughes
                            <li>Joseph Reagle
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="techniques for authoring tool accessibility guidelines 1.0" data-tag="accessibility" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2002/NOTE-ATAG10-TECHS-20021029/" title="Latest draft of Techniques for Authoring Tool Accessibility Guidelines 1.0 formally approved by the group">Techniques  for  Authoring  Tool  Accessibility  Guidelines&nbsp;1.0</a></h2>
                        <p class=deliverer>Authoring Tool Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2002-10-29 - <a title="Techniques for Authoring Tool Accessibility Guidelines 1.0 publication history" href="/standards/history/ATAG10-TECHS">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jutta Treviranus
                            <li>Charles McCathieNevile
                            <li>Jan Richards
                            <li>Gregory Rosmaita
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                          <li data-title="web services description requirements" data-tag="" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2002/WD-ws-desc-reqs-20021028/" title="Latest draft of Web Services Description Requirements formally approved by the group">Web Services Description Requirements</a></h2>
                        <p class=deliverer>Web Services Description Working Group</p>
                        <p class=pubdetails>2002-10-28 - <a title="Web Services Description Requirements publication history" href="/standards/history/ws-desc-reqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jeffrey Schlimmer
                          </ul>
                                  </li>
                                                                                                                          <li data-title="xml accessibility guidelines" data-tag="accessibility" data-status="wd" data-version="latest">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2002/WD-xag-20021003" title="Latest draft of XML Accessibility Guidelines formally approved by the group">XML Accessibility Guidelines</a></h2>
                        <p class=deliverer>Protocols and Formats Working Group</p>
                        <p class=pubdetails>2002-10-03 - <a title="XML Accessibility Guidelines publication history" href="/standards/history/xag">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Daniel Dardailler
                            <li>Sean Palmer
                            <li>Charles McCathieNevile
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xhtml 1.0 in xml schema" data-tag="html" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2002/NOTE-xhtml1-schema-20020902/" title="Latest draft of XHTML 1.0 in XML Schema formally approved by the group">XHTML 1.0 in XML Schema</a></h2>
                        <p class=deliverer>XHTML2 Working Group</p>
                        <p class=pubdetails>2002-09-02 - <a title="XHTML 1.0 in XML Schema publication history" href="/standards/history/xhtml1-schema">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Masayasu Ishikawa
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                          <li data-title="an xhtml + mathml + svg profile" data-tag="graphics html" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2002/WD-XHTMLplusMathMLplusSVG-20020809/" title="Latest draft of An XHTML + MathML + SVG Profile formally approved by the group">An XHTML + MathML + SVG Profile</a></h2>
                        <p class=deliverer>XHTML2 Working Group</p>
                        <p class=pubdetails>2002-08-09 - <a title="An XHTML + MathML + SVG Profile publication history" href="/standards/history/XHTMLplusMathMLplusSVG">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Masayasu Ishikawa
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                          <li data-title="voice browser interoperation: requirements" data-tag="media" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2002/WD-vbi-reqs-20020808/" title="Latest draft of Voice Browser Interoperation: Requirements formally approved by the group">Voice Browser Interoperation: Requirements</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>2002-08-08 - <a title="Voice Browser Interoperation: Requirements publication history" href="/standards/history/vbi-reqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Kenneth Rehor
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                <li data-title="document object model (dom) level 3 abstract schemas specification" data-tag="dom" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2002/NOTE-DOM-Level-3-AS-20020725/" title="Latest draft of Document Object Model (DOM) Level 3 Abstract Schemas Specification formally approved by the group">Document Object Model (DOM) Level 3 Abstract Schemas Specification</a></h2>
                        <p class=deliverer>DOM Working Group</p>
                        <p class=pubdetails>2002-07-25 - <a title="Document Object Model (DOM) Level 3 Abstract Schemas Specification publication history" href="/standards/history/DOM-Level-3-AS">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ben Chang
                            <li>Elena Litani
                            <li>Joseph Kesselman
                            <li>rezaur rahman
                          </ul>
                                    <ul class="taglist">
                            <li class="dom">DOM
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="exclusive xml canonicalization version 1.0" data-tag="xml" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2002/REC-xml-exc-c14n-20020718/" title="Latest draft of Exclusive XML Canonicalization Version 1.0 formally approved by the group">Exclusive  XML  Canonicalization  Version&nbsp;1.0</a></h2>
                        <p class=deliverer>XML Security Working Group</p>
                        <p class=pubdetails>2002-07-18 - <a title="Exclusive XML Canonicalization Version 1.0 publication history" href="/standards/history/xml-exc-c14n">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>John Boyer
                            <li>Donald Eastlake
                            <li>Joseph Reagle
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="soap version 1.2 email binding" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2002/NOTE-soap12-email-20020703" title="Latest draft of SOAP Version 1.2 Email Binding formally approved by the group">SOAP Version 1.2 Email Binding</a></h2>
                        <p class=deliverer>XML Protocol Working Group</p>
                        <p class=pubdetails>2002-07-03 - <a title="SOAP Version 1.2 Email Binding publication history" href="/standards/history/soap12-email">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Highland Mary Mountain
                            <li>Jacek Kopecky
                            <li>Stuart Williams
                            <li>Glen Daniels
                            <li>Noah Mendelsohn
                          </ul>
                                  </li>
                                                                                                                          <li data-title="web service description usage scenarios" data-tag="" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2002/WD-ws-desc-usecases-20020604/" title="Latest draft of Web Service Description Usage Scenarios formally approved by the group">Web Service Description Usage Scenarios</a></h2>
                        <p class=deliverer>Web Services Description Working Group</p>
                        <p class=pubdetails>2002-06-04 - <a title="Web Service Description Usage Scenarios publication history" href="/standards/history/ws-desc-usecases">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Waqar Sadiq
                            <li>Sandeep Kumar
                          </ul>
                                  </li>
                                                                                                                                                <li data-title="svg 1.1/1.2/2.0 requirements" data-tag="graphics" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2002/WD-SVG2Reqs-20020422/" title="Latest draft of SVG 1.1/1.2/2.0 Requirements formally approved by the group">SVG 1.1/1.2/2.0 Requirements</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2002-04-22 - <a title="SVG 1.1/1.2/2.0 Requirements publication history" href="/standards/history/SVG2Reqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dean Jackson
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                          <li data-title="a p3p preference exchange language 1.0 (appel1.0)" data-tag="privacy" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2002/WD-P3P-preferences-20020415/" title="Latest draft of A P3P Preference Exchange Language 1.0 (APPEL1.0) formally approved by the group">A P3P Preference Exchange Language 1.0 (APPEL1.0)</a></h2>
                        <p class=deliverer>P3P Specification Working Group</p>
                        <p class=pubdetails>2002-04-15 - <a title="A P3P Preference Exchange Language 1.0 (APPEL1.0) publication history" href="/standards/history/P3P-preferences">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Marc Langheinrich
                          </ul>
                                    <ul class="taglist">
                            <li class="privacy">Privacy
                          </ul>
                      </li>
                                                                                                                          <li data-title="namespaces in xml 1.1 requirements" data-tag="xml" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2002/WD-xml-names11-req-20020403/" title="Latest draft of Namespaces in XML 1.1 Requirements formally approved by the group">Namespaces in XML 1.1 Requirements</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=deliverer>XML Core Working Group</p>
                        <p class=pubdetails>2002-04-03 - <a title="Namespaces in XML 1.1 Requirements publication history" href="/standards/history/xml-names11-req">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jonathan Marsh
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="xml key management specification bulk operation (x-bulk)" data-tag="xml" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2002/WD-xkms2-xbulk-20020318/" title="Latest draft of XML Key Management Specification Bulk Operation (X-BULK) formally approved by the group">XML Key Management Specification Bulk Operation (X-BULK)</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>2002-03-18 - <a title="XML Key Management Specification Bulk Operation (X-BULK) publication history" href="/standards/history/xkms2-xbulk">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Merlin Hughes
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xml encryption requirements" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2002/NOTE-xml-encryption-req-20020304" title="Latest draft of XML Encryption Requirements formally approved by the group">XML Encryption Requirements</a></h2>
                        <p class=deliverer>XML Security Working Group</p>
                        <p class=pubdetails>2002-03-04 - <a title="XML Encryption Requirements publication history" href="/standards/history/xml-encryption-req">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Joseph Reagle
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="the platform for privacy preferences 1.0 deployment guide" data-tag="privacy" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2002/NOTE-p3pdeployment-20020211" title="Latest draft of The Platform for Privacy Preferences 1.0 Deployment Guide formally approved by the group">The Platform for Privacy Preferences 1.0 Deployment Guide</a></h2>
                        <p class=deliverer>P3P Specification Working Group</p>
                        <p class=pubdetails>2002-02-11 - <a title="The Platform for Privacy Preferences 1.0 Deployment Guide publication history" href="/standards/history/p3pdeployment">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Martin PreslerMarshall
                          </ul>
                                    <ul class="taglist">
                            <li class="privacy">Privacy
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xhtml+smil profile" data-tag="html" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2002/NOTE-XHTMLplusSMIL-20020131/" title="Latest draft of XHTML+SMIL Profile formally approved by the group">XHTML+SMIL Profile</a></h2>
                        <p class=deliverer>SYMM Working Group</p>
                        <p class=pubdetails>2002-01-31 - <a title="XHTML+SMIL Profile publication history" href="/standards/history/XHTMLplusSMIL">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Aaron Patterson
                            <li>Patrick Schmitz
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="authoring tool accessibility guidelines &quot;wombat&quot;" data-tag="accessibility" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2001/WD-ATAG-wombat-20011221/" title="Latest draft of Authoring Tool Accessibility Guidelines &quot;Wombat&quot; formally approved by the group">Authoring Tool Accessibility Guidelines "Wombat"</a></h2>
                        <p class=deliverer>Authoring Tool Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2001-12-21 - <a title="Authoring Tool Accessibility Guidelines &quot;Wombat&quot; publication history" href="/standards/history/ATAG-wombat">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jutta Treviranus
                            <li>Charles McCathieNevile
                            <li>Jan Richards
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                          <li data-title="cc/pp implementors guide: privacy and protocols" data-tag="data" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2001/WD-CCPP-trust-20011220/" title="Latest draft of CC/PP Implementors Guide: Privacy and Protocols formally approved by the group">CC/PP Implementors Guide: Privacy and Protocols</a></h2>
                        <p class=deliverer>CC/PP Working Group</p>
                        <p class=pubdetails>2001-12-20 - <a title="CC/PP Implementors Guide: Privacy and Protocols publication history" href="/standards/history/CCPP-trust">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Hidetaka Ohto
                            <li>Lalitha Suryanarayana
                            <li>Johan Hjelm
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                <li data-title="cc/pp implementors guide: harmonization with existing vocabularies and content transformation heuristics" data-tag="data" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2001/NOTE-CCPP-COORDINATION-20011220/" title="Latest draft of CC/PP Implementors Guide: Harmonization with Existing Vocabularies and Content Transformation Heuristics formally approved by the group">CC/PP Implementors Guide: Harmonization with Existing Vocabularies and Content Transformation Heuristics</a></h2>
                        <p class=deliverer>CC/PP Working Group</p>
                        <p class=pubdetails>2001-12-20 - <a title="CC/PP Implementors Guide: Harmonization with Existing Vocabularies and Content Transformation Heuristics publication history" href="/standards/history/CCPP-COORDINATION">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Johan Hjelm
                            <li>Lalitha Suryanarayana
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="component extension (cx) api requirements version 1.0" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2001/NOTE-CX-20011211" title="Latest draft of Component Extension (CX) API requirements Version 1.0 formally approved by the group">Component  Extension  (CX)  API  requirements  Version&nbsp;1.0</a></h2>
                        <p class=deliverer>Hypertext Coordination Group (Member)</p>
                        <p class=pubdetails>2001-12-11 - <a title="Component Extension (CX) API requirements Version 1.0 publication history" href="/standards/history/CX">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Angel Diaz
                            <li>Jon Ferraiolo
                            <li>Philippe Le Hégaret
                            <li>Chris Lilley
                            <li>Charles McCathieNevile
                            <li>Tapas Roy
                            <li>Ray Whitmer
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="extensible stylesheet language (xsl) version 1.0" data-tag="xml" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2001/REC-xsl-20011015/" title="Latest draft of Extensible Stylesheet Language (XSL) Version 1.0 formally approved by the group">Extensible  Stylesheet  Language  (XSL)  Version&nbsp;1.0</a></h2>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2001-10-15 - <a title="Extensible Stylesheet Language (XSL) Version 1.0 publication history" href="/standards/history/xsl">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Sharon Adler
                            <li>Anders Berglund
                            <li>Jeffrey Caruso
                            <li>Stephen Deach
                            <li>Tony Graham
                            <li>Paul Grosso
                            <li>Eduardo Gutentag
                            <li>Alex Milowski
                            <li>Scott Parnell
                            <li>Jeremy Richman
                            <li>Steve Zilles
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="xml schema: formal description" data-tag="xml" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2001/WD-xmlschema-formal-20010925/" title="Latest draft of XML Schema: Formal Description formally approved by the group">XML Schema: Formal Description</a></h2>
                        <p class=deliverer>XML Schema Working Group</p>
                        <p class=pubdetails>2001-09-25 - <a title="XML Schema: Formal Description publication history" href="/standards/history/xmlschema-formal">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Allen Brown
                            <li>Matthew Fuchs
                            <li>Jonathan Robie
                            <li>Philip Wadler
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="xml blueberry requirements" data-tag="xml" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2001/WD-xml-blueberry-req-20010921" title="Latest draft of XML Blueberry Requirements formally approved by the group">XML Blueberry Requirements</a></h2>
                        <p class=deliverer>XML Core Working Group</p>
                        <p class=pubdetails>2001-09-21 - <a title="XML Blueberry Requirements publication history" href="/standards/history/xml-blueberry-req">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>John Cowan
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="uris, urls, and urns: clarifications and recommendations 1.0" data-tag="" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2001/NOTE-uri-clarification-20010921/" title="Latest draft of URIs, URLs, and URNs: Clarifications and Recommendations 1.0 formally approved by the group">URIs,  URLs,  and  URNs:  Clarifications  and  Recommendations&nbsp;1.0</a></h2>
                        <p class=deliverer>URI Coordination Group</p>
                        <p class=pubdetails>2001-09-21 - <a title="URIs, URLs, and URNs: Clarifications and Recommendations 1.0 publication history" href="/standards/history/uri-clarification">History</a>
                        </p>
                                  </li>
                                                                                                                                                <li data-title="smil animation" data-tag="" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/" title="Latest draft of SMIL Animation formally approved by the group">SMIL Animation</a></h2>
                        <p class=deliverer>SYMM Working Group</p>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2001-09-04 - <a title="SMIL Animation publication history" href="/standards/history/smil-animation">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Patrick Schmitz
                            <li>Aaron Cohen
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="xsl transformations (xslt) version 1.1" data-tag="xml" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2001/WD-xslt11-20010824/" title="Latest draft of XSL Transformations (XSLT) Version 1.1 formally approved by the group">XSL  Transformations  (XSLT)  Version&nbsp;1.1</a></h2>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2001-08-24 - <a title="XSL Transformations (XSLT) Version 1.1 publication history" href="/standards/history/xslt11">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>James Clark
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="svg mobile requirements" data-tag="graphics" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2001/WD-SVGMobileReqs-20010803" title="Latest draft of SVG Mobile Requirements formally approved by the group">SVG Mobile Requirements</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>2001-08-03 - <a title="SVG Mobile Requirements publication history" href="/standards/history/SVGMobileReqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Rick Graham
                            <li>Tolga Capin
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="xml linking language (xlink) version 1.0" data-tag="xml" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2001/REC-xlink-20010627/" title="Latest draft of XML Linking Language (XLink) Version 1.0 formally approved by the group">XML  Linking  Language  (XLink)  Version&nbsp;1.0</a></h2>
                        <p class=deliverer>XML Linking Working Group</p>
                        <p class=pubdetails>2001-06-27 - <a title="XML Linking Language (XLink) Version 1.0 publication history" href="/standards/history/xlink">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steven DeRose
                            <li>Eve Maler
                            <li>David Orchard
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xml linking and style" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2001/NOTE-xml-link-style-20010605/" title="Latest draft of XML Linking and Style formally approved by the group">XML Linking and Style</a></h2>
                        <p class=deliverer>XML Linking Working Group</p>
                        <p class=pubdetails>2001-06-05 - <a title="XML Linking and Style publication history" href="/standards/history/xml-link-style">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Norman Walsh
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="ruby annotation" data-tag="html i18n" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2001/REC-ruby-20010531/" title="Latest draft of Ruby Annotation formally approved by the group">Ruby Annotation</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>2001-05-31 - <a title="Ruby Annotation publication history" href="/standards/history/ruby">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Marcin Sawicki
                            <li>Michel Suignard
                            <li>Masayasu Ishikawa
                            <li>Martin Dürst
                            <li>Tex Texin
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                          <li data-title="call control requirements in a voice browser framework" data-tag="media" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2001/WD-call-control-reqs-20010413/" title="Latest draft of Call Control Requirements in a Voice Browser Framework formally approved by the group">Call Control Requirements in a Voice Browser Framework</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>2001-04-13 - <a title="Call Control Requirements in a Voice Browser Framework publication history" href="/standards/history/call-control-reqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Brandon Porter
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                <li data-title="an rdf schema for the xml information set" data-tag="xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2001/NOTE-xml-infoset-rdfs-20010406" title="Latest draft of An RDF Schema for the XML Information Set formally approved by the group">An RDF Schema for the XML Information Set</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=deliverer>XML Core Working Group</p>
                        <p class=pubdetails>2001-04-06 - <a title="An RDF Schema for the XML Information Set publication history" href="/standards/history/xml-infoset-rdfs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Richard Tobin
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="xforms requirements" data-tag="xml" data-status="wd" data-version="latest upcoming">
            <div class="profile">WD</div>
            <h2 class="WorkingDraft"><a href="http://www.w3.org/TR/2001/WD-xhtml-forms-req-20010404" title="Latest draft of XForms Requirements formally approved by the group">XForms Requirements</a></h2>
                        <p class=deliverer>Forms Working Group</p>
                        <p class=pubdetails>2001-04-04 - <a title="XForms Requirements publication history" href="/standards/history/xhtml-forms-req">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Micah Dubinko
                            <li>Sebastian Schnitzenbaumer
                            <li>Dave Raggett
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="canonical xml version 1.0" data-tag="xml" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" title="Latest draft of Canonical XML Version 1.0 formally approved by the group">Canonical  XML  Version&nbsp;1.0</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=deliverer>XML Security Working Group</p>
                        <p class=pubdetails>2001-03-15 - <a title="Canonical XML Version 1.0 publication history" href="/standards/history/xml-c14n">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>John Boyer
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="xslt requirements version 2.0" data-tag="xml" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2001/WD-xslt20req-20010214" title="Latest draft of XSLT Requirements Version 2.0 formally approved by the group">XSLT  Requirements  Version&nbsp;2.0</a></h2>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2001-02-14 - <a title="XSLT Requirements Version 2.0 publication history" href="/standards/history/xslt20req">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steve Muench
                            <li>Mark Scardina
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="xml fragment interchange" data-tag="xml" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2001/CR-xml-fragment-20010212" title="Latest draft of XML Fragment Interchange formally approved by the group">XML Fragment Interchange</a></h2>
                        <p class=deliverer>XML Core Working Group</p>
                        <p class=pubdetails>2001-02-12 - <a title="XML Fragment Interchange publication history" href="/standards/history/xml-fragment">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Paul Grosso
                            <li>Daniel Veillard
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="stochastic language models (n-gram) specification" data-tag="media" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2001/WD-ngram-spec-20010103/" title="Latest draft of Stochastic Language Models (N-Gram) Specification formally approved by the group">Stochastic Language Models (N-Gram) Specification</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>2001-01-03 - <a title="Stochastic Language Models (N-Gram) Specification publication history" href="/standards/history/ngram-spec">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Andreas Kellner
                            <li>Dave Raggett
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                          <li data-title="voice browsers, introduction" data-tag="media" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2000/WD-voice-intro-20001204/" title="Latest draft of Voice Browsers, Introduction formally approved by the group">Voice Browsers, Introduction</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>2000-12-04 - <a title="Voice Browsers, Introduction publication history" href="/standards/history/voice-intro">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jim Larson
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                          <li data-title="natural language semantics markup language for the speech interface framework" data-tag="media" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2000/WD-nl-spec-20001120/" title="Latest draft of Natural Language Semantics Markup Language for the Speech Interface Framework formally approved by the group">Natural Language Semantics Markup Language for the Speech Interface Framework</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>2000-11-20 - <a title="Natural Language Semantics Markup Language for the Speech Interface Framework publication history" href="/standards/history/nl-spec">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Deborah Dahl
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                <li data-title="document object model (dom) level 2 core specification" data-tag="dom" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/" title="Latest draft of Document Object Model (DOM) Level 2 Core Specification formally approved by the group">Document Object Model (DOM) Level 2 Core Specification</a></h2>
                        <p class=deliverer>DOM Working Group</p>
                        <p class=pubdetails>2000-11-13 - <a title="Document Object Model (DOM) Level 2 Core Specification publication history" href="/standards/history/DOM-Level-2-Core">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Arnaud Le Hors
                            <li>Philippe Le Hégaret
                            <li>Lauren Wood
                            <li>Gavin Nicol
                            <li>Jonathan Robie
                            <li>Mike Champion
                            <li>Steven B Byrne
                          </ul>
                                    <ul class="taglist">
                            <li class="dom">DOM
                          </ul>
                      </li>
                                                                                                                                                <li data-title="document object model (dom) level 2 events specification" data-tag="dom" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/" title="Latest draft of Document Object Model (DOM) Level 2 Events Specification formally approved by the group">Document Object Model (DOM) Level 2 Events Specification</a></h2>
                        <p class=deliverer>DOM Working Group</p>
                        <p class=pubdetails>2000-11-13 - <a title="Document Object Model (DOM) Level 2 Events Specification publication history" href="/standards/history/DOM-Level-2-Events">History</a>
                        </p>
                                    <ul class="taglist">
                            <li class="dom">DOM
                          </ul>
                      </li>
                                                                                                                                                <li data-title="document object model (dom) level 2 style specification" data-tag="css dom" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Style-20001113/" title="Latest draft of Document Object Model (DOM) Level 2 Style Specification formally approved by the group">Document Object Model (DOM) Level 2 Style Specification</a></h2>
                        <p class=deliverer>DOM Working Group</p>
                        <p class=pubdetails>2000-11-13 - <a title="Document Object Model (DOM) Level 2 Style Specification publication history" href="/standards/history/DOM-Level-2-Style">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Chris Wilson
                            <li>Philippe Le Hégaret
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                            <li class="dom">DOM
                          </ul>
                      </li>
                                                                                                                                                <li data-title="document object model (dom) level 2 traversal and range specification" data-tag="dom" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Traversal-Range-20001113/" title="Latest draft of Document Object Model (DOM) Level 2 Traversal and Range Specification formally approved by the group">Document Object Model (DOM) Level 2 Traversal and Range Specification</a></h2>
                        <p class=deliverer>DOM Working Group</p>
                        <p class=pubdetails>2000-11-13 - <a title="Document Object Model (DOM) Level 2 Traversal and Range Specification publication history" href="/standards/history/DOM-Level-2-Traversal-Range">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Joseph Kesselman
                            <li>Jonathan Robie
                            <li>Mike Champion
                            <li>Peter Sharpe
                            <li>Lauren Wood
                          </ul>
                                    <ul class="taglist">
                            <li class="dom">DOM
                          </ul>
                      </li>
                                                                                                                                                <li data-title="document object model (dom) level 2 views specification" data-tag="dom" data-status="rec" data-version="latest upcoming">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Views-20001113/" title="Latest draft of Document Object Model (DOM) Level 2 Views Specification formally approved by the group">Document Object Model (DOM) Level 2 Views Specification</a></h2>
                        <p class=deliverer>DOM Working Group</p>
                        <p class=pubdetails>2000-11-13 - <a title="Document Object Model (DOM) Level 2 Views Specification publication history" href="/standards/history/DOM-Level-2-Views">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Arnaud Le Hors
                            <li>Laurence Cable
                          </ul>
                                    <ul class="taglist">
                            <li class="dom">DOM
                          </ul>
                      </li>
                                                                                                                          <li data-title="html working group roadmap" data-tag="html" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2000/NOTE-xhtml-roadmap-20001108/" title="Latest draft of HTML Working Group Roadmap formally approved by the group">HTML Working Group Roadmap</a></h2>
                        <p class=deliverer>XHTML2 Working Group</p>
                        <p class=pubdetails>2000-11-08 - <a title="HTML Working Group Roadmap publication history" href="/standards/history/xhtml-roadmap">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steven Pemberton
                            <li>Dave Raggett
                            <li>Masayasu Ishikawa
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="core techniques for web content accessibility guidelines 1.0" data-tag="accessibility" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2000/NOTE-WCAG10-CORE-TECHS-20001106/" title="Latest draft of Core Techniques for Web Content Accessibility Guidelines 1.0 formally approved by the group">Core  Techniques  for  Web  Content  Accessibility  Guidelines&nbsp;1.0</a></h2>
                        <p class=deliverer>Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2000-11-06 - <a title="Core Techniques for Web Content Accessibility Guidelines 1.0 publication history" href="/standards/history/WCAG10-CORE-TECHS">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Wendy Chisholm
                            <li>Gregg Vanderheiden
                            <li>Ian Jacobs
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="css techniques for web content accessibility guidelines 1.0" data-tag="accessibility css" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2000/NOTE-WCAG10-CSS-TECHS-20001106/" title="Latest draft of CSS Techniques for Web Content Accessibility Guidelines 1.0 formally approved by the group">CSS  Techniques  for  Web  Content  Accessibility  Guidelines&nbsp;1.0</a></h2>
                        <p class=deliverer>Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2000-11-06 - <a title="CSS Techniques for Web Content Accessibility Guidelines 1.0 publication history" href="/standards/history/WCAG10-CSS-TECHS">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Wendy Chisholm
                            <li>Gregg Vanderheiden
                            <li>Ian Jacobs
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <li data-title="html techniques for web content accessibility guidelines 1.0" data-tag="accessibility html" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2000/NOTE-WCAG10-HTML-TECHS-20001106/" title="Latest draft of HTML Techniques for Web Content Accessibility Guidelines 1.0 formally approved by the group">HTML  Techniques  for  Web  Content  Accessibility  Guidelines&nbsp;1.0</a></h2>
                        <p class=deliverer>Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2000-11-06 - <a title="HTML Techniques for Web Content Accessibility Guidelines 1.0 publication history" href="/standards/history/WCAG10-HTML-TECHS">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Wendy Chisholm
                            <li>Gregg Vanderheiden
                            <li>Ian Jacobs
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <li data-title="techniques for web content accessibility guidelines 1.0" data-tag="accessibility" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2000/NOTE-WCAG10-TECHS-20001106/" title="Latest draft of Techniques for Web Content Accessibility Guidelines 1.0 formally approved by the group">Techniques  for  Web  Content  Accessibility  Guidelines&nbsp;1.0</a></h2>
                        <p class=deliverer>Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2000-11-06 - <a title="Techniques for Web Content Accessibility Guidelines 1.0 publication history" href="/standards/history/WCAG10-TECHS">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Wendy Chisholm
                            <li>Gregg Vanderheiden
                            <li>Ian Jacobs
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                                                <li data-title="harvesting rdf statements from xlinks" data-tag="data xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/2000/NOTE-xlink2rdf-20000929/" title="Latest draft of Harvesting RDF Statements from XLinks formally approved by the group">Harvesting RDF Statements from XLinks</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>2000-09-29 - <a title="Harvesting RDF Statements from XLinks publication history" href="/standards/history/xlink2rdf">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ron Daniel
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="xsl transformations requirements version 1.1" data-tag="xml" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2000/WD-xslt11req-20000825" title="Latest draft of XSL Transformations Requirements Version 1.1 formally approved by the group">XSL  Transformations  Requirements  Version&nbsp;1.1</a></h2>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>2000-08-25 - <a title="XSL Transformations Requirements Version 1.1 publication history" href="/standards/history/xslt11req">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steve Muench
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="composite capabilities/preference profiles: terminology and abbreviations" data-tag="" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2000/WD-CCPP-ta-20000721/" title="Latest draft of Composite Capabilities/Preference Profiles: Terminology and Abbreviations formally approved by the group">Composite Capabilities/Preference Profiles: Terminology and Abbreviations</a></h2>
                        <p class=deliverer>CC/PP Working Group</p>
                        <p class=pubdetails>2000-07-21 - <a title="Composite Capabilities/Preference Profiles: Terminology and Abbreviations publication history" href="/standards/history/CCPP-ta">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mikael Nilsson
                          </ul>
                                  </li>
                                                                                                                          <li data-title="composite capabilities/preference profiles: requirements and architecture" data-tag="" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2000/WD-CCPP-ra-20000721/" title="Latest draft of Composite Capabilities/Preference Profiles: Requirements and Architecture formally approved by the group">Composite Capabilities/Preference Profiles: Requirements and Architecture</a></h2>
                        <p class=deliverer>CC/PP Working Group</p>
                        <p class=pubdetails>2000-07-21 - <a title="Composite Capabilities/Preference Profiles: Requirements and Architecture publication history" href="/standards/history/CCPP-ra">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mikael Nilsson
                            <li>Johan Hjelm
                            <li>Hidetaka Ohto
                          </ul>
                                  </li>
                                                                                                                          <li data-title="multimodal requirements for voice markup languages" data-tag="media" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2000/WD-multimodal-reqs-20000710" title="Latest draft of Multimodal Requirements for Voice Markup Languages formally approved by the group">Multimodal Requirements for Voice Markup Languages</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>2000-07-10 - <a title="Multimodal Requirements for Voice Markup Languages publication history" href="/standards/history/multimodal-reqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Marianne Hickey
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                          <li data-title="reusable dialog requirements for voice markup language" data-tag="media" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2000/WD-reusable-dialog-reqs-20000426" title="Latest draft of Reusable Dialog Requirements for Voice Markup Language formally approved by the group">Reusable Dialog Requirements for Voice Markup Language</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>2000-04-26 - <a title="Reusable Dialog Requirements for Voice Markup Language publication history" href="/standards/history/reusable-dialog-reqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Daniel Burnett
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                          <li data-title="techniques for accessibility evaluation and repair tools" data-tag="accessibility" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2000/WD-AERT-20000426" title="Latest draft of Techniques For Accessibility Evaluation And Repair Tools formally approved by the group">Techniques For Accessibility Evaluation And Repair Tools</a></h2>
                        <p class=deliverer>Evaluation and Repair Tools Working Group</p>
                        <p class=pubdetails>2000-04-26 - <a title="Techniques For Accessibility Evaluation And Repair Tools publication history" href="/standards/history/AERT">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Chris Ridpath
                            <li>Wendy Chisholm
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                          <li data-title="synchronized multimedia integration language document object model" data-tag="" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2000/WD-smil-boston-dom-20000225/" title="Latest draft of Synchronized Multimedia Integration Language Document Object Model formally approved by the group">Synchronized Multimedia Integration Language Document Object Model</a></h2>
                        <p class=deliverer>SYMM Working Group</p>
                        <p class=pubdetails>2000-02-25 - <a title="Synchronized Multimedia Integration Language Document Object Model publication history" href="/standards/history/smil-boston-dom">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Philippe Le Hégaret
                            <li>Patrick Schmitz
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="authoring tool accessibility guidelines 1.0" data-tag="accessibility" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/2000/REC-ATAG10-20000203/" title="Latest draft of Authoring Tool Accessibility Guidelines 1.0 formally approved by the group">Authoring  Tool  Accessibility  Guidelines&nbsp;1.0</a></h2>
                        <p class=deliverer>Authoring Tool Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>2000-02-03 - <a title="Authoring Tool Accessibility Guidelines 1.0 publication history" href="/standards/history/ATAG10">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jutta Treviranus
                            <li>Charles McCathieNevile
                            <li>Ian Jacobs
                            <li>Jan Richards
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                          <li data-title="w3c and electronic commerce" data-tag="" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2000/NOTE-EC-related-activities-20000107" title="Latest draft of W3C and Electronic Commerce formally approved by the group">W3C and Electronic Commerce</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>2000-01-07 - <a title="W3C and Electronic Commerce publication history" href="/standards/history/EC-related-activities">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Thierry Michel
                          </ul>
                                  </li>
                                                                                                                          <li data-title="building xhtml™ modules" data-tag="" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/2000/WD-xhtml-building-20000105/" title="Latest draft of Building XHTML™ Modules formally approved by the group">Building XHTML™ Modules</a></h2>
                        <p class=deliverer>XHTML2 Working Group</p>
                        <p class=pubdetails>2000-01-05 - <a title="Building XHTML™ Modules publication history" href="/standards/history/xhtml-building">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Murray Altheim
                            <li>Shane McCarron
                          </ul>
                                  </li>
                                                                                                                          <li data-title="natural language processing requirements for voice markup languages" data-tag="media" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/1999/WD-voice-nlu-reqs-19991223/" title="Latest draft of Natural Language Processing Requirements for Voice Markup Languages formally approved by the group">Natural Language Processing Requirements for Voice Markup Languages</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>1999-12-23 - <a title="Natural Language Processing Requirements for Voice Markup Languages publication history" href="/standards/history/voice-nlu-reqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Deborah Dahl
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                          <li data-title="speech synthesis markup requirements for voice markup languages" data-tag="media" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/1999/WD-voice-tts-reqs-19991223/" title="Latest draft of Speech Synthesis Markup Requirements for Voice Markup Languages formally approved by the group">Speech Synthesis Markup Requirements for Voice Markup Languages</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>1999-12-23 - <a title="Speech Synthesis Markup Requirements for Voice Markup Languages publication history" href="/standards/history/voice-tts-reqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Andrew Hunt
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                          <li data-title="model architecture for voice browser systems" data-tag="media" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/1999/WD-voice-architecture-19991223/" title="Latest draft of Model Architecture for Voice Browser Systems formally approved by the group">Model Architecture for Voice Browser Systems</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>1999-12-23 - <a title="Model Architecture for Voice Browser Systems publication history" href="/standards/history/voice-architecture">History</a>
                        </p>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                          <li data-title="dialog requirements for voice markup languages" data-tag="media" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/1999/WD-voice-dialog-reqs-19991223/" title="Latest draft of Dialog Requirements for Voice Markup Languages formally approved by the group">Dialog Requirements for Voice Markup Languages</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>1999-12-23 - <a title="Dialog Requirements for Voice Markup Languages publication history" href="/standards/history/voice-dialog-reqs">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Scott McGlashan
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                          <li data-title="grammar representation requirements for voice markup languages" data-tag="media" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/1999/WD-voice-grammar-reqs-19991223/" title="Latest draft of Grammar Representation Requirements for Voice Markup Languages formally approved by the group">Grammar Representation Requirements for Voice Markup Languages</a></h2>
                        <p class=deliverer>Voice Browser Working Group</p>
                        <p class=pubdetails>1999-12-23 - <a title="Grammar Representation Requirements for Voice Markup Languages publication history" href="/standards/history/voice-grammar-reqs">History</a>
                        </p>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="xsl transformations (xslt) version 1.0" data-tag="xml" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/1999/REC-xslt-19991116" title="Latest draft of XSL Transformations (XSLT) Version 1.0 formally approved by the group">XSL  Transformations  (XSLT)  Version&nbsp;1.0</a></h2>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>1999-11-16 - <a title="XSL Transformations (XSLT) Version 1.0 publication history" href="/standards/history/xslt">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>James Clark
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="xml path language (xpath) version 1.0" data-tag="xml" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/1999/REC-xpath-19991116/" title="Latest draft of XML Path Language (XPath) Version 1.0 formally approved by the group">XML  Path  Language  (XPath)  Version&nbsp;1.0</a></h2>
                        <p class=deliverer>XML Linking Working Group</p>
                        <p class=pubdetails>1999-11-16 - <a title="XML Path Language (XPath) Version 1.0 publication history" href="/standards/history/xpath">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>James Clark
                            <li>Steven DeRose
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="tv broadcast uri schemes requirements" data-tag="media" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/1999/NOTE-TVWeb-URI-Requirements-19991021" title="Latest draft of TV Broadcast URI Schemes Requirements formally approved by the group">TV Broadcast URI Schemes Requirements</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1999-10-21 - <a title="TV Broadcast URI Schemes Requirements publication history" href="/standards/history/TVWeb-URI-Requirements">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Warner ten Kate
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                          <li data-title="xml-signature requirements" data-tag="xml" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/1999/WD-xmldsig-requirements-19991014" title="Latest draft of XML-Signature Requirements formally approved by the group">XML-Signature Requirements</a></h2>
                        <p class=deliverer>XML Security Working Group</p>
                        <p class=pubdetails>1999-10-14 - <a title="XML-Signature Requirements publication history" href="/standards/history/xmldsig-requirements">History</a>
                        </p>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                <li data-title="the cambridge communiqué" data-tag="data xml" data-status="note" data-version="latest upcoming">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/1999/NOTE-schema-arch-19991007" title="Latest draft of The Cambridge Communiqué formally approved by the group">The Cambridge Communiqué</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1999-10-07 - <a title="The Cambridge Communiqué publication history" href="/standards/history/schema-arch">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Henry Thompson
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="xhtml™ document profile requirements" data-tag="html" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/1999/WD-xhtml-prof-req-19990906/" title="Latest draft of XHTML™ Document Profile Requirements formally approved by the group">XHTML™ Document Profile Requirements</a></h2>
                        <p class=deliverer>XHTML2 Working Group</p>
                        <p class=pubdetails>1999-09-06 - <a title="XHTML™ Document Profile Requirements publication history" href="/standards/history/xhtml-prof-req">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dave Raggett
                            <li>Peter Stark
                            <li>Ted Wugofski
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                          <li data-title="positioning html elements with cascading style sheets" data-tag="css" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/1999/WD-positioning-19990902" title="Latest draft of Positioning HTML Elements with Cascading Style Sheets formally approved by the group">Positioning HTML Elements with Cascading Style Sheets</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>1999-09-02 - <a title="Positioning HTML Elements with Cascading Style Sheets publication history" href="/standards/history/WD-positioning">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Scott Furman
                            <li>Scott Isaacson
                            <li>Robert Stevahn
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                          <li data-title="aural cascading style sheets (acss) specification" data-tag="css" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/1999/WD-acss-19990902" title="Latest draft of Aural Cascading Style Sheets (ACSS) Specification formally approved by the group">Aural Cascading Style Sheets (ACSS) Specification</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>1999-09-02 - <a title="Aural Cascading Style Sheets (ACSS) Specification publication history" href="/standards/history/WD-acss">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Chris Lilley
                            <li>T.V. Raman
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                          <li data-title="css printing extensions" data-tag="css" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/1999/WD-print-19990902" title="Latest draft of CSS Printing Extensions formally approved by the group">CSS Printing Extensions</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1999-09-02 - <a title="CSS Printing Extensions publication history" href="/standards/history/WD-print">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Robert Stevahn
                            <li>Håkon Wium Lie
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                          <li data-title="common markup for micropayment per-fee-links" data-tag="" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/1999/WD-Micropayment-Markup-19990825/" title="Latest draft of Common Markup for micropayment per-fee-links formally approved by the group">Common Markup for micropayment per-fee-links</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1999-08-25 - <a title="Common Markup for micropayment per-fee-links publication history" href="/standards/history/Micropayment-Markup">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Thierry Michel
                          </ul>
                                  </li>
                                                                                                                          <li data-title="composite capability/preference profiles (cc/pp): a user side framework for content negotiation" data-tag="data" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/1999/07/NOTE-CCPP-19990727/" title="Latest draft of Composite Capability/Preference Profiles (CC/PP): A user side framework for content negotiation formally approved by the group">Composite Capability/Preference Profiles (CC/PP): A user side framework for content negotiation</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1999-07-27 - <a title="Composite Capability/Preference Profiles (CC/PP): A user side framework for content negotiation publication history" href="/standards/history/NOTE-CCPP">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Franklin Reynolds
                            <li>Johan Hjelm
                            <li>Spencer Dawkins
                            <li>Sandeep Singhal
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                          <li data-title="mathematical markup language (mathml) 1.01 specification" data-tag="" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/1999/07/REC-MathML-19990707/" title="Latest draft of Mathematical Markup Language (MathML) 1.01 Specification formally approved by the group">Mathematical Markup Language (MathML) 1.01 Specification</a></h2>
                        <p class=deliverer>Math Working Group</p>
                        <p class=pubdetails>1999-07-07 - <a title="Mathematical Markup Language (MathML) 1.01 Specification publication history" href="/standards/history/REC-MathML">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Patrick D F Ion
                            <li>Robert R Miner
                          </ul>
                                  </li>
                                                                                                                          <li data-title="xml canonicalization requirements" data-tag="xml" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/1999/NOTE-xml-canonical-req-19990605" title="Latest draft of XML Canonicalization Requirements formally approved by the group">XML Canonicalization Requirements</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1999-06-05 - <a title="XML Canonicalization Requirements publication history" href="/standards/history/NOTE-xml-canonical-req">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>James Tauber
                            <li>Joel Nava
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="web characterization terminology &amp; definitions sheet" data-tag="" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/1999/05/WCA-terms/01" title="Latest draft of Web Characterization Terminology &amp; Definitions Sheet formally approved by the group">Web Characterization Terminology & Definitions Sheet</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1999-05-24 - <a title="Web Characterization Terminology &amp; Definitions Sheet publication history" href="/standards/history/WCA-terms">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Henrik Frystyk Nielsen
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="web content accessibility guidelines 1.0" data-tag="accessibility" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/1999/WAI-WEBCONTENT-19990505/" title="Latest draft of Web Content Accessibility Guidelines 1.0 formally approved by the group">Web  Content  Accessibility  Guidelines&nbsp;1.0</a></h2>
                        <p class=deliverer>Accessibility Guidelines Working Group</p>
                        <p class=pubdetails>1999-05-05 - <a title="Web Content Accessibility Guidelines 1.0 publication history" href="/standards/history/WAI-WEBCONTENT">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Wendy Chisholm
                            <li>Gregg Vanderheiden
                            <li>Ian Jacobs
                          </ul>
                                    <ul class="taglist">
                            <li class="accessibility">Accessibility
                          </ul>
                      </li>
                                                                                                                          <li data-title="web characterization: from working group to activity" data-tag="" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/1999/NOTE-WCA-19990319/" title="Latest draft of Web Characterization: From working group to activity formally approved by the group">Web Characterization: From working group to activity</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1999-03-19 - <a title="Web Characterization: From working group to activity publication history" href="/standards/history/NOTE-WCA">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Johan Hjelm
                            <li>Henrik Frystyk Nielsen
                          </ul>
                                  </li>
                                                                                                                          <li data-title="html 4.0 guidelines for mobile access" data-tag="html" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/1999/NOTE-html40-mobile-19990315/" title="Latest draft of HTML 4.0 Guidelines for Mobile Access formally approved by the group">HTML 4.0 Guidelines for Mobile Access</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1999-03-15 - <a title="HTML 4.0 Guidelines for Mobile Access publication history" href="/standards/history/NOTE-html40-mobile">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Tomihisa Kamada
                            <li>Masayasu Ishikawa
                            <li>Shinichi Matsui
                          </ul>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="xml xpointer requirements version 1.0" data-tag="" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/1999/NOTE-xptr-req-19990224" title="Latest draft of XML XPointer Requirements Version 1.0 formally approved by the group">XML  XPointer  Requirements  Version&nbsp;1.0</a></h2>
                        <p class=deliverer>XML Linking Working Group</p>
                        <p class=pubdetails>1999-02-24 - <a title="XML XPointer Requirements Version 1.0 publication history" href="/standards/history/NOTE-xptr-req">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steven DeRose
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="xml xlink requirements version 1.0" data-tag="xml" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/1999/NOTE-xlink-req-19990224/" title="Latest draft of XML XLink Requirements Version 1.0 formally approved by the group">XML  XLink  Requirements  Version&nbsp;1.0</a></h2>
                        <p class=deliverer>XML Linking Working Group</p>
                        <p class=pubdetails>1999-02-24 - <a title="XML XLink Requirements Version 1.0 publication history" href="/standards/history/NOTE-xlink-req">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steven DeRose
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="xpointer-information set liaison statement version 1.0" data-tag="" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/1999/NOTE-xptr-infoset-liaison-19990224" title="Latest draft of XPointer-Information Set Liaison Statement Version 1.0 formally approved by the group">XPointer-Information  Set  Liaison  Statement  Version&nbsp;1.0</a></h2>
                        <p class=deliverer>XML Linking Working Group</p>
                        <p class=pubdetails>1999-02-24 - <a title="XPointer-Information Set Liaison Statement Version 1.0 publication history" href="/standards/history/NOTE-xptr-infoset-liaison">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Steven DeRose
                          </ul>
                                  </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <li data-title="synchronized multimedia modules based upon smil 1.0" data-tag="" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/1999/NOTE-SYMM-modules-19990223" title="Latest draft of Synchronized Multimedia Modules based upon SMIL 1.0 formally approved by the group">Synchronized  Multimedia  Modules  based  upon  SMIL&nbsp;1.0</a></h2>
                        <p class=deliverer>SYMM Working Group</p>
                        <p class=pubdetails>1999-02-23 - <a title="Synchronized Multimedia Modules based upon SMIL 1.0 publication history" href="/standards/history/NOTE-SYMM-modules">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Patrick Schmitz
                            <li>Ted Wugofski
                            <li>Warner ten Kate
                          </ul>
                                  </li>
                                                                                                                          <li data-title="xml information set requirements" data-tag="xml" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/1999/NOTE-xml-infoset-req-19990218" title="Latest draft of XML Information Set Requirements formally approved by the group">XML Information Set Requirements</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1999-02-18 - <a title="XML Information Set Requirements publication history" href="/standards/history/NOTE-xml-infoset-req">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>David Megginson
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="xml schema requirements" data-tag="xml" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/1999/NOTE-xml-schema-req-19990215" title="Latest draft of XML Schema Requirements formally approved by the group">XML Schema Requirements</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=deliverer>XML Schema Working Group</p>
                        <p class=pubdetails>1999-02-15 - <a title="XML Schema Requirements publication history" href="/standards/history/NOTE-xml-schema-req">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Ashok Malhotra
                            <li>Murray Maloney
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="list of suggested extensions to css" data-tag="css" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/1998/NOTE-CSS-potential-19981210" title="Latest draft of List of suggested extensions to CSS formally approved by the group">List of suggested extensions to CSS</a></h2>
                        <p class=deliverer>Cascading Style Sheets (CSS) Working Group</p>
                        <p class=pubdetails>1998-12-10 - <a title="List of suggested extensions to CSS publication history" href="/standards/history/NOTE-CSS-potential">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Bert Bos
                          </ul>
                                    <ul class="taglist">
                            <li class="css">CSS
                          </ul>
                      </li>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <li data-title="xml fragment interchange requirements, version 1.0" data-tag="xml" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/1998/NOTE-XML-FRAG-REQ-19981123" title="Latest draft of XML Fragment Interchange Requirements, Version 1.0 formally approved by the group">XML  Fragment  Interchange  Requirements,  Version&nbsp;1.0</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1998-11-23 - <a title="XML Fragment Interchange Requirements, Version 1.0 publication history" href="/standards/history/NOTE-XML-FRAG-REQ">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Paul Grosso
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="scalable vector graphics (svg) requirements" data-tag="graphics" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/1998/WD-SVGReq-19981029" title="Latest draft of Scalable Vector Graphics (SVG) Requirements formally approved by the group">Scalable Vector Graphics (SVG) Requirements</a></h2>
                        <p class=deliverer>SVG Working Group</p>
                        <p class=pubdetails>1998-10-29 - <a title="Scalable Vector Graphics (SVG) Requirements publication history" href="/standards/history/WD-SVGReq">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jon Ferraiolo
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                          <li data-title="a discussion of the relationship between rdf-schema and uml" data-tag="data" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/1998/NOTE-rdf-uml-19980804/" title="Latest draft of A Discussion of the Relationship Between RDF-Schema and UML formally approved by the group">A Discussion of the Relationship Between RDF-Schema and UML</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1998-08-04 - <a title="A Discussion of the Relationship Between RDF-Schema and UML publication history" href="/standards/history/NOTE-rdf-uml">History</a>
                        </p>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                          <li data-title="http-ng binary wire protocol" data-tag="http" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/1998/WD-HTTP-NG-wire-19980710/" title="Latest draft of HTTP-ng Binary Wire Protocol formally approved by the group">HTTP-ng Binary Wire Protocol</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1998-07-10 - <a title="HTTP-ng Binary Wire Protocol publication history" href="/standards/history/WD-HTTP-NG-wire">History</a>
                        </p>
                                    <ul class="taglist">
                            <li class="http">HTTP
                          </ul>
                      </li>
                                                                                                                          <li data-title="design of http-ng testbed" data-tag="http" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/1998/NOTE-HTTP-NG-testbed-19980710/" title="Latest draft of Design of HTTP-ng Testbed formally approved by the group">Design of HTTP-ng Testbed</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1998-07-10 - <a title="Design of HTTP-ng Testbed publication history" href="/standards/history/NOTE-HTTP-NG-testbed">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Daniel Veillard
                          </ul>
                                    <ul class="taglist">
                            <li class="http">HTTP
                          </ul>
                      </li>
                                                                                                                          <li data-title="http-ng architectural model" data-tag="http" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/1998/WD-HTTP-NG-architecture-19980710/" title="Latest draft of HTTP-ng Architectural Model formally approved by the group">HTTP-ng Architectural Model</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1998-07-10 - <a title="HTTP-ng Architectural Model publication history" href="/standards/history/WD-HTTP-NG-architecture">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Henrik Frystyk Nielsen
                            <li>Mike Spreitzer
                          </ul>
                                    <ul class="taglist">
                            <li class="http">HTTP
                          </ul>
                      </li>
                                                                                                                          <li data-title="smux protocol specification" data-tag="http" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/1998/WD-mux-19980710" title="Latest draft of SMUX Protocol Specification formally approved by the group">SMUX Protocol Specification</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1998-07-10 - <a title="SMUX Protocol Specification publication history" href="/standards/history/WD-mux">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Jim Gettys
                            <li>Henrik Frystyk Nielsen
                          </ul>
                                    <ul class="taglist">
                            <li class="http">HTTP
                          </ul>
                      </li>
                                                                                                                          <li data-title="http-ng web interfaces" data-tag="http" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/1998/WD-HTTP-NG-interfaces-19980710/" title="Latest draft of HTTP-ng Web Interfaces formally approved by the group">HTTP-ng Web Interfaces</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1998-07-10 - <a title="HTTP-ng Web Interfaces publication history" href="/standards/history/WD-HTTP-NG-interfaces">History</a>
                        </p>
                                    <ul class="taglist">
                            <li class="http">HTTP
                          </ul>
                      </li>
                                                                                                                          <li data-title="synchronized multimedia integration language (smil) 1.0 specification" data-tag="" data-status="rec" data-version="latest">
            <div class="profile">REC</div>
            <h2 class="Recommendation"><a href="http://www.w3.org/TR/1998/REC-smil-19980615/" title="Latest draft of Synchronized Multimedia Integration Language (SMIL) 1.0 Specification formally approved by the group">Synchronized Multimedia Integration Language (SMIL) 1.0 Specification</a></h2>
                        <p class=deliverer>SYMM Working Group</p>
                        <p class=pubdetails>1998-06-15 - <a title="Synchronized Multimedia Integration Language (SMIL) 1.0 Specification publication history" href="/standards/history/REC-smil">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Philipp Hoschka
                          </ul>
                                  </li>
                                                                                                                          <li data-title="xsl requirements summary" data-tag="xml" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/1998/WD-XSLReq-19980511" title="Latest draft of XSL Requirements Summary formally approved by the group">XSL Requirements Summary</a></h2>
                        <p class=deliverer>XSLT Working Group</p>
                        <p class=pubdetails>1998-05-11 - <a title="XSL Requirements Summary publication history" href="/standards/history/WD-XSLReq">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Norman Walsh
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="xml in html meeting report" data-tag="data" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/1998/NOTE-xh-19980511" title="Latest draft of XML in HTML Meeting Report formally approved by the group">XML in HTML Meeting Report</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1998-05-11 - <a title="XML in HTML Meeting Report publication history" href="/standards/history/NOTE-xh">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dan Connolly
                            <li>Lauren Wood
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                          <li data-title="short- and long-term goals for the http-ng project" data-tag="http" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/1998/WD-HTTP-NG-goals-19980327" title="Latest draft of Short- and Long-Term Goals for the HTTP-NG Project formally approved by the group">Short- and Long-Term Goals for the HTTP-NG Project</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1998-03-27 - <a title="Short- and Long-Term Goals for the HTTP-NG Project publication history" href="/standards/history/WD-HTTP-NG-goals">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mike Spreitzer
                            <li>Henrik Frystyk Nielsen
                          </ul>
                                    <ul class="taglist">
                            <li class="http">HTTP
                          </ul>
                      </li>
                                                                                                                          <li data-title="p3p protocol and data transport working group draft white paper" data-tag="privacy" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/1998/NOTE-P3P10-Protocols-19980324" title="Latest draft of P3P Protocol and Data Transport Working Group Draft White Paper formally approved by the group">P3P Protocol and Data Transport Working Group Draft White Paper</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1998-03-24 - <a title="P3P Protocol and Data Transport Working Group Draft White Paper publication history" href="/standards/history/NOTE-P3P10-Protocols">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Philip DesAutels
                            <li>Steven Lucas
                            <li>Joseph Reagle
                          </ul>
                                    <ul class="taglist">
                            <li class="privacy">Privacy
                          </ul>
                      </li>
                                                                                                                          <li data-title="primary language in html" data-tag="html i18n" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/1998/NOTE-html-lan-19980313" title="Latest draft of Primary Language in HTML formally approved by the group">Primary Language in HTML</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1998-03-13 - <a title="Primary Language in HTML publication history" href="/standards/history/NOTE-html-lan">History</a>
                        </p>
                                    <ul class="taglist">
                            <li class="html">HTML
                            <li class="i18n">i18n
                          </ul>
                      </li>
                                                                                                                          <li data-title="xml linking language (xlink) design principles" data-tag="xml" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/1998/NOTE-xlink-principles-19980303" title="Latest draft of XML Linking Language (XLink) Design Principles formally approved by the group">XML Linking Language (XLink) Design Principles</a></h2>
                        <p class=deliverer>XML Core Working Group</p>
                        <p class=deliverer>XML Linking Working Group</p>
                        <p class=pubdetails>1998-03-03 - <a title="XML Linking Language (XLink) Design Principles publication history" href="/standards/history/NOTE-xlink-principles">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Eve Maler
                            <li>Steven DeRose
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="voice browsers" data-tag="media" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/1998/NOTE-voice-0128" title="Latest draft of Voice Browsers formally approved by the group">Voice Browsers</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1998-01-28 - <a title="Voice Browsers publication history" href="/standards/history/NOTE-voice">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Dave Raggett
                          </ul>
                                    <ul class="taglist">
                            <li class="media">Media
                          </ul>
                      </li>
                                                                                                                          <li data-title="comparison of sgml and xml" data-tag="xml" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/NOTE-sgml-xml-971215" title="Latest draft of Comparison of SGML and XML formally approved by the group">Comparison of SGML and XML</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1997-12-15 - <a title="Comparison of SGML and XML publication history" href="/standards/history/NOTE-sgml-xml">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>James Clark
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="pep specification: an extension mechanism for http" data-tag="http" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/WD-http-pep-971121" title="Latest draft of PEP Specification: an Extension Mechanism for HTTP formally approved by the group">PEP Specification: an Extension Mechanism for HTTP</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1997-11-21 - <a title="PEP Specification: an Extension Mechanism for HTTP publication history" href="/standards/history/WD-http-pep">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Henrik Frystyk Nielsen
                            <li>Dan Connolly
                            <li>Rohit Khare
                            <li>Eric Prud&#039;hommeaux
                          </ul>
                                    <ul class="taglist">
                            <li class="http">HTTP
                          </ul>
                      </li>
                                                                                                                          <li data-title="p3p architecture working group: general overview of the p3p architecture" data-tag="privacy" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/WD-P3P-arch-971022" title="Latest draft of P3P Architecture Working Group: General Overview of the P3P Architecture formally approved by the group">P3P Architecture Working Group: General Overview of the P3P Architecture</a></h2>
                        <p class=deliverer>P3P Specification Working Group</p>
                        <p class=pubdetails>1997-10-22 - <a title="P3P Architecture Working Group: General Overview of the P3P Architecture publication history" href="/standards/history/WD-P3P-arch">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Joseph Reagle
                            <li>Martin PreslerMarshall
                            <li>Melissa W Dunn
                            <li>Philip DesAutels
                            <li>Lorrie Cranor
                            <li>Mark Ackerman
                          </ul>
                                    <ul class="taglist">
                            <li class="privacy">Privacy
                          </ul>
                      </li>
                                                                                                                          <li data-title="p3p vocabulary working group: grammatical model and data design model" data-tag="privacy" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/WD-P3P-grammar-971014" title="Latest draft of P3P Vocabulary Working Group: Grammatical Model and Data Design Model formally approved by the group">P3P Vocabulary Working Group: Grammatical Model and Data Design Model</a></h2>
                        <p class=deliverer>P3P Specification Working Group</p>
                        <p class=pubdetails>1997-10-14 - <a title="P3P Vocabulary Working Group: Grammatical Model and Data Design Model publication history" href="/standards/history/WD-P3P-grammar">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Mark Ackerman
                            <li>Lorrie Cranor
                            <li>Philip DesAutels
                            <li>Melissa W Dunn
                            <li>Joseph Reagle
                          </ul>
                                    <ul class="taglist">
                            <li class="privacy">Privacy
                          </ul>
                      </li>
                                                                                                                          <li data-title="use of cgm as a scalable graphics format" data-tag="graphics" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/NOTE-cgm-970618" title="Latest draft of Use of CGM as a Scalable Graphics Format formally approved by the group">Use of CGM as a Scalable Graphics Format</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1997-06-18 - <a title="Use of CGM as a Scalable Graphics Format publication history" href="/standards/history/NOTE-cgm">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Chris Lilley
                          </ul>
                                    <ul class="taglist">
                            <li class="graphics">Graphics
                          </ul>
                      </li>
                                                                                                                          <li data-title="digital signature label architecture" data-tag="xml" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/WD-DSIG-label-arch-970610" title="Latest draft of Digital Signature Label Architecture formally approved by the group">Digital Signature Label Architecture</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1997-06-10 - <a title="Digital Signature Label Architecture publication history" href="/standards/history/WD-DSIG-label-arch">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Rohit Khare
                          </ul>
                                    <ul class="taglist">
                            <li class="xml">XML
                          </ul>
                      </li>
                                                                                                                          <li data-title="selecting payment mechanisms over http" data-tag="http" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/WD-jepi-uppflow-970106" title="Latest draft of Selecting Payment Mechanisms Over HTTP formally approved by the group">Selecting Payment Mechanisms Over HTTP</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1997-01-06 - <a title="Selecting Payment Mechanisms Over HTTP publication history" href="/standards/history/WD-jepi-uppflow">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Donald Eastlake
                            <li>Rohit Khare
                            <li>Jim Miller
                          </ul>
                                    <ul class="taglist">
                            <li class="http">HTTP
                          </ul>
                      </li>
                                                                                                                          <li data-title="imagemapped images and image-incapable user agents" data-tag="html" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/TR/NOTE-imagemap" title="Latest draft of Imagemapped Images and Image-Incapable User Agents formally approved by the group">Imagemapped Images and Image-Incapable User Agents</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1996-11-27 - <a title="Imagemapped Images and Image-Incapable User Agents publication history" href="/standards/history/NOTE-imagemap">History</a>
                        </p>
                                    <ul class="taglist">
                            <li class="html">HTML
                          </ul>
                      </li>
                                                                                                                          <li data-title="a proposed convention for embedding metadata in html" data-tag="data" data-status="note" data-version="latest">
            <div class="profile">Note</div>
            <h2 class="GroupNote"><a href="http://www.w3.org/Search/9605-Indexing-Workshop/ReportOutcomes/S6Group2" title="Latest draft of A Proposed Convention for Embedding Metadata in HTML formally approved by the group">A Proposed Convention for Embedding Metadata in HTML</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1996-06-02 - <a title="A Proposed Convention for Embedding Metadata in HTML publication history" href="/standards/history/S6Group2">History</a>
                        </p>
                        <ul class="editorlist">
                            <li>Stu Weibel
                          </ul>
                                    <ul class="taglist">
                            <li class="data">Data
                          </ul>
                      </li>
                                                                                                                          <li data-title="the ilu requester: object services in http servers" data-tag="http" data-status="ret" data-version=""style="opacity: 0; display: none;" aria-hidden="true">
            <div class="profile">ret</div>
            <h2 class="Retired"><a href="http://www.w3.org/TR/WD-ilu-requestor-960307" title="Latest draft of The ILU Requester: Object Services in HTTP Servers formally approved by the group">The ILU Requester: Object Services in HTTP Servers</a></h2>
                        <p class=deliverer>UNKNOWN WORKING GROUP</p>
                        <p class=pubdetails>1996-03-07 - <a title="The ILU Requester: Object Services in HTTP Servers publication history" href="/standards/history/WD-ilu-requestor">History</a>
                        </p>
                                    <ul class="taglist">
                            <li class="http">HTTP
                          </ul>
                      </li>
                  </ul></div>
      </div>
    </div>
</div>
        </div> <!-- /end #w3c_mainCol -->
    </div> <!-- end #w3c_main -->
 <!-- /end #w3c_container -->

<div id="w3c_footer">
<div id="w3c_footer-inner">
<h2 class="offscreen">Footer Navigation</h2>
<div class="w3c_footer-nav">
<h3>Navigation</h3>
<ul class="footer_top_nav">
<li><a href="http://www.w3.org/">Home</a></li>
<li><a href="http://www.w3.org/standards/">Standards</a></li>
<li><a href="http://www.w3.org/participate/">Participate</a></li>
<li><a href="http://www.w3.org/Consortium/membership">Membership</a></li>
<li class="last-item"><a href="http://www.w3.org/Consortium/">About W3C</a></li>
</ul>
</div>
<div class="w3c_footer-nav">
<h3>Contact W3C</h3>
<ul class="footer_bottom_nav">
<li><a href="http://www.w3.org/Consortium/contact">Contact</a></li>
<li><a accesskey="0" href="http://www.w3.org/Help/">Help and FAQ</a></li>
<li><a href="http://www.w3.org/Consortium/sponsor/">Sponsor / Donate</a></li>
<li><a href="http://www.w3.org/Consortium/siteindex">Site Map</a></li>
<li>
<address id="w3c_signature"><a href="http://lists.w3.org/Archives/Public/site-comments/">Feedback</a></address></li>

</ul>
</div>
<div class="w3c_footer-nav">
<h3>W3C Updates</h3>
<ul class="footer_follow_nav">
<li><a href="http://twitter.com/W3C" title="Follow W3C on Twitter"><img src="https://www.w3.org/2008/site/images/Twitter_bird_logo_2012.svg" alt="Twitter" class="social-icon" height="40"></a></li>
</ul>
</div>
<!-- #footer address / page signature -->
<p class="copyright">Copyright © 2020
W3C <sup>®</sup> (<a href="http://www.csail.mit.edu/"><abbr title="Massachusetts Institute of Technology">MIT</abbr></a>, <a href="http://www.ercim.eu/"><abbr title="European Research Consortium for Informatics and Mathematics"> ERCIM</abbr></a>, <a href="http://www.keio.ac.jp/">Keio</a>, <a href="http://ev.buaa.edu.cn/">Beihang</a>) <a href="http://www.w3.org/Consortium/Legal/ipr-notice">Usage policies apply</a>.</p>
</div>
</div>
<div id="w3c_scripts"><script type="text/javascript" src="https://www.w3.org/2008/site/js/main"></script></div>
    <script src="/2008/site/sf/build/runtime.9493cd1f.js"></script><script src="/2008/site/sf/build/2.cfcd6c25.js"></script><script src="/2008/site/sf/build/5.0cbd1ffa.js"></script><script src="/2008/site/sf/build/publication-tr.0e26a4bb.js"></script>
</body></html>

    http_version: 
  recorded_at: Tue, 07 Apr 2020 12:11:23 GMT
- request:
    method: get
    uri: https://www.w3.org/TR/2020/CR-json-ld11-20200316/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.w3.org
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Tue, 07 Apr 2020 12:11:24 GMT
      Content-Location:
      - Overview.html
      Last-Modified:
      - Mon, 16 Mar 2020 14:45:40 GMT
      Etag:
      - '"f9236-5a0f9df776d00-gzip"'
      Accept-Ranges:
      - bytes
      Cache-Control:
      - max-age=31536000
      Expires:
      - Wed, 07 Apr 2021 12:11:24 GMT
      Vary:
      - Accept-Encoding
      Link:
      - <https://timetravel.mementoweb.org/w3c/timegate/https://www.w3.org/TR/json-ld11/>;rel="timegate",
        <https://www.w3.org/TR/json-ld11/>;rel="original"
      Access-Control-Allow-Origin:
      - "*"
      Transfer-Encoding:
      - chunked
      Content-Type:
      - text/html; charset=utf-8
      Memento-Datetime:
      - Mon, 16 Mar 2020 14:45:40 GMT
      Strict-Transport-Security:
      - max-age=15552000; includeSubdomains; preload
      Content-Security-Policy:
      - upgrade-insecure-requests
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html><html lang="en"><head><meta http-equiv="content-type" content="text/html; charset=UTF-8"><meta name="generator" content="ReSpec 25.4.1"><meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no"><style>/* --- EXAMPLES --- */
span.example-title {
    text-transform: none;
}
aside.example, div.example, div.illegal-example {
    padding: 0.5em;
    margin: 1em 0;
    position: relative;
    clear: both;
}
div.illegal-example { color: red }
div.illegal-example p { color: black }
aside.example, div.example {
    padding: .5em;
    border-left-width: .5em;
    border-left-style: solid;
    border-color: #e0cb52;
    background: #fcfaee;
}

aside.example div.example {
    border-left-width: .1em;
    border-color: #999;
    background: #fff;
}
aside.example div.example span.example-title {
    color: #999;
}
</style><style>/* --- ISSUES/NOTES --- */
.issue-label {
    text-transform: initial;
}

.warning > p:first-child { margin-top: 0 }
.warning {
    padding: .5em;
    border-left-width: .5em;
    border-left-style: solid;
}
span.warning { padding: .1em .5em .15em; }

.issue.closed span.issue-number {
    text-decoration: line-through;
}

.warning {
    border-color: #f11;
    border-width: .2em;
    border-style: solid;
    background: #fbe9e9;
}

.warning-title:before{
    content: "⚠"; /*U+26A0 WARNING SIGN*/
    font-size: 1.3em;
    float: left;
    padding-right: .3em;
    margin-top: -0.3em;
}

li.task-list-item {
    list-style: none;
}

input.task-list-item-checkbox {
    margin: 0 0.35em 0.25em -1.6em;
    vertical-align: middle;
}

.issue a.respec-gh-label {
  padding: 5px;
  margin: 0 2px 0 2px;
  font-size: 10px;
  text-transform: none;
  text-decoration: none;
  font-weight: bold;
  border-radius: 4px;
  position: relative;
  bottom: 2px;
  border: none;
  display: inline-block;
}
</style><style>/* dfn popup panel that list all local references to a dfn */
dfn {
  cursor: pointer;
}

.dfn-panel {
  position: absolute;
  left: var(--left); /* set via JS */
  top: var(--top); /* set via JS */
  z-index: 35;
  height: auto;
  width: max-content;
  max-width: 300px;
  max-height: 500px;
  overflow: auto;
  padding: 0.5em 0.75em;
  font: small Helvetica Neue, sans-serif, Droid Sans Fallback;
  background: #dddddd;
  color: black;
  border: outset 0.2em;
}

.dfn-panel * {
  margin: 0;
}

.dfn-panel > b {
  display: block;
}

.dfn-panel ul a[href] {
  color: black;
}

.dfn-panel a:not(:hover) {
  text-decoration: none !important;
  border-bottom: none !important;
}

.dfn-panel a[href]:hover {
  border-bottom-width: 1px;
}

.dfn-panel > b + b {
  margin-top: 0.25em;
}

.dfn-panel ul {
  padding: 0;
}

.dfn-panel li {
  list-style: inside;
}

.dfn-panel.docked {
  display: inline-block;
  position: fixed;
  left: 0.5em;
  top: unset;
  bottom: 2em;
  margin: 0 auto;
  /* 0.75em from padding (x2), 0.5em from left position, 0.2em border (x2) */
  max-width: calc(100vw - 0.75em * 2 - 0.5em - 0.2em * 2);
  max-height: 30vh;
}
</style>
<title>JSON-LD 1.1</title>





<script>
  document.addEventListener("DOMContentLoaded", () => {
    // Add example button selection logic
    for (const button of document.querySelectorAll(".ds-selector-tabs .selectors button")) {
      button.onclick = () => {
        const ex = button.closest(".ds-selector-tabs");
        ex.querySelector("button.selected").classList.remove("selected");
        ex.querySelector(".selected").classList.remove("selected");
        button.classList.add('selected');
        ex.querySelector("." + button.dataset.selects).classList.add("selected");
      }
    }

    // Toggle show/hide changes
    for (const elem of document.querySelectorAll(".show-changes")) {
      elem.onclick = () => {
        if (elem.classList.contains("selected")) {
          // Remove highlight class from elements having "changed" class
          elem.classList.remove("selected");
          for (const changed of document.querySelectorAll(".changed")) {
            changed.classList.remove("highlight");
          }
        } else {
          // Add highlight class to elements having "changed" class
          elem.classList.add("selected");
          for (const changed of document.querySelectorAll(".changed")) {
            changed.classList.add("highlight");
          }
        }
      }
    }
  });
</script>
<style>
  .hl-bold { font-weight: bold; color: #0a3; }
  .comment { color: #999; }
  table, thead, tr, td { padding: 5px; border-width: 1px; border-spacing: 0px; border-style: solid; border-collapse: collapse; }
  table.example {width: 100%;}
  .example > pre.context:before {
    content: "Context";
    float: right;
    font: x-large Arial, sans-serif;
    color: gray;
    border: solid thin black;
    padding: 0.2em;
  }
  .example > pre.frame:before {
    content: "Frame";
    float: right;
    font: x-large Arial, sans-serif;
    color: gray;
    border: solid thin black;
    padding: 0.2em;
  }
  .example > pre.input:before {
    content: "Input";
    float: right;
    font: x-large Arial, sans-serif;
    color: gray;
    border: solid thin black;
    padding: 0.2em;
  }
  .example > pre.result:before {
    content: "Result";
    float: right;
    font: x-large Arial, sans-serif;
    color: gray;
    border: solid thin black;
    padding: 0.2em;
  }
  .example > pre.turtle:before {
    content: "Turtle";
    float: right;
    font: x-large Arial, sans-serif;
    color: gray;
    border: solid thin black;
    padding: 0.2em;
  }
  .highlight.changed, .show-changes {
    background-color: lime;
  }
  .show-changes.selected:before {
    content: "de-highlight";
  }
  .show-changes:before {
    content: "highlight";
  }
  aside.example {
    overflow-y: hidden;
  }
  /* example tab selection */
  .ds-selector-tabs {
    padding-bottom: 2em;
  }
  .ds-selector-tabs .selectors {
    padding: 0;
    border-bottom: 1px solid #ccc;
    height: 28px;
  }
  .ds-selector-tabs .selectors button {
    display: inline-block;
    min-width: 54px;
    text-align: center;
    font-size: 11px;
    font-weight: bold;
    height: 27px;
    padding: 0 8px;
    line-height: 27px;
    transition: all,0.218s;
    border-top-right-radius: 2px;
    border-top-left-radius: 2px;
    color: #666;
    border: 1px solid transparent;
  }
  .ds-selector-tabs .selectors button:first-child {
    margin-left: 2px;
  }
  .ds-selector-tabs .selectors button.selected {
    color: #202020 !important;
    border: 1px solid #ccc;
    border-bottom: 1px solid #fff !important;
  }
  .ds-selector-tabs .selectors button:hover {
    background-color: transparent;
    color: #202020;
    cursor: pointer;
  }
  .ds-selector-tabs pre:not(.preserve), .ds-selector-tabs table:not(.preserve) {
    display: none;
  }
  .ds-selector-tabs pre.selected, .ds-selector-tabs table.selected {
    display: block;
  }
  a.playground {
    display: inline-block;
    width: 150px;
    border: 1px solid transparent;
    border-top-right-radius: 2px;
    border-top-left-radius: 2px;
    background-color: rgb(192, 192, 192);
    text-decoration: none;
    font-size: 13px;
    margin-bottom: 10px;
  }
  a[href].playground {
    padding: 4px 0 3px 8px;
    border-bottom: none;
    text-decoration: none;
    color: #666;
  }
</style>
<style id="respec-mainstyle">/*****************************************************************
 * ReSpec specific CSS
 *****************************************************************/
@keyframes pop {
  0% {
    transform: scale(1, 1);
  }
  25% {
    transform: scale(1.25, 1.25);
    opacity: 0.75;
  }
  100% {
    transform: scale(1, 1);
  }
}

/* Override code highlighter background */
.hljs {
  background: transparent !important;
}

/* --- INLINES --- */
h1 abbr,
h2 abbr,
h3 abbr,
h4 abbr,
h5 abbr,
h6 abbr,
a abbr {
  border: none;
}

dfn {
  font-weight: bold;
}

a.internalDFN {
  color: inherit;
  border-bottom: 1px solid #99c;
  text-decoration: none;
}

a.externalDFN {
  color: inherit;
  border-bottom: 1px dotted #ccc;
  text-decoration: none;
}

a.bibref {
  text-decoration: none;
}

.respec-offending-element:target {
  animation: pop 0.25s ease-in-out 0s 1;
}

.respec-offending-element,
a[href].respec-offending-element {
  text-decoration: red wavy underline;
}
@supports not (text-decoration: red wavy underline) {
  .respec-offending-element:not(pre) {
    display: inline-block;
  }
  .respec-offending-element {
    /* Red squiggly line */
    background: url(data:image/gif;base64,R0lGODdhBAADAPEAANv///8AAP///wAAACwAAAAABAADAEACBZQjmIAFADs=)
      bottom repeat-x;
  }
}

#references :target {
  background: #eaf3ff;
  animation: pop 0.4s ease-in-out 0s 1;
}

cite .bibref {
  font-style: normal;
}

code {
  color: #c63501;
}

th code {
  color: inherit;
}

a[href].orcid {
    padding-left: 4px;
    padding-right: 4px;
}

a[href].orcid > svg {
    margin-bottom: -2px;
}

/* --- TOC --- */

.toc a,
.tof a {
  text-decoration: none;
}

a .secno,
a .figno {
  color: #000;
}

ul.tof,
ol.tof {
  list-style: none outside none;
}

.caption {
  margin-top: 0.5em;
  font-style: italic;
}

/* --- TABLE --- */

table.simple {
  border-spacing: 0;
  border-collapse: collapse;
  border-bottom: 3px solid #005a9c;
}

.simple th {
  background: #005a9c;
  color: #fff;
  padding: 3px 5px;
  text-align: left;
}

.simple th a {
  color: #fff;
  padding: 3px 5px;
  text-align: left;
}

.simple th[scope="row"] {
  background: inherit;
  color: inherit;
  border-top: 1px solid #ddd;
}

.simple td {
  padding: 3px 10px;
  border-top: 1px solid #ddd;
}

.simple tr:nth-child(even) {
  background: #f0f6ff;
}

/* --- DL --- */

.section dd > p:first-child {
  margin-top: 0;
}

.section dd > p:last-child {
  margin-bottom: 0;
}

.section dd {
  margin-bottom: 1em;
}

.section dl.attrs dd,
.section dl.eldef dd {
  margin-bottom: 0;
}

#issue-summary > ul,
.respec-dfn-list {
  column-count: 2;
}

#issue-summary li,
.respec-dfn-list li {
  list-style: none;
}

details.respec-tests-details {
  margin-left: 1em;
  display: inline-block;
  vertical-align: top;
}

details.respec-tests-details > * {
  padding-right: 2em;
}

details.respec-tests-details[open] {
  z-index: 999999;
  position: absolute;
  border: thin solid #cad3e2;
  border-radius: 0.3em;
  background-color: white;
  padding-bottom: 0.5em;
}

details.respec-tests-details[open] > summary {
  border-bottom: thin solid #cad3e2;
  padding-left: 1em;
  margin-bottom: 1em;
  line-height: 2em;
}

details.respec-tests-details > ul {
  width: 100%;
  margin-top: -0.3em;
}

details.respec-tests-details > li {
  padding-left: 1em;
}

a[href].self-link:hover {
  opacity: 1;
  text-decoration: none;
  background-color: transparent;
}

h2,
h3,
h4,
h5,
h6 {
  position: relative;
}

aside.example .marker > a.self-link {
  color: inherit;
}

h2 > a.self-link,
h3 > a.self-link,
h4 > a.self-link,
h5 > a.self-link,
h6 > a.self-link {
  border: none;
  color: inherit;
  font-size: 83%;
  height: 2em;
  left: -1.6em;
  opacity: 0.5;
  position: absolute;
  text-align: center;
  text-decoration: none;
  top: 0;
  transition: opacity 0.2s;
  width: 2em;
}

h2 > a.self-link::before,
h3 > a.self-link::before,
h4 > a.self-link::before,
h5 > a.self-link::before,
h6 > a.self-link::before {
  content: "§";
  display: block;
}

@media (max-width: 767px) {
  dd {
    margin-left: 0;
  }

  /* Don't position self-link in headings off-screen */
  h2 > a.self-link,
  h3 > a.self-link,
  h4 > a.self-link,
  h5 > a.self-link,
  h6 > a.self-link {
    left: auto;
    top: auto;
  }
}

@media print {
  .removeOnSave {
    display: none;
  }
}
</style><meta name="description" content="JSON is a useful data serialization and messaging format.
    This specification defines JSON-LD 1.1, a JSON-based format to serialize
    Linked Data. The syntax is designed to easily integrate into deployed
    systems that already use JSON, and provides a smooth upgrade path from
    JSON to JSON-LD.
    It is primarily intended to be a way to use Linked Data in Web-based
    programming environments, to build interoperable Web services, and to
    store Linked Data in JSON-based storage engines."><link rel="canonical" href="https://www.w3.org/TR/json-ld11/"><script type="application/ld+json">{
  "@context": [
    "http://schema.org",
    {
      "@vocab": "http://schema.org/",
      "@language": "en",
      "w3p": "http://www.w3.org/2001/02pd/rec54#",
      "foaf": "http://xmlns.com/foaf/0.1/",
      "datePublished": {
        "@type": "http://www.w3.org/2001/XMLSchema#date"
      },
      "inLanguage": {
        "@language": null
      },
      "isBasedOn": {
        "@type": "@id"
      },
      "license": {
        "@type": "@id"
      }
    }
  ],
  "id": "https://www.w3.org/TR/json-ld11/",
  "type": [
    "TechArticle",
    "w3p:CR"
  ],
  "name": "JSON-LD 1.1",
  "inLanguage": "en",
  "license": "https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document",
  "datePublished": "2020-03-16",
  "copyrightHolder": {
    "name": "World Wide Web Consortium",
    "url": "https://www.w3.org/"
  },
  "discussionUrl": "https://github.com/w3c/json-ld-syntax/issues/",
  "alternativeHeadline": "A JSON-based Serialization for Linked Data",
  "isBasedOn": "https://www.w3.org/TR/2020/CR-json-ld11-20200305/",
  "description": "JSON is a useful data serialization and messaging format.\n    This specification defines JSON-LD 1.1, a JSON-based format to serialize\n    Linked Data. The syntax is designed to easily integrate into deployed\n    systems that already use JSON, and provides a smooth upgrade path from\n    JSON to JSON-LD.\n    It is primarily intended to be a way to use Linked Data in Web-based\n    programming environments, to build interoperable Web services, and to\n    store Linked Data in JSON-based storage engines.",
  "editor": [
    {
      "type": "Person",
      "name": "Gregg Kellogg",
      "url": "https://greggkellogg.net/"
    },
    {
      "type": "Person",
      "name": "Pierre-Antoine Champin",
      "url": "http://champin.net/",
      "worksFor": {
        "name": "LIRIS - Université de Lyon",
        "url": "https://liris.cnrs.fr/"
      }
    },
    {
      "type": "Person",
      "name": "Dave Longley",
      "url": "https://digitalbazaar.com/author/dlongley/",
      "worksFor": {
        "name": "Digital Bazaar",
        "url": "https://digitalbazaar.com/"
      }
    }
  ],
  "contributor": [
    {
      "type": "Person",
      "name": "Manu Sporny",
      "url": "http://manu.sporny.org/",
      "worksFor": {
        "name": "Digital Bazaar",
        "url": "https://digitalbazaar.com/"
      }
    },
    {
      "type": "Person",
      "name": "Dave Longley",
      "url": "https://digitalbazaar.com/author/dlongley/",
      "worksFor": {
        "name": "Digital Bazaar",
        "url": "https://digitalbazaar.com/"
      }
    },
    {
      "type": "Person",
      "name": "Gregg Kellogg",
      "url": "https://greggkellogg.net/"
    },
    {
      "type": "Person",
      "name": "Markus Lanthaler",
      "url": "https://www.markus-lanthaler.com/",
      "worksFor": {
        "name": "Google",
        "url": "https://www.google.com/"
      }
    },
    {
      "type": "Person",
      "name": "Pierre-Antoine Champin",
      "url": "http://champin.net/",
      "worksFor": {
        "name": "LIRIS - Université de Lyon",
        "url": "https://liris.cnrs.fr/"
      }
    },
    {
      "type": "Person",
      "name": "Niklas Lindström",
      "url": "http://neverspace.net/"
    }
  ],
  "citation": [
    {
      "id": "https://tools.ietf.org/html/rfc8288",
      "type": "TechArticle",
      "name": "Web Linking",
      "url": "https://tools.ietf.org/html/rfc8288",
      "creator": [
        {
          "name": "M. Nottingham"
        }
      ]
    },
    {
      "id": "https://tools.ietf.org/html/rfc6839",
      "type": "TechArticle",
      "name": "Additional Media Type Structured Syntax Suffixes",
      "url": "https://tools.ietf.org/html/rfc6839",
      "creator": [
        {
          "name": "T. Hansen"
        },
        {
          "name": "A. Melnikov"
        }
      ],
      "publisher": {
        "name": "IETF"
      }
    },
    {
      "id": "https://www.w3.org/TR/json-ld11-api/",
      "type": "TechArticle",
      "name": "JSON-LD 1.1 Processing Algorithms and API",
      "url": "https://www.w3.org/TR/json-ld11-api/",
      "creator": [
        {
          "name": "Gregg Kellogg"
        },
        {
          "name": "Dave Longley"
        },
        {
          "name": "Pierre-Antoine Champin"
        }
      ],
      "publisher": {
        "name": "W3C"
      }
    },
    {
      "id": "https://html.spec.whatwg.org/multipage/",
      "type": "TechArticle",
      "name": "HTML Standard",
      "url": "https://html.spec.whatwg.org/multipage/",
      "creator": [
        {
          "name": "Anne van Kesteren"
        },
        {
          "name": "Domenic Denicola"
        },
        {
          "name": "Ian Hickson"
        },
        {
          "name": "Philip Jägenstedt"
        },
        {
          "name": "Simon Pieters"
        }
      ],
      "publisher": {
        "name": "WHATWG"
      }
    },
    {
      "id": "https://www.w3.org/TR/rdf11-concepts/",
      "type": "TechArticle",
      "name": "RDF 1.1 Concepts and Abstract Syntax",
      "url": "https://www.w3.org/TR/rdf11-concepts/",
      "creator": [
        {
          "name": "Richard Cyganiak"
        },
        {
          "name": "David Wood"
        },
        {
          "name": "Markus Lanthaler"
        }
      ],
      "publisher": {
        "name": "W3C"
      }
    },
    {
      "id": "https://dom.spec.whatwg.org/",
      "type": "TechArticle",
      "name": "DOM Standard",
      "url": "https://dom.spec.whatwg.org/",
      "creator": [
        {
          "name": "Anne van Kesteren"
        }
      ],
      "publisher": {
        "name": "WHATWG"
      }
    },
    {
      "id": "https://tools.ietf.org/html/rfc8259",
      "type": "TechArticle",
      "name": "The JavaScript Object Notation (JSON) Data Interchange Format",
      "url": "https://tools.ietf.org/html/rfc8259",
      "creator": [
        {
          "name": "T. Bray, Ed."
        }
      ],
      "publisher": {
        "name": "IETF"
      }
    },
    {
      "id": "https://tools.ietf.org/html/rfc3987",
      "type": "TechArticle",
      "name": "Internationalized Resource Identifiers (IRIs)",
      "url": "https://tools.ietf.org/html/rfc3987",
      "creator": [
        {
          "name": "M. Duerst"
        },
        {
          "name": "M. Suignard"
        }
      ],
      "publisher": {
        "name": "IETF"
      }
    },
    {
      "id": "https://tools.ietf.org/html/bcp47",
      "type": "TechArticle",
      "name": "Tags for Identifying Languages",
      "url": "https://tools.ietf.org/html/bcp47",
      "creator": [
        {
          "name": "A. Phillips"
        },
        {
          "name": "M. Davis"
        }
      ],
      "publisher": {
        "name": "IETF"
      }
    },
    {
      "id": "https://www.w3.org/TR/rdf11-mt/",
      "type": "TechArticle",
      "name": "RDF 1.1 Semantics",
      "url": "https://www.w3.org/TR/rdf11-mt/",
      "creator": [
        {
          "name": "Patrick Hayes"
        },
        {
          "name": "Peter Patel-Schneider"
        }
      ],
      "publisher": {
        "name": "W3C"
      }
    },
    {
      "id": "https://www.iana.org/assignments/uri-schemes/uri-schemes.xhtml",
      "type": "TechArticle",
      "name": "Uniform Resource Identifier (URI) Schemes",
      "url": "https://www.iana.org/assignments/uri-schemes/uri-schemes.xhtml",
      "publisher": {
        "name": "IANA"
      }
    },
    {
      "id": "https://tools.ietf.org/html/rfc5234",
      "type": "TechArticle",
      "name": "Augmented BNF for Syntax Specifications: ABNF",
      "url": "https://tools.ietf.org/html/rfc5234",
      "creator": [
        {
          "name": "D. Crocker, Ed."
        },
        {
          "name": "P. Overell"
        }
      ],
      "publisher": {
        "name": "IETF"
      }
    },
    {
      "id": "https://www.w3.org/TR/json-ld11-framing/",
      "type": "TechArticle",
      "name": "JSON-LD 1.1 Framing",
      "url": "https://www.w3.org/TR/json-ld11-framing/",
      "creator": [
        {
          "name": "Dave Longley"
        },
        {
          "name": "Gregg Kellogg"
        },
        {
          "name": "Pierre-Antoine Champin"
        }
      ],
      "publisher": {
        "name": "W3C"
      }
    },
    {
      "id": "https://www.w3.org/TR/rdf-schema/",
      "type": "TechArticle",
      "name": "RDF Schema 1.1",
      "url": "https://www.w3.org/TR/rdf-schema/",
      "creator": [
        {
          "name": "Dan Brickley"
        },
        {
          "name": "Ramanathan Guha"
        }
      ],
      "publisher": {
        "name": "W3C"
      }
    },
    {
      "id": "https://www.unicode.org/versions/latest/",
      "type": "TechArticle",
      "name": "The Unicode Standard",
      "url": "https://www.unicode.org/versions/latest/",
      "publisher": {
        "name": "Unicode Consortium"
      }
    },
    {
      "id": "https://tc39.es/ecma262/",
      "type": "TechArticle",
      "name": "ECMAScript Language Specification",
      "url": "https://tc39.es/ecma262/",
      "publisher": {
        "name": "Ecma International"
      }
    },
    {
      "id": "https://www.unicode.org/reports/tr9/tr9-41.html",
      "type": "TechArticle",
      "name": "Unicode Bidirectional Algorithm",
      "url": "https://www.unicode.org/reports/tr9/tr9-41.html",
      "creator": [
        {
          "name": "Mark Davis"
        },
        {
          "name": "Aharon Lanin"
        },
        {
          "name": "Andrew Glass"
        }
      ],
      "publisher": {
        "name": "Unicode Consortium"
      }
    },
    {
      "id": "https://tools.ietf.org/html/rfc6906",
      "type": "TechArticle",
      "name": "The 'profile' Link Relation Type",
      "url": "https://tools.ietf.org/html/rfc6906",
      "creator": [
        {
          "name": "E. Wilde"
        }
      ],
      "publisher": {
        "name": "IETF"
      }
    },
    {
      "id": "https://tools.ietf.org/html/rfc4288",
      "type": "TechArticle",
      "name": "Media Type Specifications and Registration Procedures",
      "url": "https://tools.ietf.org/html/rfc4288",
      "creator": [
        {
          "name": "N. Freed"
        },
        {
          "name": "J. Klensin"
        }
      ],
      "publisher": {
        "name": "IETF"
      }
    },
    {
      "id": "https://tools.ietf.org/html/rfc7231",
      "type": "TechArticle",
      "name": "Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content",
      "url": "https://tools.ietf.org/html/rfc7231",
      "creator": [
        {
          "name": "R. Fielding, Ed."
        },
        {
          "name": "J. Reschke, Ed"
        }
      ]
    },
    {
      "id": "https://www.w3.org/TR/2014/REC-json-ld-20140116/",
      "type": "TechArticle",
      "name": "JSON-LD 1.0",
      "url": "https://www.w3.org/TR/2014/REC-json-ld-20140116/",
      "creator": [
        {
          "name": "Manu Sporny"
        },
        {
          "name": "Gregg Kellogg"
        },
        {
          "name": "Marcus Langhaler"
        }
      ],
      "publisher": {
        "name": "W3C"
      }
    },
    {
      "id": "https://tools.ietf.org/html/rfc2119",
      "type": "TechArticle",
      "name": "Key words for use in RFCs to Indicate Requirement Levels",
      "url": "https://tools.ietf.org/html/rfc2119",
      "creator": [
        {
          "name": "S. Bradner"
        }
      ],
      "publisher": {
        "name": "IETF"
      }
    },
    {
      "id": "https://tools.ietf.org/html/rfc8174",
      "type": "TechArticle",
      "name": "Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words",
      "url": "https://tools.ietf.org/html/rfc8174",
      "creator": [
        {
          "name": "B. Leiba"
        }
      ],
      "publisher": {
        "name": "IETF"
      }
    },
    {
      "id": "https://tools.ietf.org/html/rfc4627",
      "type": "TechArticle",
      "name": "The application/json Media Type for JavaScript Object Notation (JSON)",
      "url": "https://tools.ietf.org/html/rfc4627",
      "creator": [
        {
          "name": "D. Crockford"
        }
      ],
      "publisher": {
        "name": "IETF"
      }
    },
    {
      "id": "https://tools.ietf.org/html/rfc3986",
      "type": "TechArticle",
      "name": "Uniform Resource Identifier (URI): Generic Syntax",
      "url": "https://tools.ietf.org/html/rfc3986",
      "creator": [
        {
          "name": "T. Berners-Lee"
        },
        {
          "name": "R. Fielding"
        },
        {
          "name": "L. Masinter"
        }
      ],
      "publisher": {
        "name": "IETF"
      }
    },
    {
      "id": "https://www.w3.org/DesignIssues/LinkedData.html",
      "type": "TechArticle",
      "name": "Linked Data Design Issues",
      "url": "https://www.w3.org/DesignIssues/LinkedData.html",
      "creator": [
        {
          "name": "Tim Berners-Lee"
        }
      ],
      "publisher": {
        "name": "W3C"
      }
    },
    {
      "id": "https://www.w3.org/TR/sparql11-overview/",
      "type": "TechArticle",
      "name": "SPARQL 1.1 Overview",
      "url": "https://www.w3.org/TR/sparql11-overview/",
      "creator": [
        {
          "name": "The W3C SPARQL Working Group"
        }
      ],
      "publisher": {
        "name": "W3C"
      }
    },
    {
      "id": "https://www.w3.org/TR/turtle/",
      "type": "TechArticle",
      "name": "RDF 1.1 Turtle",
      "url": "https://www.w3.org/TR/turtle/",
      "creator": [
        {
          "name": "Eric Prud'hommeaux"
        },
        {
          "name": "Gavin Carothers"
        }
      ],
      "publisher": {
        "name": "W3C"
      }
    },
    {
      "id": "https://www.w3.org/TR/trig/",
      "type": "TechArticle",
      "name": "RDF 1.1 TriG",
      "url": "https://www.w3.org/TR/trig/",
      "creator": [
        {
          "name": "Gavin Carothers"
        },
        {
          "name": "Andy Seaborne"
        }
      ],
      "publisher": {
        "name": "W3C"
      }
    },
    {
      "id": "https://infra.spec.whatwg.org/",
      "type": "TechArticle",
      "name": "Infra Standard",
      "url": "https://infra.spec.whatwg.org/",
      "creator": [
        {
          "name": "Anne van Kesteren"
        },
        {
          "name": "Domenic Denicola"
        }
      ],
      "publisher": {
        "name": "WHATWG"
      }
    },
    {
      "id": "https://heycam.github.io/webidl/",
      "type": "TechArticle",
      "name": "Web IDL",
      "url": "https://heycam.github.io/webidl/",
      "creator": [
        {
          "name": "Boris Zbarsky"
        }
      ],
      "publisher": {
        "name": "W3C"
      }
    },
    {
      "id": "http://yaml.org/spec/1.2/spec.html",
      "type": "TechArticle",
      "name": "YAML Ain’t Markup Language (YAML™) Version 1.2",
      "url": "http://yaml.org/spec/1.2/spec.html",
      "creator": [
        {
          "name": "Oren Ben-Kiki"
        },
        {
          "name": "Clark Evans"
        },
        {
          "name": "Ingy döt Net"
        }
      ]
    },
    {
      "id": "https://tools.ietf.org/html/rfc7049",
      "type": "TechArticle",
      "name": "Concise Binary Object Representation (CBOR)",
      "url": "https://tools.ietf.org/html/rfc7049",
      "creator": [
        {
          "name": "C. Bormann"
        },
        {
          "name": "P. Hoffman"
        }
      ],
      "publisher": {
        "name": "IETF"
      }
    },
    {
      "id": "https://tools.ietf.org/html/rfc2141",
      "type": "TechArticle",
      "name": "URN Syntax",
      "url": "https://tools.ietf.org/html/rfc2141",
      "creator": [
        {
          "name": "R. Moats"
        }
      ],
      "publisher": {
        "name": "IETF"
      }
    },
    {
      "id": "https://www.w3.org/TR/string-meta/",
      "type": "TechArticle",
      "name": "Strings on the Web: Language and Direction Metadata",
      "url": "https://www.w3.org/TR/string-meta/",
      "creator": [
        {
          "name": "Addison Phillips"
        },
        {
          "name": "Richard Ishida"
        }
      ],
      "publisher": {
        "name": "W3C"
      }
    },
    {
      "id": "https://tools.ietf.org/html/rfc7946",
      "type": "TechArticle",
      "name": "The GeoJSON Format",
      "url": "https://tools.ietf.org/html/rfc7946",
      "creator": [
        {
          "name": "H. Butler"
        },
        {
          "name": "M. Daly"
        },
        {
          "name": "A. Doyle"
        },
        {
          "name": "S. Gillies"
        },
        {
          "name": "S. Hagen"
        },
        {
          "name": "T. Schaub"
        }
      ],
      "publisher": {
        "name": "IETF"
      }
    },
    {
      "id": "https://jsonapi.org/format/",
      "type": "TechArticle",
      "name": "JSON API",
      "url": "https://jsonapi.org/format/",
      "creator": [
        {
          "name": "Steve Klabnik"
        },
        {
          "name": "Yehuda Katz"
        },
        {
          "name": "Dan Gebhardt"
        },
        {
          "name": "Tyler Kellen"
        },
        {
          "name": "Ethan Resnick"
        }
      ]
    },
    {
      "id": "https://tools.ietf.org/html/draft-rundgren-json-canonicalization-scheme-17",
      "type": "TechArticle",
      "name": "JSON Canonicalization Scheme (JCS)",
      "url": "https://tools.ietf.org/html/draft-rundgren-json-canonicalization-scheme-17",
      "creator": [
        {
          "name": "A. Rundgren"
        },
        {
          "name": "B. Jordan"
        },
        {
          "name": "S. Erdtman"
        }
      ],
      "publisher": {
        "name": "Network Working Group"
      }
    },
    {
      "id": "https://www.w3.org/TR/SRI/",
      "type": "TechArticle",
      "name": "Subresource Integrity",
      "url": "https://www.w3.org/TR/SRI/",
      "creator": [
        {
          "name": "Devdatta Akhawe"
        },
        {
          "name": "Frederik Braun"
        },
        {
          "name": "Francois Marier"
        },
        {
          "name": "Joel Weinberger"
        }
      ],
      "publisher": {
        "name": "W3C"
      }
    },
    {
      "id": "https://www.w3.org/TR/fingerprinting-guidance/",
      "type": "TechArticle",
      "name": "Mitigating Browser Fingerprinting in Web Specifications",
      "url": "https://www.w3.org/TR/fingerprinting-guidance/",
      "creator": [
        {
          "name": "Nick Doty"
        }
      ],
      "publisher": {
        "name": "W3C"
      }
    },
    {
      "id": "https://www.w3.org/TR/rdfa-core/",
      "type": "TechArticle",
      "name": "RDFa Core 1.1 - Third Edition",
      "url": "https://www.w3.org/TR/rdfa-core/",
      "creator": [
        {
          "name": "Ben Adida"
        },
        {
          "name": "Mark Birbeck"
        },
        {
          "name": "Shane McCarron"
        },
        {
          "name": "Ivan Herman"
        }
      ],
      "publisher": {
        "name": "W3C"
      }
    },
    {
      "id": "https://www.w3.org/TR/microdata/",
      "type": "TechArticle",
      "name": "HTML Microdata",
      "url": "https://www.w3.org/TR/microdata/",
      "creator": [
        {
          "name": "Charles 'chaals' (McCathie) Nevile"
        },
        {
          "name": "Dan Brickley"
        },
        {
          "name": "Ian Hickson"
        }
      ],
      "publisher": {
        "name": "W3C"
      }
    },
    {
      "id": "https://www.w3.org/TR/ld-glossary/",
      "type": "TechArticle",
      "name": "Linked Data Glossary",
      "url": "https://www.w3.org/TR/ld-glossary/",
      "creator": [
        {
          "name": "Bernadette Hyland"
        },
        {
          "name": "Ghislain Auguste Atemezing"
        },
        {
          "name": "Michael Pendleton"
        },
        {
          "name": "Biplav Srivastava"
        }
      ],
      "publisher": {
        "name": "W3C"
      }
    },
    {
      "id": "https://tools.ietf.org/html/rfc4122",
      "type": "TechArticle",
      "name": "A Universally Unique IDentifier (UUID) URN Namespace",
      "url": "https://tools.ietf.org/html/rfc4122",
      "creator": [
        {
          "name": "P. Leach"
        },
        {
          "name": "M. Mealling"
        },
        {
          "name": "R. Salz"
        }
      ],
      "publisher": {
        "name": "IETF"
      }
    }
  ]
}</script><style>/*
Adapted from Atom One Light by Daniel Gamage for ReSpec, with better color contrast
Original One Light Syntax theme from https://github.com/atom/one-light-syntax
base:    #fafafa
mono-1:  #383a42
mono-2:  #686b77
mono-3:  #a0a1a7
hue-1:   #0184bb
hue-2:   #4078f2
hue-3:   #a626a4
hue-4:   #50a14f
hue-5:   #e45649
hue-5-2: #c91243
hue-6:   #986801
hue-6-2: #c18401
*/

.hljs {
  display: block;
  overflow-x: auto;
  padding: 0.5em;
  color: #383a42;
  background: #fafafa;
}

.hljs-comment,
.hljs-quote {
  color: #717277;
  font-style: italic;
}

.hljs-doctag,
.hljs-keyword,
.hljs-formula {
  color: #a626a4;
}

.hljs-section,
.hljs-name,
.hljs-selector-tag,
.hljs-deletion,
.hljs-subst {
  color: #ca4706;
  font-weight: bold;
}

.hljs-literal {
  color: #0b76c5;
}

.hljs-string,
.hljs-regexp,
.hljs-addition,
.hljs-attribute,
.hljs-meta-string {
  color: #42803C;
}

.hljs-built_in,
.hljs-class .hljs-title {
  color: #9a6a01;
}

.hljs-attr,
.hljs-variable,
.hljs-template-variable,
.hljs-type,
.hljs-selector-class,
.hljs-selector-attr,
.hljs-selector-pseudo,
.hljs-number {
  color: #986801;
}

.hljs-symbol,
.hljs-bullet,
.hljs-link,
.hljs-meta,
.hljs-selector-id,
.hljs-title {
  color: #336ae3;
}

.hljs-emphasis {
  font-style: italic;
}

.hljs-strong {
  font-weight: bold;
}

.hljs-link {
  text-decoration: underline;
}
</style><style>var {
  position: relative;
  cursor: pointer;
}

var[data-type]::before,
var[data-type]::after {
  position: absolute;
  left: 50%;
  top: -6px;
  opacity: 0;
  transition: opacity 0.4s;
  pointer-events: none;
}

/* the triangle or arrow or caret or whatever */
var[data-type]::before {
  content: "";
  transform: translateX(-50%);
  border-width: 4px 6px 0 6px;
  border-style: solid;
  border-color: transparent;
  border-top-color: #000;
}

/* actual text */
var[data-type]::after {
  content: attr(data-type);
  transform: translateX(-50%) translateY(-100%);
  background: #000;
  text-align: center;
  /* additional styling */
  font-family: "Dank Mono", "Fira Code", monospace;
  font-style: normal;
  padding: 6px;
  border-radius: 3px;
  color: #daca88;
  text-indent: 0;
  font-weight: normal;
}

var[data-type]:hover::after,
var[data-type]:hover::before {
  opacity: 1;
}
</style><script id="initialUserConfig" type="application/json">{
  "localBiblio": {
    "JSON-LD10": {
      "title": "JSON-LD 1.0",
      "href": "https://www.w3.org/TR/2014/REC-json-ld-20140116/",
      "publisher": "W3C",
      "date": "16 January 2014",
      "status": "W3C Recommendation",
      "authors": [
        "Manu Sporny",
        "Gregg Kellogg",
        "Marcus Langhaler"
      ],
      "id": "json-ld10"
    },
    "JSON-LD10-API": {
      "title": "JSON-LD 1.0 Processing Algorithms And API",
      "href": "https://www.w3.org/TR/2014/REC-json-ld-api-20140116/",
      "publisher": "W3C",
      "date": "16 January 2014",
      "status": "W3C Recommendation",
      "authors": [
        "Marcus Langhaler",
        "Gregg Kellogg",
        "Manu Sporny"
      ]
    },
    "JSON-LD10-FRAMING": {
      "title": "JSON-LD Framing 1.0",
      "href": "https://json-ld.org/spec/ED/json-ld-framing/20120830/",
      "publisher": "W3C",
      "date": "30 August 2012",
      "status": "Unofficial Draft",
      "authors": [
        "Manu Sporny",
        "Gregg Kellogg",
        "David Longley",
        "Marcus Langhaler"
      ]
    },
    "IEEE-754-2008": {
      "title": "IEEE 754-2008 Standard for Floating-Point Arithmetic",
      "href": "http://standards.ieee.org/findstds/standard/754-2008.html",
      "publisher": "Institute of Electrical and Electronics Engineers",
      "date": "2008"
    },
    "JSON.API": {
      "title": "JSON API",
      "href": "https://jsonapi.org/format/",
      "authors": [
        "Steve Klabnik",
        "Yehuda Katz",
        "Dan Gebhardt",
        "Tyler Kellen",
        "Ethan Resnick"
      ],
      "status": "unofficial",
      "date": "29 May 2015",
      "id": "json.api"
    },
    "JCS": {
      "title": "JSON Canonicalization Scheme (JCS)",
      "href": "https://tools.ietf.org/html/draft-rundgren-json-canonicalization-scheme-17",
      "authors": [
        "A. Rundgren",
        "B. Jordan",
        "S. Erdtman"
      ],
      "publisher": "Network Working Group",
      "status": "Internet-Draft",
      "date": "20 January 2020",
      "id": "jcs"
    },
    "RFC7231": {
      "title": "Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content",
      "href": "https://tools.ietf.org/html/rfc7231",
      "authors": [
        "R. Fielding, Ed.",
        "J. Reschke, Ed"
      ],
      "pubisher": "IETF",
      "status": "Proposed Standard",
      "date": "June 2014",
      "id": "rfc7231"
    },
    "RFC8288": {
      "title": "Web Linking",
      "href": "https://tools.ietf.org/html/rfc8288",
      "authors": [
        "M. Nottingham"
      ],
      "pubisher": "IETF",
      "status": "Proposed Standard",
      "date": "October 2017",
      "id": "rfc8288"
    }
  },
  "specStatus": "CR",
  "copyrightStart": "2010",
  "shortName": "json-ld11",
  "subtitle": "A JSON-based Serialization for Linked Data",
  "prevVersion": "https://www.w3.org/TR/2019/CR-json-ld11-20200305/",
  "previousPublishDate": "2020-03-05",
  "previousMaturity": "CR",
  "prevRecURI": "https://www.w3.org/TR/2014/REC-json-ld-20140116/",
  "github": {
    "repoURL": "https://github.com/w3c/json-ld-syntax/",
    "branch": "master"
  },
  "edDraftURI": "https://w3c.github.io/json-ld-syntax/",
  "testSuiteURI": "https://w3c.github.io/json-ld-api/tests/",
  "implementationReportURI": "https://w3c.github.io/json-ld-api/reports/",
  "crEnd": "2020-04-03",
  "includePermalinks": true,
  "doJsonLd": true,
  "pluralize": true,
  "xref": [
    "json-ld11",
    "json-ld11-api",
    "json-ld11-framing"
  ],
  "editors": [
    {
      "name": "Gregg Kellogg",
      "url": "https://greggkellogg.net/",
      "w3cid": "44770",
      "note": "v1.0 and v1.1"
    },
    {
      "name": "Pierre-Antoine Champin",
      "url": "http://champin.net/",
      "company": "LIRIS - Université de Lyon",
      "companyURL": "https://liris.cnrs.fr/",
      "w3cid": "42931",
      "note": "v1.1"
    },
    {
      "name": "Dave Longley",
      "url": "https://digitalbazaar.com/author/dlongley/",
      "w3cid": "48025",
      "company": "Digital Bazaar",
      "companyURL": "https://digitalbazaar.com/",
      "note": "v1.1"
    }
  ],
  "formerEditors": [
    {
      "name": "Manu Sporny",
      "url": "http://manu.sporny.org/",
      "company": "Digital Bazaar",
      "companyURL": "https://digitalbazaar.com/",
      "note": "v1.0"
    },
    {
      "name": "Markus Lanthaler",
      "url": "https://www.markus-lanthaler.com/",
      "company": "Google",
      "companyURL": "https://www.google.com/",
      "note": "v1.0"
    }
  ],
  "authors": [
    {
      "name": "Manu Sporny",
      "url": "http://manu.sporny.org/",
      "company": "Digital Bazaar",
      "companyURL": "https://digitalbazaar.com/",
      "note": "v1.0"
    },
    {
      "name": "Dave Longley",
      "url": "https://digitalbazaar.com/author/dlongley/",
      "company": "Digital Bazaar",
      "companyURL": "https://digitalbazaar.com/",
      "note": "v1.0 and v1.1"
    },
    {
      "name": "Gregg Kellogg",
      "url": "https://greggkellogg.net/",
      "w3cid": "44770",
      "note": "v1.0 and v1.1"
    },
    {
      "name": "Markus Lanthaler",
      "url": "https://www.markus-lanthaler.com/",
      "company": "Google",
      "companyURL": "https://www.google.com/",
      "note": "v1.0"
    },
    {
      "name": "Pierre-Antoine Champin",
      "url": "http://champin.net/",
      "company": "LIRIS - Université de Lyon",
      "companyURL": "https://liris.cnrs.fr/",
      "w3cid": "42931",
      "note": "v1.1"
    },
    {
      "name": "Niklas Lindström",
      "url": "http://neverspace.net/",
      "note": "v1.0"
    }
  ],
  "wg": "JSON-LD Working Group",
  "wgURI": "https://www.w3.org/2018/json-ld-wg/",
  "wgPublicList": "public-json-ld-wg",
  "wgPatentURI": "https://www.w3.org/2004/01/pp-impl/107714/status",
  "processVersion": 2018,
  "maxTocLevel": 4,
  "publishDate": "2020-03-16",
  "publishISODate": "2020-03-16T00:00:00.000Z",
  "generatedSubtitle": "Candidate Recommendation 16 March 2020"
}</script><link rel="stylesheet" href="https://www.w3.org/StyleSheets/TR/2016/W3C-CR"></head>

<body class="h-entry" data-cite="json-ld11 json-ld11-api json-ld11-framing"><div class="head">
      <a class="logo" href="https://www.w3.org/"><img alt="W3C" width="72" height="48" src="https://www.w3.org/StyleSheets/TR/2016/logos/W3C"></a> <h1 id="title" class="title">JSON-LD 1.1</h1>
      <h2 id="subtitle" class="subtitle">A JSON-based Serialization for Linked Data</h2>
      <h2>
        W3C Candidate Recommendation
        <time class="dt-published" datetime="2020-03-16">16 March 2020</time>
      </h2>
      <dl>
        <dt>This version:</dt><dd>
                <a class="u-url" href="https://www.w3.org/TR/2020/CR-json-ld11-20200316/">https://www.w3.org/TR/2020/CR-json-ld11-20200316/</a>
              </dd><dt>Latest published version:</dt><dd>
                <a href="https://www.w3.org/TR/json-ld11/">https://www.w3.org/TR/json-ld11/</a>
              </dd>
        <dt>Latest editor's draft:</dt><dd><a href="https://w3c.github.io/json-ld-syntax/">https://w3c.github.io/json-ld-syntax/</a></dd>
        <dt>Test suite:</dt><dd><a href="https://w3c.github.io/json-ld-api/tests/">https://w3c.github.io/json-ld-api/tests/</a></dd>
        <dt>Implementation report:</dt><dd>
                <a href="https://w3c.github.io/json-ld-api/reports/">https://w3c.github.io/json-ld-api/reports/</a>
              </dd>
        
        <dt>Previous version:</dt><dd><a href="https://www.w3.org/TR/2020/CR-json-ld11-20200305/">https://www.w3.org/TR/2020/CR-json-ld11-20200305/</a></dd>
        <dt>Latest Recommendation:</dt><dd><a href="https://www.w3.org/TR/2014/REC-json-ld-20140116/">https://www.w3.org/TR/2014/REC-json-ld-20140116/</a></dd>
        <dt>Editors:</dt>
        <dd class="p-author h-card vcard" data-editor-id="44770"><a class="u-url url p-name fn" href="https://greggkellogg.net/">Gregg Kellogg</a> (v1.0 and v1.1)</dd><dd class="p-author h-card vcard" data-editor-id="42931"><a class="u-url url p-name fn" href="http://champin.net/">Pierre-Antoine Champin</a>
            (<a class="p-org org h-org h-card" href="https://liris.cnrs.fr/">LIRIS - Université de Lyon</a>)
           (v1.1)</dd><dd class="p-author h-card vcard" data-editor-id="48025"><a class="u-url url p-name fn" href="https://digitalbazaar.com/author/dlongley/">Dave Longley</a>
            (<a class="p-org org h-org h-card" href="https://digitalbazaar.com/">Digital Bazaar</a>)
           (v1.1)</dd>
        <dt>
                Former editors:
              </dt><dd class="p-author h-card vcard"><a class="u-url url p-name fn" href="http://manu.sporny.org/">Manu Sporny</a>
            (<a class="p-org org h-org h-card" href="https://digitalbazaar.com/">Digital Bazaar</a>)
           (v1.0)</dd><dd class="p-author h-card vcard"><a class="u-url url p-name fn" href="https://www.markus-lanthaler.com/">Markus Lanthaler</a>
            (<a class="p-org org h-org h-card" href="https://www.google.com/">Google</a>)
           (v1.0)</dd>
        <dt>
                Authors:
              </dt><dd class="p-author h-card vcard"><a class="u-url url p-name fn" href="http://manu.sporny.org/">Manu Sporny</a>
            (<a class="p-org org h-org h-card" href="https://digitalbazaar.com/">Digital Bazaar</a>)
           (v1.0)</dd><dd class="p-author h-card vcard"><a class="u-url url p-name fn" href="https://digitalbazaar.com/author/dlongley/">Dave Longley</a>
            (<a class="p-org org h-org h-card" href="https://digitalbazaar.com/">Digital Bazaar</a>)
           (v1.0 and v1.1)</dd><dd class="p-author h-card vcard" data-editor-id="44770"><a class="u-url url p-name fn" href="https://greggkellogg.net/">Gregg Kellogg</a> (v1.0 and v1.1)</dd><dd class="p-author h-card vcard"><a class="u-url url p-name fn" href="https://www.markus-lanthaler.com/">Markus Lanthaler</a>
            (<a class="p-org org h-org h-card" href="https://www.google.com/">Google</a>)
           (v1.0)</dd><dd class="p-author h-card vcard" data-editor-id="42931"><a class="u-url url p-name fn" href="http://champin.net/">Pierre-Antoine Champin</a>
            (<a class="p-org org h-org h-card" href="https://liris.cnrs.fr/">LIRIS - Université de Lyon</a>)
           (v1.1)</dd><dd class="p-author h-card vcard"><a class="u-url url p-name fn" href="http://neverspace.net/">Niklas Lindström</a> (v1.0)</dd>
        <dt>Participate:</dt><dd>
      <a href="https://github.com/w3c/json-ld-syntax/">GitHub w3c/json-ld-syntax</a>
    </dd><dd>
      <a href="https://github.com/w3c/json-ld-syntax/issues/">File a bug</a>
    </dd><dd>
      <a href="https://github.com/w3c/json-ld-syntax/commits/master">Commit history</a>
    </dd><dd>
      <a href="https://github.com/w3c/json-ld-syntax/pulls/">Pull requests</a>
    </dd>
      </dl>
      
      
      
      <p class="copyright">
      <a href="https://www.w3.org/Consortium/Legal/ipr-notice#Copyright">Copyright</a>
      ©
      2010-2020
      
      <a href="https://www.w3.org/"><abbr title="World Wide Web Consortium">W3C</abbr></a><sup>®</sup> (<a href="https://www.csail.mit.edu/"><abbr title="Massachusetts Institute of Technology">MIT</abbr></a>,
      <a href="https://www.ercim.eu/"><abbr title="European Research Consortium for Informatics and Mathematics">ERCIM</abbr></a>, <a href="https://www.keio.ac.jp/">Keio</a>,
      <a href="https://ev.buaa.edu.cn/">Beihang</a>). 
      W3C <a href="https://www.w3.org/Consortium/Legal/ipr-notice#Legal_Disclaimer">liability</a>,
      <a href="https://www.w3.org/Consortium/Legal/ipr-notice#W3C_Trademarks">trademark</a> and <a rel="license" href="https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document">permissive document license</a> rules
      apply.
    </p>
      <hr title="Separator for header">
    </div>
<section id="abstract" class="introductory"><h2>Abstract</h2>
  <p>JSON is a useful data serialization and messaging format.
    This specification defines JSON-LD 1.1, a JSON-based format to serialize
    Linked Data. The syntax is designed to easily integrate into deployed
    systems that already use JSON, and provides a smooth upgrade path from
    JSON to JSON-LD.
    It is primarily intended to be a way to use Linked Data in Web-based
    programming environments, to build interoperable Web services, and to
    store Linked Data in JSON-based storage engines.</p>

  <p>This specification describes a superset of the features defined in
    <cite><a href="https://www.w3.org/TR/2014/REC-json-ld-20140116/">JSON-LD 1.0</a></cite> [<cite><a class="bibref" data-link-type="biblio" href="#bib-json-ld10" title="JSON-LD 1.0">JSON-LD10</a></cite>]
    and, except where noted,
    documents created using the 1.0 version of this specification remain compatible with JSON-LD 1.1.</p>
</section>

<section id="sotd" class="introductory"><h2>Status of This Document</h2><p><em>This section describes the status of this document at the time of its publication. Other documents may supersede this document. A list of current <abbr title="World Wide Web Consortium">W3C</abbr> publications and the latest revision of this technical report can be found in the <a href="https://www.w3.org/TR/"><abbr title="World Wide Web Consortium">W3C</abbr> technical reports index</a> at https://www.w3.org/TR/.</em></p>
  <p>This document has been developed by the
    <a href="https://www.w3.org/2018/json-ld-wg/">JSON-LD Working Group</a> and was derived from the <a href="https://www.w3.org/community/json-ld/">JSON-LD Community Group's</a> <a href="https://www.w3.org/2018/jsonld-cg-reports/json-ld/">Final Report</a>.</p>

  <p>There is a
    <a href="https://json-ld.org/playground/">live JSON-LD playground</a> that is capable
    of demonstrating the features described in this document.</p>

  <p>
      This document was published by the <a href="https://www.w3.org/2018/json-ld-wg/">JSON-LD Working Group</a> as a
      Candidate Recommendation.
      This document is intended to become a <abbr title="World Wide Web Consortium">W3C</abbr> Recommendation.
    </p><p>
      <a href="https://github.com/w3c/json-ld-syntax/issues/">GitHub Issues</a> are preferred for
            discussion of this specification.
          
      Alternatively, you can send comments to our mailing list.
            Please send them to
            <a href="mailto:public-json-ld-wg@w3.org">public-json-ld-wg@w3.org</a>
            (<a href="https://lists.w3.org/Archives/Public/public-json-ld-wg/">archives</a>).
          
    </p><p>
                              
                  <abbr title="World Wide Web Consortium">W3C</abbr> publishes a Candidate Recommendation to indicate that the document is believed to be
                  stable and to encourage implementation by the developer community. This Candidate
                  Recommendation is expected to advance to Proposed Recommendation no earlier than
                  03 April 2020.
                
                              
                              
                            </p><p>
      Please see the Working Group's
      <a href="https://w3c.github.io/json-ld-api/reports/">implementation report</a>.
    </p><p>
      Publication as a Candidate Recommendation does not imply endorsement by the
      <abbr title="World Wide Web Consortium">W3C</abbr> Membership. This is a draft document and may be updated, replaced or
      obsoleted by other documents at any time. It is inappropriate to cite this
      document as other than work in progress.
    </p><p>
      
        This document was produced by a group
        operating under the
        <a href="https://www.w3.org/Consortium/Patent-Policy/"><abbr title="World Wide Web Consortium">W3C</abbr> Patent Policy</a>.
       
      
                  <abbr title="World Wide Web Consortium">W3C</abbr> maintains a
                  <a rel="disclosure" href="https://www.w3.org/2004/01/pp-impl/107714/status">public list of any patent disclosures</a>
            made in connection with the deliverables of
            the group; that page also includes
            instructions for disclosing a patent. An individual who has actual
            knowledge of a patent which the individual believes contains
            <a href="https://www.w3.org/Consortium/Patent-Policy/#def-essential">Essential Claim(s)</a>
            must disclose the information in accordance with
            <a href="https://www.w3.org/Consortium/Patent-Policy/#sec-Disclosure">section 6 of the <abbr title="World Wide Web Consortium">W3C</abbr> Patent Policy</a>.
          
      
    </p><p>
                  This document is governed by the
                  <a id="w3c_process_revision" href="https://www.w3.org/2019/Process-20190301/">1 March 2019 <abbr title="World Wide Web Consortium">W3C</abbr> Process Document</a>.
                </p><section>
    <h3 id="set-of-documents">Set of Documents<a class="self-link" aria-label="§" href="#set-of-documents"></a></h3>
    <p>This document is one of three JSON-LD 1.1 Recommendations produced by the
      <a href="https://www.w3.org/2018/json-ld-wg/">JSON-LD Working Group</a>:</p>

    <ul>
      <li><a href="">JSON-LD 1.1</a></li>
      <li><cite><a href="https://www.w3.org/TR/json-ld11-api/">JSON-LD 1.1 Processing Algorithms and API</a></cite></li>
      <li><cite><a href="https://www.w3.org/TR/json-ld11-framing/">JSON-LD 1.1 Framing</a></cite></li>
    </ul>
  </section>
</section><nav id="toc"><h2 class="introductory" id="table-of-contents">Table of Contents</h2><ol class="toc"><li class="tocline"><a class="tocxref" href="#introduction"><bdi class="secno">1. </bdi>Introduction</a><ol class="toc"><li class="tocline"><a class="tocxref" href="#how-to-read-this-document"><bdi class="secno">1.1 </bdi>How to Read this Document</a></li><li class="tocline"><a class="tocxref" href="#contributing"><bdi class="secno">1.2 </bdi>Contributing</a></li><li class="tocline"><a class="tocxref" href="#typographical-conventions"><bdi class="secno">1.3 </bdi>Typographical conventions</a></li><li class="tocline"><a class="tocxref" href="#terminology"><bdi class="secno">1.4 </bdi>Terminology</a></li><li class="tocline"><a class="tocxref" href="#design-goals-and-rationale"><bdi class="secno">1.5 </bdi>Design Goals and Rationale</a></li><li class="tocline"><a class="tocxref" href="#data-model-overview"><bdi class="secno">1.6 </bdi>Data Model Overview</a></li><li class="tocline"><a class="tocxref" href="#syntax-tokens-and-keywords"><bdi class="secno">1.7 </bdi>Syntax Tokens and Keywords</a></li></ol></li><li class="tocline"><a class="tocxref" href="#conformance"><bdi class="secno">2. </bdi>Conformance</a></li><li class="tocline"><a class="tocxref" href="#basic-concepts"><bdi class="secno">3. </bdi>Basic Concepts</a><ol class="toc"><li class="tocline"><a class="tocxref" href="#the-context"><bdi class="secno">3.1 </bdi>The Context</a></li><li class="tocline"><a class="tocxref" href="#iris"><bdi class="secno">3.2 </bdi>IRIs</a></li><li class="tocline"><a class="tocxref" href="#node-identifiers"><bdi class="secno">3.3 </bdi>Node Identifiers</a></li><li class="tocline"><a class="tocxref" href="#uses-of-json-objects"><bdi class="secno">3.4 </bdi>Uses of JSON Objects</a></li><li class="tocline"><a class="tocxref" href="#specifying-the-type"><bdi class="secno">3.5 </bdi>Specifying the Type</a></li></ol></li><li class="tocline"><a class="tocxref" href="#advanced-concepts"><bdi class="secno">4. </bdi>Advanced Concepts</a><ol class="toc"><li class="tocline"><a class="tocxref" href="#advanced-context-usage"><bdi class="secno">4.1 </bdi>Advanced Context Usage</a><ol class="toc"><li class="tocline"><a class="tocxref" href="#json-ld-1-1-processing-mode"><bdi class="secno">4.1.1 </bdi>JSON-LD 1.1 Processing Mode</a></li><li class="tocline"><a class="tocxref" href="#default-vocabulary"><bdi class="secno">4.1.2 </bdi>Default Vocabulary</a></li><li class="tocline"><a class="tocxref" href="#base-iri"><bdi class="secno">4.1.3 </bdi>Base <abbr title="Internationalized Resource Identifier">IRI</abbr></a></li><li class="tocline"><a class="tocxref" href="#document-relative-vocabulary-mapping"><bdi class="secno">4.1.4 </bdi>Using the Document Base for the Default Vocabulary</a></li><li class="tocline"><a class="tocxref" href="#compact-iris"><bdi class="secno">4.1.5 </bdi>Compact IRIs</a></li><li class="tocline"><a class="tocxref" href="#aliasing-keywords"><bdi class="secno">4.1.6 </bdi>Aliasing Keywords</a></li><li class="tocline"><a class="tocxref" href="#iri-expansion-within-a-context"><bdi class="secno">4.1.7 </bdi><abbr title="Internationalized Resource Identifier">IRI</abbr> Expansion within a Context</a></li><li class="tocline"><a class="tocxref" href="#scoped-contexts"><bdi class="secno">4.1.8 </bdi>Scoped Contexts</a></li><li class="tocline"><a class="tocxref" href="#context-propagation"><bdi class="secno">4.1.9 </bdi>Context Propagation</a></li><li class="tocline"><a class="tocxref" href="#imported-contexts"><bdi class="secno">4.1.10 </bdi>Imported Contexts</a></li><li class="tocline"><a class="tocxref" href="#protected-term-definitions"><bdi class="secno">4.1.11 </bdi>Protected Term Definitions</a></li></ol></li><li class="tocline"><a class="tocxref" href="#describing-values"><bdi class="secno">4.2 </bdi>Describing Values</a><ol class="toc"><li class="tocline"><a class="tocxref" href="#typed-values"><bdi class="secno">4.2.1 </bdi>Typed Values</a></li><li class="tocline"><a class="tocxref" href="#json-literals"><bdi class="secno">4.2.2 </bdi>JSON Literals</a></li><li class="tocline"><a class="tocxref" href="#type-coercion"><bdi class="secno">4.2.3 </bdi>Type Coercion</a></li><li class="tocline"><a class="tocxref" href="#string-internationalization"><bdi class="secno">4.2.4 </bdi>String Internationalization</a><ol class="toc"><li class="tocline"><a class="tocxref" href="#base-direction"><bdi class="secno">4.2.4.1 </bdi>Base Direction</a></li></ol></li></ol></li><li class="tocline"><a class="tocxref" href="#sets-and-lists"><bdi class="secno">4.3 </bdi>Value Ordering</a><ol class="toc"><li class="tocline"><a class="tocxref" href="#lists"><bdi class="secno">4.3.1 </bdi>Lists</a></li><li class="tocline"><a class="tocxref" href="#sets"><bdi class="secno">4.3.2 </bdi>Sets</a></li><li class="tocline"><a class="tocxref" href="#using-set-with-type"><bdi class="secno">4.3.3 </bdi>Using <code>@set</code> with <code>@type</code></a></li></ol></li><li class="tocline"><a class="tocxref" href="#nested-properties"><bdi class="secno">4.4 </bdi>Nested Properties</a></li><li class="tocline"><a class="tocxref" href="#embedding"><bdi class="secno">4.5 </bdi>Embedding</a><ol class="toc"><li class="tocline"><a class="tocxref" href="#identifying-blank-nodes"><bdi class="secno">4.5.1 </bdi>Identifying Blank Nodes</a></li></ol></li><li class="tocline"><a class="tocxref" href="#indexed-values"><bdi class="secno">4.6 </bdi>Indexed Values</a><ol class="toc"><li class="tocline"><a class="tocxref" href="#data-indexing"><bdi class="secno">4.6.1 </bdi>Data Indexing</a><ol class="toc"><li class="tocline"><a class="tocxref" href="#property-based-data-indexing"><bdi class="secno">4.6.1.1 </bdi>Property-based data indexing</a></li></ol></li><li class="tocline"><a class="tocxref" href="#language-indexing"><bdi class="secno">4.6.2 </bdi>Language Indexing</a></li><li class="tocline"><a class="tocxref" href="#node-identifier-indexing"><bdi class="secno">4.6.3 </bdi>Node Identifier Indexing</a></li><li class="tocline"><a class="tocxref" href="#node-type-indexing"><bdi class="secno">4.6.4 </bdi>Node Type Indexing</a></li></ol></li><li class="tocline"><a class="tocxref" href="#included-nodes"><bdi class="secno">4.7 </bdi>Included Nodes</a></li><li class="tocline"><a class="tocxref" href="#reverse-properties"><bdi class="secno">4.8 </bdi>Reverse Properties</a></li><li class="tocline"><a class="tocxref" href="#named-graphs"><bdi class="secno">4.9 </bdi>Named Graphs</a><ol class="toc"><li class="tocline"><a class="tocxref" href="#graph-containers"><bdi class="secno">4.9.1 </bdi>Graph Containers</a></li><li class="tocline"><a class="tocxref" href="#named-graph-data-indexing"><bdi class="secno">4.9.2 </bdi>Named Graph Data Indexing</a></li><li class="tocline"><a class="tocxref" href="#named-graph-indexing"><bdi class="secno">4.9.3 </bdi>Named Graph Indexing</a></li></ol></li><li class="tocline"><a class="tocxref" href="#loading-documents"><bdi class="secno">4.10 </bdi>Loading Documents</a></li></ol></li><li class="tocline"><a class="tocxref" href="#forms-of-json-ld"><bdi class="secno">5. </bdi>Forms of JSON-LD</a><ol class="toc"><li class="tocline"><a class="tocxref" href="#expanded-document-form"><bdi class="secno">5.1 </bdi>Expanded Document Form</a></li><li class="tocline"><a class="tocxref" href="#compacted-document-form"><bdi class="secno">5.2 </bdi>Compacted Document Form</a><ol class="toc"><li class="tocline"><a class="tocxref" href="#shortening-iris"><bdi class="secno">5.2.1 </bdi>Shortening IRIs</a></li><li class="tocline"><a class="tocxref" href="#representing-values-as-strings"><bdi class="secno">5.2.2 </bdi>Representing Values as Strings</a></li><li class="tocline"><a class="tocxref" href="#representing-lists-as-arrays"><bdi class="secno">5.2.3 </bdi>Representing Lists as Arrays</a></li><li class="tocline"><a class="tocxref" href="#reversing-node-relationships"><bdi class="secno">5.2.4 </bdi>Reversing Node Relationships</a></li><li class="tocline"><a class="tocxref" href="#indexing-values"><bdi class="secno">5.2.5 </bdi>Indexing Values</a></li><li class="tocline"><a class="tocxref" href="#normalizing-values-as-objects"><bdi class="secno">5.2.6 </bdi>Normalizing Values as Objects</a></li><li class="tocline"><a class="tocxref" href="#representing-singular-values-as-arrays"><bdi class="secno">5.2.7 </bdi>Representing Singular Values as Arrays</a></li><li class="tocline"><a class="tocxref" href="#term-selection"><bdi class="secno">5.2.8 </bdi>Term Selection</a></li></ol></li><li class="tocline"><a class="tocxref" href="#flattened-document-form"><bdi class="secno">5.3 </bdi>Flattened Document Form</a></li><li class="tocline"><a class="tocxref" href="#framed-document-form"><bdi class="secno">5.4 </bdi>Framed Document Form</a></li></ol></li><li class="tocline"><a class="tocxref" href="#modifying-behavior-with-link-relationships"><bdi class="secno">6. </bdi>Modifying Behavior with Link Relationships</a><ol class="toc"><li class="tocline"><a class="tocxref" href="#interpreting-json-as-json-ld"><bdi class="secno">6.1 </bdi>Interpreting JSON as JSON-LD</a></li><li class="tocline"><a class="tocxref" href="#alternate-document-location"><bdi class="secno">6.2 </bdi>Alternate Document Location</a></li></ol></li><li class="tocline"><a class="tocxref" href="#embedding-json-ld-in-html-documents"><bdi class="secno">7. </bdi>Embedding JSON-LD in HTML Documents</a><ol class="toc"><li class="tocline"><a class="tocxref" href="#inheriting-base-iri-from-html-s-base-element"><bdi class="secno">7.1 </bdi>Inheriting base <abbr title="Internationalized Resource Identifier">IRI</abbr> from HTML's <code>base</code> element</a></li><li class="tocline"><a class="tocxref" href="#restrictions-for-contents-of-json-ld-script-elements"><bdi class="secno">7.2 </bdi>Restrictions for contents of JSON-LD <code>script</code> elements</a></li><li class="tocline"><a class="tocxref" href="#locating-a-specific-json-ld-script-element"><bdi class="secno">7.3 </bdi>Locating a Specific JSON-LD Script Element</a></li></ol></li><li class="tocline"><a class="tocxref" href="#data-model"><bdi class="secno">8. </bdi>Data Model</a></li><li class="tocline"><a class="tocxref" href="#json-ld-grammar"><bdi class="secno">9. </bdi>JSON-LD Grammar</a><ol class="toc"><li class="tocline"><a class="tocxref" href="#terms"><bdi class="secno">9.1 </bdi>Terms</a></li><li class="tocline"><a class="tocxref" href="#node-objects"><bdi class="secno">9.2 </bdi>Node Objects</a></li><li class="tocline"><a class="tocxref" href="#frame-objects"><bdi class="secno">9.3 </bdi>Frame Objects</a></li><li class="tocline"><a class="tocxref" href="#graph-objects"><bdi class="secno">9.4 </bdi>Graph Objects</a></li><li class="tocline"><a class="tocxref" href="#value-objects"><bdi class="secno">9.5 </bdi>Value Objects</a></li><li class="tocline"><a class="tocxref" href="#value-patterns"><bdi class="secno">9.6 </bdi>Value Patterns</a></li><li class="tocline"><a class="tocxref" href="#lists-and-sets"><bdi class="secno">9.7 </bdi>Lists and Sets</a></li><li class="tocline"><a class="tocxref" href="#language-maps"><bdi class="secno">9.8 </bdi>Language Maps</a></li><li class="tocline"><a class="tocxref" href="#index-maps"><bdi class="secno">9.9 </bdi>Index Maps</a></li><li class="tocline"><a class="tocxref" href="#property-based-index-maps"><bdi class="secno">9.10 </bdi>Property-based Index Maps</a></li><li class="tocline"><a class="tocxref" href="#id-maps"><bdi class="secno">9.11 </bdi>Id Maps</a></li><li class="tocline"><a class="tocxref" href="#type-maps"><bdi class="secno">9.12 </bdi>Type Maps</a></li><li class="tocline"><a class="tocxref" href="#included-blocks"><bdi class="secno">9.13 </bdi>Included Blocks</a></li><li class="tocline"><a class="tocxref" href="#property-nesting"><bdi class="secno">9.14 </bdi>Property Nesting</a></li><li class="tocline"><a class="tocxref" href="#context-definitions"><bdi class="secno">9.15 </bdi>Context Definitions</a><ol class="toc"><li class="tocline"><a class="tocxref" href="#expanded-term-definition"><bdi class="secno">9.15.1 </bdi>Expanded term definition</a></li></ol></li><li class="tocline"><a class="tocxref" href="#keywords"><bdi class="secno">9.16 </bdi>Keywords</a></li></ol></li><li class="tocline"><a class="tocxref" href="#relationship-to-rdf"><bdi class="secno">10. </bdi>Relationship to RDF</a><ol class="toc"><li class="tocline"><a class="tocxref" href="#serializing-deserializing-rdf"><bdi class="secno">10.1 </bdi>Serializing/Deserializing RDF</a></li><li class="tocline"><a class="tocxref" href="#the-rdf-json-datatype"><bdi class="secno">10.2 </bdi>The <code>rdf:JSON</code> Datatype</a></li><li class="tocline"><a class="tocxref" href="#the-i18n-namespace"><bdi class="secno">10.3 </bdi>The <code>i18n</code> Namespace</a></li><li class="tocline"><a class="tocxref" href="#the-rdf-compoundliteral-class-and-the-rdf-language-and-rdf-direction-properties"><bdi class="secno">10.4 </bdi>The <code>rdf:CompoundLiteral</code> class and the <code>rdf:language</code> and <code>rdf:direction</code> properties</a></li></ol></li><li class="tocline"><a class="tocxref" href="#security"><bdi class="secno">11. </bdi>Security Considerations</a></li><li class="tocline"><a class="tocxref" href="#privacy"><bdi class="secno">12. </bdi>Privacy Considerations</a></li><li class="tocline"><a class="tocxref" href="#internationalization"><bdi class="secno">13. </bdi>Internationalization Considerations</a></li><li class="tocline"><a class="tocxref" href="#image-descriptions"><bdi class="secno">A. </bdi>Image Descriptions</a><ol class="toc"><li class="tocline"><a class="tocxref" href="#fig-linked-data-graph-descr"><bdi class="secno">A.1 </bdi>Linked Data Dataset</a></li></ol></li><li class="tocline"><a class="tocxref" href="#relationship-to-other-linked-data-formats"><bdi class="secno">B. </bdi>Relationship to Other Linked Data Formats</a><ol class="toc"><li class="tocline"><a class="tocxref" href="#turtle"><bdi class="secno">B.1 </bdi>Turtle</a><ol class="toc"><li class="tocline"><a class="tocxref" href="#prefix-definitions"><bdi class="secno">B.1.1 </bdi>Prefix definitions</a></li><li class="tocline"><a class="tocxref" href="#embedding-0"><bdi class="secno">B.1.2 </bdi>Embedding</a></li><li class="tocline"><a class="tocxref" href="#conversion-of-native-data-types"><bdi class="secno">B.1.3 </bdi>Conversion of native data types</a></li><li class="tocline"><a class="tocxref" href="#lists-0"><bdi class="secno">B.1.4 </bdi>Lists</a></li></ol></li><li class="tocline"><a class="tocxref" href="#rdfa"><bdi class="secno">B.2 </bdi>RDFa</a></li><li class="tocline"><a class="tocxref" href="#microdata"><bdi class="secno">B.3 </bdi>Microdata</a></li></ol></li><li class="tocline"><a class="tocxref" href="#iana-considerations"><bdi class="secno">C. </bdi>IANA Considerations</a><ol class="toc"><li class="tocline"><a class="tocxref" href="#iana-examples"><bdi class="secno">C.1 </bdi>Examples</a></li></ol></li><li class="tocline"><a class="tocxref" href="#open-issues"><bdi class="secno">D. </bdi>Open Issues</a></li><li class="tocline"><a class="tocxref" href="#changes-from-10"><bdi class="secno">E. </bdi>Changes since 1.0 Recommendation of 16 January 2014</a></li><li class="tocline"><a class="tocxref" href="#changes-from-cg"><bdi class="secno">F. </bdi>Changes since JSON-LD Community Group Final Report</a></li><li class="tocline"><a class="tocxref" href="#changes-from-cr"><bdi class="secno">G. </bdi>Changes since Candidate Release of 12 December 2019</a></li><li class="tocline"><a class="tocxref" href="#ack"><bdi class="secno">H. </bdi>Acknowledgements</a></li><li class="tocline"><a class="tocxref" href="#references"><bdi class="secno">I. </bdi>References</a><ol class="toc"><li class="tocline"><a class="tocxref" href="#normative-references"><bdi class="secno">I.1 </bdi>Normative references</a></li><li class="tocline"><a class="tocxref" href="#informative-references"><bdi class="secno">I.2 </bdi>Informative references</a></li></ol></li></ol></nav>

<section class="informative" id="introduction">
  <h2 id="x1-introduction"><bdi class="secno">1. </bdi>Introduction<a class="self-link" aria-label="§" href="#introduction"></a></h2><p><em>This section is non-normative.</em></p>

  <p>Linked Data [<cite><a class="bibref" data-link-type="biblio" href="#bib-linked-data" title="Linked Data Design Issues">LINKED-DATA</a></cite>] is a way to create a network of
   standards-based machine interpretable data across different documents and
   Web sites. It allows an application to start at one piece of Linked Data,
   and follow embedded links to other pieces of Linked Data that are hosted on
   different sites across the Web.</p>

  <p>JSON-LD is a lightweight syntax to serialize Linked Data in
    JSON [<cite><a class="bibref" data-link-type="biblio" href="#bib-rfc8259" title="The JavaScript Object Notation (JSON) Data Interchange Format">RFC8259</a></cite>]. Its design allows existing JSON to be interpreted as
    Linked Data with minimal changes. JSON-LD is primarily intended to be a
    way to use Linked Data in Web-based programming environments, to build
    interoperable Web services, and to store Linked Data in JSON-based storage engines. Since
    JSON-LD is 100% compatible with JSON, the large number of JSON parsers and libraries
    available today can be reused. In addition to all the features JSON provides,
    JSON-LD introduces:</p>

  <ul>
    <li>a universal identifier mechanism for <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc8259#section-4">JSON objects</a>
      via the use of <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">IRIs</a>,</li>
    <li>a way to disambiguate keys shared among different JSON documents by mapping
      them to <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">IRIs</a> via a <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a>,</li>
    <li>a mechanism in which a value in a <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc8259#section-4">JSON object</a> may refer
      to a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-resource">resource</a> on a different site on the Web,</li>
    <li>the ability to annotate <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">strings</a> with their language,</li>
    <li>a way to associate datatypes with values such as dates and times,</li>
    <li>and a facility to express one or more directed graphs, such as a social
      network, in a single document.</li>
  </ul>

  <p>JSON-LD is designed to be usable directly as JSON, with no knowledge of RDF
   [<cite><a class="bibref" data-link-type="biblio" href="#bib-rdf11-concepts" title="RDF 1.1 Concepts and Abstract Syntax">RDF11-CONCEPTS</a></cite>]. It is also designed to be usable as RDF
   in conjunction with other Linked Data technologies like SPARQL [<cite><a class="bibref" data-link-type="biblio" href="#bib-sparql11-overview" title="SPARQL 1.1 Overview">SPARQL11-OVERVIEW</a></cite>].
   Developers who
   require any of the facilities listed above or need to serialize an <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-graph">RDF graph</a>
   or <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-dataset">Dataset</a> in a JSON-based syntax will find JSON-LD of interest. People
   intending to use JSON-LD with RDF tools will find it can be used as another
   RDF syntax, as with [<cite><a class="bibref" data-link-type="biblio" href="#bib-turtle" title="RDF 1.1 Turtle">Turtle</a></cite>] and [<cite><a class="bibref" data-link-type="biblio" href="#bib-trig" title="RDF 1.1 TriG">TriG</a></cite>]. Complete details of how JSON-LD relates
   to RDF are in section <a href="#relationship-to-rdf" class="sec-ref">§&nbsp;<bdi class="secno">10. </bdi>Relationship to RDF</a>.
  </p>

  <p>The syntax is designed to not disturb already
   deployed systems running on JSON, but provide a smooth upgrade path from
   JSON to JSON-LD. Since the shape of such data varies wildly, JSON-LD
   features mechanisms to reshape documents into a deterministic structure
   which simplifies their processing.</p>

  <section class="informative" id="how-to-read-this-document">
    <h3 id="x1-1-how-to-read-this-document"><bdi class="secno">1.1 </bdi>How to Read this Document<a class="self-link" aria-label="§" href="#how-to-read-this-document"></a></h3><p><em>This section is non-normative.</em></p>

    <p>This document is a detailed specification for a serialization of Linked
      Data in JSON. The document is primarily intended for the following audiences:</p>

    <ul>
      <li>Software developers who want to encode Linked Data in a variety of
        programming languages that can use JSON</li>
      <li>Software developers who want to convert existing JSON to JSON-LD</li>
      <li>Software developers who want to understand the design decisions and
        language syntax for JSON-LD</li>
      <li>Software developers who want to implement processors and APIs for
        JSON-LD</li>
      <li>Software developers who want to generate or consume Linked Data,
        an <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-graph">RDF graph</a>, or an <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-dataset">RDF Dataset</a> in a JSON syntax</li>
    </ul>

    <p>A companion document, the JSON-LD 1.1 Processing Algorithms and API specification
      [<cite><a class="bibref" data-link-type="biblio" href="#bib-json-ld11-api" title="JSON-LD 1.1 Processing Algorithms and API">JSON-LD11-API</a></cite>], specifies how to work with JSON-LD at a higher level by
      providing a standard library interface for common JSON-LD operations.</p>

    <p>To understand the basics in this specification you must first be familiar with
      <cite><a data-no-xref="" href="https://tools.ietf.org/html/rfc8259">JSON</a></cite>, which is detailed in [<cite><a class="bibref" data-link-type="biblio" href="#bib-rfc8259" title="The JavaScript Object Notation (JSON) Data Interchange Format">RFC8259</a></cite>].</p>

    <p>This document almost exclusively uses the term <abbr title="Internationalized Resource Identifier">IRI</abbr>
      (<a href="https://www.w3.org/TR/ld-glossary/#internationalized-resource-identifier">Internationalized Resource Indicator</a>)
      when discussing hyperlinks. Many Web developers are more familiar with the
      URL (<a href="https://www.w3.org/TR/ld-glossary/#uniform-resource-locator">Uniform Resource Locator</a>)
      terminology. The document also uses, albeit rarely, the URI
      (<a href="https://www.w3.org/TR/ld-glossary/#uniform-resource-identifier">Uniform Resource Indicator</a>)
      terminology. While these terms are often used interchangeably among
      technical communities, they do have important distinctions from one
      another and the specification goes to great lengths to try and use the
      proper terminology at all times.</p>

    <p>This document can highlight changes since the <cite><a href="https://www.w3.org/TR/2014/REC-json-ld-20140116/">JSON-LD 1.0</a></cite> version.
      Select to <button class="show-changes"></button> changes.</p>
  </section>

  <section class="informative" id="contributing">
    <h3 id="x1-2-contributing"><bdi class="secno">1.2 </bdi>Contributing<a class="self-link" aria-label="§" href="#contributing"></a></h3><p><em>This section is non-normative.</em></p>

    <p>There are a number of ways that one may participate in the development of
      this specification:</p>

    <ul>
      <li>Technical discussion typically occurs on the working group mailing list:
        <a href="https://lists.w3.org/Archives/Public/public-json-ld-wg/">public-json-ld-wg@w3.org</a></li>

      <li>The working group uses <a href="http://irc.w3.org/?channels=json-ld">#json-ld</a>
        IRC channel is available for real-time discussion on <a href="http://irc.w3.org">irc.w3.org</a>.</li>

      <li>The <a href="https://webchat.freenode.net/?channels=json-ld">#json-ld</a>
        IRC channel is also available for real-time discussion on irc.freenode.net.</li>
    </ul>

  </section>

  <section class="informative" id="typographical-conventions">
    <h3 id="x1-3-typographical-conventions"><bdi class="secno">1.3 </bdi>Typographical conventions<a class="self-link" aria-label="§" href="#typographical-conventions"></a></h3><p><em>This section is non-normative.</em></p>
    <div><p>The following typographic conventions are used in this specification:</p>

<dl class="typography">
  <dt><code>markup</code></dt><dd>
    Markup (elements, attributes, properties),
    machine processable values (string, characters, media types),
    property name,
    or a file name is in red-orange monospace font.</dd>
  <dt><var>variable</var></dt><dd>
    A variable in pseudo-code or in an algorithm description is in italics.</dd>
  <dt><dfn data-no-xref="" data-dfn-type="dfn" id="dfn-definition">definition</dfn></dt><dd>
    A definition of a term, to be used elsewhere in this or other specifications,
    is in bold and italics.</dd>
  <dt><a data-lt="definition" href="#dfn-definition" class="internalDFN" data-link-type="dfn">definition reference</a></dt><dd>
    A reference to a definition <em>in this document</em>
    is underlined and is also an active link to the definition itself. </dd>
  <dt><a data-lt="definition" href="#dfn-definition" class="internalDFN" data-link-type="dfn"><code>markup definition reference</code></a></dt><dd>
    A references to a definition <em>in this document</em>,
    when the reference itself is also a markup, is underlined,
    red-orange monospace font, and is also an active link to the definition itself.</dd>
  <dt><a class="externalDFN">external definition reference</a></dt><dd>
    A reference to a definition <em>in another document</em>
    is underlined, in italics, and is also an active link to the definition itself.</dd>
  <dt><a class="externalDFN"><code> markup external definition reference</code></a></dt><dd>
    A reference to a definition <em>in another document</em>,
    when the reference itself is also a markup,
    is underlined, in italics red-orange monospace font,
    and is also an active link to the definition itself.</dd>
  <dt><a href="">hyperlink</a></dt><dd>
    A hyperlink is underlined and in blue.</dd>
  <dt>[<a href="">reference</a>]</dt><dd>
    A document reference (normative or informative) is enclosed in square brackets
    and links to the references section.</dd>
  <dt class="changed">Changes from Recommendation</dt><dd>
    Sections or phrases changed from the previous Recommendation
    may be <span class="changed">highlighted</span> using a control
    in <a href="#how-to-read-this-document" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">1.1 </bdi>How to Read this Document</a>.</dd>
</dl>

<div class="note" role="note" id="issue-container-generatedID"><div role="heading" class="note-title marker" id="h-note" aria-level="4"><span>Note</span></div><p class="">Notes are in light green boxes with a green left border and with a "Note" header in green.
  Notes are always informative.</p></div>

<div class="example" id="example-1">
          <div class="marker">
      <a class="self-link" href="#example-1">Example<bdi> 1</bdi></a>
    </div> <pre class="nohighlight">Examples are in light khaki boxes, with khaki left border,
and with a numbered "Example" header in khaki.
Examples are always informative. The content of the example is in monospace font and may be syntax colored.

Examples may have tabbed navigation buttons
to show the results of transforming an example into other representations.</pre>
        </div>
</div>
  </section>

  <section class="informative" id="terminology">
    <h3 id="x1-4-terminology"><bdi class="secno">1.4 </bdi>Terminology<a class="self-link" aria-label="§" href="#terminology"></a></h3><p><em>This section is non-normative.</em></p>

    <p>This document uses the following terms as defined in external specifications
      and defines terms specific to JSON-LD.</p>

    <div data-oninclude="restrictReferences"><section><h4 id="terms-imported-from-other-specifications">Terms imported from Other Specifications<a class="self-link" aria-label="§" href="#terms-imported-from-other-specifications"></a></h4>
<p>Terms imported from <cite><a href="https://tc39.es/ecma262/">ECMAScript Language Specification</a></cite> [<cite><a class="bibref" data-link-type="biblio" href="#bib-ecmascript" title="ECMAScript Language Specification">ECMASCRIPT</a></cite>], <cite><a href="https://tools.ietf.org/html/rfc8259">The JavaScript Object Notation (JSON) Data Interchange Format</a></cite> [<cite><a class="bibref" data-link-type="biblio" href="#bib-rfc8259" title="The JavaScript Object Notation (JSON) Data Interchange Format">RFC8259</a></cite>], <cite><a href="https://infra.spec.whatwg.org/">Infra Standard</a></cite> [<cite><a class="bibref" data-link-type="biblio" href="#bib-infra" title="Infra Standard">INFRA</a></cite>], and <cite><a href="https://heycam.github.io/webidl/">Web IDL</a></cite> [<cite><a class="bibref" data-link-type="biblio" href="#bib-webidl" title="Web IDL">WEBIDL</a></cite>]</p>
<dl class="termlist" data-sort="" id="terms-0"><dt><dfn class="preserve" data-dfn-type="dfn" data-plurals="arrays" id="dfn-array" data-no-export=""><a href="https://infra.spec.whatwg.org/#list">array</a></dfn></dt><dd>
    In the JSON serialization,
    an <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a> structure is represented as square brackets surrounding zero or more values.
    Values are separated by commas.
    In the <a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-api/#dfn-internal-representation">internal representation</a>,
    a <a data-ld="array" data-link-type="dfn" href="https://www.w3.org/TR/rdf-schema/#ch_collectionvocab">list</a> (also called an <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a>) is an <em>ordered</em> collection of zero or more values.
    While JSON-LD uses the same array representation as JSON,
    the collection is <em>unordered</em> by default.
    While order is preserved in regular JSON arrays,
    it is not in regular JSON-LD arrays unless specifically defined
    (see the <a href="#sets-and-lists">Sets and Lists</a> section of JSON-LD 1.1.</dd>
  <dt><dfn class="preserve" data-dfn-type="dfn" data-plurals="booleans" id="dfn-boolean" data-no-export=""><a href="https://infra.spec.whatwg.org/#boolean">boolean</a></dfn></dt><dd>
    The values <code>true</code> and <code>false</code> that are used
    to express one of two possible states.</dd>
  <dt><dfn class="preserve" data-dfn-type="dfn" data-plurals="json objects" id="dfn-json-object" data-no-export=""><a href="https://tools.ietf.org/html/rfc8259#section-4">JSON object</a></dfn></dt><dd>
    In the JSON serialization,
    an <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-object">object</a> structure
    is represented as a pair of curly brackets surrounding zero or more name/value pairs (or members).
    A name is a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">string</a>.
    A single colon comes after each name,
    separating the name from the value.
    A single comma separates a value from a following name.
    In JSON-LD the names in an object must be unique.
    <p>In the <a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-api/#dfn-internal-representation">internal representation</a> a <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc8259#section-4">JSON object</a> is described as a
      <dfn class="preserve" data-dfn-type="dfn" data-plurals="maps" id="dfn-map" data-no-export=""><a href="https://infra.spec.whatwg.org/#ordered-map">map</a></dfn> (see [<cite><a class="bibref" data-link-type="biblio" href="#bib-infra" title="Infra Standard">INFRA</a></cite>]),
      composed of <dfn data-lt="map entry|entry|entries" data-ld-nodefault="" class="preserve" data-dfn-type="dfn" data-plurals="map entries" id="dfn-map-entry" data-no-export=""><a href="https://infra.spec.whatwg.org/#map-entry">entries</a></dfn> with key/value pairs.</p>
    <p>In the <a href="https://www.w3.org/TR/json-ld11-api/#the-application-programming-interface">Application Programming Interface</a>,
      a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a> is described using a [<cite><a class="bibref" data-link-type="biblio" href="#bib-webidl" title="Web IDL">WEBIDL</a></cite>] <a href="https://heycam.github.io/webidl/#idl-record">record</a>.</p></dd>
  <dt><dfn class="preserve" data-dfn-type="dfn" id="dfn-null" data-no-export=""><a href="https://infra.spec.whatwg.org/#nulls">null</a></dfn></dt><dd>
    The use of the <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#nulls">null</a> value within JSON-LD
    is used to ignore or reset values.
    A <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">map entry</a> in the <code>@context</code> where the value,
    or the <code>@id</code> of the value, is <code>null</code>,
    explicitly decouples a term's association with an <abbr title="Internationalized Resource Identifier">IRI</abbr>.
    A <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">map entry</a> in the body of a <a href="#dfn-json-ld-document" class="internalDFN" data-link-type="dfn">JSON-LD document</a>
    whose value is <code>null</code>
    has the same meaning as if the <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">map entry</a> was not defined.
    If <code>@value</code>, <code>@list</code>, or <code>@set</code> is set to <code>null</code> in expanded form,
    then the entire <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc8259#section-4">JSON object</a> is ignored.</dd>
  <dt><dfn data-lt="number|JSON number" class="preserve" data-dfn-type="dfn" data-plurals="numbers" id="dfn-number" data-no-export=""><a href="https://tc39.es/ecma262/#sec-terms-and-definitions-number-value">number</a></dfn></dt><dd>
    In the JSON serialization, a <a data-link-type="dfn" href="https://tc39.es/ecma262/#sec-terms-and-definitions-number-value">number</a>
    is similar to that used in most programming languages,
    except that the octal and hexadecimal formats are not used and that leading zeros are not allowed.
    In the <a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-api/#dfn-internal-representation">internal representation</a>,
    a <a data-link-type="dfn" href="https://tc39.es/ecma262/#sec-terms-and-definitions-number-value">number</a> is equivalent to either a <dfn class="preserve" data-dfn-type="dfn" id="dfn-long" data-no-export=""><a href="https://heycam.github.io/webidl/#idl-long">long</a></dfn>
    or <dfn class="preserve" data-dfn-type="dfn" id="dfn-double" data-no-export=""><a href="https://heycam.github.io/webidl/#idl-double">double</a></dfn>,
    depending on if the number has a non-zero fractional part (see [<cite><a class="bibref" data-link-type="biblio" href="#bib-webidl" title="Web IDL">WEBIDL</a></cite>]).</dd>
  <dt><dfn class="preserve" data-dfn-type="dfn" id="dfn-scalar" data-no-export=""><a href="https://infra.spec.whatwg.org/#primitive-data-types">scalar</a></dfn></dt><dd>
    A scalar is either a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">string</a>, <a data-link-type="dfn" href="https://tc39.es/ecma262/#sec-terms-and-definitions-number-value">number</a>, <code>true</code>, or <code>false</code>.</dd>
  <dt><dfn class="preserve" data-dfn-type="dfn" data-plurals="strings" id="dfn-string" data-no-export=""><a href="https://infra.spec.whatwg.org/#javascript-string">string</a></dfn></dt><dd>
    A <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">string</a>
    is a sequence of zero or more Unicode (UTF-8) characters,
    wrapped in double quotes, using backslash escapes (if necessary).
    A character is represented as a single character string.</dd></dl>

<p>Terms imported from <cite><a href="https://tools.ietf.org/html/rfc3987">Internationalized Resource Identifiers (IRIs)</a></cite> [<cite><a class="bibref" data-link-type="biblio" href="#bib-rfc3987" title="Internationalized Resource Identifiers (IRIs)">RFC3987</a></cite>]</p>
<dl class="termlist" data-sort=""><dt><dfn data-lt="Internationalized Resource Identifier|IRI" class="preserve" data-dfn-type="dfn" data-plurals="iris|internationalized resource identifiers" id="dfn-internationalized-resource-identifier" data-no-export=""><a href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a></dfn></dt><dd>
    The absolute form of an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> containing a <em>scheme</em> along with a <em>path</em>
    and optional <em>query</em> and <em>fragment</em> segments.</dd>
  <dt><dfn class="preserve" data-dfn-type="dfn" data-plurals="iri references" id="dfn-iri-reference" data-no-export=""><a href="https://tools.ietf.org/html/rfc3987#section-1.3"><abbr title="Internationalized Resource Identifier">IRI</abbr> reference</a></dfn></dt><dd>
    Denotes the common usage of an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">Internationalized Resource Identifier</a>.
    An <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-1.3"><abbr title="Internationalized Resource Identifier">IRI</abbr> reference</a> may be absolute or
    <a data-lt="relative IRI reference" data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-6.5">relative</a>.
    However, the "<abbr title="Internationalized Resource Identifier">IRI</abbr>" that results from such a reference only includes absolute <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">IRIs</a>;
    any <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-6.5">relative <abbr title="Internationalized Resource Identifier">IRI</abbr> references</a> are resolved to their absolute form.</dd>
  <dt><dfn class="preserve" data-dfn-type="dfn" data-plurals="relative iri references" id="dfn-relative-iri-reference" data-no-export=""><a href="https://tools.ietf.org/html/rfc3987#section-6.5">relative <abbr title="Internationalized Resource Identifier">IRI</abbr> reference</a></dfn></dt><dd>
    A relative <abbr title="Internationalized Resource Identifier">IRI</abbr> reference is an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-1.3"><abbr title="Internationalized Resource Identifier">IRI</abbr> reference</a> that is relative to some other <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>,
    typically the <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-base-iri">base <abbr title="Internationalized Resource Identifier">IRI</abbr></a> of the document.
    Note that <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-property">properties</a>,
    values of <code>@type</code>,
    and values of <a href="#dfn-term" class="internalDFN" data-link-type="dfn">terms</a> defined to be <em>vocabulary relative</em>
    are resolved relative to the <a href="#dfn-vocabulary-mapping" class="internalDFN" data-link-type="dfn">vocabulary mapping</a>,
    not the <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-base-iri">base <abbr title="Internationalized Resource Identifier">IRI</abbr></a>.</dd></dl>

<p>Terms imported from <cite><a href="https://www.w3.org/TR/rdf11-concepts/">RDF 1.1 Concepts and Abstract Syntax</a></cite> [<cite><a class="bibref" data-link-type="biblio" href="#bib-rdf11-concepts" title="RDF 1.1 Concepts and Abstract Syntax">RDF11-CONCEPTS</a></cite>], <cite><a href="https://www.w3.org/TR/rdf-schema/">RDF Schema 1.1</a></cite> [<cite><a class="bibref" data-link-type="biblio" href="#bib-rdf-schema" title="RDF Schema 1.1">RDF-SCHEMA</a></cite>], and <cite><a href="https://www.w3.org/DesignIssues/LinkedData.html">Linked Data Design Issues</a></cite> [<cite><a class="bibref" data-link-type="biblio" href="#bib-linked-data" title="Linked Data Design Issues">LINKED-DATA</a></cite>]</p>
<dl class="termlist" data-sort=""><dt><dfn class="preserve" data-dfn-type="dfn" id="dfn-base-iri" data-no-export=""><a href="https://www.w3.org/TR/rdf11-concepts/#dfn-base-iri">base <abbr title="Internationalized Resource Identifier">IRI</abbr></a></dfn></dt><dd>
    The <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-base-iri">base <abbr title="Internationalized Resource Identifier">IRI</abbr></a> is an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> established in the <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a>,
    or is based on the <a href="#dfn-json-ld-document" class="internalDFN" data-link-type="dfn">JSON-LD document</a> location.
    The <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-base-iri">base <abbr title="Internationalized Resource Identifier">IRI</abbr></a> is used to turn <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-6.5">relative <abbr title="Internationalized Resource Identifier">IRI</abbr> references</a> into <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">IRIs</a>.</dd>
  <dt><dfn class="preserve" data-dfn-type="dfn" data-plurals="blank nodes" id="dfn-blank-node" data-no-export=""><a href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node">blank node</a></dfn></dt><dd>
    A <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-node">node</a> in a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-graph">graph</a> that is neither an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>,
    nor a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-literal">literal</a>.
    A <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node">blank node</a> does not contain
    a de-referenceable identifier because it is either ephemeral in nature
    or does not contain information that needs to be linked to from outside of the <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-graph">linked data graph</a>.
    In JSON-LD,
    a blank node is assigned an identifier starting with the prefix <code>_:</code>.</dd>
  <dt><dfn class="preserve" data-dfn-type="dfn" data-plurals="blank node identifiers" id="dfn-blank-node-identifier" data-no-export=""><a href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node-identifier">blank node identifier</a></dfn></dt><dd>
    A <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node-identifier">blank node identifier</a>
    is a string that can be used as an identifier for a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node">blank node</a> within the scope of a JSON-LD document.
    Blank node identifiers begin with <code>_:</code>.</dd>
  <dt><dfn data-lt="RDF dataset|dataset" class="preserve" data-dfn-type="dfn" data-plurals="datasets|rdf datasets" id="dfn-rdf-dataset" data-no-export=""><a href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-dataset">dataset</a></dfn></dt><dd>
    A <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-dataset">dataset</a>
    representing a collection of <a href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-graph">RDF graphs</a>
    including exactly one <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-default-graph">default graph</a> and zero or more <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-named-graph">named graphs</a>.</dd>
  <dt><dfn class="preserve" data-dfn-type="dfn" id="dfn-datatype-iri" data-no-export=""><a href="https://www.w3.org/TR/rdf11-concepts/#dfn-datatype-iri">datatype <abbr title="Internationalized Resource Identifier">IRI</abbr></a></dfn></dt><dd>
    A <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-datatype-iri">datatype <abbr title="Internationalized Resource Identifier">IRI</abbr></a> is an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> identifying a datatype that determines how the lexical form maps to a
    <a href="https://www.w3.org/TR/rdf11-concepts/#dfn-literal-value">literal value</a>.</dd>
  <dt><dfn class="preserve" data-dfn-type="dfn" id="dfn-default-graph" data-no-export=""><a href="https://www.w3.org/TR/rdf11-concepts/#dfn-default-graph">default graph</a></dfn></dt><dd>
    The <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-default-graph">default graph</a> of a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-dataset">dataset</a> is an <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-graph">RDF graph</a> having no <a data-lt="graph name" data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-graph-name">name</a>, which may be empty.</dd>
  <dt><dfn class="preserve" data-dfn-type="dfn" data-plurals="graph names" id="dfn-graph-name" data-no-export=""><a href="https://www.w3.org/TR/rdf11-concepts/#dfn-graph-name">graph name</a></dfn></dt><dd>
    The <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> or <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node">blank node</a> identifying a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-named-graph">named graph</a>.</dd>
  <dt><dfn class="preserve" data-dfn-type="dfn" data-plurals="language-tagged strings" id="dfn-language-tagged-string" data-no-export=""><a href="https://www.w3.org/TR/rdf11-concepts/#dfn-language-tagged-string">language-tagged string</a></dfn></dt><dd>
    A <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-language-tagged-string">language-tagged string</a>
    consists of a string and a non-empty language tag
    as defined by [<cite><a class="bibref" data-link-type="biblio" href="#bib-bcp47" title="Tags for Identifying Languages">BCP47</a></cite>].
    The <dfn id="dfn-language-tag" data-dfn-type="dfn" data-plurals="language tags" data-no-export=""><a href="https://www.w3.org/TR/rdf11-concepts/#dfn-language-tag">language tag</a></dfn> must be well-formed
    according to <a href="https://tools.ietf.org/html/bcp47#section-2.2.9">section 2.2.9 Classes of Conformance</a> of [<cite><a class="bibref" data-link-type="biblio" href="#bib-bcp47" title="Tags for Identifying Languages">BCP47</a></cite>].
    <span class="changed note">Processors may normalize <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-language-tag">language tags</a> to lowercase.</span>
  </dd>
  <dt><dfn data-no-xref="" class="preserve" data-dfn-type="dfn" id="dfn-linked-data" data-no-export=""><cite><a href="https://www.w3.org/DesignIssues/LinkedData.html">Linked Data</a></cite></dfn></dt><dd>
    A set of documents, each containing a representation of a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-graph">linked data graph</a> or <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-dataset">dataset</a>.</dd>
  <dt><dfn data-lt="collection|RDF collection|list" class="preserve" data-dfn-type="dfn" data-plurals="lists" id="dfn-collection" data-no-export=""><a href="https://www.w3.org/TR/rdf-schema/#ch_collectionvocab">list</a></dfn></dt><dd>
    A <a data-link-type="dfn" href="https://www.w3.org/TR/rdf-schema/#ch_collectionvocab">list</a> is an ordered sequence of <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">IRIs</a>, <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node">blank nodes</a>, and <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-literal">literals</a>.</dd>
  <dt><dfn data-lt="RDF literal|literal" class="preserve" data-dfn-type="dfn" data-plurals="literals|rdf literals" id="dfn-rdf-literal" data-no-export=""><a href="https://www.w3.org/TR/rdf11-concepts/#dfn-literal">literal</a></dfn></dt><dd>
    An <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-object">object</a> expressed as a value such as a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">string</a> or <a data-link-type="dfn" href="https://tc39.es/ecma262/#sec-terms-and-definitions-number-value">number</a>.
    Implicitly or explicitly includes a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-datatype-iri">datatype <abbr title="Internationalized Resource Identifier">IRI</abbr></a> and, if the datatype is <code>rdf:langString</code>, an optional <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-language-tag">language tag</a>.</dd>
  <dt><dfn class="preserve" data-dfn-type="dfn" data-plurals="named graphs" id="dfn-named-graph" data-no-export=""><a href="https://www.w3.org/TR/rdf11-concepts/#dfn-named-graph">named graph</a></dfn></dt><dd>
    A <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-named-graph">named graph</a>
    is a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-graph">linked data graph</a> that is identified by an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> or <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node">blank node</a>.</dd>
  <dt><dfn class="preserve" data-dfn-type="dfn" data-plurals="nodes" id="dfn-node" data-no-export=""><a href="https://www.w3.org/TR/rdf11-concepts/#dfn-node">node</a></dfn></dt><dd>
    A <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-node">node</a> in an <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-graph">RDF graph</a>, either the <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-subject">subject</a> and <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-object">object</a> of at least one <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-triple">triple</a>.
    Note that a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-node">node</a> can play both roles (<a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-subject">subject</a> and <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-object">object</a>) in a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-graph">graph</a>, even in the same <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-triple">triple</a>.</dd>
  <dt><dfn class="preserve" data-dfn-type="dfn" data-plurals="objects" id="dfn-object" data-no-export=""><a href="https://www.w3.org/TR/rdf11-concepts/#dfn-object">object</a></dfn></dt><dd>
    An <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-object">object</a> is a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-node">node</a> in a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-graph">linked data graph</a>
    with at least one incoming edge.</dd>
  <dt><dfn class="preserve" data-dfn-type="dfn" data-plurals="properties" id="dfn-property" data-no-export=""><a href="https://www.w3.org/TR/rdf11-concepts/#dfn-property">property</a></dfn></dt><dd>
    The name of a directed-arc in a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-graph">linked data graph</a>.
    Every <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-property">property</a> is directional
    and is labeled with an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> or a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node-identifier">blank node identifier</a>.
    Whenever possible, a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-property">property</a> should be labeled with an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>.
    <div class="note" role="note" id="issue-container-generatedID-0"><div role="heading" class="note-title marker" id="h-note-0" aria-level="5"><span>Note</span></div><div class="">The use of <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node-identifier">blank node identifiers</a> to label properties is obsolete,
      and may be removed in a future version of JSON-LD.</div></div>
    Also, see <dfn class="preserve" data-dfn-type="dfn" data-plurals="predicates" id="dfn-predicate" data-no-export=""><a href="https://www.w3.org/TR/rdf11-concepts/#dfn-predicate">predicate</a></dfn> in [<cite><a class="bibref" data-link-type="biblio" href="#bib-rdf11-concepts" title="RDF 1.1 Concepts and Abstract Syntax">RDF11-CONCEPTS</a></cite>].</dd>
  <dt><dfn data-lt="linked data graph|graph|RDF graph" class="preserve" data-dfn-type="dfn" data-plurals="rdf graphs|graphs" id="dfn-linked-data-graph" data-no-export=""><a href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-graph">RDF graph</a></dfn></dt><dd>
    A labeled directed <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-graph">graph</a>,
    i.e., a set of <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-node">nodes</a> connected by directed-arcs.
    Also called <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-graph">linked data graph</a>.
  </dd>
  <dt><dfn class="preserve" data-dfn-type="dfn" data-plurals="resources" id="dfn-resource" data-no-export=""><a href="https://www.w3.org/TR/rdf11-concepts/#dfn-resource">resource</a></dfn></dt><dd>
    A <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-resource">resource</a> denoted by an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>, a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node">blank node</a> or <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-literal">literal</a> representing something in the world (the "universe of discourse").</dd>
  <dt><dfn class="preserve" data-dfn-type="dfn" id="dfn-subject" data-no-export=""><a href="https://www.w3.org/TR/rdf11-concepts/#dfn-subject">subject</a></dfn></dt><dd>
    A <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-subject">subject</a> is a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-node">node</a> in a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-graph">linked data graph</a>
    with at least one outgoing edge,
    related to an <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-object">object</a> node through a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-property">property</a>.</dd><dt><dfn class="preserve" data-dfn-type="dfn" data-plurals="triples" id="dfn-triple" data-no-export=""><a href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-triple">triple</a></dfn></dt><dd>
    A component of an <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-graph">RDF graph</a> including a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-subject">subject</a>, <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-predicate">predicate</a>, and <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-object">object</a>, which represents
    a node-arc-node segment of an <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-graph">RDF graph</a>.</dd>
  </dl>
</section>

<section><h4 id="json-ld-specific-term-definitions">JSON-LD Specific Term Definitions<a class="self-link" aria-label="§" href="#json-ld-specific-term-definitions"></a></h4>
<dl class="termlist" data-sort=""><dt><dfn id="dfn-active-context" data-dfn-type="dfn">active context</dfn></dt><dd>
    A <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a> that is used to resolve <a href="#dfn-term" class="internalDFN" data-link-type="dfn">terms</a>
    while the processing algorithm is running.</dd>
  <dt><dfn data-lt="base direction|default base direction" data-lt-nodefault="" id="dfn-base-direction" data-dfn-type="dfn">base direction</dfn></dt><dd>
    The <a href="#dfn-base-direction" class="internalDFN" data-link-type="dfn">base direction</a> is the direction used when a string does not have a direction associated with it directly.
    It can be set in the <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a> using the <code>@direction</code> key
    whose value must be one of the strings <code>"ltr"</code>, <code>"rtl"</code>, or <code>null</code>.
    See the <a href="#context-definitions">Context Definitions</a> section of JSON-LD 1.1 for a normative description.
    </dd>
  <dt><dfn id="dfn-compact-iri" data-dfn-type="dfn" data-plurals="compact iris">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></dfn></dt><dd>
    A compact <abbr title="Internationalized Resource Identifier">IRI</abbr> has the form of <a href="#dfn-prefix" class="internalDFN" data-link-type="dfn">prefix</a>:<em>suffix</em>
    and is used as a way of expressing an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> without needing to define separate <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a> definitions
    for each <abbr title="Internationalized Resource Identifier">IRI</abbr> contained within a common vocabulary identified by <a href="#dfn-prefix" class="internalDFN" data-link-type="dfn">prefix</a>.</dd>
  <dt><dfn id="dfn-context" data-dfn-type="dfn" data-plurals="contexts">context</dfn></dt><dd>
    A set of rules for interpreting a <a href="#dfn-json-ld-document" class="internalDFN" data-link-type="dfn">JSON-LD document</a>
    as described in the <a href="#the-context">The Context</a> section of JSON-LD 1.1,
    and normatively specified in the <a href="#context-definitions">Context Definitions</a> section of JSON-LD 1.1.
  </dd>
  <dt><dfn id="dfn-default-language" data-dfn-type="dfn">default language</dfn></dt><dd>
    The <a href="#dfn-default-language" class="internalDFN" data-link-type="dfn">default language</a> is the language used when a string does not have a language associated with it directly.
    It can be set in the <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a> using the <code>@language</code> key
    whose value must be a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">string</a> representing a [<cite><a class="bibref" data-link-type="biblio" href="#bib-bcp47" title="Tags for Identifying Languages">BCP47</a></cite>] language code or <code>null</code>.
    See the <a href="#context-definitions">Context Definitions</a> section of JSON-LD 1.1 for a normative description.
  </dd>
  <dt><dfn id="dfn-default-object" data-dfn-type="dfn">default object</dfn></dt><dd>
    A <a href="#dfn-default-object" class="internalDFN" data-link-type="dfn">default object</a> is a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a> that has a <code>@default</code> key.</dd>
  <dt><dfn id="dfn-embedded-context" data-dfn-type="dfn" data-plurals="embedded contexts">embedded context</dfn></dt><dd>
    An embedded <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a> is a context which appears
    as the <code>@context</code> <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">entry</a> of one of the following:
    a <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a>, a <a href="#dfn-value-object" class="internalDFN" data-link-type="dfn">value object</a>, a <a href="#dfn-graph-object" class="internalDFN" data-link-type="dfn">graph object</a>, a <a href="#dfn-list-object" class="internalDFN" data-link-type="dfn">list object</a>,
    a <a href="#dfn-set-object" class="internalDFN" data-link-type="dfn">set object</a>, the value of a <a href="#dfn-nested-property" class="internalDFN" data-link-type="dfn">nested properties</a>,
    or the value of an <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a>.
    Its value may be a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a> for a <a href="#dfn-context-definition">context definition</a>,
    as an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>, or as an <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a> combining either of the above.
  </dd>
  <dt><dfn id="dfn-expanded-term-definition" data-dfn-type="dfn" data-plurals="expanded term definitions">expanded term definition</dfn></dt><dd>
    An expanded term definition is a <a href="#dfn-term-definition" class="internalDFN" data-link-type="dfn">term definition</a>
    where the value is a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a>
    containing one or more <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a> keys to define the associated <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>,
    if this is a reverse property,
    the type associated with string values, and a container mapping.
    See the <a href="#expanded-term-definition">Expanded Term Definition</a> section of JSON-LD 1.1 for a normative description.
  </dd>
  <dt><dfn data-lt="frame|JSON-LD frame" id="dfn-frame" data-dfn-type="dfn" data-no-export=""><a href="https://www.w3.org/TR/json-ld11-framing/#dfn-frame">frame</a></dfn></dt><dd>
    A <a href="#dfn-json-ld-document" class="internalDFN" data-link-type="dfn">JSON-LD document</a>,
    which describes the form for transforming another <a href="#dfn-json-ld-document" class="internalDFN" data-link-type="dfn">JSON-LD document</a>
    using matching and embedding rules.
    A frame document allows additional keywords and certain <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">map entries</a>
    to describe the matching and transforming process.</dd>
  <dt><dfn id="dfn-frame-object" data-dfn-type="dfn" data-plurals="frame objects" data-no-export=""><a href="https://www.w3.org/TR/json-ld11-framing/#dfn-frame-object">frame object</a></dfn></dt><dd>
    A frame object is a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a> element within a <a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-framing/#dfn-frame">frame</a>
    which represents a specific portion of the <a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-framing/#dfn-frame">frame</a> matching either
    a <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> or a <a href="#dfn-value-object" class="internalDFN" data-link-type="dfn">value object</a>
    in the input.
    See the <a href="#frame-objects">Frame Objects</a> section of JSON-LD 1.1 for a normative description.
  </dd>
  <dt class="changed"><dfn id="dfn-graph-object" data-dfn-type="dfn" data-plurals="graph objects">graph object</dfn></dt><dd class="changed">
    A <a href="#dfn-graph-object" class="internalDFN" data-link-type="dfn">graph object</a> represents a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-named-graph">named graph</a>
    as the value of a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">map entry</a> within a <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a>.
    When expanded, a graph object must have an <code>@graph</code> <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">entry</a>,
    and may also have <code>@id</code>, and <code>@index</code> <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">entries</a>.
    A <dfn class="preserve" data-dfn-type="dfn" data-plurals="simple graph objects" id="dfn-simple-graph-object">simple graph object</dfn>
    is a <a href="#dfn-graph-object" class="internalDFN" data-link-type="dfn">graph object</a> which does not have an <code>@id</code> <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">entry</a>.
    Note that <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a> may have a <code>@graph</code> <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">entry</a>,
    but are not considered <a href="#dfn-graph-object" class="internalDFN" data-link-type="dfn">graph objects</a> if they include any other <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">entries</a>.
    A top-level object consisting of <code>@graph</code> is also not a <a href="#dfn-graph-object" class="internalDFN" data-link-type="dfn">graph object</a>.
    Note that a <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> may also represent a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-named-graph">named graph</a> it it includes other properties.
    See the <a href="#graph-objects">Graph Objects</a> section of JSON-LD 1.1 for a normative description.
  </dd>
  <dt class="changed"><dfn id="dfn-id-map" data-dfn-type="dfn" data-plurals="id maps">id map</dfn></dt><dd class="changed">
    An <a href="#dfn-id-map" class="internalDFN" data-link-type="dfn">id map</a> is a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a> value of a <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a>
    defined with <code>@container</code> set to <code>@id</code>.
    The values of the <a href="#dfn-id-map" class="internalDFN" data-link-type="dfn">id map</a> must be <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a>,
    and its keys are interpreted as <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">IRIs</a> representing
    the <code>@id</code> of the associated <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a>.
    If a value in the <a href="#dfn-id-map" class="internalDFN" data-link-type="dfn">id map</a> contains a key expanding to <code>@id</code>,
    its value must be equivalent to the referencing key in the <a href="#dfn-id-map" class="internalDFN" data-link-type="dfn">id map</a>.
    See the <a href="#id-maps">Id Maps</a> section of JSON-LD 1.1 for a normative description.
  </dd>
  <dt><dfn id="dfn-implicitly-named-graph" data-dfn-type="dfn" data-plurals="implicitly named graphs">implicitly named graph</dfn></dt><dd>
    A <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-named-graph">named graph</a> created from the value of a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">map entry</a>
    having an <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a>
    where <code>@container</code> is set to  <code>@graph</code>.</dd>
  <dt class="changed"><dfn id="dfn-included-block" data-dfn-type="dfn" data-plurals="included blocks">included block</dfn></dt><dd class="changed">
    An <a href="#dfn-included-block" class="internalDFN" data-link-type="dfn">included block</a> is an <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">entry</a> in a <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> where the key is either <code>@included</code> or an alias of <code>@included</code>
    and the value is one or more <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a>.
    See the <a href="#included-blocks">Included Blocks</a> section of JSON-LD 1.1 for a normative description.
  </dd>
  <dt><dfn id="dfn-index-map" data-dfn-type="dfn" data-plurals="index maps">index map</dfn></dt><dd>
    An <a href="#dfn-index-map" class="internalDFN" data-link-type="dfn">index map</a> is a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a> value of a <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a>
    defined with <code>@container</code> set to <code>@index</code>,
    whose values must be any of the following types:
    <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">string</a>,
    <a data-link-type="dfn" href="https://tc39.es/ecma262/#sec-terms-and-definitions-number-value">number</a>,
    <code>true</code>,
    <code>false</code>,
    <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#nulls">null</a>,
    <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a>,
    <a href="#dfn-value-object" class="internalDFN" data-link-type="dfn">value object</a>,
    <a href="#dfn-list-object" class="internalDFN" data-link-type="dfn">list object</a>,
    <a href="#dfn-set-object" class="internalDFN" data-link-type="dfn">set object</a>, or
    an <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a> of zero or more of the above possibilities.
    See the <a href="#index-maps">Index Maps</a> section in JSON-LD 1.1 for a formal description.
  </dd>
  <dt><dfn id="dfn-json-literal" data-dfn-type="dfn" data-plurals="json literals">JSON literal</dfn></dt><dd>
    A <a href="#dfn-json-literal" class="internalDFN" data-link-type="dfn">JSON literal</a> is a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-literal">literal</a> where the associated <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-datatype-iri">datatype <abbr title="Internationalized Resource Identifier">IRI</abbr></a> is <code>rdf:JSON</code>.
    In the <a href="#dfn-value-object" class="internalDFN" data-link-type="dfn">value object</a> representation, the value of <code>@type</code> is <code>@json</code>.
    JSON literals represent values which are valid JSON [<cite><a class="bibref" data-link-type="biblio" href="#bib-rfc8259" title="The JavaScript Object Notation (JSON) Data Interchange Format">RFC8259</a></cite>].
    See the <a href="#the-rdf-json-datatype">The <code>rdf:JSON</code> Datatype</a> section in JSON-LD 1.1 for a normative description.
  </dd>
  <dt><dfn id="dfn-json-ld-document" data-dfn-type="dfn" data-plurals="json-ld documents">JSON-LD document</dfn></dt><dd>
    A <a href="#dfn-json-ld-document" class="internalDFN" data-link-type="dfn">JSON-LD document</a> is a serialization of
    an <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-dataset">RDF dataset</a>.
    See the <a href="#json-ld-grammar">JSON-LD Grammar</a> section in JSON-LD 1.1 for a formal description.
  </dd>
  <dt class="changed"><dfn data-lt="internal representation|JSON-LD internal representation" id="dfn-internal-representation" data-dfn-type="dfn" data-no-export=""><a href="https://www.w3.org/TR/json-ld11-api/#dfn-internal-representation">JSON-LD internal representation</a></dfn></dt><dd class="changed">
    The JSON-LD internal representation
    is the result of transforming a JSON syntactic structure
    into the core data structures suitable for direct processing:
    <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">arrays</a>, <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">maps</a>, <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">strings</a>, <a data-link-type="dfn" href="https://tc39.es/ecma262/#sec-terms-and-definitions-number-value">numbers</a>, <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#boolean">booleans</a>, and <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#nulls">null</a>.</dd>
  <dt><dfn data-lt="json-ld processor|Processors|JSON-LD Processor" id="dfn-json-ld-processor" data-dfn-type="dfn" data-no-export=""><a href="https://www.w3.org/TR/json-ld11-api/#dfn-json-ld-processor">JSON-LD Processor</a></dfn></dt><dd>
    A <a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-api/#dfn-json-ld-processor">JSON-LD Processor</a> is a system which can perform the algorithms defined in JSON-LD 1.1 Processing Algorithms and API.
    See the <a href="https://www.w3.org/TR/json-ld11-api/#conformance">Conformance</a> section in JSON-LD 1.1 API for a formal description.
  </dd>
  <dt><dfn class="preserve" data-dfn-type="dfn" data-plurals="json-ld values" id="dfn-json-ld-value">JSON-LD value</dfn></dt><dd>
    A <a href="#dfn-json-ld-value" class="internalDFN" data-link-type="dfn">JSON-LD value</a> is a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">string</a>,
    a <a data-link-type="dfn" href="https://tc39.es/ecma262/#sec-terms-and-definitions-number-value">number</a>,
    <code>true</code> or <code>false</code>,
    a <a href="#dfn-typed-value" class="internalDFN" data-link-type="dfn">typed value</a>,
    or a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-language-tagged-string">language-tagged string</a>.
    It represents an <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-literal">RDF literal</a>.
  </dd>
  <dt><dfn id="dfn-keyword" data-dfn-type="dfn" data-plurals="keywords">keyword</dfn></dt><dd>
    A <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">string</a> that is specific to JSON-LD,
    described in the <a href="#syntax-tokens-and-keywords">Syntax Tokens and Keywords</a> section of JSON-LD 1.1,
    and normatively specified in the <a href="#keywords">Keywords</a> section of JSON-LD 1.1,
  </dd>
  <dt><dfn id="dfn-language-map" data-dfn-type="dfn" data-plurals="language maps">language map</dfn></dt><dd>
    An <a href="#dfn-language-map" class="internalDFN" data-link-type="dfn">language map</a> is a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a> value of a <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a>
    defined with <code>@container</code> set to <code>@language</code>,
    whose keys must be <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">strings</a> representing [<cite><a class="bibref" data-link-type="biblio" href="#bib-bcp47" title="Tags for Identifying Languages">BCP47</a></cite>] language codes
    and the values must be any of the following types:
    <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#nulls">null</a>,
    <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">string</a>, or
    an <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a> of zero or more of the above possibilities.
    See the <a href="#language-maps">Language Maps</a> section of JSON-LD 1.1 for a normative description.
  </dd>
  <dt><dfn id="dfn-list-object" data-dfn-type="dfn" data-plurals="list objects">list object</dfn></dt><dd>
    A <a href="#dfn-list-object" class="internalDFN" data-link-type="dfn">list object</a> is a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a> that has a <code>@list</code> key.
    It may also have an <code>@index</code> key, but no other <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">entries</a>.
    See the <a href="#lists-and-sets">Lists and Sets</a> section of JSON-LD 1.1 for a normative description.
  </dd>
  <dt><dfn id="dfn-local-context" data-dfn-type="dfn" data-plurals="local contexts">local context</dfn></dt><dd>
    A <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a> that is specified with a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a>,
    specified via the <code>@context</code> <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a>.</dd>
  <dt><dfn id="dfn-nested-property" data-dfn-type="dfn" data-plurals="nested properties">nested property</dfn></dt><dd>
    A <a href="#dfn-nested-property" class="internalDFN" data-link-type="dfn">nested property</a> is a key in a <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a>
    whose value is a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a> containing <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">entries</a> which are treated as if they were values of the <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a>.
    The <a href="#dfn-nested-property" class="internalDFN" data-link-type="dfn">nested property</a> itself is semantically meaningless and used only to create a sub-structure within a <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a>.
    See the <a href="#property-nesting">Property Nesting</a> section of JSON-LD 1.1 for a normative description.
  </dd>
  <dt><dfn id="dfn-node-object" data-dfn-type="dfn" data-plurals="node objects">node object</dfn></dt><dd>
    A <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> represents zero or more <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-property">properties</a> of a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-node">node</a> in the <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-graph">graph</a>
    serialized by the <a href="#dfn-json-ld-document" class="internalDFN" data-link-type="dfn">JSON-LD document</a>.
    A <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a> is a <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a>
    if it exists outside of the JSON-LD <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a> and:
    <ul>
      <li>it does not contain the <code>@value</code>, <code>@list</code>, or <code>@set</code> keywords, or</li>
      <li>it is not the top-most <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a> in the JSON-LD document
        consisting of no other <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">entries</a> than <code>@graph</code> and <code>@context</code>.</li>
    </ul>
    The <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">entries</a> of a <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> whose keys are not keywords are also called <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-property">properties</a> of the <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a>.
    See the <a href="#node-objects">Node Objects</a> section of JSON-LD 1.1 for a normative description.
  </dd>
  <dt><dfn id="dfn-node-reference" data-dfn-type="dfn">node reference</dfn></dt><dd>
    A <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> used to reference a node having only the <code>@id</code> key.</dd>
  <dt><dfn id="dfn-prefix" data-dfn-type="dfn" data-plurals="prefixes">prefix</dfn></dt><dd>
    A <a href="#dfn-prefix" class="internalDFN" data-link-type="dfn">prefix</a> is the first component of a <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a>
    which comes from a <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a> that maps to a string that,
    when prepended to the suffix of the <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a>,
    results in an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>.</dd>
  <dt><dfn id="dfn-processing-mode" data-dfn-type="dfn">processing mode</dfn></dt><dd>
    The <a href="#dfn-processing-mode" class="internalDFN" data-link-type="dfn">processing mode</a> defines how a <a href="#dfn-json-ld-document" class="internalDFN" data-link-type="dfn">JSON-LD document</a> is processed.
    By default, all documents are assumed to be conformant with this specification.
    By defining a different version using the <code>@version</code> <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">entry</a> in a <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a>,
    publishers can ensure that processors conformant with <cite><a data-no-xref="" href="https://www.w3.org/TR/2014/REC-json-ld-20140116/">JSON-LD 1.0</a></cite> [<cite><a class="bibref" data-link-type="biblio" href="#bib-json-ld10" title="JSON-LD 1.0">JSON-LD10</a></cite>]
    will not accidentally process JSON-LD 1.1 documents, possibly creating a different output.
    The API provides an option for setting the <a href="#dfn-processing-mode" class="internalDFN" data-link-type="dfn">processing mode</a> to <code>json-ld-1.0</code>,
    which will prevent JSON-LD 1.1 features from being activated,
    or error if <code>@version</code> <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">entry</a> in a <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a> is explicitly set to <code>1.1</code>.
    This specification extends <cite><a data-no-xref="" href="https://www.w3.org/TR/2014/REC-json-ld-20140116/">JSON-LD 1.0</a></cite>
    via the <code>json-ld-1.1</code> <a href="#dfn-processing-mode" class="internalDFN" data-link-type="dfn">processing mode</a>.</dd>
  <dt><dfn class="preserve" data-dfn-type="dfn" data-plurals="scoped contexts" id="dfn-scoped-context">scoped context</dfn></dt><dd>
    A <a href="#dfn-scoped-context" class="internalDFN" data-link-type="dfn">scoped context</a> is part of an <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a> using the
    <code>@context</code> <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">entry</a>. It has the same form as an <a href="#dfn-embedded-context" class="internalDFN" data-link-type="dfn">embedded context</a>.
    When the term is used as a type, it defines a <dfn class="preserve" data-dfn-type="dfn" data-plurals="type-scoped contexts" id="dfn-type-scoped-context">type-scoped context</dfn>,
    when used as a property it defines a <dfn class="preserve" data-dfn-type="dfn" id="dfn-property-scoped-context">property-scoped context</dfn>.
  </dd>
  <dt><dfn id="dfn-set-object" data-dfn-type="dfn" data-plurals="set objects">set object</dfn></dt><dd>
    A <a href="#dfn-set-object" class="internalDFN" data-link-type="dfn">set object</a> is a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a> that has an <code>@set</code> <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">entry</a>.
    It may also have an <code>@index</code> key, but no other <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">entries</a>.
    See the <a href="#lists-and-sets">Lists and Sets</a> section of JSON-LD 1.1 for a normative description.
  </dd>
  <dt><dfn id="dfn-term" data-dfn-type="dfn" data-plurals="terms">term</dfn></dt><dd>
    A <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a> is a short word defined in a <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a>
    that may be expanded to an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>.
    See the <a href="#terms">Terms</a> section of JSON-LD 1.1 for a normative description.
  </dd>
  <dt><dfn id="dfn-term-definition" data-dfn-type="dfn" data-plurals="term definitions">term definition</dfn></dt><dd>
    A term definition is an entry in a <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a>,
    where the key defines a <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a>
    which may be used within a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a>
    as a key, type, or elsewhere that a string is interpreted as a vocabulary item.
    Its value is either a string (<dfn data-lt="simple term definition|simple term" data-lt-nodefault="" id="dfn-simple-term-definition" data-dfn-type="dfn">simple term definition</dfn>),
    expanding to an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>,
    or a map (<a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a>).
  </dd>
  <dt class="changed"><dfn id="dfn-type-map" data-dfn-type="dfn" data-plurals="type maps">type map</dfn></dt><dd class="changed">
    A <a href="#dfn-type-map" class="internalDFN" data-link-type="dfn">type map</a> is a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a> value of a <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a>
    defined with <code>@container</code> set to <code>@type</code>,
    whose keys are interpreted as <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">IRIs</a>
    representing the <code>@type</code> of the associated <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a>;
    the value must be a <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a>, or <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a> of node objects.
    If the value contains a <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a> expanding to <code>@type</code>,
    its values are merged with the map value when expanding.
    See the <a href="#type-maps">Type Maps</a> section of JSON-LD 1.1 for a normative description.
  </dd>
  <dt><dfn class="preserve" data-dfn-type="dfn" data-plurals="typed values" id="dfn-typed-value">typed value</dfn></dt><dd>
    A <a href="#dfn-typed-value" class="internalDFN" data-link-type="dfn">typed value</a> consists of a value,
    which is a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">string</a>,
    and a type,
    which is an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>.</dd>
  <dt><dfn id="dfn-value-object" data-dfn-type="dfn" data-plurals="value objects">value object</dfn></dt><dd>
    A <a href="#dfn-value-object" class="internalDFN" data-link-type="dfn">value object</a> is a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a> that has an <code>@value</code> <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">entry</a>.</dd>
  <dt><dfn class="preserve" data-dfn-type="dfn" data-plurals="vocabulary mappings" id="dfn-vocabulary-mapping">vocabulary mapping</dfn></dt><dd>
    The vocabulary mapping is set in the <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a> using the <code>@vocab</code> key
    whose value must be an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>, a <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a>, a <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a>, or <code>null</code>.
    See the <a href="#value-objects">Value Objects</a> section of JSON-LD 1.1 for a normative description.
  </dd></dl>
</section>
</div>
  </section>

  <section class="informative" id="design-goals-and-rationale">
  <h3 id="x1-5-design-goals-and-rationale"><bdi class="secno">1.5 </bdi>Design Goals and Rationale<a class="self-link" aria-label="§" href="#design-goals-and-rationale"></a></h3><p><em>This section is non-normative.</em></p>

  <p>JSON-LD satisfies the following design goals:</p>

  <dl>
   <dt>Simplicity</dt>
   <dd>No extra processors or software libraries are necessary to use JSON-LD
     in its most basic form. The language provides developers with a very easy
     learning curve. Developers not concerned with Linked Data only need to understand JSON,
     and know to include but ignore the <code>@context</code> property,
     to use the basic functionality in JSON-LD.</dd>
   <dt>Compatibility</dt>
   <dd>A JSON-LD document is always a valid JSON document. This ensures that
    all of the standard JSON libraries work seamlessly with JSON-LD documents.</dd>
   <dt>Expressiveness</dt>
   <dd>The syntax serializes labeled directed graphs. This ensures that almost
    every real world data model can be expressed.</dd>
   <dt>Terseness</dt>
   <dd>The JSON-LD syntax is very terse and human readable, requiring as
    little effort as possible from the developer.</dd>
   <dt>Zero Edits, most of the time</dt>
   <dd>JSON-LD ensures a smooth and simple transition from existing
     JSON-based systems. In many cases,
     zero edits to the JSON document and the addition of one line to the HTTP response
     should suffice (see <a class="sectionRef sec-ref" href="#interpreting-json-as-json-ld">§&nbsp;<bdi class="secno">6.1 </bdi>Interpreting JSON as JSON-LD</a>).
     This allows organizations that have
     already deployed large JSON-based infrastructure to use JSON-LD's features
     in a way that is not disruptive to their day-to-day operations and is
     transparent to their current customers. However, there are times where
     mapping JSON to a graph representation is a complex undertaking.
     In these instances, rather than extending JSON-LD to support
     esoteric use cases, we chose not to support the use case. While Zero
     Edits is a design goal, it is not always possible without adding
     great complexity to the language. JSON-LD focuses on simplicity when
     possible.</dd>
    <dt>Usable as RDF</dt>
    <dd>JSON-LD is usable by developers as
      idiomatic JSON, with no need to understand RDF [<cite><a class="bibref" data-link-type="biblio" href="#bib-rdf11-concepts" title="RDF 1.1 Concepts and Abstract Syntax">RDF11-CONCEPTS</a></cite>].
      JSON-LD is also usable as RDF, so people intending to use JSON-LD
      with RDF tools will find it can be used like any other RDF syntax.
      Complete details of how JSON-LD relates to RDF are in section
      <a href="#relationship-to-rdf" class="sec-ref">§&nbsp;<bdi class="secno">10. </bdi>Relationship to RDF</a>.</dd>
  </dl>
  </section>

  <section class="informative" id="data-model-overview">
    <h3 id="x1-6-data-model-overview"><bdi class="secno">1.6 </bdi>Data Model Overview<a class="self-link" aria-label="§" href="#data-model-overview"></a></h3><p><em>This section is non-normative.</em></p>

    <p>Generally speaking, the data model described by a <a href="#dfn-json-ld-document" class="internalDFN" data-link-type="dfn">JSON-LD document</a> is a labeled, directed <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-graph">graph</a>.
      The graph contains <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-node">nodes</a>, which are connected by directed-arcs.
      A node is either a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-resource">resource</a> with <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-property">properties</a>, or the data values of those properties including
      <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">strings</a>, <a data-link-type="dfn" href="https://tc39.es/ecma262/#sec-terms-and-definitions-number-value">numbers</a>, <a href="#dfn-typed-value" class="internalDFN" data-link-type="dfn">typed values</a> (like dates and times) and <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">IRIs</a>.</p>
    <p class="changed">Within a directed graph, nodes are <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-resource">resources</a>, and may
      be <em>unnamed</em>, i.e., not identified by an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>;
      which are called <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node">blank nodes</a>,
      and may be identified using a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node-identifier">blank node identifier</a>.
      These identifiers may be required to represent a fully connected graph
      using a tree structure, such as JSON, but otherwise have no
      intrinsic meaning.
      Literal values, such as <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">strings</a> and <a data-link-type="dfn" href="https://tc39.es/ecma262/#sec-terms-and-definitions-number-value">numbers</a>, are also considered <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-resource">resources</a>,
      and JSON-LD distinguishes between <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a> and <a href="#dfn-value-object" class="internalDFN" data-link-type="dfn">value objects</a> to distinguish between the different
      kinds of <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-resource">resource</a>.</p>
    <p>This simple data model is incredibly
      flexible and powerful, capable of modeling almost any kind of
      data. For a deeper explanation of the data model, see
      section <a href="#data-model" class="sec-ref">§&nbsp;<bdi class="secno">8. </bdi>Data Model</a>.</p>

    <p>Developers who are familiar with Linked Data technologies will
      recognize the data model as the RDF Data Model. To dive deeper into how
      JSON-LD and RDF are related, see
      section <a href="#relationship-to-rdf" class="sec-ref">§&nbsp;<bdi class="secno">10. </bdi>Relationship to RDF</a>.</p>

    <p>At the surface level, a <a href="#dfn-json-ld-document" class="internalDFN" data-link-type="dfn">JSON-LD document</a> is simply
      <cite><a data-no-xref="" href="https://tools.ietf.org/html/rfc8259">JSON</a></cite>, detailed in [<cite><a class="bibref" data-link-type="biblio" href="#bib-rfc8259" title="The JavaScript Object Notation (JSON) Data Interchange Format">RFC8259</a></cite>].
      For the purpose of describing the core data structures,
      this is limited to <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">arrays</a>, <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">maps</a> (the parsed version of a <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc8259#section-4">JSON Object</a>),
      <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">strings</a>, <a data-link-type="dfn" href="https://tc39.es/ecma262/#sec-terms-and-definitions-number-value">numbers</a>, <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#boolean">booleans</a>, and <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#nulls">null</a>,
      <span class="changed">called the <a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-api/#dfn-internal-representation">JSON-LD internal representation</a>.
        This allows surface syntaxes other than JSON
        to be manipulated using the same algorithms, when the syntax maps
        to equivalent core data structures</span>.</p>
      <div class="note" role="note" id="issue-container-generatedID-1"><div role="heading" class="note-title marker" id="h-note-1" aria-level="4"><span>Note</span></div><p class="changed">Although not discussed in this specification,
        parallel work using <cite><a href="http://yaml.org/spec/1.2/spec.html">YAML Ain’t Markup Language (YAML™) Version 1.2</a></cite> [<cite><a class="bibref" data-link-type="biblio" href="#bib-yaml" title="YAML Ain’t Markup Language (YAML™) Version 1.2">YAML</a></cite>]
        and binary representations such as <cite><a href="https://tools.ietf.org/html/rfc7049">Concise Binary Object Representation (CBOR)</a></cite> [<cite><a class="bibref" data-link-type="biblio" href="#bib-rfc7049" title="Concise Binary Object Representation (CBOR)">RFC7049</a></cite>]
        could be used to map into the <a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-api/#dfn-internal-representation">internal representation</a>, allowing
        the JSON-LD 1.1 API [<cite><a class="bibref" data-link-type="biblio" href="#bib-json-ld11-api" title="JSON-LD 1.1 Processing Algorithms and API">JSON-LD11-API</a></cite>] to operate as if the source was a
        JSON document.</p></div>
  </section>

  <section class="informative" id="syntax-tokens-and-keywords">
    <h3 id="x1-7-syntax-tokens-and-keywords"><bdi class="secno">1.7 </bdi>Syntax Tokens and Keywords<a class="self-link" aria-label="§" href="#syntax-tokens-and-keywords"></a></h3><p><em>This section is non-normative.</em></p>

    <p>JSON-LD specifies a number of syntax tokens and <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keywords</a>
    that are a core part of the language.
    A normative description of the <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keywords</a> is given in <a class="sectionRef sec-ref" href="#keywords">§&nbsp;<bdi class="secno">9.16 </bdi>Keywords</a>.
    </p>

    <dl data-sort=""><dt class="changed"><code>:</code></dt><dd class="changed">
        The separator for JSON keys and values that use <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">compact IRIs</a>.</dd>
      <dt><code>@base</code></dt>
      <dd>Used to set the <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-base-iri">base <abbr title="Internationalized Resource Identifier">IRI</abbr></a> against which to resolve those <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-6.5">relative <abbr title="Internationalized Resource Identifier">IRI</abbr> references</a>
        which are otherwise interpreted relative to the document.
        This keyword is described in <a class="sectionRef sec-ref" href="#base-iri">§&nbsp;<bdi class="secno">4.1.3 </bdi>Base <abbr title="Internationalized Resource Identifier">IRI</abbr></a>.</dd>
      <dt><code>@container</code></dt>
      <dd>Used to set the default container type for a <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a>.
        This keyword is described in the following sections:
        <ul>
        <li><a class="sectionRef sec-ref" href="#sets-and-lists">§&nbsp;<bdi class="secno">4.3 </bdi>Value Ordering</a>,</li>
        <li><a class="sectionRef sec-ref" href="#data-indexing">§&nbsp;<bdi class="secno">4.6.1 </bdi>Data Indexing</a>,</li>
        <li><a class="sectionRef sec-ref" href="#language-indexing">§&nbsp;<bdi class="secno">4.6.2 </bdi>Language Indexing</a>,</li>
        <li class="changed"><a class="sectionRef sec-ref" href="#node-identifier-indexing">§&nbsp;<bdi class="secno">4.6.3 </bdi>Node Identifier Indexing</a>,</li>
        <li class="changed"><a class="sectionRef sec-ref" href="#node-type-indexing">§&nbsp;<bdi class="secno">4.6.4 </bdi>Node Type Indexing</a></li>
        <li class="changed"><a class="sectionRef sec-ref" href="#named-graphs">§&nbsp;<bdi class="secno">4.9 </bdi>Named Graphs</a>,</li>
        <li class="changed"><a class="sectionRef sec-ref" href="#named-graph-indexing">§&nbsp;<bdi class="secno">4.9.3 </bdi>Named Graph Indexing</a>, and</li>
        <li class="changed"><a class="sectionRef sec-ref" href="#named-graph-data-indexing">§&nbsp;<bdi class="secno">4.9.2 </bdi>Named Graph Data Indexing</a></li>
        </ul></dd>
      <dt><code>@context</code></dt>
      <dd>Used to define the short-hand names that are used throughout a JSON-LD
        document. These short-hand names are called <a href="#dfn-term" class="internalDFN" data-link-type="dfn">terms</a> and help
        developers to express specific identifiers in a compact manner. The
        <code>@context</code> keyword is described in detail in
        <a class="sectionRef sec-ref" href="#the-context">§&nbsp;<bdi class="secno">3.1 </bdi>The Context</a>.</dd>
      <dt class="changed"><code>@direction</code></dt>
      <dd class="changed">Used to set the <a href="#dfn-base-direction" class="internalDFN" data-link-type="dfn">base direction</a> of a <a href="#dfn-json-ld-value" class="internalDFN" data-link-type="dfn">JSON-LD value</a>,
        which are not <a href="#dfn-typed-value" class="internalDFN" data-link-type="dfn">typed values</a> (e.g. <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">strings</a>, or <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-language-tagged-string">language-tagged strings</a>).
        This keyword is described in
        <a class="sectionRef sec-ref" href="#string-internationalization">§&nbsp;<bdi class="secno">4.2.4 </bdi>String Internationalization</a>.</dd>
      <dt><code>@graph</code></dt><dd>Used to express a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-graph">graph</a>.
        This keyword is described in <a class="sectionRef sec-ref" href="#named-graphs">§&nbsp;<bdi class="secno">4.9 </bdi>Named Graphs</a>.</dd>
      <dt><code>@id</code></dt>
      <dd>Used to uniquely identify <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a> that are being described in the document
        with <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">IRIs</a> or
        <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node-identifier">blank node identifiers</a>. This keyword
        is described in <a class="sectionRef sec-ref" href="#node-identifiers">§&nbsp;<bdi class="secno">3.3 </bdi>Node Identifiers</a>.
        A <a href="#dfn-node-reference" class="internalDFN" data-link-type="dfn">node reference</a> is a <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> containing only the <code>@id</code> property,
        which may represent a reference to a <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> found elsewhere in the document.</dd>
      <dt class="changed"><code>@import</code></dt><dd class="changed">
        Used in a <a href="#dfn-context-definition" class="internalDFN" data-link-type="dfn">context definition</a> to load an external context
        within which the containing <a href="#dfn-context-definition" class="internalDFN" data-link-type="dfn">context definition</a> is merged.
        This can be useful to add JSON-LD 1.1 features to JSON-LD 1.0 contexts.</dd>
      <dt class="changed"><code>@included</code></dt><dd class="changed">
        Used in a top-level <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> to define an <a href="#dfn-included-block" class="internalDFN" data-link-type="dfn">included block</a>,
        for including secondary <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a> within another <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a>.
      </dd><dt><code>@index</code></dt>
      <dd>Used to specify that a container is used to index information and
        that processing should continue deeper into a JSON data structure.
        This keyword is described in <a class="sectionRef sec-ref" href="#data-indexing">§&nbsp;<bdi class="secno">4.6.1 </bdi>Data Indexing</a>.</dd>
      <dt class="changed"><code>@json</code></dt><dd class="changed">
        Used as the <code>@type</code> value of a <a href="#dfn-json-literal" class="internalDFN" data-link-type="dfn">JSON literal</a>.
        This keyword is described in <a href="#json-literals" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">4.2.2 </bdi>JSON Literals</a>.
      </dd>
      <dt><code>@language</code></dt>
      <dd>Used to specify the language for a particular string value or the default
        language of a JSON-LD document. This keyword is described in
        <a class="sectionRef sec-ref" href="#string-internationalization">§&nbsp;<bdi class="secno">4.2.4 </bdi>String Internationalization</a>.</dd>
      <dt><code>@list</code></dt>
      <dd>Used to express an ordered set of data.
        This keyword is described in <a class="sectionRef sec-ref" href="#lists">§&nbsp;<bdi class="secno">4.3.1 </bdi>Lists</a>.</dd>
      <dt class="changed"><code>@nest</code></dt><dd class="changed">Used to define a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-property">property</a> of a <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> that groups together properties of that node, but is not an edge in the graph.</dd>
      <dt class="changed"><code>@none</code></dt><dd class="changed">Used as an index value
        in an <a href="#dfn-index-map" class="internalDFN" data-link-type="dfn">index map</a>, <a href="#dfn-id-map" class="internalDFN" data-link-type="dfn">id map</a>, <a href="#dfn-language-map" class="internalDFN" data-link-type="dfn">language map</a>, <a href="#dfn-type-map" class="internalDFN" data-link-type="dfn">type map</a>, or elsewhere where a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a> is
        used to index into other values, when the indexed node does not have the feature being indexed.</dd>
      <dt class="changed"><code>@prefix</code></dt><dd class="changed">
        With the value <code>true</code>, allows this <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a> to be used to construct a <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a>
        when compacting.</dd>
      <dt class="changed"><code>@propagate</code></dt><dd class="changed">
        Used in a <a href="#dfn-context-definition" class="internalDFN" data-link-type="dfn">context definition</a> to change the scope of that context.
        By default, it is <code>true</code>,
        meaning that contexts propagate across <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a>
        (other than for <a href="#dfn-type-scoped-context" class="internalDFN" data-link-type="dfn">type-scoped contexts</a>, which default to <code>false</code>).
        Setting this to <code>false</code> causes term definitions created within that context
        to be removed when entering a new <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a>.</dd>
      <dt class="changed"><code>@protected</code></dt><dd class="changed">
        Used to prevent <a href="#dfn-term-definition" class="internalDFN" data-link-type="dfn">term definitions</a> of a context to be overridden by other contexts.
        This keyword is described in <a class="sectionRef sec-ref" href="#protected-term-definitions">§&nbsp;<bdi class="secno">4.1.11 </bdi>Protected Term Definitions</a>.
      </dd><dt><code>@reverse</code></dt>
      <dd>Used to express reverse properties. This keyword is described in
        <a class="sectionRef sec-ref" href="#reverse-properties">§&nbsp;<bdi class="secno">4.8 </bdi>Reverse Properties</a>.</dd>
      <dt><code>@set</code></dt>
      <dd>Used to express an unordered set of data and to ensure that values are always
         represented as arrays. This keyword is described in
         <a class="sectionRef sec-ref" href="#sets">§&nbsp;<bdi class="secno">4.3.2 </bdi>Sets</a>.</dd>
      <dt><code>@type</code></dt>
      <dd>Used to set the type of a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-node">node</a> or the datatype of a <a href="#dfn-typed-value" class="internalDFN" data-link-type="dfn">typed value</a>.
        This keyword is described further in <a class="sectionRef sec-ref" href="#specifying-the-type">§&nbsp;<bdi class="secno">3.5 </bdi>Specifying the Type</a>
        and <a class="sectionRef sec-ref" href="#typed-values">§&nbsp;<bdi class="secno">4.2.1 </bdi>Typed Values</a>.
        <div class="note" role="note" id="issue-container-generatedID-2"><div role="heading" class="note-title marker" id="h-note-2" aria-level="4"><span>Note</span></div><div class="">The use of <code>@type</code> to define a type for both
          <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a> and <a href="#dfn-value-object" class="internalDFN" data-link-type="dfn">value objects</a> addresses the basic need to type data,
          be it a literal value or a more complicated resource.
          Experts may find the overloaded use of the <code>@type</code> keyword for both purposes concerning,
          but should note that Web developer usage of this feature over multiple years
          has not resulted in its misuse due to the far less frequent use of <code>@type</code>
          to express typed literal values.
        </div></div>
      </dd>
      <dt><code>@value</code></dt>
      <dd>Used to specify the data that is associated with a particular
        <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-property">property</a> in the graph. This keyword is described in
        <a class="sectionRef sec-ref" href="#string-internationalization">§&nbsp;<bdi class="secno">4.2.4 </bdi>String Internationalization</a> and
        <a class="sectionRef sec-ref" href="#typed-values">§&nbsp;<bdi class="secno">4.2.1 </bdi>Typed Values</a>.</dd>
      <dt class="changed"><code>@version</code></dt><dd class="changed">
        Used in a <a href="#dfn-context-definition" class="internalDFN" data-link-type="dfn">context definition</a> to set the <a href="#dfn-processing-mode" class="internalDFN" data-link-type="dfn">processing mode</a>.
        New features since <cite><a href="https://www.w3.org/TR/2014/REC-json-ld-20140116/">JSON-LD 1.0</a></cite> [<cite><a class="bibref" data-link-type="biblio" href="#bib-json-ld10" title="JSON-LD 1.0">JSON-LD10</a></cite>] described in this specification are
        not available when <a href="#dfn-processing-mode" class="internalDFN" data-link-type="dfn">processing mode</a> has been explicitly set to
        <code>json-ld-1.0</code>.
        <div class="note" role="note" id="issue-container-generatedID-3"><div role="heading" class="note-title marker" id="h-note-3" aria-level="4"><span>Note</span></div><div class="">Within a <a href="#dfn-context-definition" class="internalDFN" data-link-type="dfn">context definition</a> <code>@version</code> takes the specific value <code>1.1</code>, not
        <code>"json-ld-1.1"</code>, as a JSON-LD 1.0 processor may accept a string value for <code>@version</code>,
        but will reject a numeric value.</div></div>
        <div class="note" role="note" id="issue-container-generatedID-4"><div role="heading" class="note-title marker" id="h-note-4" aria-level="4"><span>Note</span></div><div class="">The use of <code>1.1</code> for the value of <code>@version</code> is intended to
          cause a JSON-LD 1.0 processor to stop processing.
          Although it is clearly meant to be related to JSON-LD 1.1, it does not
          otherwise adhere to the requirements for <a href="https://semver.org/">Semantic Versioning</a>.</div></div>
      </dd>
      <dt><code>@vocab</code></dt>
      <dd>Used to expand properties and values in <code>@type</code> with a common prefix
        <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>. This keyword is described in <a class="sectionRef sec-ref" href="#default-vocabulary">§&nbsp;<bdi class="secno">4.1.2 </bdi>Default Vocabulary</a>.</dd>
      </dl>

    <p>All keys, <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keywords</a>, and values in JSON-LD are case-sensitive.</p>
  </section>
</section>

<section id="conformance"><h2 id="x2-conformance"><bdi class="secno">2. </bdi>Conformance<a class="self-link" aria-label="§" href="#conformance"></a></h2><p>
      As well as sections marked as non-normative, all authoring guidelines, diagrams, examples, and notes in this specification are non-normative. Everything else in this specification is normative.
    </p><p>
          The key words <em class="rfc2119">MAY</em>, <em class="rfc2119">MUST</em>, <em class="rfc2119">MUST NOT</em>, <em class="rfc2119">RECOMMENDED</em>, <em class="rfc2119">SHOULD</em>, and <em class="rfc2119">SHOULD NOT</em> in this document
          are to be interpreted as described in
          <a href="https://tools.ietf.org/html/bcp14">BCP 14</a>
          [<cite><a class="bibref" data-link-type="biblio" href="#bib-rfc2119" title="Key words for use in RFCs to Indicate Requirement Levels">RFC2119</a></cite>] [<cite><a class="bibref" data-link-type="biblio" href="#bib-rfc8174" title="Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words">RFC8174</a></cite>]
          when, and only when, they appear in all capitals, as shown here.
        </p>
  <p>A <a href="#dfn-json-ld-document" class="internalDFN" data-link-type="dfn">JSON-LD document</a> complies with this specification if it follows
    the normative statements in appendix <a href="#json-ld-grammar" class="sec-ref">§&nbsp;<bdi class="secno">9. </bdi>JSON-LD Grammar</a>. JSON documents
    can be interpreted as JSON-LD by following the normative statements in
    <a class="sectionRef sec-ref" href="#interpreting-json-as-json-ld">§&nbsp;<bdi class="secno">6.1 </bdi>Interpreting JSON as JSON-LD</a>. For convenience, normative
    statements for documents are often phrased as statements on the properties of the document.</p>

  <p>This specification makes use of the following namespace prefixes:</p>
  <table class="simple">
    <thead><tr>
      <th>Prefix</th>
      <th><abbr title="Internationalized Resource Identifier">IRI</abbr></th>
    </tr></thead>
    <tbody>
      <tr>
        <td>dc11</td>
        <td>http://purl.org/dc/elements/1.1/</td>
      </tr>
      <tr>
        <td>dcterms</td>
        <td>http://purl.org/dc/terms/</td>
      </tr>
      <tr>
        <td>cred</td>
        <td>https://w3id.org/credentials#</td>
      </tr>
      <tr>
        <td>foaf</td>
        <td>http://xmlns.com/foaf/0.1/</td>
      </tr>
      <tr>
        <td>geojson</td>
        <td>https://purl.org/geojson/vocab#</td>
      </tr>
      <tr>
        <td>prov</td>
        <td>http://www.w3.org/ns/prov#</td>
      </tr>
      <tr>
        <td>i18n</td>
        <td>https://www.w3.org/ns/i18n#</td>
      </tr>
      <tr>
        <td>rdf</td>
        <td>http://www.w3.org/1999/02/22-rdf-syntax-ns#</td>
      </tr>
      <tr>
        <td>schema</td>
        <td>http://schema.org/</td>
      </tr>
      <tr>
        <td>skos</td>
        <td>http://www.w3.org/2004/02/skos/core#</td>
      </tr>
      <tr>
        <td>xsd</td>
        <td>http://www.w3.org/2001/XMLSchema#</td>
      </tr>
    </tbody>
  </table>

  <p>These are used within this document as part of a <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a>
    as a shorthand for the resulting <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>, such as <code>dcterms:title</code>
    used to represent <code>http://purl.org/dc/terms/title</code>.</p>
</section>

<section class="informative" id="basic-concepts">
  <h2 id="x3-basic-concepts"><bdi class="secno">3. </bdi>Basic Concepts<a class="self-link" aria-label="§" href="#basic-concepts"></a></h2><p><em>This section is non-normative.</em></p>

  <p>JSON [<cite><a class="bibref" data-link-type="biblio" href="#bib-rfc8259" title="The JavaScript Object Notation (JSON) Data Interchange Format">RFC8259</a></cite>] is a lightweight, language-independent data interchange format.
    It is easy to parse and easy to generate. However, it is difficult to integrate JSON
    from different sources as the data may contain keys that conflict with other
    data sources. Furthermore, JSON has no
    built-in support for hyperlinks, which are a fundamental building block on
    the Web. Let's start by looking at an example that we will be using for the
    rest of this section:</p>

  <div class="example" id="example-2-sample-json-document">
          <div class="marker">
      <a class="self-link" href="#example-2-sample-json-document">Example<bdi> 2</bdi></a><span class="example-title">: Sample JSON document</span>
    </div> <pre aria-busy="false"><code class="hljs json">{
  <span class="hljs-attr">"name"</span>: <span class="hljs-string">"Manu Sporny"</span>,
  <span class="hljs-attr">"homepage"</span>: <span class="hljs-string">"http://manu.sporny.org/"</span>,
  <span class="hljs-attr">"image"</span>: <span class="hljs-string">"http://manu.sporny.org/images/manu.png"</span>
}</code></pre>
        </div>

  <p>It's obvious to humans that the data is about a person whose
    <code>name</code> is "Manu Sporny"
    and that the <code>homepage</code> property contains the URL of that person's homepage.
    A machine doesn't have such an intuitive understanding and sometimes,
    even for humans, it is difficult to resolve ambiguities in such representations. This problem
    can be solved by using unambiguous identifiers to denote the different concepts instead of
    tokens such as "name", "homepage", etc.</p>

  <p>Linked Data, and the Web in general, uses <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">IRIs</a>
    (<a href="https://tools.ietf.org/html/rfc3987#section-2">Internationalized Resource Identifiers</a> as described in [<cite><a class="bibref" data-link-type="biblio" href="#bib-rfc3987" title="Internationalized Resource Identifiers (IRIs)">RFC3987</a></cite>]) for unambiguous
    identification. The idea is to use <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">IRIs</a>
    to assign unambiguous identifiers to data that may be of use to other developers.
    It is useful for <a href="#dfn-term" class="internalDFN" data-link-type="dfn">terms</a>,
    like <code>name</code> and <code>homepage</code>, to expand to <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">IRIs</a>
    so that developers don't accidentally step on each other's terms. Furthermore, developers and
    machines are able to use this <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> (by using a web browser, for instance) to go to
    the term and get a definition of what the term means. This process is known as <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>
    dereferencing.</p>

  <p>Leveraging the popular <a href="http://schema.org/">schema.org vocabulary</a>,
    the example above could be unambiguously expressed as follows:</p>

  <aside class="example ds-selector-tabs" id="example-3-sample-json-ld-document-using-full-iris-instead-of-terms"><div class="marker">
      <a class="self-link" href="#example-3-sample-json-ld-document-using-full-iris-instead-of-terms">Example<bdi> 3</bdi></a><span class="example-title">: Sample JSON-LD document using full IRIs instead of terms</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="expanded">Expanded (Input)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="turtle">Turtle (Result)</button>
      <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22http%3A%2F%2Fschema.org%2Fname%22%3A%20%22Manu%20Sporny%22%2C%0A%20%20%22http%3A%2F%2Fschema.org%2Furl%22%3A%20%7B%0A%20%20%20%20%22%40id%22%3A%20%22http%3A%2F%2Fmanu.sporny.org%2F%22%0A%20%20%20%20%0A%20%20%7D%2C%0A%20%20%22http%3A%2F%2Fschema.org%2Fimage%22%3A%20%7B%0A%20%20%20%20%22%40id%22%3A%20%22http%3A%2F%2Fmanu.sporny.org%2Fimages%2Fmanu.png%22%0A%20%20%7D%0A%7D">Open in playground</a>
    </div>
    <pre class="expanded input selected nohighlight">{
  "<span class="hl-bold">http://schema.org/name</span>": "Manu Sporny",
  "<span class="hl-bold">http://schema.org/url</span>": <span class="hl-bold">{
    "@id": </span>"http://manu.sporny.org/"
    <span class="comment">↑ The '@id' keyword means 'This value is an identifier that is an IRI'</span>
  <span class="hl-bold">}</span>,
  "<span class="hl-bold">http://schema.org/image</span>": <span class="hl-bold">{
    "@id": </span>"http://manu.sporny.org/images/manu.png"
  <span class="hl-bold">}</span>
}</pre>
    <table class="statements" data-result-for="Sample JSON-LD document using full IRIs instead of terms-expanded" data-to-rdf="">
      <thead><tr><th>Subject</th><th>Property</th><th>Value</th></tr></thead>
      <tbody>
        <tr><td>_:b0</td><td>schema:image</td><td>http://manu.sporny.org/images/manu.png</td></tr>
        <tr><td>_:b0</td><td>schema:name</td><td>Manu Sporny</td></tr>
        <tr><td>_:b0</td><td>schema:url</td><td>http://manu.sporny.org/</td></tr>
      </tbody>
    </table>
    <pre class="turtle" data-content-type="text/turtle" data-result-for="Sample JSON-LD document using full IRIs instead of terms-expanded" data-to-rdf="" aria-busy="false"><code class="hljs">@prefix schema: &lt;http://schema.org/&gt; .
@prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt; .

 [
   schema:image &lt;http://manu.sporny.org/images/manu.png&gt;;
   schema:name "Manu Sporny";
   schema:url &lt;http://manu.sporny.org/&gt;
 ] .</code></pre>
  </aside>

  <p>In the example above, every property is unambiguously identified by an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> and all values
    representing <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">IRIs</a> are explicitly marked as such by the
    <code>@id</code> <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a>. While this is a valid JSON-LD
    document that is very specific about its data, the document is also overly verbose and difficult
    to work with for human developers. To address this issue, JSON-LD introduces the notion
    of a <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a> as described in the next section.</p>

  <p>This section only covers the most basic features of JSON-LD. More advanced features,
    including <a href="#dfn-typed-value" class="internalDFN" data-link-type="dfn">typed values</a>, <a href="#indexed-values">indexed values</a>, and <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-named-graph">named graphs</a>,
    can be found in <a class="sectionRef sec-ref" href="#advanced-concepts">§&nbsp;<bdi class="secno">4. </bdi>Advanced Concepts</a>.</p>


  <section class="informative" id="the-context">
    <h3 id="x3-1-the-context"><bdi class="secno">3.1 </bdi>The Context<a class="self-link" aria-label="§" href="#the-context"></a></h3><p><em>This section is non-normative.</em></p>

    <p>When two people communicate with one another, the conversation takes
    place in a shared environment, typically called
    "the context of the conversation". This shared context allows the
    individuals to use shortcut terms, like the first name of a mutual friend,
    to communicate more quickly but without losing accuracy. A context in
    JSON-LD works in the same way. It allows two applications to use shortcut
    terms to communicate with one another more efficiently, but without
    losing accuracy.</p>

    <p>Simply speaking, a <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a> is used to map <a href="#dfn-term" class="internalDFN" data-link-type="dfn">terms</a> to <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">IRIs</a>.
      <a href="#dfn-term" class="internalDFN" data-link-type="dfn">Terms</a> are case sensitive and most valid <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">strings</a> that are not reserved JSON-LD <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keywords</a>
      can be used as a <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a>.
      <span class="changed">Exceptions are the empty string <code>""</code> and strings that have the form
        of a keyword (i.e., starting with <code>"@"</code> followed exclusively by one or more <em>ALPHA</em> characters (see [<cite><a class="bibref" data-link-type="biblio" href="#bib-rfc5234" title="Augmented BNF for Syntax Specifications: ABNF">RFC5234</a></cite>])), which must not be used as terms.
        Strings that have the form of
        an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> (e.g., containing a <code>":"</code>) should not be used as terms.</span></p>

    <p>For the sample document in the previous section, a <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a> would
      look something like this:</p>

    <div class="example" id="example-4-context-for-the-sample-document-in-the-previous-section">
          <div class="marker">
      <a class="self-link" href="#example-4-context-for-the-sample-document-in-the-previous-section">Example<bdi> 4</bdi></a><span class="example-title">: Context for the sample document in the previous section</span>
    </div> <pre class="context nohighlight" data-context-for="Sample JSON document">{
  <span class="hl-bold">"@context": {
    "name": "http://schema.org/name",</span>
    <span class="comment">↑ This means that 'name' is shorthand for 'http://schema.org/name'</span>
    <span class="hl-bold">"image": {
      "@id": "http://schema.org/image",</span>
      <span class="comment">↑ This means that 'image' is shorthand for 'http://schema.org/image'</span>
      <span class="hl-bold">"@type": "@id"</span>
      <span class="comment">↑ This means that a string value associated with 'image'
        should be interpreted as an identifier that is an IRI</span>
    <span class="hl-bold">},
    "homepage": {
      "@id": "http://schema.org/url",</span>
      <span class="comment">↑ This means that 'homepage' is shorthand for 'http://schema.org/url'</span>
      <span class="hl-bold">"@type": "@id"</span>
      <span class="comment">↑ This means that a string value associated with 'homepage'
        should be interpreted as an identifier that is an IRI</span> <span class="hl-bold">
    }
  }</span>
}</pre>
        </div>

    <p>As the <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a> above shows, the value of a <a href="#dfn-term-definition" class="internalDFN" data-link-type="dfn">term definition</a> can
      either be a simple string, mapping the <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a> to an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>,
      or a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a>.</p>

    <p>A <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a> is introduced using an <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">entry</a> with the key <code>@context</code> and may
      appear within a <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> or a <a href="#dfn-value-object" class="internalDFN" data-link-type="dfn">value object</a>.</p>

    <p>When an <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">entry</a> with a <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a> key has a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a> value, the <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a> is called
      an <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a>. The example above specifies that
      the values of <code>image</code> and <code>homepage</code>, if they are
      strings, are to be interpreted as
      <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">IRIs</a>. <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">Expanded term definitions</a>
      also allow terms to be used for <a href="#data-indexing">index maps</a>
      and to specify whether <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a> values are to be
      interpreted as <a href="#sets">sets</a> or <a href="#lists">lists</a>.
      <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">Expanded term definitions</a> may
      be defined using <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">IRIs</a> or
      <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">compact IRIs</a> as keys, which is
      mainly used to associate type or language information with an
      <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">IRIs</a> or <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a>.</p>

    <p><a href="#dfn-context" class="internalDFN" data-link-type="dfn">Contexts</a> can either be directly embedded
      into the document (an <a href="#dfn-embedded-context" class="internalDFN" data-link-type="dfn">embedded context</a>) or be referenced using a URL.
      Assuming the context document in the previous
      example can be retrieved at <code>https://json-ld.org/contexts/person.jsonld</code>,
      it can be referenced by adding a single line and allows a JSON-LD document to
      be expressed much more concisely as shown in the example below:</p>

    <aside class="example ds-selector-tabs" id="example-5-referencing-a-json-ld-context"><div class="marker">
      <a class="self-link" href="#example-5-referencing-a-json-ld-context">Example<bdi> 5</bdi></a><span class="example-title">: Referencing a JSON-LD context</span>
    </div>
      <div class="selectors">
        <button class="selected input" data-selects="compacted">Compacted (Input)</button>
        <button data-selects="expanded">Expanded (Result)</button>
        <button data-selects="statements">Statements</button>
        <button data-selects="turtle">Turtle</button>
        <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%22https%3A%2F%2Fjson-ld.org%2Fcontexts%2Fperson.jsonld%22%2C%0A%20%20%22name%22%3A%20%22Manu%20Sporny%22%2C%0A%20%20%22homepage%22%3A%20%22http%3A%2F%2Fmanu.sporny.org%2F%22%2C%0A%20%20%22image%22%3A%20%22http%3A%2F%2Fmanu.sporny.org%2Fimages%2Fmanu.png%22%0A%7D">Open in playground</a>
      </div>
      <pre class="compacted input selected nohighlight">{
  <span class="hl-bold">"@context": "https://json-ld.org/contexts/person.jsonld",</span>
  "name": "Manu Sporny",
  "homepage": "http://manu.sporny.org/",
  "image": "http://manu.sporny.org/images/manu.png"
}</pre>
      <pre class="expanded result nohighlight" data-result-for="Referencing a JSON-LD context-compacted">[{
  "http://xmlns.com/foaf/0.1/name": [{"@value": "Manu Sporny"}],
  "http://xmlns.com/foaf/0.1/homepage": [{ "@id": "http://manu.sporny.org/" }],
  "http://xmlns.com/foaf/0.1/img": [{ "@id": "http://manu.sporny.org/images/manu.png" }]
}]</pre>
      <table class="statements" data-result-for="Referencing a JSON-LD context-expanded" data-to-rdf="">
        <thead><tr><th>Subject</th><th>Property</th><th>Value</th></tr></thead>
        <tbody>
          <tr><td>_:b0</td><td>foaf:name</td><td>Manu Sporny</td></tr>
          <tr><td>_:b0</td><td>foaf:homepage</td><td>http://manu.sporny.org/</td></tr>
          <tr><td>_:b0</td><td>foaf:img</td><td>http://manu.sporny.org/images/manu.png</td></tr>
        </tbody>
      </table>
      <pre class="turtle" data-content-type="text/turtle" data-result-for="Referencing a JSON-LD context-expanded" data-to-rdf="" aria-busy="false"><code class="hljs">@prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt; .
@prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt; .

 [
   foaf:name "Manu Sporny";
   foaf:homepage &lt;http://manu.sporny.org/&gt;;
   foaf:img &lt;http://manu.sporny.org/images/manu.png&gt;
 ] .</code></pre>
    </aside>

    <p>The referenced context not only specifies how the terms map to
      <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">IRIs</a> in the Schema.org vocabulary but also
      specifies that string values associated with
      the <code>homepage</code> and <code>image</code> property
      can be interpreted as an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> (<code>"@type": "@id"</code>,
      see <a class="sectionRef sec-ref" href="#iris">§&nbsp;<bdi class="secno">3.2 </bdi>IRIs</a> for more details). This information allows developers
      to re-use each other's data without having to agree to how their data will interoperate
      on a site-by-site basis. External JSON-LD context documents may contain extra
      information located outside of the <code>@context</code> key, such as
      documentation about the <a href="#dfn-term" class="internalDFN" data-link-type="dfn">terms</a> declared in the
      document. Information contained outside of the <code>@context</code> value
      is ignored when the document is used as an external <dfn data-lt="context document|JSON-LD context document" data-dfn-type="dfn" id="dfn-context-document">JSON-LD context document</dfn>.</p>

    <p class="changed">A remote context may also be referenced using a relative URL,
      which is resolved relative to the location of the document containing the reference.
      For example, if a document were located at <code>http://example.org/document.jsonld</code>
      and contained a relative reference to <code>context.jsonld</code>,
      the referenced context document would be found relative at <code>http://example.org/context.jsonld</code>.</p>

    <div class="example" id="example-6-loading-a-relative-context">
          <div class="marker">
      <a class="self-link" href="#example-6-loading-a-relative-context">Example<bdi> 6</bdi></a><span class="example-title">: Loading a relative context</span>
    </div> <pre class="nohighlight changed" data-ignore="">{
  <span class="hl-bold">"@context": "context.jsonld",</span>
  "name": "Manu Sporny",
  "homepage": "http://manu.sporny.org/",
  "image": "http://manu.sporny.org/images/manu.png"
}</pre>
        </div>

    <div class="note" role="note" id="issue-container-generatedID-5"><div role="heading" class="note-title marker" id="h-note-5" aria-level="4"><span>Note</span></div><p class="changed">Resolution of relative references to context URLs also applies to remote
      context documents, as they may themselves contain references to other contexts.</p></div>

    <p>JSON documents can be interpreted as JSON-LD without having to be modified by
      referencing a <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a> via an <a href="https://tools.ietf.org/html/rfc8288#section-3">HTTP Link Header</a>
      as described in <a class="sectionRef sec-ref" href="#interpreting-json-as-json-ld">§&nbsp;<bdi class="secno">6.1 </bdi>Interpreting JSON as JSON-LD</a>. It is also
      possible to apply a custom context using the JSON-LD 1.1 API [<cite><a class="bibref" data-link-type="biblio" href="#bib-json-ld11-api" title="JSON-LD 1.1 Processing Algorithms and API">JSON-LD11-API</a></cite>].</p>

    <p>In <a href="#dfn-json-ld-document" class="internalDFN" data-link-type="dfn">JSON-LD documents</a>,
      <a href="#dfn-context" class="internalDFN" data-link-type="dfn">contexts</a> may also be specified inline.
      This has the advantage that documents can be processed even in the
      absence of a connection to the Web. Ultimately, this is a modeling decision
      and different use cases may require different handling.
      See <a href="#iana-security">Security Considerations</a> in <a href="#iana-considerations" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">C. </bdi>IANA Considerations</a>
      for a discussion on using remote contexts.</p>

    <aside class="example ds-selector-tabs" id="example-7-in-line-context-definition"><div class="marker">
      <a class="self-link" href="#example-7-in-line-context-definition">Example<bdi> 7</bdi></a><span class="example-title">: In-line context definition</span>
    </div>
      <div class="selectors">
        <button class="selected" data-selects="compacted">Compacted (Input)</button>
        <button data-selects="expanded">Expanded (Result)</button>
        <button data-selects="statements">Statements</button>
        <button data-selects="turtle">Turtle</button>
        <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%22name%22%3A%20%22http%3A%2F%2Fschema.org%2Fname%22%2C%0A%20%20%20%20%22image%22%3A%20%7B%0A%20%20%20%20%20%20%22%40id%22%3A%20%22http%3A%2F%2Fschema.org%2Fimage%22%2C%0A%20%20%20%20%20%20%22%40type%22%3A%20%22%40id%22%0A%20%20%20%20%7D%2C%0A%20%20%20%20%22homepage%22%3A%20%7B%0A%20%20%20%20%20%20%22%40id%22%3A%20%22http%3A%2F%2Fschema.org%2Furl%22%2C%0A%20%20%20%20%20%20%22%40type%22%3A%20%22%40id%22%0A%20%20%20%20%7D%0A%20%20%7D%2C%0A%20%20%22name%22%3A%20%22Manu%20Sporny%22%2C%0A%20%20%22homepage%22%3A%20%22http%3A%2F%2Fmanu.sporny.org%2F%22%2C%0A%20%20%22image%22%3A%20%22http%3A%2F%2Fmanu.sporny.org%2Fimages%2Fmanu.png%22%0A%7D">Open in playground</a>
      </div>
      <pre class="compacted input selected input nohighlight">{
  <span class="hl-bold">"@context": {
    "name": "http://schema.org/name",
    "image": {
      "@id": "http://schema.org/image",
      "@type": "@id"
    },
    "homepage": {
      "@id": "http://schema.org/url",
      "@type": "@id"
    }
  },</span>
  "name": "Manu Sporny",
  "homepage": "http://manu.sporny.org/",
  "image": "http://manu.sporny.org/images/manu.png"
}</pre>
      <pre class="expanded result nohighlight" data-result-for="In-line context definition-compacted">[{
  "http://schema.org/name": [{"@value": "Manu Sporny"}],
  "http://schema.org/url": [{ "@id": "http://manu.sporny.org/" }],
  "http://schema.org/image": [{ "@id": "http://manu.sporny.org/images/manu.png" }]
}]</pre>
      <table class="statements" data-result-for="In-line context definition-expanded" data-to-rdf="">
        <thead><tr><th>Subject</th><th>Property</th><th>Value</th></tr></thead>
        <tbody>
          <tr><td>_:b0</td><td>schema:image</td><td>http://manu.sporny.org/images/manu.png</td></tr>
          <tr><td>_:b0</td><td>schema:name</td><td>Manu Sporny</td></tr>
          <tr><td>_:b0</td><td>schema:url</td><td>http://manu.sporny.org/</td></tr>
        </tbody>
      </table>
      <pre class="turtle" data-content-type="text/turtle" data-result-for="In-line context definition-expanded" data-to-rdf="" aria-busy="false"><code class="hljs">@prefix schema: &lt;http://schema.org/&gt; .
@prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt; .

 [
   schema:image &lt;http://manu.sporny.org/images/manu.png&gt;;
   schema:name "Manu Sporny";
   schema:url &lt;http://manu.sporny.org/&gt;
 ] .</code></pre>
    </aside>

    <p>This section only covers the most basic features of the JSON-LD Context.
      The Context can also be used to help interpret other more
      complex JSON data structures, such as <a href="#indexed-values">indexed values</a>,
      <a href="#sets-and-lists">ordered values</a>, and
      <a href="#nested-properties">nested properties</a>.
      More advanced features related to the JSON-LD Context are covered in
      <a href="#advanced-concepts" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">4. </bdi>Advanced Concepts</a>.</p>
  </section>

<section class="informative" id="iris">
  <h3 id="x3-2-iris"><bdi class="secno">3.2 </bdi>IRIs<a class="self-link" aria-label="§" href="#iris"></a></h3><p><em>This section is non-normative.</em></p>

  <p><a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">IRIs</a> (<a href="https://tools.ietf.org/html/rfc3987#section-2">Internationalized Resource Identifiers</a>
    [<cite><a class="bibref" data-link-type="biblio" href="#bib-rfc3987" title="Internationalized Resource Identifiers (IRIs)">RFC3987</a></cite>]) are fundamental to Linked Data as that is how most
    <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-node">nodes</a> and <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-property">properties</a>
    are identified.
    In JSON-LD, IRIs may be represented as an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-1.3"><abbr title="Internationalized Resource Identifier">IRI</abbr> reference</a>.
    An <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> is defined in [<cite><a class="bibref" data-link-type="biblio" href="#bib-rfc3987" title="Internationalized Resource Identifiers (IRIs)">RFC3987</a></cite>] as containing a
    <em>scheme</em> along with <em>path</em> and optional <em>query</em> and
    <em>fragment</em> segments. A <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-6.5">relative <abbr title="Internationalized Resource Identifier">IRI</abbr> reference</a> is an <abbr title="Internationalized Resource Identifier">IRI</abbr>
    that is relative to some other <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>.
    In JSON-LD, with exceptions that are as described below, all <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-6.5">relative <abbr title="Internationalized Resource Identifier">IRI</abbr> references</a>
    are resolved relative to the <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-base-iri">base <abbr title="Internationalized Resource Identifier">IRI</abbr></a>.</p>

  <div class="note" role="note" id="issue-container-generatedID-6"><div role="heading" class="note-title marker" id="h-note-6" aria-level="4"><span>Note</span></div><p class="">As noted in <a href="#how-to-read-this-document" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">1.1 </bdi>How to Read this Document</a>,
    IRIs can often be confused with URLs (<a href="https://www.w3.org/TR/ld-glossary/#uniform-resource-locator">Uniform Resource Locators</a>),
    the primary distinction is that a URL <em>locates</em> a resource on the web,
    an <abbr title="Internationalized Resource Identifier">IRI</abbr> <em>identifies</em> a resource. While it is a good practice for resource identifiers
    to be dereferenceable, sometimes this is not practical. In particular, note the
    [<cite><a class="bibref" data-link-type="biblio" href="#bib-urn" title="URN Syntax">URN</a></cite>] scheme for Uniform Resource Names, such as <cite><a data-no-xref="" href="https://tools.ietf.org/html/rfc4122">UUID</a></cite>.
    An example UUID is <code>urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf6</code>.</p></div>

  <div class="note" role="note" id="issue-container-generatedID-7"><div role="heading" class="note-title marker" id="h-note-7" aria-level="4"><span>Note</span></div><p class=""><a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-property">Properties</a>, values of <code>@type</code>,
    and values of <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-property">properties</a> with a <a href="#dfn-term-definition" class="internalDFN" data-link-type="dfn">term definition</a>
    that defines them as being relative to the <a href="#dfn-vocabulary-mapping" class="internalDFN" data-link-type="dfn">vocabulary mapping</a>,
    may have the form of a <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-6.5">relative <abbr title="Internationalized Resource Identifier">IRI</abbr> reference</a>, but are resolved using the
    <a href="#dfn-vocabulary-mapping" class="internalDFN" data-link-type="dfn">vocabulary mapping</a>, and not the <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-base-iri">base <abbr title="Internationalized Resource Identifier">IRI</abbr></a>.</p></div>

  <p>A <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">string</a> is interpreted as an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> when it is the
    value of a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">map entry</a> with the key <code>@id</code>:</p>

  <div class="example" id="example-8-values-of-id-are-interpreted-as-iri">
          <div class="marker">
      <a class="self-link" href="#example-8-values-of-id-are-interpreted-as-iri">Example<bdi> 8</bdi></a><span class="example-title">: Values of @id are interpreted as IRI</span>
    </div> <pre class="nohighlight">{
  <span class="comment">...</span>
  "homepage": { "<span class="hl-bold">@id</span>": "http://example.com/" }
  <span class="comment">...</span>
}</pre>
        </div>

  <p>Values that are interpreted as <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">IRIs</a>, can also be
    expressed as <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-6.5">relative <abbr title="Internationalized Resource Identifier">IRI</abbr> references</a>. For example,
    assuming that the following document is located at
    <code>http://example.com/about/</code>, the <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-6.5">relative <abbr title="Internationalized Resource Identifier">IRI</abbr> reference</a>
    <code>../</code> would expand to <code>http://example.com/</code> (for more
    information on where <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-6.5">relative <abbr title="Internationalized Resource Identifier">IRI</abbr> references</a> can be
    used, please refer to section <a href="#json-ld-grammar" class="sec-ref">§&nbsp;<bdi class="secno">9. </bdi>JSON-LD Grammar</a>).</p>

  <div class="example" id="example-9-iris-can-be-relative">
          <div class="marker">
      <a class="self-link" href="#example-9-iris-can-be-relative">Example<bdi> 9</bdi></a><span class="example-title">: IRIs can be relative</span>
    </div> <pre class="nohighlight">{
  <span class="comment">...</span>
  "homepage": { "<span class="hl-bold">@id</span>": "../" }
  <span class="comment">...</span>
}</pre>
        </div>

  <p><a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">IRIs</a> can be expressed directly in the key position like so:</p>

  <div class="example" id="example-10-iri-as-a-key">
          <div class="marker">
      <a class="self-link" href="#example-10-iri-as-a-key">Example<bdi> 10</bdi></a><span class="example-title">: IRI as a key</span>
    </div> <pre class="nohighlight">{
  <span class="comment">...</span>
  "<span class="hl-bold">http://schema.org/name</span>": "Manu Sporny"<span class="comment">,
  ...</span>
}</pre>
        </div>

  <p>In the example above, the key <code>http://schema.org/name</code>
    is interpreted as an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>.</p>

  <p>Term-to-<abbr title="Internationalized Resource Identifier">IRI</abbr> expansion occurs if the key matches a <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a> defined
    within the <a href="#dfn-active-context" class="internalDFN" data-link-type="dfn">active context</a>:</p>

  <aside class="example ds-selector-tabs" id="example-11-term-expansion-from-context-definition"><div class="marker">
      <a class="self-link" href="#example-11-term-expansion-from-context-definition">Example<bdi> 11</bdi></a><span class="example-title">: Term expansion from context definition</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="expanded">Expanded (Result)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="turtle">Turtle</button>
      <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%22name%22%3A%20%22http%3A%2F%2Fschema.org%2Fname%22%0A%20%20%7D%2C%0A%20%20%22name%22%3A%20%22Manu%20Sporny%22%2C%0A%20%20%22status%22%3A%20%22trollin'%22%0A%7D">Open in playground</a>
    </div>
    <pre class="compacted input selected nohighlight">{
  "<span class="hl-bold">@context</span>": {
    "<span class="hl-bold">name</span>": "<span class="hl-bold">http://schema.org/name</span>"
  },
  "<span class="hl-bold">name</span>": "Manu Sporny",
  "status": "trollin'"
}</pre>
    <pre class="expanded result nohighlight" data-result-for="Term expansion from context definition-compacted">[{
  "http://schema.org/name": [{"@value": "Manu Sporny"}]
}]</pre>
    <table class="statements" data-result-for="Term expansion from context definition-expanded" data-to-rdf="">
      <thead><tr><th>Subject</th><th>Property</th><th>Value</th></tr></thead>
      <tbody>
        <tr><td>_:b0</td><td>schema:name</td><td>Manu Sporny</td></tr>
      </tbody>
    </table>
    <pre class="turtle" data-content-type="text/turtle" data-result-for="Term expansion from context definition-expanded" data-to-rdf="" aria-busy="false"><code class="hljs">@prefix schema: &lt;http://schema.org/&gt; .
@prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt; .

 [
   schema:name "Manu Sporny"
 ] .</code></pre>
  </aside>

  <p>JSON keys that do not expand to an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>, such as <code>status</code>
    in the example above, are not Linked Data and thus ignored when processed.</p>

  <p>If type <a href="#dfn-coercion" class="internalDFN" data-link-type="dfn">coercion</a> rules are specified in the <code>@context</code> for
    a particular <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a> or property <abbr title="Internationalized Resource Identifier">IRI</abbr>, an <abbr title="Internationalized Resource Identifier">IRI</abbr> is generated:</p>

  <aside class="example ds-selector-tabs" id="example-12-type-coercion"><div class="marker">
      <a class="self-link" href="#example-12-type-coercion">Example<bdi> 12</bdi></a><span class="example-title">: Type coercion</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="expanded">Expanded (Result)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="turtle">Turtle</button>
      <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%0A%20%20%20%20%22homepage%22%3A%20%7B%0A%20%20%20%20%20%20%22%40id%22%3A%20%22http%3A%2F%2Fschema.org%2Furl%22%2C%0A%20%20%20%20%20%20%22%40type%22%3A%20%22%40id%22%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%7D%2C%0A%20%20%0A%20%20%22homepage%22%3A%20%22http%3A%2F%2Fmanu.sporny.org%2F%22%0A%20%20%0A%7D">Open in playground</a>
    </div>
    <pre class="compacted input selected nohighlight">{<span class="hl-bold">
  "@context": {
    <span class="comment">...</span>
    "homepage": {
      "@id": "http://schema.org/url",
      "@type": "@id"
    }
    <span class="comment">...</span>
  },</span>
  <span class="comment">...</span>
  "homepage": "http://manu.sporny.org/"
  <span class="comment">...</span>
}</pre>
    <pre class="expanded result nohighlight" data-result-for="Type coercion-compacted">[{
  "http://schema.org/url": [{"@id": "http://manu.sporny.org/"}]
}]</pre>
    <table class="statements" data-result-for="Type coercion-expanded" data-to-rdf="">
      <thead><tr><th>Subject</th><th>Property</th><th>Value</th></tr></thead>
      <tbody>
        <tr><td>_:b0</td><td>schema:url</td><td>http://manu.sporny.org/</td></tr>
      </tbody>
    </table>
    <pre class="turtle" data-content-type="text/turtle" data-result-for="Type coercion-expanded" data-to-rdf="" aria-busy="false"><code class="hljs">@prefix schema: &lt;http://schema.org/&gt; .
@prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt; .

 [
   schema:url &lt;http://manu.sporny.org/&gt;
 ] .</code></pre>
  </aside>

  <p>In the example above, since the value <code>http://manu.sporny.org/</code>
    is expressed as a JSON <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">string</a>, the type <a href="#dfn-coercion" class="internalDFN" data-link-type="dfn">coercion</a>
    rules will transform the value into an <abbr title="Internationalized Resource Identifier">IRI</abbr> when processing the data.
    See <a class="sectionRef sec-ref" href="#type-coercion">§&nbsp;<bdi class="secno">4.2.3 </bdi>Type Coercion</a> for more
    details about this feature.</p>

  <p>In summary, <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">IRIs</a> can be expressed in a variety of
    different ways in JSON-LD:</p>

  <ol>
    <li><a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">Map entries</a> that have a key mapping to a <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a> in
      the <a href="#dfn-active-context" class="internalDFN" data-link-type="dfn">active context</a> expand to an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>
      (only applies outside of the <a href="#dfn-context-definition" class="internalDFN" data-link-type="dfn">context definition</a>).</li>
    <li>An <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> is generated for the <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">string</a> value specified using
      <code>@id</code> or <code>@type</code>.</li>
    <li>An <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> is generated for the <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">string</a> value of any key for which there
      are <a href="#dfn-coercion" class="internalDFN" data-link-type="dfn">coercion</a> rules that contain an <code>@type</code> key that is
      set to a value of <code>@id</code> or <code>@vocab</code>.</li>
  </ol>

  <p>This section only covers the most basic features associated with IRIs
  in JSON-LD. More advanced features related to IRIs are covered in
  section <a href="#advanced-concepts" class="sec-ref">§&nbsp;<bdi class="secno">4. </bdi>Advanced Concepts</a>.
  </p>

</section>

<section class="informative" id="node-identifiers">
  <h3 id="x3-3-node-identifiers"><bdi class="secno">3.3 </bdi>Node Identifiers<a class="self-link" aria-label="§" href="#node-identifiers"></a></h3><p><em>This section is non-normative.</em></p>

  <p>To be able to externally reference <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-node">nodes</a>
    in an <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-graph">RDF graph</a>, it is important that
    <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-node">nodes</a> have an identifier. <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">IRIs</a>
    are a fundamental concept of Linked Data, for
    <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-node">nodes</a> to be truly linked, dereferencing the
    identifier should result in a representation of that <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-node">node</a>.
    This may allow an application to retrieve further information about a
    <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-node">node</a>.</p>

  <p>In JSON-LD, a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-node">node</a> is identified using the <code>@id</code>
    <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a>:</p>

  <aside class="example ds-selector-tabs" id="example-13-identifying-a-node"><div class="marker">
      <a class="self-link" href="#example-13-identifying-a-node">Example<bdi> 13</bdi></a><span class="example-title">: Identifying a node</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="expanded">Expanded (Result)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="turtle">Turtle</button>
      <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%0A%20%20%20%20%22name%22%3A%20%22http%3A%2F%2Fschema.org%2Fname%22%0A%20%20%7D%2C%0A%20%20%22%40id%22%3A%20%22http%3A%2F%2Fme.markus-lanthaler.com%2F%22%2C%0A%20%20%22name%22%3A%20%22Markus%20Lanthaler%22%0A%7D">Open in playground</a>
    </div>
    <pre class="compacted input selected nohighlight">{
  "@context": {
    <span class="comment">...</span>
    "name": "http://schema.org/name"
  },
  <span class="hl-bold">"@id": "http://me.markus-lanthaler.com/"</span>,
  "name": "Markus Lanthaler"<span class="comment">,
  ...</span>
}</pre>
    <pre class="expanded result nohighlight" data-result-for="Identifying a node-compacted">[{
  <span class="hl-bold">"@id": "http://me.markus-lanthaler.com/",</span>
  "http://schema.org/name": [{"@value": "Markus Lanthaler"}]
}]</pre>
    <table class="statements" data-result-for="Identifying a node-expanded" data-to-rdf="">
      <thead><tr><th>Subject</th><th>Property</th><th>Value</th></tr></thead>
      <tbody>
        <tr><td>http://me.markus-lanthaler.com/</td><td>schema:name</td><td>Markus Lanthaler</td></tr>
      </tbody>
    </table>
    <pre class="turtle nohighlight" data-content-type="text/turtle" data-result-for="Identifying a node-expanded" data-to-rdf="">@prefix schema: &lt;http://schema.org/&gt; .
@prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt; .

<span class="hl-bold">&lt;http://me.markus-lanthaler.com/&gt;</span> schema:name "Markus Lanthaler" .</pre>
  </aside>

  <p>The example above contains a <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> identified by the <abbr title="Internationalized Resource Identifier">IRI</abbr>
    <code>http://me.markus-lanthaler.com/</code>.</p>

  <p>This section only covers the most basic features associated with
  node identifiers in JSON-LD. More advanced features related to
  node identifiers are covered in section <a href="#advanced-concepts" class="sec-ref">§&nbsp;<bdi class="secno">4. </bdi>Advanced Concepts</a>.
  </p>

</section>

<section class="changed informative" id="uses-of-json-objects">
  <h3 id="x3-4-uses-of-json-objects"><bdi class="secno">3.4 </bdi>Uses of JSON Objects<a class="self-link" aria-label="§" href="#uses-of-json-objects"></a></h3><p><em>This section is non-normative.</em></p>
  <p>As a syntax, JSON has only a limited number of syntactic elements:</p>
  <ul>
    <li><a data-link-type="dfn" href="https://tc39.es/ecma262/#sec-terms-and-definitions-number-value">Numbers</a>, which describe literal numeric values,</li>
    <li><a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">Strings</a>, which may describe literal string values, or be used as the keys in a <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc8259#section-4">JSON object</a>.</li>
    <li><a data-link-type="dfn" href="https://infra.spec.whatwg.org/#boolean">Boolean</a> <code>true</code> and <code>false</code>, which describe literal boolean values,</li>
    <li><code>null</code>, which describes the absence of a value,</li>
    <li><a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">Arrays</a>, which describe an ordered set of values of any type, and</li>
    <li><a data-link-type="dfn" href="https://tools.ietf.org/html/rfc8259#section-4">JSON objects</a>, which provide a set of <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">map entries</a>, relating keys with values.</li>
  </ul>

  <p>The JSON-LD data model allows for a richer set of resources, based on the RDF data model.
    The data model is described more fully in <a class="sectionRef sec-ref" href="#data-model">§&nbsp;<bdi class="secno">8. </bdi>Data Model</a>.
    JSON-LD uses JSON objects to describe various resources, along with the relationships
    between these resources:</p>
  <dl>
    <dt><a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">Node objects</a></dt><dd>
      Node objects are used to define nodes in the <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-graph">linked data graph</a>
      which may have both incoming and outgoing edges.
      Node objects are principle structure for defining <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-resource">resources</a> having <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-property">properties</a>.
      See <a class="sectionRef sec-ref" href="#node-objects">§&nbsp;<bdi class="secno">9.2 </bdi>Node Objects</a> for the normative definition.
    </dd>
    <dt><a href="#dfn-value-object" class="internalDFN" data-link-type="dfn">Value objects</a></dt><dd>
      Value objects are used for describing literal nodes in a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-graph">linked data graph</a>
      which may have only incoming edges.
      In JSON, some literal nodes may be described without the use of a <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc8259#section-4">JSON object</a>
      (e.g., <a data-link-type="dfn" href="https://tc39.es/ecma262/#sec-terms-and-definitions-number-value">numbers</a>, <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">strings</a>, and <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#boolean">boolean</a> values),
      but in the <a data-lt="expansion" data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-api/#dfn-expanded">expanded form</a>,
      all literal nodes are described using <a href="#dfn-value-object" class="internalDFN" data-link-type="dfn">value objects</a>.
      See <a class="sectionRef sec-ref" href="#describing-values">§&nbsp;<bdi class="secno">4.2 </bdi>Describing Values</a> for more information,
      and <a class="sectionRef sec-ref" href="#value-objects">§&nbsp;<bdi class="secno">9.5 </bdi>Value Objects</a> for the normative definition.
    </dd>
    <dt><a href="#dfn-list-object" class="internalDFN" data-link-type="dfn">List Objects</a> and <a href="#dfn-set-object" class="internalDFN" data-link-type="dfn">Set objects</a></dt><dd>
      <a href="#dfn-list-object" class="internalDFN" data-link-type="dfn">List Objects</a> are a special kind of JSON-LD <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">maps</a>,
      distinct from <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a> and <a href="#dfn-value-object" class="internalDFN" data-link-type="dfn">value objects</a>,
      used to express ordered values by wrapping an <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a> in a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a> under the key <code>@list</code>.
      <a href="#dfn-set-object" class="internalDFN" data-link-type="dfn">Set Objects</a> exist for uniformity, and are equivalent to the array value of the <code>@set</code> key.
      See <a href="#lists" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">4.3.1 </bdi>Lists</a> and <a href="#sets" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">4.3.2 </bdi>Sets</a>
      for more detail.
    </dd>
    <dt>Map Objects</dt><dd>
      JSON-LD uses various forms of <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">maps</a> as ways to more easily access values of a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-property">property</a>.
      <dl>
        <dt><a href="#dfn-language-map" class="internalDFN" data-link-type="dfn">Language Maps</a></dt><dd>
          Allows multiple values differing in their associated language to be
          indexed by <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-language-tag">language tag</a>.
          See <a class="sectionRef sec-ref" href="#language-indexing">§&nbsp;<bdi class="secno">4.6.2 </bdi>Language Indexing</a> for more information,
          and <a class="sectionRef sec-ref" href="#language-maps">§&nbsp;<bdi class="secno">9.8 </bdi>Language Maps</a> for the normative definition.
        </dd>
        <dt><a href="#dfn-index-map" class="internalDFN" data-link-type="dfn">Index Maps</a></dt><dd>
          Allows multiple values (<a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a> or <a href="#dfn-value-object" class="internalDFN" data-link-type="dfn">value objects</a>) to be indexed by an associated <code>@index</code>.
          See <a class="sectionRef sec-ref" href="#data-indexing">§&nbsp;<bdi class="secno">4.6.1 </bdi>Data Indexing</a> for more information,
          and <a class="sectionRef sec-ref" href="#index-maps">§&nbsp;<bdi class="secno">9.9 </bdi>Index Maps</a> for the normative definition.
        </dd>
        <dt><a href="#dfn-id-map" class="internalDFN" data-link-type="dfn">Id Maps</a></dt><dd>
          Allows multiple <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a> to be indexed by an associated <code>@id</code>.
          See <a class="sectionRef sec-ref" href="#node-identifier-indexing">§&nbsp;<bdi class="secno">4.6.3 </bdi>Node Identifier Indexing</a> for more information,
          and <a class="sectionRef sec-ref" href="#id-maps">§&nbsp;<bdi class="secno">9.11 </bdi>Id Maps</a> for the normative definition.
        </dd>
        <dt><a href="#dfn-type-map" class="internalDFN" data-link-type="dfn">Type Maps</a></dt><dd>
          Allows multiple <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a> to be indexed by an associated <code>@type</code>.
          See <a class="sectionRef sec-ref" href="#node-type-indexing">§&nbsp;<bdi class="secno">4.6.4 </bdi>Node Type Indexing</a> for more information,
          and <a class="sectionRef sec-ref" href="#type-maps">§&nbsp;<bdi class="secno">9.12 </bdi>Type Maps</a> for the normative definition.
        </dd>
        <dt><a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-named-graph">Named Graph</a> Indexing</dt><dd>
          Allows multiple <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-named-graph">named graphs</a> to be indexed by an associated <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-graph-name">graph name</a>.
          See <a class="sectionRef sec-ref" href="#named-graph-indexing">§&nbsp;<bdi class="secno">4.9.3 </bdi>Named Graph Indexing</a> for more information.
        </dd>
      </dl>
    </dd>
    <dt><a href="#dfn-graph-object" class="internalDFN" data-link-type="dfn">Graph objects</a></dt><dd>
      A <a href="#dfn-graph-object" class="internalDFN" data-link-type="dfn">graph object</a> is much like a <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a>, except that it defines a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-named-graph">named graph</a>.
      See <a class="sectionRef sec-ref" href="#named-graphs">§&nbsp;<bdi class="secno">4.9 </bdi>Named Graphs</a> for more information,
      and <a class="sectionRef sec-ref" href="#graph-objects">§&nbsp;<bdi class="secno">9.4 </bdi>Graph Objects</a> for the normative definition.
      A <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> may also describe a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-named-graph">named graph</a>, in addition to other properties
      defined on the node. The notable difference is that a <a href="#dfn-graph-object" class="internalDFN" data-link-type="dfn">graph object</a> only describes
      a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-named-graph">named graph</a>.
    </dd>
    <dt><a href="#dfn-context-definition" class="internalDFN" data-link-type="dfn">Context Definitions</a></dt><dd>
      A Context Definition uses the <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc8259#section-4">JSON object</a> form, but is not itself data in a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-graph">linked data graph</a>.
      A Context Definition also may contain expanded term definitions,
      which are also represented using JSON objects.
      See <a class="sectionRef sec-ref" href="#the-context">§&nbsp;<bdi class="secno">3.1 </bdi>The Context</a>,
      <a class="sectionRef sec-ref" href="#advanced-context-usage">§&nbsp;<bdi class="secno">4.1 </bdi>Advanced Context Usage</a> for more information,
      and <a class="sectionRef sec-ref" href="#context-definitions">§&nbsp;<bdi class="secno">9.15 </bdi>Context Definitions</a> for the normative definition.
    </dd>
  </dl>
</section>

<section class="informative" id="specifying-the-type">
  <h3 id="x3-5-specifying-the-type"><bdi class="secno">3.5 </bdi>Specifying the Type<a class="self-link" aria-label="§" href="#specifying-the-type"></a></h3><p><em>This section is non-normative.</em></p>

  <p>In Linked Data, it is common to specify the type of a graph node;
    in many cases, this can be inferred based on the properties used within a
    given <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a>, or the property for which a node is a value. For
    example, in the <em>schema.org</em> vocabulary, the <em>givenName</em>
    property is associated with a <em>Person</em>. Therefore, one may reason that
    if a <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> contains the property <em>givenName</em>, that the
    type is a <em>Person</em>; making this explicit with <code>@type</code> helps
    to clarify the association.</p>

  <p>The type of a particular <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-node">node</a> can be specified using the <code>@type</code>
    <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a>. In Linked Data, types are uniquely
    identified with an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>.</p>

  <aside class="example ds-selector-tabs" id="example-14-specifying-the-type-for-a-node"><div class="marker">
      <a class="self-link" href="#example-14-specifying-the-type-for-a-node">Example<bdi> 14</bdi></a><span class="example-title">: Specifying the type for a node</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="expanded">Expanded (Result)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="turtle">Turtle</button>
      <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%0A%20%20%20%20%22givenName%22%3A%20%22http%3A%2F%2Fschema.org%2FgivenName%22%2C%0A%20%20%20%20%22familyName%22%3A%20%22http%3A%2F%2Fschema.org%2FfamilyName%22%0A%20%20%7D%2C%0A%20%20%22%40id%22%3A%20%22http%3A%2F%2Fme.markus-lanthaler.com%2F%22%2C%0A%20%20%22%40type%22%3A%20%22http%3A%2F%2Fschema.org%2FPerson%22%2C%0A%20%20%22givenName%22%3A%20%22Markus%22%2C%0A%20%20%22familyName%22%3A%20%22Lanthaler%22%0A%7D">Open in playground</a>
    </div>
    <pre class="compacted input selected nohighlight">{
  "@context": {
    <span class="comment">...</span>
    "givenName": "http://schema.org/givenName",
    "familyName": "http://schema.org/familyName"
  },
  "@id": "http://me.markus-lanthaler.com/",
  <span class="hl-bold">"@type": "http://schema.org/Person",</span>
  "givenName": "Markus",
  "familyName": "Lanthaler"<span class="comment">,
  ...</span>
}</pre>
    <pre class="expanded result nohighlight" data-result-for="Specifying the type for a node-compacted">[{
  "@id": "http://me.markus-lanthaler.com/",
  <span class="hl-bold">"@type": ["http://schema.org/Person"],</span>
  "http://schema.org/givenName": [{"@value": "Markus"}],
  "http://schema.org/familyName": [{"@value": "Lanthaler"}]
}]</pre>
    <table class="statements" data-result-for="Specifying the type for a node-expanded" data-to-rdf="">
      <thead><tr><th>Subject</th><th>Property</th><th>Value</th></tr></thead>
      <tbody>
        <tr><td>http://me.markus-lanthaler.com/</td><td>rdf:type</td><td>schema:Person</td></tr>
        <tr><td>http://me.markus-lanthaler.com/</td><td>schema:givenName</td><td>Markus</td></tr>
        <tr><td>http://me.markus-lanthaler.com/</td><td>schema:familyName</td><td>Lanthaler</td></tr>
      </tbody>
    </table>
    <pre class="turtle nohighlight" data-content-type="text/turtle" data-result-for="Specifying the type for a node-expanded" data-to-rdf="">@prefix schema: &lt;http://schema.org/&gt; .
@prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt; .

&lt;http://me.markus-lanthaler.com/&gt; <span class="hl-bold">a schema:Person</span>;
  schema:givenName "Markus";
  schema:familyName "Lanthaler" .</pre>
  </aside>

  <p>A node can be assigned more than one type by using an <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a>:</p>

  <aside class="example ds-selector-tabs" id="example-15-specifying-multiple-types-for-a-node"><div class="marker">
      <a class="self-link" href="#example-15-specifying-multiple-types-for-a-node">Example<bdi> 15</bdi></a><span class="example-title">: Specifying multiple types for a node</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="expanded">Expanded (Result)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="turtle">Turtle</button>
      <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%0A%20%20%22%40id%22%3A%20%22http%3A%2F%2Fme.markus-lanthaler.com%2F%22%2C%0A%20%20%22%40type%22%3A%20%5B%0A%20%20%20%20%20%22http%3A%2F%2Fschema.org%2FPerson%22%2C%0A%20%20%20%20%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2FPerson%22%0A%20%20%20%20%5D%0A%7D">Open in playground</a>
    </div>
    <pre class="compacted input selected nohighlight">{
  <span class="comment">...</span>
  "@id": "http://me.markus-lanthaler.com/",
  "@type": <span class="hl-bold">[</span>
     "http://schema.org/Person",
     <span class="hl-bold">"http://xmlns.com/foaf/0.1/Person"
    ]</span><span class="comment">,
  ...</span>
}</pre>
    <pre class="expanded result nohighlight" data-result-for="Specifying multiple types for a node-compacted">[{
  "@id": "http://me.markus-lanthaler.com/",
  "@type": ["http://schema.org/Person", <span class="hl-bold">"http://xmlns.com/foaf/0.1/Person"</span>]
}]</pre>
    <table class="statements" data-result-for="Specifying multiple types for a node-expanded" data-to-rdf="">
      <thead><tr><th>Subject</th><th>Property</th><th>Value</th></tr></thead>
      <tbody>
        <tr><td>http://me.markus-lanthaler.com/</td><td>rdf:type</td><td>schema:Person</td></tr>
        <tr><td>http://me.markus-lanthaler.com/</td><td>rdf:type</td><td>foaf:Person</td></tr>
      </tbody>
    </table>
    <pre class="turtle nohighlight" data-content-type="text/turtle" data-result-for="Specifying multiple types for a node-expanded" data-to-rdf="">@prefix schema: &lt;http://schema.org/&gt; .
@prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt; .
@prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt; .

&lt;http://me.markus-lanthaler.com/&gt; a schema:Person, <span class="hl-bold">foaf:Person</span>.</pre>
  </aside>

  <p>The value of a <code>@type</code> key may also be a <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a> defined in the <a href="#dfn-active-context" class="internalDFN" data-link-type="dfn">active context</a>:</p>

  <aside class="example ds-selector-tabs" id="example-16-using-a-term-to-specify-the-type"><div class="marker">
      <a class="self-link" href="#example-16-using-a-term-to-specify-the-type">Example<bdi> 16</bdi></a><span class="example-title">: Using a term to specify the type</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="expanded">Expanded (Result)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="turtle">Turtle</button>
      <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%0A%20%20%20%20%22Person%22%3A%20%22http%3A%2F%2Fschema.org%2FPerson%22%0A%20%20%7D%2C%0A%20%20%22%40id%22%3A%20%22http%3A%2F%2Fexample.org%2Fplaces%23BrewEats%22%2C%0A%20%20%22%40type%22%3A%20%22Person%22%0A%7D">Open in playground</a>
    </div>
    <pre class="compacted input selected nohighlight">{
  "@context": {
    <span class="comment">...</span>
    <span class="hl-bold">"Person": "http://schema.org/Person"</span>
  },
  "@id": "http://example.org/places#BrewEats",
  <span class="hl-bold">"@type": "Person"</span><span class="comment">,
  ...</span>
}</pre>
    <pre class="expanded result nohighlight" data-result-for="Using a term to specify the type-compacted">[{
  "@id": "http://example.org/places#BrewEats",
  "@type": [<span class="hl-bold">"http://schema.org/Person"</span>]
}]</pre>
    <table class="statements" data-result-for="Using a term to specify the type-expanded" data-to-rdf="">
      <thead><tr><th>Subject</th><th>Property</th><th>Value</th></tr></thead>
      <tbody>
        <tr><td>http://example.org/places#BrewEats</td><td>rdf:type</td><td>schema:Person</td></tr>
      </tbody>
    </table>
    <pre class="turtle nohighlight" data-content-type="text/turtle" data-result-for="Using a term to specify the type-expanded" data-to-rdf="">@prefix schema: &lt;http://schema.org/&gt; .
@prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt; .

&lt;http://example.org/places#BrewEats&gt; a <span class="hl-bold">schema:Person</span>.</pre>
  </aside>

  <p class="changed">In addition to setting the type of nodes,
    <code>@type</code> can also be used to set the type of a value
    to create a <a href="#dfn-typed-value" class="internalDFN" data-link-type="dfn">typed value</a>.
    This use of <code>@type</code> is similar to that used to define the type of a <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a>,
    but value objects are restricted to having just a single type.
    The use of <code>@type</code> to create typed values is discussed more fully in <a class="sectionRef sec-ref" href="#typed-values">§&nbsp;<bdi class="secno">4.2.1 </bdi>Typed Values</a>.</p>

  <p class="changed">Typed values can also be defined implicitly, by specifying
    <code>@type</code> in an expanded term definition.
    This is covered more fully in <a class="sectionRef sec-ref" href="#type-coercion">§&nbsp;<bdi class="secno">4.2.3 </bdi>Type Coercion</a>.</p>
</section>
</section>

<section class="informative" id="advanced-concepts">
<h2 id="x4-advanced-concepts"><bdi class="secno">4. </bdi>Advanced Concepts<a class="self-link" aria-label="§" href="#advanced-concepts"></a></h2><p><em>This section is non-normative.</em></p>

<p>JSON-LD has a number of features that provide functionality above and beyond
  the core functionality described above. JSON can be used to express data
  using such structures, and the features described in this
  section can be used to interpret a variety of different JSON structures as
  Linked Data. A JSON-LD processor will make use of provided and embedded
  contexts to interpret property values in a number of different idiomatic
  ways.</p>

<dl>
  <dt>Describing values</dt>
  <dd><p>One pattern in JSON is for the value of a property to be a string.
    Often times, this string actually represents some other typed value, for
    example an <abbr title="Internationalized Resource Identifier">IRI</abbr>, a date, or a string in some specific language. See <a href="#describing-values" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">4.2 </bdi>Describing Values</a> for details on how to
    describe such value typing.</p></dd>
  <dt>Value ordering</dt>
  <dd><p>In JSON, a property with an array value implies an implicit order;
    arrays in JSON-LD do not convey any ordering of the contained elements by
    default, unless defined using embedded structures or through a context
    definition. See <a href="#sets-and-lists" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">4.3 </bdi>Value Ordering</a> for a
    further discussion.</p></dd>
  <dt>Property nesting</dt>
  <dd><p>Another JSON idiom often found in APIs is to use an
      intermediate object to group together related properties of an object; in JSON-LD
      these are referred to as <a href="#dfn-nested-property" class="internalDFN" data-link-type="dfn">nested properties</a> and are described in <a href="#nested-properties" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">4.4 </bdi>Nested Properties</a>.</p></dd>
  <dt>Referencing objects</dt>
  <dd>
    <p>Linked Data is all about describing the relationships between different resources.
      Sometimes these relationships are between resources defined in different
      documents described on the web, sometimes the resources are described
      within the same document.</p>

    <aside class="example ds-selector-tabs" id="example-17-referencing-objects-on-the-web"><div class="marker">
      <a class="self-link" href="#example-17-referencing-objects-on-the-web">Example<bdi> 17</bdi></a><span class="example-title">: Referencing Objects on the Web</span>
    </div>
      <div class="selectors">
        <button class="selected" data-selects="compacted">Compacted (Input)</button>
        <button data-selects="expanded">Expanded (Result)</button>
        <button data-selects="statements">Statements</button>
        <button data-selects="turtle">Turtle</button>
        <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%22%40vocab%22%3A%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2F%22%2C%0A%20%20%20%20%22knows%22%3A%20%7B%22%40type%22%3A%20%22%40id%22%7D%0A%20%20%7D%2C%0A%20%20%22%40id%22%3A%20%22http%3A%2F%2Fmanu.sporny.org%2Fabout%23manu%22%2C%0A%20%20%22%40type%22%3A%20%22Person%22%2C%0A%20%20%22name%22%3A%20%22Manu%20Sporny%22%2C%0A%20%20%22knows%22%3A%20%22https%3A%2F%2Fgreggkellogg.net%2Ffoaf%23me%22%0A%7D">Open in playground</a>
      </div>
      <pre class="compacted input selected nohighlight">{
  "@context": {
    "@vocab": "http://xmlns.com/foaf/0.1/",
    <span class="hl-bold">"knows": {"@type": "@id"}</span>
  },
  "@id": "http://manu.sporny.org/about#manu",
  "@type": "Person",
  "name": "Manu Sporny",
  <span class="hl-bold">"knows": "https://greggkellogg.net/foaf#me"</span>
}</pre>
      <pre class="expanded result nohighlight" data-result-for="Referencing Objects on the Web-compacted">[{
  "@id": "http://manu.sporny.org/about#manu",
  "@type": ["http://xmlns.com/foaf/0.1/Person"],
  "http://xmlns.com/foaf/0.1/name": [{"@value": "Manu Sporny"}],
  <span class="hl-bold">"http://xmlns.com/foaf/0.1/knows": [{"@id": "https://greggkellogg.net/foaf#me"}]</span>
}]</pre>
      <table class="statements" data-result-for="Referencing Objects on the Web-expanded" data-to-rdf="">
        <thead><tr><th>Subject</th><th>Property</th><th>Value</th></tr></thead>
        <tbody>
          <tr><td>http://manu.sporny.org/about#manu</td><td>rdf:type</td><td>foaf:Person</td></tr>
          <tr><td>http://manu.sporny.org/about#manu</td><td>foaf:name</td><td>Manu Sporny</td></tr>
          <tr><td>http://manu.sporny.org/about#manu</td><td>foaf:knows</td><td>https://greggkellogg.net/foaf#me</td></tr>
        </tbody>
      </table>
      <pre class="turtle nohighlight" data-content-type="text/turtle" data-result-for="Referencing Objects on the Web-expanded" data-to-rdf="">@prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt; .
@prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt; .

&lt;http://manu.sporny.org/about#manu&gt; a foaf:Person;
  foaf:name "Manu Sporny";
  <span class="hl-bold">foaf:knows &lt;https://greggkellogg.net/foaf#me&gt;</span> .</pre>
    </aside>

    <p>In this case, a document residing at <code>http://manu.sporny.org/about</code>
      may contain the example above, and reference another document at
      <code>https://greggkellogg.net/foaf</code> which could include a similar
      representation.</p>

    <p>A common idiom found in JSON usage is objects being specified as the
      value of other objects, called object <a href="#dfn-embedding" class="internalDFN" data-link-type="dfn">embedding</a> in JSON-LD;
      for example, a friend specified as an
      object value of a <em>Person</em>:</p>

    <aside class="example ds-selector-tabs" id="example-18-embedding-objects"><div class="marker">
      <a class="self-link" href="#example-18-embedding-objects">Example<bdi> 18</bdi></a><span class="example-title">: Embedding Objects</span>
    </div>
      <div class="selectors">
        <button class="selected" data-selects="compacted">Compacted (Input)</button>
        <button data-selects="expanded">Expanded (Result)</button>
        <button data-selects="statements">Statements</button>
        <button data-selects="turtle">Turtle</button>
        <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%22%40vocab%22%3A%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2F%22%0A%20%20%7D%2C%0A%20%20%22%40id%22%3A%20%22http%3A%2F%2Fmanu.sporny.org%2Fabout%23manu%22%2C%0A%20%20%22%40type%22%3A%20%22Person%22%2C%0A%20%20%22name%22%3A%20%22Manu%20Sporny%22%2C%0A%20%20%22knows%22%3A%20%7B%0A%20%20%20%20%22%40id%22%3A%20%22https%3A%2F%2Fgreggkellogg.net%2Ffoaf%23me%22%2C%0A%20%20%20%20%22%40type%22%3A%20%22Person%22%2C%0A%20%20%20%20%22name%22%3A%20%22Gregg%20Kellogg%22%0A%20%20%7D%0A%7D">Open in playground</a>
      </div>
      <pre class="compacted input selected nohighlight" title="Embedding Objects">{
  "@context": {
    "@vocab": "http://xmlns.com/foaf/0.1/"
  },
  "@id": "http://manu.sporny.org/about#manu",
  "@type": "Person",
  "name": "Manu Sporny",
  <span class="hl-bold">"knows": {</span>
    "@id": "https://greggkellogg.net/foaf#me",
    "@type": "Person",
    "name": "Gregg Kellogg"
  <span class="hl-bold">}</span>
}</pre>
      <pre class="expanded result nohighlight" data-result-for="Embedding Objects-compacted">[{
  "@id": "http://manu.sporny.org/about#manu",
  "@type": ["http://xmlns.com/foaf/0.1/Person"],
  "http://xmlns.com/foaf/0.1/name": [{"@value": "Manu Sporny"}],
  <span class="hl-bold">"http://xmlns.com/foaf/0.1/knows": [{
    "@id": "https://greggkellogg.net/foaf#me",
    "@type": ["http://xmlns.com/foaf/0.1/Person"],
    "http://xmlns.com/foaf/0.1/name": [{"@value": "Gregg Kellogg"}]
  }]</span>
}]</pre>
      <table class="statements" data-result-for="Embedding Objects-expanded" data-to-rdf="">
        <thead><tr><th>Subject</th><th>Property</th><th>Value</th></tr></thead>
        <tbody>
          <tr><td>http://manu.sporny.org/about#manu</td><td>rdf:type</td><td>foaf:Person</td></tr>
          <tr><td>http://manu.sporny.org/about#manu</td><td>foaf:name</td><td>Manu Sporny</td></tr>
          <tr><td>https://greggkellogg.net/foaf#me</td><td>rdf:type</td><td>foaf:Person</td></tr>
          <tr><td>https://greggkellogg.net/foaf#me</td><td>foaf:name</td><td>Gregg Kellogg</td></tr>
          <tr><td>http://manu.sporny.org/about#manu</td><td>foaf:knows</td><td>https://greggkellogg.net/foaf#me</td></tr>
        </tbody>
      </table>
      <pre class="turtle nohighlight" data-content-type="text/turtle" data-result-for="Embedding Objects-expanded" data-to-rdf="">@prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt; .
@prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt; .

&lt;http://manu.sporny.org/about#manu&gt; a foaf:Person;
  foaf:name "Manu Sporny";
  <span class="hl-bold">foaf:knows &lt;https://greggkellogg.net/foaf#me&gt; .
&lt;https://greggkellogg.net/foaf#me&gt; a foaf:Person;
  foaf:name "Gregg Kellogg"</span> .</pre>
    </aside>

    <p>See <a href="#embedding" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">4.5 </bdi>Embedding</a> details these relationships.</p>
  </dd>
  <dt>Indexed values</dt>
  <dd><p>Another common idiom in JSON is to use an intermediate object to represent property values via indexing. JSON-LD allows data to be indexed
    in a number of different ways, as detailed in <a href="#indexed-values" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">4.6 </bdi>Indexed Values</a>.</p></dd>
  <dt>Reverse Properties</dt>
  <dd><p>JSON-LD serializes directed <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-graph">graphs</a>. That means that
    every <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-property">property</a> points from a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-node">node</a> to another <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-node">node</a>
    or <a data-lt="JSON-LD value" href="#dfn-json-ld-value" class="internalDFN" data-link-type="dfn">value</a>. However, in some cases, it is desirable
    to serialize in the reverse direction, as detailed in <a href="#reverse-properties" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">4.8 </bdi>Reverse Properties</a>.</p></dd>
</dl>

<p>The following sections describe such
  advanced functionality in more detail.</p>

<section class="informative" id="advanced-context-usage"><h3 id="x4-1-advanced-context-usage"><bdi class="secno">4.1 </bdi>Advanced Context Usage<a class="self-link" aria-label="§" href="#advanced-context-usage"></a></h3><p><em>This section is non-normative.</em></p>

  <p>Section <a href="#the-context" class="sec-ref">§&nbsp;<bdi class="secno">3.1 </bdi>The Context</a> introduced the basics of what makes
  JSON-LD work. This section expands on the basic principles of the
  <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a> and demonstrates how more advanced use cases can
  be achieved using JSON-LD.</p>

  <p>In general, contexts may be used any time a
    <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a> is defined.
    The only time that one cannot express a context is as a direct child of another context definition (other than as part of an <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a>).
    For example, a <a href="#dfn-json-ld-document" class="internalDFN" data-link-type="dfn">JSON-LD document</a> may
    have the form of an <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a> composed of one or more <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a>,
    which use a context definition in each top-level <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a>:</p>

  <aside class="example ds-selector-tabs" id="example-19-using-multiple-contexts"><div class="marker">
      <a class="self-link" href="#example-19-using-multiple-contexts">Example<bdi> 19</bdi></a><span class="example-title">: Using multiple contexts</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="expanded">Expanded (Result)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="turtle">Turtle</button>
      <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%5B%0A%20%20%7B%0A%20%20%20%20%22%40context%22%3A%20%22https%3A%2F%2Fjson-ld.org%2Fcontexts%2Fperson.jsonld%22%2C%0A%20%20%20%20%22name%22%3A%20%22Manu%20Sporny%22%2C%0A%20%20%20%20%22homepage%22%3A%20%22http%3A%2F%2Fmanu.sporny.org%2F%22%2C%0A%20%20%20%20%22depiction%22%3A%20%22http%3A%2F%2Ftwitter.com%2Faccount%2Fprofile_image%2Fmanusporny%22%0A%20%20%7D%2C%20%7B%0A%20%20%20%20%22%40context%22%3A%20%22https%3A%2F%2Fjson-ld.org%2Fcontexts%2Fplace.jsonld%22%2C%0A%20%20%20%20%22name%22%3A%20%22The%20Empire%20State%20Building%22%2C%0A%20%20%20%20%22description%22%3A%20%22The%20Empire%20State%20Building%20is%20a%20102-story%20landmark%20in%20New%20York%20City.%22%2C%0A%20%20%20%20%22geo%22%3A%20%7B%0A%20%20%20%20%20%20%22latitude%22%3A%20%2240.75%22%2C%0A%20%20%20%20%20%20%22longitude%22%3A%20%2273.98%22%0A%20%20%20%20%7D%0A%20%20%7D%0A%5D">Open in playground</a>
    </div>
    <pre class="compacted input selected nohighlight">[
  {
    <span class="hl-bold">"@context": "https://json-ld.org/contexts/person.jsonld",</span>
    "name": "Manu Sporny",
    "homepage": "http://manu.sporny.org/",
    "depiction": "http://twitter.com/account/profile_image/manusporny"
  }, {
    <span class="hl-bold">"@context": "https://json-ld.org/contexts/place.jsonld",</span>
    "name": "The Empire State Building",
    "description": "The Empire State Building is a 102-story landmark in New York City.",
    "geo": {
      "latitude": "40.75",
      "longitude": "73.98"
    }
  }
]</pre>
    <pre class="expanded result nohighlight" data-result-for="Using multiple contexts-compacted">[{
  "http://xmlns.com/foaf/0.1/name": [{"@value": "Manu Sporny"}],
  "http://xmlns.com/foaf/0.1/homepage": [{"@id": "http://manu.sporny.org/"}],
  "http://xmlns.com/foaf/0.1/depiction": [{"@id": "http://twitter.com/account/profile_image/manusporny"}]
}, {
  "http://purl.org/dc/terms/title": [{"@value": "The Empire State Building"}],
  "http://purl.org/dc/terms/description": [{
    "@value": "The Empire State Building is a 102-story landmark in New York City."
  }],
  "http://schema.org/geo": [{
    "http://www.w3.org/2003/01/geo/wgs84_pos#lat": [{
      "@type": "http://www.w3.org/2001/XMLSchema#decimal",
      "@value": "40.75"
    }],
    "http://www.w3.org/2003/01/geo/wgs84_pos#long": [{
      "@type": "http://www.w3.org/2001/XMLSchema#decimal",
      "@value": "73.98"
    }]
  }]
}]</pre>
    <table class="statements" data-result-for="Using multiple contexts-expanded" data-to-rdf="">
      <thead><tr><th>Subject</th><th>Property</th><th>Value</th><th>Value Type</th></tr></thead>
      <tbody>
        <tr><td>_:b0</td><td>foaf:name</td><td>Manu Sporny</td><td></td></tr>
        <tr><td>_:b0</td><td>foaf:homepage</td><td>http://manu.sporny.org/</td><td></td></tr>
        <tr><td>_:b0</td><td>foaf:depiction</td><td>http://twitter.com/account/profile_image/manusporny</td><td></td></tr>
        <tr><td>_:b1</td><td>dcterms:title</td><td>The Empire State Building</td><td></td></tr>
        <tr><td>_:b1</td><td>dcterms:description</td><td>The Empire State Building is a 102-story landmark in New York City.</td><td></td></tr>
        <tr><td>_:b2</td><td>geo:lat</td><td>40.75</td><td>xsd:decimal</td></tr>
        <tr><td>_:b2</td><td>geo:long</td><td>73.98</td><td>xsd:decimal</td></tr>
        <tr><td>_:b1</td><td>schema:geo</td><td>_:b2</td><td></td></tr>
      </tbody>
    </table>
    <pre class="turtle" data-content-type="text/turtle" data-result-for="Using multiple contexts-expanded" data-to-rdf="" aria-busy="false"><code class="hljs">@prefix dcterms: &lt;http://purl.org/dc/terms/&gt; .
@prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt; .
@prefix geo: &lt;http://www.w3.org/2003/01/geo/wgs84_pos#&gt; .
@prefix schema: &lt;http://schema.org/&gt; .
@prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt; .

[
  foaf:name "Manu Sporny";
  foaf:homepage &lt;http://manu.sporny.org/&gt;;
  foaf:depiction &lt;http://twitter.com/account/profile_image/manusporny&gt;
] .

[
  dcterms:title "The Empire State Building";
  dcterms:description "The Empire State Building is a 102-story landmark in New York City.";
  schema:geo [
    geo:lat 40.75;
    geo:long 73.98
  ]
] .</code></pre>
  </aside>

  <p>The outer array is standard for a document in
    <a href="#dfn-expanded-document-form" class="internalDFN" data-link-type="dfn">expanded document form</a>
    and <a href="#dfn-flattened-document-form" class="internalDFN" data-link-type="dfn">flattened document form</a>,
    and may be necessary when describing a disconnected graph,
    where nodes may not reference each other. In such cases, using
    a top-level <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a> with a <code>@graph</code> property can be useful for saving
    the repetition of <code>@context</code>. See <a href="#embedding" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">4.5 </bdi>Embedding</a>
    for more.</p>

  <aside class="example ds-selector-tabs" id="example-20-describing-disconnected-nodes-with-graph"><div class="marker">
      <a class="self-link" href="#example-20-describing-disconnected-nodes-with-graph">Example<bdi> 20</bdi></a><span class="example-title">: Describing disconnected nodes with @graph</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="expanded">Expanded (Result)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="turtle">Turtle</button>
      <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%5B%0A%20%20%20%20%22https%3A%2F%2Fjson-ld.org%2Fcontexts%2Fperson.jsonld%22%2C%0A%20%20%20%20%22https%3A%2F%2Fjson-ld.org%2Fcontexts%2Fplace.jsonld%22%2C%0A%20%20%20%20%7B%22title%22%3A%20%22http%3A%2F%2Fpurl.org%2Fdc%2Fterms%2Ftitle%22%7D%0A%20%20%5D%2C%0A%20%20%22%40graph%22%3A%20%5B%7B%0A%20%20%20%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2Fname%22%3A%20%22Manu%20Sporny%22%2C%0A%20%20%20%20%22homepage%22%3A%20%22http%3A%2F%2Fmanu.sporny.org%2F%22%2C%0A%20%20%20%20%22depiction%22%3A%20%22http%3A%2F%2Ftwitter.com%2Faccount%2Fprofile_image%2Fmanusporny%22%0A%20%20%7D%2C%20%7B%0A%20%20%20%20%22title%22%3A%20%22The%20Empire%20State%20Building%22%2C%0A%20%20%20%20%22description%22%3A%20%22The%20Empire%20State%20Building%20is%20a%20102-story%20landmark%20in%20New%20York%20City.%22%2C%0A%20%20%20%20%22geo%22%3A%20%7B%0A%20%20%20%20%20%20%22latitude%22%3A%20%2240.75%22%2C%0A%20%20%20%20%20%20%22longitude%22%3A%20%2273.98%22%0A%20%20%20%20%7D%0A%20%20%7D%5D%0A%7D">Open in playground</a>
    </div>
    <pre class="compacted input selected nohighlight">{
  <span class="hl-bold">"@context": [
    "https://json-ld.org/contexts/person.jsonld",
    "https://json-ld.org/contexts/place.jsonld",
    {"title": "http://purl.org/dc/terms/title"}
  ],</span>
  <span class="hl-bold">"@graph": [</span>{
    "http://xmlns.com/foaf/0.1/name": "Manu Sporny",
    "homepage": "http://manu.sporny.org/",
    "depiction": "http://twitter.com/account/profile_image/manusporny"
  }, {
    "title": "The Empire State Building",
    "description": "The Empire State Building is a 102-story landmark in New York City.",
    "geo": {
      "latitude": "40.75",
      "longitude": "73.98"
    }
  }<span class="hl-bold">]</span>
}</pre>
    <pre class="expanded result nohighlight" data-result-for="Describing disconnected nodes with @graph-compacted">[{
  "http://xmlns.com/foaf/0.1/name": [{"@value": "Manu Sporny"}],
  "http://xmlns.com/foaf/0.1/homepage": [{"@id": "http://manu.sporny.org/"}],
  "http://xmlns.com/foaf/0.1/depiction": [{"@id": "http://twitter.com/account/profile_image/manusporny"}]
}, {
  "http://purl.org/dc/terms/title": [{"@value": "The Empire State Building"}],
  "http://purl.org/dc/terms/description": [{
    "@value": "The Empire State Building is a 102-story landmark in New York City."
  }],
  "http://schema.org/geo": [{
    "http://www.w3.org/2003/01/geo/wgs84_pos#lat": [{
      "@type": "http://www.w3.org/2001/XMLSchema#decimal",
      "@value": "40.75"
    }],
    "http://www.w3.org/2003/01/geo/wgs84_pos#long": [{
      "@type": "http://www.w3.org/2001/XMLSchema#decimal",
      "@value": "73.98"
    }]
  }]
}]</pre>
    <table class="statements" data-result-for="Describing disconnected nodes with @graph-expanded" data-to-rdf="">
      <thead><tr><th>Subject</th><th>Property</th><th>Value</th><th>Value Type</th></tr></thead>
      <tbody>
        <tr><td>_:b0</td><td>foaf:name</td><td>Manu Sporny</td><td></td></tr>
        <tr><td>_:b0</td><td>foaf:homepage</td><td>http://manu.sporny.org/</td><td></td></tr>
        <tr><td>_:b0</td><td>foaf:depiction</td><td>http://twitter.com/account/profile_image/manusporny</td><td></td></tr>
        <tr><td>_:b1</td><td>dcterms:title</td><td>The Empire State Building</td><td></td></tr>
        <tr><td>_:b1</td><td>dcterms:description</td><td>The Empire State Building is a 102-story landmark in New York City.</td><td></td></tr>
        <tr><td>_:b2</td><td>geo:lat</td><td>40.75</td><td>xsd:decimal</td></tr>
        <tr><td>_:b2</td><td>geo:long</td><td>73.98</td><td>xsd:decimal</td></tr>
        <tr><td>_:b1</td><td>schema:geo</td><td>_:b2</td><td></td></tr>
      </tbody>
    </table>
    <pre class="turtle" data-content-type="text/turtle" data-result-for="Describing disconnected nodes with @graph-expanded" data-to-rdf="" aria-busy="false"><code class="hljs">@prefix dcterms: &lt;http://purl.org/dc/terms/&gt; .
@prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt; .
@prefix geo: &lt;http://www.w3.org/2003/01/geo/wgs84_pos#&gt; .
@prefix schema: &lt;http://schema.org/&gt; .
@prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt; .

[
  foaf:name "Manu Sporny";
  foaf:homepage &lt;http://manu.sporny.org/&gt;;
  foaf:depiction &lt;http://twitter.com/account/profile_image/manusporny&gt;
] .

[
  dcterms:title "The Empire State Building";
  dcterms:description "The Empire State Building is a 102-story landmark in New York City.";
  schema:geo [
    geo:lat 40.75;
    geo:long 73.98
  ]
] .</code></pre>
  </aside>

  <p>Duplicate context <a href="#dfn-term" class="internalDFN" data-link-type="dfn">terms</a> are overridden using a
    most-recently-defined-wins mechanism.</p>

  <aside class="example ds-selector-tabs" id="example-21-embedded-contexts-within-node-objects"><div class="marker">
      <a class="self-link" href="#example-21-embedded-contexts-within-node-objects">Example<bdi> 21</bdi></a><span class="example-title">: Embedded contexts within node objects</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="expanded">Expanded (Result)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="turtle">Turtle</button>
      <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%22name%22%3A%20%22http%3A%2F%2Fexample.com%2Fperson%23name%22%2C%0A%20%20%20%20%22details%22%3A%20%22http%3A%2F%2Fexample.com%2Fperson%23details%22%0A%20%20%7D%2C%0A%20%20%22name%22%3A%20%22Markus%20Lanthaler%22%2C%0A%20%20%0A%20%20%22details%22%3A%20%7B%0A%20%20%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%20%20%22name%22%3A%20%22http%3A%2F%2Fexample.com%2Forganization%23name%22%0A%20%20%20%20%7D%2C%0A%20%20%20%20%22name%22%3A%20%22Graz%20University%20of%20Technology%22%0A%20%20%7D%0A%7D">Open in playground</a>
    </div>
    <pre class="compacted input selected nohighlight">{
  <span class="hl-bold">"@context": {
    "name": "http://example.com/person#name",
    "details": "http://example.com/person#details"
  }</span>,
  "<span class="hl-bold">name</span>": "Markus Lanthaler",
  <span class="comment">...</span>
  "details": {
    <span class="hl-bold">"@context": {
      "name": "http://example.com/organization#name"
    }</span>,
    "<span class="hl-bold">name</span>": "Graz University of Technology"
  }
}</pre>
    <pre class="expanded result nohighlight" data-result-for="Embedded contexts within node objects-compacted">[{
  "http://example.com/person#details": [{
    "http://example.com/organization#name": [{
      "@value": "Graz University of Technology"
    }]
  }],
  "http://example.com/person#name": [{"@value": "Markus Lanthaler"}]
}]</pre>
    <table class="statements" data-result-for="Embedded contexts within node objects-expanded" data-to-rdf="">
      <thead><tr><th>Subject</th><th>Property</th><th>Value</th></tr></thead>
      <tbody>
        <tr><td>_:b1</td><td>http://example.com/organization#name</td><td>Graz University of Technology</td></tr>
        <tr><td>_:b0</td><td>http://example.com/person#details</td><td>_:b1</td></tr>
        <tr><td>_:b0</td><td>http://example.com/person#name</td><td>Markus Lanthaler</td></tr>
      </tbody>
    </table>
    <pre class="turtle" data-content-type="text/turtle" data-result-for="Embedded contexts within node objects-expanded" data-to-rdf="" aria-busy="false"><code class="hljs">@prefix person: &lt;http://example.com/person#&gt; .
@prefix org: &lt;http://example.com/organization#&gt; .

[
  person:name "Markus Lanthaler";
  person:details [org:name "Graz University of Technology"]
] .</code></pre>
  </aside>

  <p>In the example above, the <code>name</code> <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a> is overridden
    in the more deeply nested <code>details</code> structure,
    which uses its own <a href="#dfn-embedded-context" class="internalDFN" data-link-type="dfn">embedded context</a>.
    Note that this is
    rarely a good authoring practice and is typically used when working with
    legacy applications that depend on a specific structure of the
    <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a>. If a <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a> is redefined within a
    context, all previous rules associated with the previous definition are
    removed. If a <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a> is redefined to <code>null</code>,
    the <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a> is effectively removed from the list of
    <a href="#dfn-term" class="internalDFN" data-link-type="dfn">terms</a> defined in the <a href="#dfn-active-context" class="internalDFN" data-link-type="dfn">active context</a>.</p>

  <p>Multiple contexts may be combined using an <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a>, which is processed
    in order. The set of contexts defined within a specific <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a> are
    referred to as <a href="#dfn-local-context" class="internalDFN" data-link-type="dfn">local contexts</a>. The
    <a href="#dfn-active-context" class="internalDFN" data-link-type="dfn">active context</a> refers to the accumulation of
    <a href="#dfn-local-context" class="internalDFN" data-link-type="dfn">local contexts</a> that are in scope at a
    specific point within the document. Setting a <a href="#dfn-local-context" class="internalDFN" data-link-type="dfn">local context</a>
    to <code>null</code> effectively resets the <a href="#dfn-active-context" class="internalDFN" data-link-type="dfn">active context</a>
    to an empty context, without <a href="#dfn-term-definition" class="internalDFN" data-link-type="dfn">term definitions</a>, <a href="#dfn-default-language" class="internalDFN" data-link-type="dfn">default language</a>,
    or other things defined within previous contexts.
    The following example specifies an external context
    and then layers an <a href="#dfn-embedded-context" class="internalDFN" data-link-type="dfn">embedded context</a> on top of the external context:</p>

  <p class="changed">In JSON-LD 1.1, there are other mechanisms for introducing contexts, including
    scoped contexts and imported contexts, and there are new ways of protecting term definitions,
    so there are cases where the last defined inline context is not necessarily one
    which defines the scope of terms.
    See <a href="#scoped-contexts" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">4.1.8 </bdi>Scoped Contexts</a>,
    <a href="#context-propagation" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">4.1.9 </bdi>Context Propagation</a>,
    <a href="#imported-contexts" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">4.1.10 </bdi>Imported Contexts</a>, and
    <a href="#protected-term-definitions" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">4.1.11 </bdi>Protected Term Definitions</a>
    for further information.</p>

  <aside class="example ds-selector-tabs" id="example-22-combining-external-and-local-contexts"><div class="marker">
      <a class="self-link" href="#example-22-combining-external-and-local-contexts">Example<bdi> 22</bdi></a><span class="example-title">: Combining external and local contexts</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="expanded">Expanded (Result)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="turtle">Turtle</button>
      <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%5B%0A%20%20%20%20%22https%3A%2F%2Fjson-ld.org%2Fcontexts%2Fperson.jsonld%22%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%22pic%22%3A%20%7B%0A%20%20%20%20%20%20%20%20%22%40id%22%3A%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2Fdepiction%22%2C%0A%20%20%20%20%20%20%20%20%22%40type%22%3A%20%22%40id%22%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%5D%2C%0A%20%20%22name%22%3A%20%22Manu%20Sporny%22%2C%0A%20%20%22homepage%22%3A%20%22http%3A%2F%2Fmanu.sporny.org%2F%22%2C%0A%20%20%22pic%22%3A%20%22http%3A%2F%2Ftwitter.com%2Faccount%2Fprofile_image%2Fmanusporny%22%0A%7D">Open in playground</a>
    </div>
    <pre class="compacted input selected nohighlight">{
  <span class="hl-bold">"@context": [
    "https://json-ld.org/contexts/person.jsonld",
    {
      "pic": {
        "@id": "http://xmlns.com/foaf/0.1/depiction",
        "@type": "@id"
      }
    }
  ],</span>
  "name": "Manu Sporny",
  "homepage": "http://manu.sporny.org/",
  <span class="hl-bold">"pic": "http://twitter.com/account/profile_image/manusporny"</span>
}</pre>
    <pre class="expanded result nohighlight" data-result-for="Combining external and local contexts-compacted">[{
  "http://xmlns.com/foaf/0.1/name": [{"@value": "Manu Sporny"}],
  "http://xmlns.com/foaf/0.1/homepage": [{"@id": "http://manu.sporny.org/"}],
  "http://xmlns.com/foaf/0.1/depiction": [{
    "@id": "http://twitter.com/account/profile_image/manusporny"
  }]
}]</pre>
    <table class="statements" data-result-for="Combining external and local contexts-expanded" data-to-rdf="">
      <thead><tr><th>Subject</th><th>Property</th><th>Value</th><th>Value Type</th></tr></thead>
      <tbody>
        <tr><td>_:b0</td><td>foaf:name</td><td>Manu Sporny</td><td></td></tr>
        <tr><td>_:b0</td><td>foaf:homepage</td><td>http://manu.sporny.org/</td><td><a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a></td></tr>
        <tr><td>_:b0</td><td>foaf:depiction</td><td>http://twitter.com/account/profile_image/manusporny</td><td><abbr title="Internationalized Resource Identifier">IRI</abbr></td></tr>
      </tbody>
    </table>
    <pre class="turtle" data-content-type="text/turtle" data-result-for="Combining external and local contexts-expanded" data-to-rdf="" aria-busy="false"><code class="hljs">@prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt; .

[
  foaf:name "Manu Sporny";
  foaf:homepage &lt;http://manu.sporny.org/&gt;;
  foaf:depiction &lt;http://twitter.com/account/profile_image/manusporny&gt;
] .</code></pre>
  </aside>

  <div class="note" role="note" id="issue-container-generatedID-8"><div role="heading" class="note-title marker" id="h-note-8" aria-level="4"><span>Note</span></div><p class="">When possible, the <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a> definition should be put
    at the top of a JSON-LD document. This makes the document easier to read and
    might make streaming parsers more efficient. Documents that do not have the
    <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a> at the top are still conformant JSON-LD.</p></div>

  <div class="note" role="note" id="issue-container-generatedID-9"><div role="heading" class="note-title marker" id="h-note-9" aria-level="4"><span>Note</span></div><p class="">To avoid forward-compatibility issues, <a href="#dfn-term" class="internalDFN" data-link-type="dfn">terms</a>
    starting with an&nbsp;<code>@</code> character
    <span class="changed">followed exclusively by one or more <em>ALPHA</em> characters (see [<cite><a class="bibref" data-link-type="biblio" href="#bib-rfc5234" title="Augmented BNF for Syntax Specifications: ABNF">RFC5234</a></cite>])</span>
    are to be avoided as they
    might be used as <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a> in future versions
    of JSON-LD. Terms starting with an&nbsp;<code>@</code> character that are not
    <a data-lt="keyword" href="#dfn-keyword" class="internalDFN" data-link-type="dfn">JSON-LD 1.1 keywords</a> are treated as any other term, i.e.,
    they are ignored unless mapped to an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>. Furthermore, the use of
    empty <a href="#dfn-term" class="internalDFN" data-link-type="dfn">terms</a> (<code>""</code>) is not allowed as
    not all programming languages are able to handle empty JSON keys.</p></div>

<section class="changed informative" id="json-ld-1-1-processing-mode"><h4 id="x4-1-1-json-ld-1-1-processing-mode"><bdi class="secno">4.1.1 </bdi>JSON-LD 1.1 Processing Mode<a class="self-link" aria-label="§" href="#json-ld-1-1-processing-mode"></a></h4><p><em>This section is non-normative.</em></p>

  <p>New features defined in JSON-LD 1.1 are available
    unless the <a href="#dfn-processing-mode" class="internalDFN" data-link-type="dfn">processing mode</a> is set to <code>json-ld-1.0</code>.
    This may be set through an API option.
    The <a href="#dfn-processing-mode" class="internalDFN" data-link-type="dfn">processing mode</a> may be explicitly set to <code>json-ld-1.1</code> using the <code>@version</code> <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">entry</a> in a <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a>
    set to the value <code>1.1</code> as a <a data-link-type="dfn" href="https://tc39.es/ecma262/#sec-terms-and-definitions-number-value">number</a>, or through an API option.
    Explicitly setting the <a href="#dfn-processing-mode" class="internalDFN" data-link-type="dfn">processing mode</a> to <code>json-ld-1.1</code>
    will prohibit JSON-LD 1.0 processors from incorrectly processing a JSON-LD 1.1 document.</p>

  <div class="example" id="example-23-setting-version-in-context">
          <div class="marker">
      <a class="self-link" href="#example-23-setting-version-in-context">Example<bdi> 23</bdi></a><span class="example-title">: Setting @version in context</span>
    </div> <pre class="nohighlight">{
  "@context": {
    <span class="hl-bold">"@version": 1.1</span><span class="comment">,
    ...</span>
  }<span class="comment">,
  ...</span>
}</pre>
        </div>

  <p>The first <code>context</code> encountered when processing a
    document which contains <code>@version</code> determines the <code>processing mode</code>,
    unless it is defined explicitly through an API option.
    This means that if <code>"@version": 1.1</code> is encountered after processing a context
    without <code>@version</code>,
    the former will be interpreted as having had <code>"@version": 1.1</code> defined within it.</p>

  <div class="note" role="note" id="issue-container-generatedID-10"><div role="heading" class="note-title marker" id="h-note-10" aria-level="5"><span>Note</span></div><p class="">Setting the <a href="#dfn-processing-mode" class="internalDFN" data-link-type="dfn">processing mode</a> explicitly
    to <code>json-ld-1.1</code> is <em class="rfc2119" title="RECOMMENDED">RECOMMENDED</em> to prevent a <cite><a href="https://www.w3.org/TR/2014/REC-json-ld-20140116/">JSON-LD 1.0</a></cite> processor
    from incorrectly processing a JSON-LD 1.1 document and
    producing different results.</p></div>
</section>

<section class="informative" id="default-vocabulary"><h4 id="x4-1-2-default-vocabulary"><bdi class="secno">4.1.2 </bdi>Default Vocabulary<a class="self-link" aria-label="§" href="#default-vocabulary"></a></h4><p><em>This section is non-normative.</em></p>

  <p>At times, all properties and types may come from the same vocabulary. JSON-LD's
    <code>@vocab</code> keyword allows an author to set a common prefix which
    is used as the <a href="#dfn-vocabulary-mapping" class="internalDFN" data-link-type="dfn">vocabulary mapping</a> and is used
    for all properties and types that do not match a <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a> and are neither
    an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> nor a <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a> (i.e., they do
    not contain a colon).</p>

  <aside class="example ds-selector-tabs" id="example-24-using-a-default-vocabulary"><div class="marker">
      <a class="self-link" href="#example-24-using-a-default-vocabulary">Example<bdi> 24</bdi></a><span class="example-title">: Using a default vocabulary</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="expanded">Expanded (Result)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="turtle">Turtle</button>
      <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%22%40vocab%22%3A%20%22http%3A%2F%2Fexample.com%2Fvocab%2F%22%0A%20%20%7D%2C%0A%20%20%22%40id%22%3A%20%22http%3A%2F%2Fexample.org%2Fplaces%23BrewEats%22%2C%0A%20%20%22%40type%22%3A%20%22Restaurant%22%2C%0A%20%20%22name%22%3A%20%22Brew%20Eats%22%0A%20%20%0A%7D">Open in playground</a>
    </div>
    <pre class="compacted input selected nohighlight">{
  "@context": {
    <span class="hl-bold">"@vocab": "http://example.com/vocab/"</span>
  },
  "@id": "http://example.org/places#BrewEats",
  "@type": <span class="hl-bold">"Restaurant"</span>,
  <span class="hl-bold">"name"</span>: "Brew Eats"
  <span class="comment">...</span>
}</pre>
    <pre class="expanded result nohighlight" data-result-for="Using a default vocabulary-compacted">[{
  "@id": "http://example.org/places#BrewEats",
  "@type": ["http://example.com/vocab/Restaurant"],
  "http://example.com/vocab/name": [{"@value": "Brew Eats"}]
}]</pre>
    <table class="statements" data-result-for="Using a default vocabulary-expanded" data-to-rdf="">
      <thead><tr><th>Subject</th><th>Property</th><th>Value</th></tr></thead>
      <tbody>
        <tr><td>http://example.org/places#BrewEats</td><td>rdf:type</td><td>http://example.com/vocab/Restaurant</td></tr>
        <tr><td>http://example.org/places#BrewEats</td><td>http://example.com/vocab/name</td><td>Brew Eats</td></tr>
      </tbody>
    </table>
    <pre class="turtle" data-content-type="text/turtle" data-result-for="Using a default vocabulary-expanded" data-to-rdf="" aria-busy="false"><code class="hljs">@prefix ex: &lt;http://example.com/vocab/&gt; .

&lt;http://example.org/places#BrewEats&gt; a ex:Restaurant;
  ex:name "Brew Eats" .</code></pre>
  </aside>

  <p>If <code>@vocab</code> is used but certain keys in an
    <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a> should not be expanded using
    the vocabulary <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>, a <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a> can be explicitly set
    to <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#nulls">null</a> in the <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a>. For instance, in the
    example below the <code>databaseId</code> <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">entry</a> would not expand to an
    <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> causing the property to be dropped when expanding.</p>

  <aside class="example ds-selector-tabs" id="example-25-using-the-null-keyword-to-ignore-data"><div class="marker">
      <a class="self-link" href="#example-25-using-the-null-keyword-to-ignore-data">Example<bdi> 25</bdi></a><span class="example-title">: Using the null keyword to ignore data</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="expanded">Expanded (Result)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="turtle">Turtle</button>
      <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%20%22%40vocab%22%3A%20%22http%3A%2F%2Fexample.com%2Fvocab%2F%22%2C%0A%20%20%20%20%20%22databaseId%22%3A%20null%0A%20%20%7D%2C%0A%20%20%22%40id%22%3A%20%22http%3A%2F%2Fexample.org%2Fplaces%23BrewEats%22%2C%0A%20%20%22%40type%22%3A%20%22Restaurant%22%2C%0A%20%20%22name%22%3A%20%22Brew%20Eats%22%2C%0A%20%20%22databaseId%22%3A%20%2223987520%22%0A%7D">Open in playground</a>
    </div>
    <pre class="compacted input selected nohighlight">{
  "@context": {
     "@vocab": "http://example.com/vocab/",
     <span class="hl-bold">"databaseId": null</span>
  },
  "@id": "http://example.org/places#BrewEats",
  "@type": "Restaurant",
  "name": "Brew Eats",
  <span class="hl-bold">"databaseId"</span>: "23987520"
}</pre>
    <pre class="expanded result nohighlight" data-result-for="Using the null keyword to ignore data-compacted">[{
  "@id": "http://example.org/places#BrewEats",
  "@type": ["http://example.com/vocab/Restaurant"],
  "http://example.com/vocab/name": [{"@value": "Brew Eats"}]
}]</pre>
    <table class="statements" data-result-for="Using the null keyword to ignore data-expanded" data-to-rdf="">
      <thead><tr><th>Subject</th><th>Property</th><th>Value</th></tr></thead>
      <tbody>
        <tr><td>http://example.org/places#BrewEats</td><td>rdf:type</td><td>http://example.com/vocab/Restaurant</td></tr>
        <tr><td>http://example.org/places#BrewEats</td><td>http://example.com/vocab/name</td><td>Brew Eats</td></tr>
      </tbody>
    </table>
    <pre class="turtle" data-content-type="text/turtle" data-result-for="Using the null keyword to ignore data-expanded" data-to-rdf="" aria-busy="false"><code class="hljs">@prefix ex: &lt;http://example.com/vocab/&gt; .

&lt;http://example.org/places#BrewEats&gt; a ex:Restaurant;
  ex:name "Brew Eats" .</code></pre>

  </aside>

  <p class="changed">Since JSON-LD 1.1,
    the <a href="#dfn-vocabulary-mapping" class="internalDFN" data-link-type="dfn">vocabulary mapping</a> in a <a href="#dfn-local-context" class="internalDFN" data-link-type="dfn">local context</a> can be set to a <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-6.5">relative <abbr title="Internationalized Resource Identifier">IRI</abbr> reference</a>,
    which is concatenated to any <a href="#dfn-vocabulary-mapping" class="internalDFN" data-link-type="dfn">vocabulary mapping</a> in the <a href="#dfn-active-context" class="internalDFN" data-link-type="dfn">active context</a>
    (see <a href="#document-relative-vocabulary-mapping" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">4.1.4 </bdi>Using the Document Base for the Default Vocabulary</a>
    for how this applies if there is no <a href="#dfn-vocabulary-mapping" class="internalDFN" data-link-type="dfn">vocabulary mapping</a> in the <a href="#dfn-active-context" class="internalDFN" data-link-type="dfn">active context</a>).</p>

  <p class="changed">The following example illustrates the affect of expanding a property using
    a <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-6.5">relative <abbr title="Internationalized Resource Identifier">IRI</abbr> reference</a>, which is shown in the Expanded (Result) tab below.</p>

  <aside class="example ds-selector-tabs" id="example-26-using-a-default-vocabulary-relative-to-a-previous-default-vocabulary"><div class="marker">
      <a class="self-link" href="#example-26-using-a-default-vocabulary-relative-to-a-previous-default-vocabulary">Example<bdi> 26</bdi></a><span class="example-title">: Using a default vocabulary relative to a previous default vocabulary</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="expanded">Expanded (Result)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="turtle">Turtle</button>
      <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%5B%7B%0A%20%20%20%20%22%40vocab%22%3A%20%22http%3A%2F%2Fexample.com%2F%22%0A%20%20%7D%2C%20%7B%0A%20%20%20%20%22%40version%22%3A%201.1%2C%0A%20%20%20%20%22%40vocab%22%3A%20%22vocab%2F%22%0A%20%20%7D%5D%2C%0A%20%20%22%40id%22%3A%20%22http%3A%2F%2Fexample.org%2Fplaces%23BrewEats%22%2C%0A%20%20%22%40type%22%3A%20%22Restaurant%22%2C%0A%20%20%22name%22%3A%20%22Brew%20Eats%22%0A%20%20%0A%7D">Open in playground</a>
    </div>
    <pre class="compacted input selected nohighlight">{
  "@context": [{
    "@vocab": <span class="hl-bold">"http://example.com/"</span>
  }, <span class="hl-bold">{
    "@version": 1.1,
    "@vocab": "vocab/"
  }</span>],
  "@id": "http://example.org/places#BrewEats",
  "@type": "Restaurant",
  "name": "Brew Eats"
  <span class="comment">...</span>
}</pre>
    <pre class="expanded result nohighlight" data-result-for="Using a default vocabulary relative to a previous default vocabulary-compacted">[{
  "@id": "http://example.org/places#BrewEats",
  "@type": ["http://example.com/vocab/Restaurant"],
  "http://example.com/vocab/name": [{"@value": "Brew Eats"}]
}]</pre>
    <table class="statements" data-result-for="Using a default vocabulary relative to a previous default vocabulary-expanded" data-to-rdf="">
      <thead><tr><th>Subject</th><th>Property</th><th>Value</th></tr></thead>
      <tbody>
        <tr><td>http://example.org/places#BrewEats</td><td>rdf:type</td><td>http://example.com/vocab/Restaurant</td></tr>
        <tr><td>http://example.org/places#BrewEats</td><td>http://example.com/vocab/name</td><td>Brew Eats</td></tr>
      </tbody>
    </table>
    <pre class="turtle" data-content-type="text/turtle" data-result-for="Using a default vocabulary relative to a previous default vocabulary-expanded" data-to-rdf="" aria-busy="false"><code class="hljs">@prefix ex: &lt;http://example.com/vocab/&gt; .

&lt;http://example.org/places#BrewEats&gt; a ex:Restaurant;
  ex:name "Brew Eats" .</code></pre>
  </aside>

  <div class="note" role="note" id="issue-container-generatedID-11"><div role="heading" class="note-title marker" id="h-note-11" aria-level="5"><span>Note</span></div><p class="">The grammar for <code>@vocab</code>, as defined in <a href="#context-definitions" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">9.15 </bdi>Context Definitions</a>
    allows the value to be a <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a> or <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a>.
    Note that terms used in the value of <code>@vocab</code> must be in scope at the time the context is introduced,
    otherwise there would be a circular dependency between <code>@vocab</code> and other terms defined in the same context.</p></div>
</section>

<section class="informative" id="base-iri"><h4 id="x4-1-3-base-iri"><bdi class="secno">4.1.3 </bdi>Base <abbr title="Internationalized Resource Identifier">IRI</abbr><a class="self-link" aria-label="§" href="#base-iri"></a></h4><p><em>This section is non-normative.</em></p>

  <p>JSON-LD allows <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">IRIs</a>
    to be specified in a relative form which is
    resolved against the document base according
    <a href="https://tools.ietf.org/html/rfc3986#section-5.1">section 5.1 Establishing a Base URI</a>
    of [<cite><a class="bibref" data-link-type="biblio" href="#bib-rfc3986" title="Uniform Resource Identifier (URI): Generic Syntax">RFC3986</a></cite>]. The <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-base-iri">base <abbr title="Internationalized Resource Identifier">IRI</abbr></a> may be explicitly set with a <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a>
    using the <code>@base</code> keyword.</p>

  <p>For example, if a JSON-LD document was retrieved from <code>http://example.com/document.jsonld</code>,
    <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-6.5">relative <abbr title="Internationalized Resource Identifier">IRI</abbr> references</a> would resolve against that <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>:</p>

  <div class="example" id="example-27-use-a-relative-iri-reference-as-node-identifier">
          <div class="marker">
      <a class="self-link" href="#example-27-use-a-relative-iri-reference-as-node-identifier">Example<bdi> 27</bdi></a><span class="example-title">: Use a relative IRI reference as node identifier</span>
    </div> <pre class="nohighlight">{
  "@context": {
    "label": "http://www.w3.org/2000/01/rdf-schema#label"
  },
  <span class="hl-bold">"@id": ""</span>,
  "label": "Just a simple document"
}</pre>
        </div>

  <p>This document uses an empty <code>@id</code>, which resolves to the document base.
    However, if the document is moved to a different location, the <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> would change.
    To prevent this without having to use an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>, a <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a>
    may define an <code>@base</code> mapping, to overwrite the <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-base-iri">base <abbr title="Internationalized Resource Identifier">IRI</abbr></a> for the document.</p>

  <aside class="example ds-selector-tabs" id="example-28-setting-the-document-base-in-a-document"><div class="marker">
      <a class="self-link" href="#example-28-setting-the-document-base-in-a-document">Example<bdi> 28</bdi></a><span class="example-title">: Setting the document base in a document</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="expanded">Expanded (Result)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="turtle">Turtle</button>
      <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%22%40base%22%3A%20%22http%3A%2F%2Fexample.com%2Fdocument.jsonld%22%2C%0A%20%20%20%20%22label%22%3A%20%22http%3A%2F%2Fwww.w3.org%2F2000%2F01%2Frdf-schema%23label%22%0A%20%20%7D%2C%0A%20%20%22%40id%22%3A%20%22%22%2C%0A%20%20%22label%22%3A%20%22Just%20a%20simple%20document%22%0A%7D">Open in playground</a>
    </div>
    <pre class="compacted input selected nohighlight">{
  "@context": {
    <span class="hl-bold">"@base": "http://example.com/document.jsonld",</span>
    "label": "http://www.w3.org/2000/01/rdf-schema#label"
  },
  "@id": "",
  "label": "Just a simple document"
}</pre>
    <pre class="expanded result nohighlight" data-result-for="Setting the document base in a document-compacted">[{
  "@id": "http://example.com/document.jsonld",
  "http://www.w3.org/2000/01/rdf-schema#label": [{"@value": "Just a simple document"}]
}]</pre>
    <table class="statements" data-result-for="Setting the document base in a document-expanded" data-to-rdf="">
      <thead><tr><th>Subject</th><th>Property</th><th>Value</th></tr></thead>
      <tbody>
        <tr><td>http://example.com/document.jsonld</td><td>rdfs:label</td><td>Just a simple document</td></tr>
      </tbody>
    </table>
    <pre class="turtle" data-content-type="text/turtle" data-result-for="Setting the document base in a document-expanded" data-to-rdf="" aria-busy="false"><code class="hljs">@base &lt;http://example.com/document.jsonld&gt; .
@prefix rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt; .

&lt;&gt; rdfs:label "Just a simple document" .</code></pre>
  </aside>

  <p>Setting <code>@base</code> to <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#nulls">null</a> will prevent
    <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-6.5">relative <abbr title="Internationalized Resource Identifier">IRI</abbr> references</a> from being expanded to
    <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">IRIs</a>.</p>

  <p>Please note that the <code>@base</code> will be ignored if used in
    external contexts.</p>
</section>

<section id="document-relative-vocabulary-mapping" class="changed informative">
  <h4 id="x4-1-4-using-the-document-base-for-the-default-vocabulary"><bdi class="secno">4.1.4 </bdi>Using the Document Base for the Default Vocabulary<a class="self-link" aria-label="§" href="#document-relative-vocabulary-mapping"></a></h4><p><em>This section is non-normative.</em></p>
  <p>In some cases, vocabulary terms are defined directly within the document
    itself, rather than in an external vocabulary.
    Since JSON-LD 1.1, the <a href="#dfn-vocabulary-mapping" class="internalDFN" data-link-type="dfn">vocabulary mapping</a> in a <a href="#dfn-local-context" class="internalDFN" data-link-type="dfn">local context</a>
    can be set to a <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-6.5">relative <abbr title="Internationalized Resource Identifier">IRI</abbr> reference</a>,
    which is, if there is no vocabulary mapping in scope, resolved against the <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-base-iri">base <abbr title="Internationalized Resource Identifier">IRI</abbr></a>.
    This causes terms which are expanded relative to the vocabulary,
    such as the keys of <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a>,
    to be based on the <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-base-iri">base <abbr title="Internationalized Resource Identifier">IRI</abbr></a> to create <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">IRIs</a>.</p>

<div class="example" id="example-29-using-as-the-vocabulary-mapping">
          <div class="marker">
      <a class="self-link" href="#example-29-using-as-the-vocabulary-mapping">Example<bdi> 29</bdi></a><span class="example-title">: Using "#" as the vocabulary mapping</span>
    </div> <pre class="input nohighlight" data-base="http://example/document">{
  "@context": {
    <span class="hl-bold">"@version": 1.1,</span>
    <span class="hl-bold">"@base": "http://example/document",</span>
    "@vocab": <span class="hl-bold">"#"</span>
  },
  "@id": "http://example.org/places#BrewEats",
  "@type": <span class="hl-bold">"Restaurant"</span>,
  <span class="hl-bold">"name"</span>: "Brew Eats"
  <span class="comment">...</span>
}</pre>
        </div>

<p>If this document were located at <code>http://example/document</code>, it would expand as follows:</p>

<aside class="example ds-selector-tabs" id="example-30-using-as-the-vocabulary-mapping-expanded"><div class="marker">
      <a class="self-link" href="#example-30-using-as-the-vocabulary-mapping-expanded">Example<bdi> 30</bdi></a><span class="example-title">: Using "#" as the vocabulary mapping (expanded)</span>
    </div>
  <div class="selectors">
    <button class="selected" data-selects="expanded">Expanded (Result)</button>
    <button data-selects="statements">Statements</button>
    <button data-selects="turtle">Turtle</button>
    <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%5B%7B%0A%20%20%22%40id%22%3A%20%22http%3A%2F%2Fexample.org%2Fplaces%23BrewEats%22%2C%0A%20%20%22%40type%22%3A%20%5B%22http%3A%2F%2Fexample%2Fdocument%23Restaurant%22%5D%2C%0A%20%20%22http%3A%2F%2Fexample%2Fdocument%23name%22%3A%20%5B%7B%22%40value%22%3A%20%22Brew%20Eats%22%7D%5D%0A%7D%5D">Open in playground</a>
  </div>
  <pre class="expanded result selected nohighlight">[{
  "@id": "http://example.org/places#BrewEats",
  "@type": ["http://example/document#Restaurant"],
  "http://example/document#name": [{"@value": "Brew Eats"}]
}]</pre>
  <table class="statements" data-result-for="Using &quot;#&quot; as the vocabulary mapping (expanded)-expanded" data-to-rdf="">
    <thead><tr><th>Subject</th><th>Property</th><th>Value</th></tr></thead>
    <tbody>
      <tr><td>http://example.org/places#BrewEats</td><td>rdf:type</td><td>http://example/document#Restaurant</td></tr>
      <tr><td>http://example.org/places#BrewEats</td><td>http://example/document#name</td><td>Brew Eats</td></tr>
    </tbody>
  </table>
  <pre class="turtle" data-content-type="text/turtle" data-result-for="Using &quot;#&quot; as the vocabulary mapping (expanded)-expanded" data-to-rdf="" aria-busy="false"><code class="hljs">&lt;http://example.org/places#BrewEats&gt; a &lt;http://example/document#Restaurant&gt;;
  &lt;http://example/document#name&gt; "Brew Eats" .</code></pre>
</aside>
</section>

<section class="informative" id="compact-iris"><h4 id="x4-1-5-compact-iris"><bdi class="secno">4.1.5 </bdi>Compact IRIs<a class="self-link" aria-label="§" href="#compact-iris"></a></h4><p><em>This section is non-normative.</em></p>

  <p>A <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a> is a way of expressing an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>
    using a <em>prefix</em> and <em>suffix</em> separated by a colon (<code>:</code>).
    The <a href="#dfn-prefix" class="internalDFN" data-link-type="dfn">prefix</a> is a <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a> taken from the
    <a href="#dfn-active-context" class="internalDFN" data-link-type="dfn">active context</a> and is a short string identifying a
    particular <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> in a JSON-LD document. For example, the
    prefix <code>foaf</code> may be used as a shorthand for the
    Friend-of-a-Friend vocabulary, which is identified using the <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>
    <code>http://xmlns.com/foaf/0.1/</code>. A developer may append
    any of the FOAF vocabulary terms to the end of the prefix to specify a short-hand
    version of the <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> for the vocabulary term. For example,
    <code>foaf:name</code> would be expanded to the <abbr title="Internationalized Resource Identifier">IRI</abbr>
    <code>http://xmlns.com/foaf/0.1/name</code>.</p>

  <aside class="example ds-selector-tabs" id="example-31-prefix-expansion"><div class="marker">
      <a class="self-link" href="#example-31-prefix-expansion">Example<bdi> 31</bdi></a><span class="example-title">: Prefix expansion</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="expanded">Expanded (Result)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="turtle">Turtle</button>
      <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%22foaf%22%3A%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2F%22%0A%20%20%20%20%0A%20%20%7D%2C%0A%20%20%22%40type%22%3A%20%22foaf%3APerson%22%2C%0A%20%20%22foaf%3Aname%22%3A%20%22Dave%20Longley%22%0A%7D">Open in playground</a>
    </div>
    <pre class="compacted input selected nohighlight">{
  "<span class="hl-bold">@context</span>": {
    "<span class="hl-bold">foaf</span>": "<span class="hl-bold">http://xmlns.com/foaf/0.1/</span>"
    <span class="comment">...</span>
  },
  "@type": "<span class="hl-bold">foaf:Person</span>",
  "<span class="hl-bold">foaf:name</span>": "Dave Longley"<span class="comment">,
  ...</span>
}</pre>
    <pre class="expanded result nohighlight" data-result-for="Prefix expansion-compacted">[{
  "@type": ["http://xmlns.com/foaf/0.1/Person"],
  "http://xmlns.com/foaf/0.1/name": [{"@value": "Dave Longley"}]
}]</pre>
    <table class="statements" data-result-for="Prefix expansion-expanded" data-to-rdf="">
      <thead><tr><th>Subject</th><th>Property</th><th>Value</th></tr></thead>
      <tbody>
        <tr><td>_:b0</td><td>rdf:type</td><td>foaf:Person</td></tr>
        <tr><td>_:b0</td><td>foaf:name</td><td>Dave Longley</td></tr>
      </tbody>
    </table>
    <pre class="turtle" data-content-type="text/turtle" data-result-for="Prefix expansion-expanded" data-to-rdf="" aria-busy="false"><code class="hljs">@prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt; .
@prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt; .

 [
   a foaf:Person;
   foaf:name "Dave Longley"
 ] .</code></pre>
  </aside>

  <p>In the example above, <code>foaf:name</code> expands to the <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>
    <code>http://xmlns.com/foaf/0.1/name</code> and <code>foaf:Person</code> expands
    to <code>http://xmlns.com/foaf/0.1/Person</code>.</p>

  <p><a href="#dfn-prefix" class="internalDFN" data-link-type="dfn">Prefixes</a> are expanded when the form of the value
    is a <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a> represented as a <code>prefix:suffix</code>
    combination, the <em>prefix</em> matches a <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a> defined within the
    <a href="#dfn-active-context" class="internalDFN" data-link-type="dfn">active context</a>, and the <em>suffix</em> does not begin with two
    slashes&nbsp;(<code>//</code>). The <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a> is expanded by
    concatenating the <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> mapped to the <em>prefix</em> to the (possibly empty)
    <em>suffix</em>. If the <em>prefix</em> is not defined in the <a href="#dfn-active-context" class="internalDFN" data-link-type="dfn">active context</a>,
    or the suffix begins with two slashes (such as in <code>http://example.com</code>),
    the value is interpreted as <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> instead. If the prefix is an
    underscore (<code>_</code>), the value is interpreted as <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node-identifier">blank node identifier</a>
    instead.</p>

  <p>It's also possible to use compact IRIs within the context as shown in the
    following example:</p>

  <aside class="example ds-selector-tabs" id="example-32-using-vocabularies"><div class="marker">
      <a class="self-link" href="#example-32-using-vocabularies">Example<bdi> 32</bdi></a><span class="example-title">: Using vocabularies</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="expanded">Expanded (Result)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="turtle">Turtle</button>
      <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%22%40version%22%3A%201.1%2C%0A%20%20%20%20%22xsd%22%3A%20%22http%3A%2F%2Fwww.w3.org%2F2001%2FXMLSchema%23%22%2C%0A%20%20%20%20%22foaf%22%3A%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2F%22%2C%0A%20%20%20%20%22foaf%3Ahomepage%22%3A%20%7B%20%22%40type%22%3A%20%22%40id%22%20%7D%2C%0A%20%20%20%20%22picture%22%3A%20%7B%20%22%40id%22%3A%20%22foaf%3Adepiction%22%2C%20%22%40type%22%3A%20%22%40id%22%20%7D%0A%20%20%7D%2C%0A%20%20%22%40id%22%3A%20%22http%3A%2F%2Fme.markus-lanthaler.com%2F%22%2C%0A%20%20%22%40type%22%3A%20%22foaf%3APerson%22%2C%0A%20%20%22foaf%3Aname%22%3A%20%22Markus%20Lanthaler%22%2C%0A%20%20%22foaf%3Ahomepage%22%3A%20%22http%3A%2F%2Fwww.markus-lanthaler.com%2F%22%2C%0A%20%20%22picture%22%3A%20%22http%3A%2F%2Ftwitter.com%2Faccount%2Fprofile_image%2Fmarkuslanthaler%22%0A%7D">Open in playground</a>
    </div>
    <pre class="compacted input selected nohighlight">{
  "@context": {
    <span class="hl-bold">"@version": 1.1</span>,
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    <span class="hl-bold">"foaf": "http://xmlns.com/foaf/0.1/"</span>,
    <span class="hl-bold">"foaf:homepage"</span>: { "@type": "@id" },
    "picture": { "@id": <span class="hl-bold">"foaf:depiction"</span>, "@type": "@id" }
  },
  "@id": "http://me.markus-lanthaler.com/",
  "@type": "foaf:Person",
  "foaf:name": "Markus Lanthaler",
  "foaf:homepage": "http://www.markus-lanthaler.com/",
  "picture": "http://twitter.com/account/profile_image/markuslanthaler"
}</pre>
    <pre class="expanded result result nohighlight" data-result-for="Using vocabularies-compacted">[{
  "@id": "http://me.markus-lanthaler.com/",
  "@type": ["http://xmlns.com/foaf/0.1/Person"],
  "http://xmlns.com/foaf/0.1/name": [{
    "@value": "Markus Lanthaler"
  }],
  "http://xmlns.com/foaf/0.1/homepage": [{
    "@id": "http://www.markus-lanthaler.com/"
  }],
  "http://xmlns.com/foaf/0.1/depiction": [{
    "@id": "http://twitter.com/account/profile_image/markuslanthaler"
  }]
}]</pre>
    <table class="statements" data-result-for="Using vocabularies-expanded" data-to-rdf="">
      <thead><tr><th>Subject</th><th>Property</th><th>Value</th></tr></thead>
      <tbody>
        <tr><td>http://me.markus-lanthaler.com/</td><td>rdf:type</td><td>foaf:Person</td></tr>
        <tr><td>http://me.markus-lanthaler.com/</td><td>foaf:name</td><td>Markus Lanthaler</td></tr>
        <tr><td>http://me.markus-lanthaler.com/</td><td>foaf:depiction</td><td>http://twitter.com/account/profile_image/markuslanthaler</td></tr>
        <tr><td>http://me.markus-lanthaler.com/</td><td>foaf:homepage</td><td>http://www.markus-lanthaler.com/</td></tr>
      </tbody>
    </table>
    <pre class="turtle" data-content-type="text/turtle" data-result-for="Using vocabularies-expanded" data-to-rdf="" aria-busy="false"><code class="hljs">@prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt; .
@prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt; .

&lt;http://me.markus-lanthaler.com/&gt; a foaf:Person;
  foaf:name "Markus Lanthaler";
  foaf:homepage &lt;http://www.markus-lanthaler.com/&gt;;
  foaf:depiction &lt;http://twitter.com/account/profile_image/markuslanthaler&gt; .</code></pre>
  </aside>

  <p class="changed">When operating explicitly with the <a href="#dfn-processing-mode" class="internalDFN" data-link-type="dfn">processing mode</a>
    for <cite><a href="https://www.w3.org/TR/2014/REC-json-ld-20140116/">JSON-LD 1.0</a></cite> compatibility, terms may be chosen as <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a> prefixes when
    compacting only if a <a href="#dfn-simple-term-definition" class="internalDFN" data-link-type="dfn">simple term definition</a> is used where the value ends with a
    URI <a href="https://tools.ietf.org/html/rfc3986#section-2.2">gen-delim</a> character (e.g, <code>/</code>,
    <code>#</code> and others, see [<cite><a class="bibref" data-link-type="biblio" href="#bib-rfc3986" title="Uniform Resource Identifier (URI): Generic Syntax">RFC3986</a></cite>]).</p>

  <p class="changed">In JSON-LD 1.1, terms may be chosen as <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a> prefixes
    when compacting only if
    a <a href="#dfn-simple-term-definition" class="internalDFN" data-link-type="dfn">simple term definition</a> is used where the value ends with a URI <a href="https://tools.ietf.org/html/rfc3986#section-2.2">gen-delim</a> character,
    or if their <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a> contains
    a <code>@prefix</code> <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">entry</a> with the value <code>true</code>.</p>

  <div class="note" role="note" id="issue-container-generatedID-12"><div role="heading" class="note-title marker" id="h-note-12" aria-level="5"><span>Note</span></div><p class="changed">The term selection behavior for 1.0 processors was changed
    as a result of an errata against <cite><a href="https://www.w3.org/TR/2014/REC-json-ld-20140116/">JSON-LD 1.0</a></cite> reported <a href="https://lists.w3.org/Archives/Public/public-rdf-comments/2018Jan/0002.html">here</a>.
    This does not affect the behavior of processing existing JSON-LD documents, but creates
    a slight change when compacting documents using <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">Compact IRIs</a>.</p></div>

  <p>The behavior when compacting can be illustrated by considering the following input
    document in expanded form:</p>

  <div class="example" id="term-selection-example">
          <div class="marker">
      <a class="self-link" href="#term-selection-example">Example<bdi> 33</bdi></a><span class="example-title">: Expanded document used to illustrate compact IRI creation</span>
    </div> <pre class="expanded input" aria-busy="false"><code class="hljs">[{
  "http://example.com/vocab/property": [{"@value": "property"}],
  "http://example.com/vocab/propertyOne": [{"@value": "propertyOne"}]
}]</code></pre>
        </div>

  <p class="changed">Using the following context in the 1.0 <a href="#dfn-processing-mode" class="internalDFN" data-link-type="dfn">processing mode</a>
    will now select the term <em>vocab</em> rather than
    <em>property</em>, even though the <abbr title="Internationalized Resource Identifier">IRI</abbr> associated with
    <em>property</em> captures more of the original <abbr title="Internationalized Resource Identifier">IRI</abbr>.</p>

  <div class="example" id="term-selection-context-0">
          <div class="marker">
      <a class="self-link" href="#term-selection-context-0">Example<bdi> 34</bdi></a><span class="example-title">: Compact IRI generation context (1.0)</span>
    </div> <pre class="context" aria-busy="false"><code class="hljs">{
  "@context": {
    "vocab": "http://example.com/vocab/",
    "property": "http://example.com/vocab/property"
  }
}</code></pre>
        </div>

  <p class="changed">Compacting using the previous context with the above expanded input document
    results in the following compacted result:</p>

  <aside class="example ds-selector-tabs" id="example-35-compact-iri-generation-term-selection-1-0"><div class="marker">
      <a class="self-link" href="#example-35-compact-iri-generation-term-selection-1-0">Example<bdi> 35</bdi></a><span class="example-title">: Compact IRI generation term selection (1.0)</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Result)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="turtle">Turtle</button>
      <a class="playground" data-result-for="#term-selection-example" data-context="#term-selection-context-0" data-compact="" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-compacted&amp;json-ld=%5B%7B%0A%20%20%22http%3A%2F%2Fexample.com%2Fvocab%2Fproperty%22%3A%20%5B%7B%22%40value%22%3A%20%22property%22%7D%5D%2C%0A%20%20%22http%3A%2F%2Fexample.com%2Fvocab%2FpropertyOne%22%3A%20%5B%7B%22%40value%22%3A%20%22propertyOne%22%7D%5D%0A%7D%5D&amp;context=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%22vocab%22%3A%20%22http%3A%2F%2Fexample.com%2Fvocab%2F%22%2C%0A%20%20%20%20%22property%22%3A%20%22http%3A%2F%2Fexample.com%2Fvocab%2Fproperty%22%0A%20%20%7D%0A%7D">Open in playground</a>
    </div>
    <pre class="compacted result selected nohighlight" data-result-for="Expanded document used to illustrate compact IRI creation" data-context="Compact IRI generation context (1.0)" data-compact="" title="Compact IRI generation term selection (1.0)-compacted">{
  "@context": {
    "vocab": "http://example.com/vocab/",
    "property": "http://example.com/vocab/property"
  },
  "property": "property",
  <span class="hl-bold">"vocab:propertyOne"</span>: "propertyOne"
}</pre>
    <table class="statements" data-result-for="Expanded document used to illustrate compact IRI creation" data-to-rdf="">
      <thead><tr><th>Subject</th><th>Property</th><th>Value</th></tr></thead>
      <tbody>
        <tr><td>_:b0</td><td>http://example.com/vocab/property</td><td>property</td></tr>
        <tr><td>_:b0</td><td>http://example.com/vocab/propertyOne</td><td>propertyOne</td></tr>
      </tbody>
    </table>
    <pre class="turtle nohighlight" data-content-type="text/turtle" data-result-for="Expanded document used to illustrate compact IRI creation" data-to-rdf="">@prefix vocab: &lt;http://example.com/vocab/&gt; .

[ vocab:property "property"; vocab:propertyOne "propertyOne"] .</pre>
  </aside>

  <p class="changed">In the original [<cite><a class="bibref" data-link-type="biblio" href="#bib-json-ld10" title="JSON-LD 1.0">JSON-LD10</a></cite>],
    the term selection algorithm would have selected <em>property</em>,
    creating the Compact <abbr title="Internationalized Resource Identifier">IRI</abbr> <em>property:One</em>.
    The original behavior can be made explicit using <code>@prefix</code>:</p>

  <div class="example" id="term-selection-context-1">
          <div class="marker">
      <a class="self-link" href="#term-selection-context-1">Example<bdi> 36</bdi></a><span class="example-title">: Compact IRI generation context (1.1)</span>
    </div> <pre class="context" aria-busy="false"><code class="hljs">{
  "@context": {
    <span class="hl-bold">"@version": 1.1,</span>
    "vocab": "http://example.com/vocab/",
    "property": {
      "@id": "http://example.com/vocab/property",
      <span class="hl-bold">"@prefix": true</span>
    }
  }
}</code></pre>
        </div>

  <aside class="example ds-selector-tabs" id="example-37-compact-iri-generation-term-selection-1-1"><div class="marker">
      <a class="self-link" href="#example-37-compact-iri-generation-term-selection-1-1">Example<bdi> 37</bdi></a><span class="example-title">: Compact IRI generation term selection (1.1)</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="turtle">Turtle</button>
      <a class="playground" data-result-for="#term-selection-example" data-context="#term-selection-context-1" data-compact="" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-compacted&amp;json-ld=%5B%7B%0A%20%20%22http%3A%2F%2Fexample.com%2Fvocab%2Fproperty%22%3A%20%5B%7B%22%40value%22%3A%20%22property%22%7D%5D%2C%0A%20%20%22http%3A%2F%2Fexample.com%2Fvocab%2FpropertyOne%22%3A%20%5B%7B%22%40value%22%3A%20%22propertyOne%22%7D%5D%0A%7D%5D&amp;context=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%22%40version%22%3A%201.1%2C%0A%20%20%20%20%22vocab%22%3A%20%22http%3A%2F%2Fexample.com%2Fvocab%2F%22%2C%0A%20%20%20%20%22property%22%3A%20%7B%0A%20%20%20%20%20%20%22%40id%22%3A%20%22http%3A%2F%2Fexample.com%2Fvocab%2Fproperty%22%2C%0A%20%20%20%20%20%20%22%40prefix%22%3A%20true%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D">Open in playground</a>
    </div>
    <pre class="compacted input selected nohighlight" data-result-for="Expanded document used to illustrate compact IRI creation" data-context="Compact IRI generation context (1.1)" data-compact="" title="Compact IRI generation term selection (1.1)-compacted">{
  "@context": {
    <span class="hl-bold">"@version": 1.1,</span>
    "vocab": "http://example.com/vocab/",
    "property": {
      "@id": "http://example.com/vocab/property",
      <span class="hl-bold">"@prefix": true</span>
    }
  },
  "property": "property",
  <span class="hl-bold">"property:One"</span>: "propertyOne"
}</pre>
    <table class="statements" data-result-for="Expanded document used to illustrate compact IRI creation" data-to-rdf="">
      <thead><tr><th>Subject</th><th>Property</th><th>Value</th></tr></thead>
      <tbody>
        <tr><td>_:b0</td><td>http://example.com/vocab/property</td><td>property</td></tr>
        <tr><td>_:b0</td><td>http://example.com/vocab/propertyOne</td><td>propertyOne</td></tr>
      </tbody>
    </table>
    <pre class="turtle nohighlight" data-content-type="text/turtle" data-result-for="Expanded document used to illustrate compact IRI creation" data-to-rdf="">@prefix vocab: &lt;http://example.com/vocab/&gt; .

[ vocab:property "property"; vocab:propertyOne "propertyOne"] .</pre>
  </aside>

  <p class="changed">In this case, the <em>property</em> term would not normally be usable as a prefix, both
    because it is defined with an <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a>, and because
    its <code>@id</code> does not end in a
    <a href="https://tools.ietf.org/html/rfc3986#section-2.2">gen-delim</a> character. Adding
    <code>"@prefix": true</code> allows it to be used as the prefix portion of
    the <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a> <em>property:One</em>.</p>
</section>

<section class="informative" id="aliasing-keywords"><h4 id="x4-1-6-aliasing-keywords"><bdi class="secno">4.1.6 </bdi>Aliasing Keywords<a class="self-link" aria-label="§" href="#aliasing-keywords"></a></h4><p><em>This section is non-normative.</em></p>
  <p>Each of the JSON-LD <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keywords</a>,
    except for <code>@context</code>, may be aliased to application-specific
    keywords. This feature allows legacy JSON content to be utilized
    by JSON-LD by re-using JSON keys that already exist in legacy documents.
    This feature also allows developers to design domain-specific implementations
    using only the JSON-LD <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a>.</p>

  <aside class="example ds-selector-tabs changed" id="example-38-aliasing-keywords"><div class="marker">
      <a class="self-link" href="#example-38-aliasing-keywords">Example<bdi> 38</bdi></a><span class="example-title">: Aliasing keywords</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="expanded">Expanded (Result)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="turtle">Turtle</button>
      <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%22url%22%3A%20%22%40id%22%2C%0A%20%20%20%20%22a%22%3A%20%22%40type%22%2C%0A%20%20%20%20%22name%22%3A%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2Fname%22%0A%20%20%7D%2C%0A%20%20%22url%22%3A%20%22http%3A%2F%2Fexample.com%2Fabout%23gregg%22%2C%0A%20%20%22a%22%3A%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2FPerson%22%2C%0A%20%20%22name%22%3A%20%22Gregg%20Kellogg%22%0A%7D">Open in playground</a>
    </div>
    <pre class="compacted input selected nohighlight">{
  "@context": {
    <span class="hl-bold">"url": "@id"</span>,
    <span class="hl-bold">"a": "@type"</span>,
    "name": "http://xmlns.com/foaf/0.1/name"
  },
  "<span class="hl-bold">url</span>": "http://example.com/about#gregg",
  "<span class="hl-bold">a</span>": "http://xmlns.com/foaf/0.1/Person",
  "name": "Gregg Kellogg"
}</pre>
    <pre class="expanded result result nohighlight" data-result-for="Aliasing keywords-compacted">[{
  <span class="hl-bold">"@type</span>": ["http://xmlns.com/foaf/0.1/Person"],
  "http://xmlns.com/foaf/0.1/name": [{"@value": "Gregg Kellogg"}],
  "<span class="hl-bold">@id</span>": "http://example.com/about#gregg"
}]</pre>
    <table class="statements" data-result-for="Aliasing keywords-expanded" data-to-rdf="">
      <thead><tr><th>Subject</th><th>Property</th><th>Value</th></tr></thead>
      <tbody>
        <tr><td>http://example.com/about#gregg</td><td>rdf:type</td><td>foaf:Person</td></tr>
        <tr><td>http://example.com/about#gregg</td><td>foaf:name</td><td>Gregg Kellogg</td></tr>
      </tbody>
    </table>
    <pre class="turtle" data-content-type="text/turtle" data-result-for="Aliasing keywords-expanded" data-to-rdf="" aria-busy="false"><code class="hljs">@prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt; .

&lt;http://example.com/about#gregg&gt; a foaf:Person;
  foaf:name "Gregg Kellogg" .</code></pre>
  </aside>

  <p>In the example above, the <code>@id</code> and <code>@type</code>
    <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keywords</a> have been given the aliases
    <strong>url</strong> and <strong>a</strong>, respectively.</p>

  <p><span class="changed">Other than for <code>@type</code>,</span> properties of
    <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definitions</a> where the term is a <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a>
    result in an error.
    <span class="changed">Unless the <a href="#dfn-processing-mode" class="internalDFN" data-link-type="dfn">processing mode</a> is set to <code>json-ld-1.0</code>,
      there is also an exception for <code>@type</code>;
      see <a href="#using-set-with-type" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">4.3.3 </bdi>Using <code>@set</code> with <code>@type</code></a> for further details
      and usage examples.</span></p>

  <p class="changed">Unless the <a href="#dfn-processing-mode" class="internalDFN" data-link-type="dfn">processing mode</a> is set to <code>json-ld-1.0</code>,
    aliases of <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keywords</a> are either <a data-lt="simple term definition" href="#dfn-simple-term-definition" class="internalDFN" data-link-type="dfn">simple term definitions</a>,
    where the value is a <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a>,
    or a <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definitions</a> with an <code>@id</code> <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">entry</a> and optionally an <code>@protected</code> <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">entry</a>;
    no other entries are allowed.
    There is also an exception for aliases of <code>@type</code>,
    as indicated above.
    See <a href="#protected-term-definitions" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">4.1.11 </bdi>Protected Term Definitions</a> for further details
    of using <code>@protected</code>.</p>

  <p>Since keywords cannot be redefined, they can also not be aliased to
    other keywords.</p>

  <div class="note" role="note" id="issue-container-generatedID-13"><div role="heading" class="note-title marker" id="h-note-13" aria-level="5"><span>Note</span></div><p class="">Aliased keywords may not be used within a <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a>, itself.</p></div>

  <p>See <a href="#keywords" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">9.16 </bdi>Keywords</a> for a normative
    definition of all keywords.</p>
</section>

<section class="informative" id="iri-expansion-within-a-context"><h4 id="x4-1-7-iri-expansion-within-a-context"><bdi class="secno">4.1.7 </bdi><abbr title="Internationalized Resource Identifier">IRI</abbr> Expansion within a Context<a class="self-link" aria-label="§" href="#iri-expansion-within-a-context"></a></h4><p><em>This section is non-normative.</em></p>
  <p>In general, normal <abbr title="Internationalized Resource Identifier">IRI</abbr> expansion rules apply
    anywhere an <abbr title="Internationalized Resource Identifier">IRI</abbr> is expected (see <a class="sectionRef sec-ref" href="#iris">§&nbsp;<bdi class="secno">3.2 </bdi>IRIs</a>). Within
    a <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a> definition, this can mean that terms defined
    within the context may also be used within that context as long as
    there are no circular dependencies. For example, it is common to use
    the <code>xsd</code> namespace when defining <a href="#dfn-typed-value" class="internalDFN" data-link-type="dfn">typed values</a>:</p>

<div class="example" id="example-39-iri-expansion-within-a-context">
          <div class="marker">
      <a class="self-link" href="#example-39-iri-expansion-within-a-context">Example<bdi> 39</bdi></a><span class="example-title">: IRI expansion within a context</span>
    </div> <pre class="nohighlight">{
  "@context": {
    <span class="hl-bold">"xsd": "http://www.w3.org/2001/XMLSchema#"</span>,
    "name": "http://xmlns.com/foaf/0.1/name",
    "age": {
      "@id": "http://xmlns.com/foaf/0.1/age",
      "@type": <span class="hl-bold">"xsd:integer"</span>
    },
    "homepage": {
      "@id": "http://xmlns.com/foaf/0.1/homepage",
      "@type": "@id"
    }
  }<span class="comment">,
  ...</span>
}</pre>
        </div>

<p>In this example, the <code>xsd</code> <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a> is defined
  and used as a <a href="#dfn-prefix" class="internalDFN" data-link-type="dfn">prefix</a> for the <code>@type</code> coercion
  of the <code>age</code> property.</p>

<p><a href="#dfn-term" class="internalDFN" data-link-type="dfn">Terms</a> may also be used when defining the <abbr title="Internationalized Resource Identifier">IRI</abbr> of another
<a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a>:</p>

<div class="example" id="example-40-using-a-term-to-define-the-iri-of-another-term-within-a-context">
          <div class="marker">
      <a class="self-link" href="#example-40-using-a-term-to-define-the-iri-of-another-term-within-a-context">Example<bdi> 40</bdi></a><span class="example-title">: Using a term to define the IRI of another term within a context</span>
    </div> <pre class="nohighlight">{
  "@context": {
    <span class="hl-bold">"foaf": "http://xmlns.com/foaf/0.1/"</span>,
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "name": <span class="hl-bold">"foaf:name"</span>,
    "age": {
      "@id": <span class="hl-bold">"foaf:age"</span>,
      "@type": "xsd:integer"
    },
    "homepage": {
      "@id": <span class="hl-bold">"foaf:homepage"</span>,
      "@type": "@id"
    }
  }<span class="comment">,
  ...</span>
}</pre>
        </div>

<p><a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">Compact IRIs</a>
  and <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">IRIs</a> may be used on the left-hand side of a
  <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a> definition.</p>

<div class="example" id="example-41-using-a-compact-iri-as-a-term">
          <div class="marker">
      <a class="self-link" href="#example-41-using-a-compact-iri-as-a-term">Example<bdi> 41</bdi></a><span class="example-title">: Using a compact IRI as a term</span>
    </div> <pre class="nohighlight">{
  "@context": {
    <span class="hl-bold">"foaf": "http://xmlns.com/foaf/0.1/"</span>,
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "name": "foaf:name",
    "<span class="hl-bold">foaf:age</span>": {
      "@id": "<span class="hl-bold">http://xmlns.com/foaf/0.1/age</span>",
      "@type": "xsd:integer"
    },
    "<span class="hl-bold">foaf:homepage</span>": <span class="hl-bold">{
      "@type": "@id"
    }</span>
  }<span class="comment">,
  ...</span>
}</pre>
        </div>

<p>
In this example, the <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a> form is used in two different ways.
  In the first approach, <code>foaf:age</code> declares both the
  <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> for the <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a> (using short-form) as well as the
  <code>@type</code> associated with the <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a>. In the second
  approach, only the <code>@type</code> associated with the <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a> is
  specified. The full <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> for
  <code>foaf:homepage</code> is determined by looking up the <code>foaf</code>
  <a href="#dfn-prefix" class="internalDFN" data-link-type="dfn">prefix</a> in the
  <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a>.</p>

<div class="warning" id="issue-container-generatedID-14"><div role="heading" class="warning-title marker" id="h-warning" aria-level="5"><span>Warning</span></div><p class="changed">If a <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a> is used as a <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a>, it must expand to the
  value that <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a> would have on its own when expanded.
  This represents a change to the original 1.0 algorithm to prevent terms from
  expanding to a different <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>, which could lead to undesired results.</p></div>

<div class="example" id="example-42-illegal-aliasing-of-a-compact-iri-to-a-different-iri">
          <div class="marker">
      <a class="self-link" href="#example-42-illegal-aliasing-of-a-compact-iri-to-a-different-iri">Example<bdi> 42</bdi></a><span class="example-title">: Illegal Aliasing of a compact IRI to a different IRI</span>
    </div> <pre class="nohighlight">{
  "@context": {
    "foaf": "http://xmlns.com/foaf/0.1/",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "name": "foaf:name",
    "foaf:age": {
      "@id": "http://xmlns.com/foaf/0.1/age",
      "@type": "xsd:integer"
    },
    "foaf:homepage": {
     <span class="hl-bold">"@id": "http://schema.org/url"</span>,
     "@type": "@id"
    }
  }<span class="comment">,
  ...</span>
}</pre>
        </div>

<p><a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">IRIs</a> may also be used in the key position in a <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a>:</p>

<div class="example" id="example-43-associating-context-definitions-with-iris">
          <div class="marker">
      <a class="self-link" href="#example-43-associating-context-definitions-with-iris">Example<bdi> 43</bdi></a><span class="example-title">: Associating context definitions with IRIs</span>
    </div> <pre class="nohighlight">{
  "@context": {
    "foaf": "http://xmlns.com/foaf/0.1/",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "name": "foaf:name",
    "foaf:age": {
      "@id": "http://xmlns.com/foaf/0.1/age",
      "@type": "xsd:integer"
    },
    "<span class="hl-bold">http://xmlns.com/foaf/0.1/homepage</span>": {
      "@type": "@id"
    }
  }<span class="comment">,
  ...</span>
}</pre>
        </div>

<p>In order for the <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> to match above, the <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>
  needs to be used in the <a href="#dfn-json-ld-document" class="internalDFN" data-link-type="dfn">JSON-LD document</a>. Also note that <code>foaf:homepage</code>
  will not use the <code>{ "@type": "@id" }</code> declaration because
  <code>foaf:homepage</code> is not the same as <code>http://xmlns.com/foaf/0.1/homepage</code>.
  That is, <a href="#dfn-term" class="internalDFN" data-link-type="dfn">terms</a> are looked up in a <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a> using
  direct string comparison before the <a href="#dfn-prefix" class="internalDFN" data-link-type="dfn">prefix</a> lookup mechanism is applied.</p>

<div class="warning" id="issue-container-generatedID-15"><div role="heading" class="warning-title marker" id="h-warning-0" aria-level="5"><span>Warning</span></div><p class="changed">Neither an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-1.3"><abbr title="Internationalized Resource Identifier">IRI</abbr> reference</a> nor a <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a> 
  may expand to some other unrelated <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>.
  This represents a change to the original 1.0 algorithm which allowed this behavior but discouraged it.</p></div>

<p>The only other exception for using terms in the <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a> is that
  circular definitions are not allowed. That is,
  a definition of <em>term1</em> cannot depend on the
  definition of <em>term2</em> if <em>term2</em> also depends on
  <em>term1</em>. For example, the following <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a> definition
  is illegal:</p>
<div class="example" id="example-44-illegal-circular-definition-of-terms-within-a-context">
          <div class="marker">
      <a class="self-link" href="#example-44-illegal-circular-definition-of-terms-within-a-context">Example<bdi> 44</bdi></a><span class="example-title">: Illegal circular definition of terms within a context</span>
    </div> <pre class="nohighlight" data-ignore="">{
  "@context": {
    <span class="hl-bold">"term1": "term2:foo",
    "term2": "term1:bar"</span>
  }<span class="comment">,
  ...</span>
}</pre>
        </div>
</section>

<section class="informative changed" id="scoped-contexts"><h4 id="x4-1-8-scoped-contexts"><bdi class="secno">4.1.8 </bdi>Scoped Contexts<a class="self-link" aria-label="§" href="#scoped-contexts"></a></h4><p><em>This section is non-normative.</em></p>

  <p>An <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a> can include a <code>@context</code>
    property, which defines a <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a> (a <a href="#dfn-scoped-context" class="internalDFN" data-link-type="dfn">scoped context</a>) for
    <a data-lt="JSON-LD value" href="#dfn-json-ld-value" class="internalDFN" data-link-type="dfn">values</a> of properties defined using that <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a>.
    When used for a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-property">property</a>, this is called a <a href="#dfn-property-scoped-context" class="internalDFN" data-link-type="dfn">property-scoped context</a>.
    This allows values to use <a href="#dfn-term-definition" class="internalDFN" data-link-type="dfn">term definitions</a>, the <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-base-iri">base <abbr title="Internationalized Resource Identifier">IRI</abbr></a>,
    <a href="#dfn-vocabulary-mapping" class="internalDFN" data-link-type="dfn">vocabulary mappings</a> or the <a href="#dfn-default-language" class="internalDFN" data-link-type="dfn">default language</a> which are different from the
    <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> they are contained in, as if the
    <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a> was specified within the value itself.</p>

  <aside class="example ds-selector-tabs changed" id="example-45-defining-an-context-within-a-term-definition"><div class="marker">
      <a class="self-link" href="#example-45-defining-an-context-within-a-term-definition">Example<bdi> 45</bdi></a><span class="example-title">: Defining an @context within a term definition</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="expanded">Expanded (Result)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="turtle">Turtle</button>
      <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%22%40version%22%3A%201.1%2C%0A%20%20%20%20%22name%22%3A%20%22http%3A%2F%2Fschema.org%2Fname%22%2C%0A%20%20%20%20%22interest%22%3A%20%7B%0A%20%20%20%20%20%20%22%40id%22%3A%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2Finterest%22%2C%0A%20%20%20%20%20%20%22%40context%22%3A%20%7B%22%40vocab%22%3A%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2F%22%7D%0A%20%20%20%20%7D%0A%20%20%7D%2C%0A%20%20%22name%22%3A%20%22Manu%20Sporny%22%2C%0A%20%20%22interest%22%3A%20%7B%0A%20%20%20%20%22%40id%22%3A%20%22https%3A%2F%2Fwww.w3.org%2FTR%2Fjson-ld11%2F%22%2C%0A%20%20%20%20%22name%22%3A%20%22JSON-LD%22%2C%0A%20%20%20%20%22topic%22%3A%20%22Linking%20Data%22%0A%20%20%7D%0A%7D">Open in playground</a>
    </div>
    <pre class="compacted input selected nohighlight">{
  "@context": {
    <span class="hl-bold">"@version": 1.1</span>,
    "name": "http://schema.org/name",
    "interest": {
      "@id": "http://xmlns.com/foaf/0.1/interest",
      <span class="hl-bold">"@context": {"@vocab": "http://xmlns.com/foaf/0.1/"}</span>
    }
  },
  "name": "Manu Sporny",
  "interest": <span class="hl-bold">{
    "@id": "https://www.w3.org/TR/json-ld11/",
    "name": "JSON-LD",
    "topic": "Linking Data"
  }</span>
}</pre>
    <pre class="expanded result nohighlight" data-result-for="Defining an @context within a term definition-compacted">[{
  "http://xmlns.com/foaf/0.1/interest": [
    {
      "@id": "https://www.w3.org/TR/json-ld11/",
      "http://schema.org/name": [{"@value": "JSON-LD"}],
      "http://xmlns.com/foaf/0.1/topic": [{"@value": "Linking Data"}]
    }
  ],
  "http://schema.org/name": [{"@value": "Manu Sporny"}]
}]</pre>
    <table class="statements" data-result-for="Defining an @context within a term definition-expanded" data-to-rdf="">
      <thead><tr><th>Subject</th><th>Property</th><th>Value</th></tr></thead>
      <tbody>
        <tr><td>https://www.w3.org/TR/json-ld11/</td><td>schema:name</td><td>JSON-LD</td></tr>
        <tr><td>https://www.w3.org/TR/json-ld11/</td><td>foaf:topic</td><td>Linking Data</td></tr>
        <tr><td>_:b0</td><td>schema:name</td><td>Manu Sporny</td></tr>
        <tr><td>_:b0</td><td>foaf:interest</td><td>https://www.w3.org/TR/json-ld11/</td></tr>
    </tbody></table>
    <pre class="turtle" data-content-type="text/turtle" data-result-for="Defining an @context within a term definition-expanded" data-to-rdf="" aria-busy="false"><code class="hljs">@prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt; .
@prefix schema: &lt;http://schema.org/&gt; .

[
  schema:name "Manu Sporny";
  foaf:interest &lt;https://www.w3.org/TR/json-ld11/&gt;
] .
&lt;https://www.w3.org/TR/json-ld11/&gt; schema:name "JSON-LD";
  foaf:topic "Linking Data" .</code></pre>
  </aside>

  <p>In this case, the social profile is defined using the schema.org vocabulary,
    but interest is imported from FOAF,
    and is used to define a node describing one of Manu's interests
    where those <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-property">properties</a> now come from the FOAF vocabulary.</p>

  <p>Expanding this document, uses a combination of terms defined in the outer context,
    and those defined specifically for that term in a <a href="#dfn-property-scoped-context" class="internalDFN" data-link-type="dfn">property-scoped context</a>.</p>

  <p>Scoping can also be performed using a term used as a value of <code>@type</code>:</p>

  <aside class="example ds-selector-tabs changed" id="example-46-defining-an-context-within-a-term-definition-used-on-type"><div class="marker">
      <a class="self-link" href="#example-46-defining-an-context-within-a-term-definition-used-on-type">Example<bdi> 46</bdi></a><span class="example-title">: Defining an @context within a term definition used on @type</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="expanded">Expanded (Result)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="turtle">Turtle</button>
      <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%22%40version%22%3A%201.1%2C%0A%20%20%20%20%22name%22%3A%20%22http%3A%2F%2Fschema.org%2Fname%22%2C%0A%20%20%20%20%22interest%22%3A%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2Finterest%22%2C%0A%20%20%20%20%22Person%22%3A%20%22http%3A%2F%2Fschema.org%2FPerson%22%2C%0A%20%20%20%20%22Document%22%3A%20%7B%0A%20%20%20%20%20%20%22%40id%22%3A%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2FDocument%22%2C%0A%20%20%20%20%20%20%22%40context%22%3A%20%7B%22%40vocab%22%3A%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2F%22%7D%0A%20%20%20%20%7D%0A%20%20%7D%2C%0A%20%20%22%40type%22%3A%20%22Person%22%2C%0A%20%20%22name%22%3A%20%22Manu%20Sporny%22%2C%0A%20%20%22interest%22%3A%20%7B%0A%20%20%20%20%22%40id%22%3A%20%22https%3A%2F%2Fwww.w3.org%2FTR%2Fjson-ld11%2F%22%2C%0A%20%20%20%20%22%40type%22%3A%20%22Document%22%2C%0A%20%20%20%20%22name%22%3A%20%22JSON-LD%22%2C%0A%20%20%20%20%22topic%22%3A%20%22Linking%20Data%22%0A%20%20%7D%0A%7D">Open in playground</a>
    </div>
    <pre class="compacted input selected nohighlight">{
  "@context": {
    <span class="hl-bold">"@version": 1.1</span>,
    "name": "http://schema.org/name",
    "interest": "http://xmlns.com/foaf/0.1/interest",
    "Person": "http://schema.org/Person",
    <span class="hl-bold">"Document"</span>: {
      "@id": "http://xmlns.com/foaf/0.1/Document",
      <span class="hl-bold">"@context": {"@vocab": "http://xmlns.com/foaf/0.1/"}</span>
    }
  },
  "@type": "Person",
  "name": "Manu Sporny",
  "interest": {
    "@id": "https://www.w3.org/TR/json-ld11/",
    <span class="hl-bold">"@type": "Document"</span>,
    "name": "JSON-LD",
    "topic": "Linking Data"
  }
}</pre>
    <pre class="expanded result result nohighlight" data-result-for="Defining an @context within a term definition used on @type-compacted">[{
  "@type": ["http://schema.org/Person"],
  "http://xmlns.com/foaf/0.1/interest": [
    {
      "@id": "https://www.w3.org/TR/json-ld11/",
      "@type": ["http://xmlns.com/foaf/0.1/Document"],
      "http://schema.org/name": [{"@value": "JSON-LD"}],
      "http://xmlns.com/foaf/0.1/topic": [{"@value": "Linking Data"}]
    }
  ],
  "http://schema.org/name": [{"@value": "Manu Sporny"}]
}]</pre>
    <table class="statements" data-result-for="Defining an @context within a term definition used on @type-expanded" data-to-rdf="" data-no-lint="">
      <thead><tr><th>Subject</th><th>Property</th><th>Value</th></tr></thead>
      <tbody>
        <tr><td>_:b0</td><td>rdf:type</td><td>schema:Person</td></tr>
        <tr><td>https://www.w3.org/TR/json-ld11/</td><td>rdf:type</td><td>foaf:Document</td></tr>
        <tr><td>https://www.w3.org/TR/json-ld11/</td><td>schema:name</td><td>JSON-LD</td></tr>
        <tr><td>https://www.w3.org/TR/json-ld11/</td><td>foaf:topic</td><td>Linking Data</td></tr>
        <tr><td>_:b0</td><td>schema:name</td><td>Manu Sporny</td></tr>
        <tr><td>_:b0</td><td>foaf:interest</td><td>https://www.w3.org/TR/json-ld11/</td></tr>
      </tbody>
    </table>
    <pre class="turtle" data-content-type="text/turtle" data-result-for="Defining an @context within a term definition used on @type-expanded" data-to-rdf="" data-no-lint="" aria-busy="false"><code class="hljs">@prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt; .
@prefix schema: &lt;http://schema.org/&gt; .

[
  a schema:Person;
  schema:name "Manu Sporny";
  foaf:interest &lt;https://www.w3.org/TR/json-ld11/&gt;
] .
&lt;https://www.w3.org/TR/json-ld11/&gt; a foaf:Document;
  schema:name "JSON-LD";
  foaf:topic "Linking Data" .</code></pre>
  </aside>

  <p>Scoping on <code>@type</code> is useful when common properties are used to
    relate things of different types, where the vocabularies in use within
    different entities calls for different context scoping. For example,
    <code>hasPart</code>/<code>partOf</code> may be common terms used in a document, but mean
    different things depending on the context.
    A <a href="#dfn-type-scoped-context" class="internalDFN" data-link-type="dfn">type-scoped context</a> is only in effect for the <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> on which
    the type is used; the previous in-scope <a href="#dfn-context" class="internalDFN" data-link-type="dfn">contexts</a> are placed back into
    effect when traversing into another <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a>.
    As described further in <a href="#context-propagation" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">4.1.9 </bdi>Context Propagation</a>,
    this may be controlled using the <code>@propagate</code> keyword.</p>

  <div class="note" role="note" id="issue-container-generatedID-16"><div role="heading" class="note-title marker" id="h-note-14" aria-level="5"><span>Note</span></div><p class="">Any <a data-lt="property-scoped context" href="#dfn-property-scoped-context" class="internalDFN" data-link-type="dfn">property-scoped</a> or local <a href="#dfn-context" class="internalDFN" data-link-type="dfn">contexts</a> that were introduced in the <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a>
    would still be in effect when traversing into another <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a>.</p></div>

  <p>When expanding, each value of <code>@type</code> is considered
    (ordering them lexicographically) where that value is also a <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a> in
    the <a href="#dfn-active-context" class="internalDFN" data-link-type="dfn">active context</a> having its own <a href="#dfn-type-scoped-context" class="internalDFN" data-link-type="dfn">type-scoped context</a>.
    If so, that the <a href="#dfn-scoped-context" class="internalDFN" data-link-type="dfn">scoped context</a> is applied to the <a href="#dfn-active-context" class="internalDFN" data-link-type="dfn">active context</a>.</p>

  <div class="note" role="note" id="issue-container-generatedID-17"><div role="heading" class="note-title marker" id="h-note-15" aria-level="5"><span>Note</span></div><p class="">The values of <code>@type</code> are unordered, so if multiple
    types are listed, the order that <a href="#dfn-type-scoped-context" class="internalDFN" data-link-type="dfn">type-scoped contexts</a> are applied is based on
    lexicographical ordering.</p></div>

  <p>For example, consider the following semantically equivalent examples.
    The first example, shows how properties and types can define their own
    scoped contexts, which are included when expanding.</p>

  <div class="example" id="example-47-expansion-using-embedded-and-scoped-contexts">
          <div class="marker">
      <a class="self-link" href="#example-47-expansion-using-embedded-and-scoped-contexts">Example<bdi> 47</bdi></a><span class="example-title">: Expansion using embedded and scoped contexts</span>
    </div> <pre aria-busy="false"><code class="hljs json">{
  <span class="hljs-attr">"@context"</span>: {
    <span class="hljs-attr">"@version"</span>: <span class="hljs-number">1.1</span>,
    <span class="hljs-attr">"@vocab"</span>: <span class="hljs-string">"http://example.com/vocab/"</span>,
    <span class="hljs-attr">"property"</span>: {
      <span class="hljs-attr">"@id"</span>: <span class="hljs-string">"http://example.com/vocab/property"</span>,
      <span class="hljs-attr">"@context"</span>: {
        <span class="hljs-attr">"term1"</span>: <span class="hljs-string">"http://example.com/vocab/term1"</span>
        <span class="comment"> ↑ Scoped context for <span class="hljs-string">"property"</span> defines term1</span>
      }
    },
    <span class="hljs-attr">"Type1"</span>: {
      <span class="hljs-attr">"@id"</span>: <span class="hljs-string">"http://example.com/vocab/Type1"</span>,
      <span class="hljs-attr">"@context"</span>: {
        <span class="hljs-attr">"term3"</span>: <span class="hljs-string">"http://example.com/vocab/term3"</span>
        <span class="comment"> ↑ Scoped context for <span class="hljs-string">"Type1"</span> defines term3</span>
      }
    },
    <span class="hljs-attr">"Type2"</span>: {
      <span class="hljs-attr">"@id"</span>: <span class="hljs-string">"http://example.com/vocab/Type2"</span>,
      <span class="hljs-attr">"@context"</span>: {
        <span class="hljs-attr">"term4"</span>: <span class="hljs-string">"http://example.com/vocab/term4"</span>
        <span class="comment"> ↑ Scoped context for <span class="hljs-string">"Type2"</span> defines term4</span>
      }
    }
  },
  <span class="hljs-attr">"property"</span>: {
    <span class="hljs-attr">"@context"</span>: {
      <span class="hljs-attr">"term2"</span>: <span class="hljs-string">"http://example.com/vocab/term2"</span>
        <span class="comment"> ↑ Embedded context defines term2</span>
    },
    <span class="hljs-attr">"@type"</span>: [<span class="hljs-string">"Type2"</span>, <span class="hljs-string">"Type1"</span>],
    <span class="hljs-attr">"term1"</span>: <span class="hljs-string">"a"</span>,
    <span class="hljs-attr">"term2"</span>: <span class="hljs-string">"b"</span>,
    <span class="hljs-attr">"term3"</span>: <span class="hljs-string">"c"</span>,
    <span class="hljs-attr">"term4"</span>: <span class="hljs-string">"d"</span>
  }
}</code></pre>
        </div>

  <p>Contexts are processed depending on how they are defined.
    A <a href="#dfn-property-scoped-context" class="internalDFN" data-link-type="dfn">property-scoped context</a> is processed first,
    followed by any <a href="#dfn-embedded-context" class="internalDFN" data-link-type="dfn">embedded context</a>,
    followed lastly by the <a href="#dfn-type-scoped-context" class="internalDFN" data-link-type="dfn">type-scoped contexts</a>,
    in the appropriate order. The previous example is logically equivalent to the following:</p>

  <div class="example" id="example-48-expansion-using-embedded-and-scoped-contexts-embedding-equivalent">
          <div class="marker">
      <a class="self-link" href="#example-48-expansion-using-embedded-and-scoped-contexts-embedding-equivalent">Example<bdi> 48</bdi></a><span class="example-title">: Expansion using embedded and scoped contexts (embedding equivalent)</span>
    </div> <pre aria-busy="false"><code class="hljs json">{
  <span class="hljs-attr">"@context"</span>: {
    <span class="hljs-attr">"@vocab"</span>: <span class="hljs-string">"http://example.com/vocab/"</span>,
    <span class="hljs-attr">"property"</span>: <span class="hljs-string">"http://example.com/vocab/property"</span>,
    <span class="hljs-attr">"Type1"</span>: <span class="hljs-string">"http://example.com/vocab/Type1"</span>,
    <span class="hljs-attr">"Type2"</span>: <span class="hljs-string">"http://example.com/vocab/Type2"</span>
  },
  <span class="hljs-attr">"property"</span>: {
    <span class="hljs-attr">"@context"</span>: [{
        <span class="hljs-attr">"term1"</span>: <span class="hljs-string">"http://example.com/vocab/term1"</span>
        <span class="comment"> ↑ Previously scoped context for <span class="hljs-string">"property"</span> defines term1</span>
      }, {
        <span class="hljs-attr">"term2"</span>: <span class="hljs-string">"http://example.com/vocab/term2"</span>
        <span class="comment"> ↑ Embedded context defines term2</span>
      }, {
        <span class="hljs-attr">"term3"</span>: <span class="hljs-string">"http://example.com/vocab/term3"</span>
        <span class="comment"> ↑ Previously scoped context for <span class="hljs-string">"Type1"</span> defines term3</span>
      }, {
      <span class="hljs-attr">"term4"</span>: <span class="hljs-string">"http://example.com/vocab/term4"</span>
        <span class="comment"> ↑ Previously scoped context for <span class="hljs-string">"Type2"</span> defines term4</span>
    }],
    <span class="hljs-attr">"@type"</span>: [<span class="hljs-string">"Type2"</span>, <span class="hljs-string">"Type1"</span>],
    <span class="hljs-attr">"term1"</span>: <span class="hljs-string">"a"</span>,
    <span class="hljs-attr">"term2"</span>: <span class="hljs-string">"b"</span>,
    <span class="hljs-attr">"term3"</span>: <span class="hljs-string">"c"</span>,
    <span class="hljs-attr">"term4"</span>: <span class="hljs-string">"d"</span>
  }
}</code></pre>
        </div>

  <div class="note" role="note" id="issue-container-generatedID-18"><div role="heading" class="note-title marker" id="h-note-16" aria-level="5"><span>Note</span></div><p class="">If a <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a> defines a <a href="#dfn-scoped-context" class="internalDFN" data-link-type="dfn">scoped context</a>,
    and then that term is later redefined,
    the association of the context defined in the earlier
    <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a> is lost
    within the scope of that redefinition. This is consistent with
    <a href="#dfn-term-definition" class="internalDFN" data-link-type="dfn">term definitions</a> of a term overriding previous term definitions from
    earlier less deeply nested definitions, as discussed in
    <a href="#advanced-context-usage" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">4.1 </bdi>Advanced Context Usage</a>.</p></div>

  <div class="note" role="note" id="issue-container-generatedID-19"><div role="heading" class="note-title marker" id="h-note-17" aria-level="5"><span>Note</span></div><p class=""><a href="#dfn-scoped-context" class="internalDFN" data-link-type="dfn">Scoped Contexts</a> are a new feature in JSON-LD 1.1.</p></div>
</section>

<section class="informative changed" id="context-propagation"><h4 id="x4-1-9-context-propagation"><bdi class="secno">4.1.9 </bdi>Context Propagation<a class="self-link" aria-label="§" href="#context-propagation"></a></h4><p><em>This section is non-normative.</em></p>
  <p>Once introduced, <a href="#dfn-context" class="internalDFN" data-link-type="dfn">contexts</a> remain in effect until a subsequent
    <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a> removes it by setting <code>@context</code> to <code>null</code>,
    or by redefining terms,
    with the exception of <a href="#dfn-type-scoped-context" class="internalDFN" data-link-type="dfn">type-scoped contexts</a>,
    which limit the effect of that context until the next <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> is entered.
    This behavior can be changed using the <code>@propagate</code> keyword.</p>

  <p>The following example illustrates how terms defined in a context with <code>@propagate</code> set to <code>false</code>
    are effectively removed when descending into new <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a>.</p>

  <aside class="example ds-selector-tabs" id="example-49-marking-a-context-to-not-propagate"><div class="marker">
      <a class="self-link" href="#example-49-marking-a-context-to-not-propagate">Example<bdi> 49</bdi></a><span class="example-title">: Marking a context to not propagate</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="expanded">Expanded (Result)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="turtle">Turtle</button>
      <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%22%40version%22%3A%201.1%2C%0A%20%20%20%20%22term%22%3A%20%7B%0A%20%20%20%20%20%20%22%40id%22%3A%20%22http%3A%2F%2Fexample.org%2Foriginal%22%2C%0A%20%20%20%20%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%20%20%20%20%22%40propagate%22%3A%20false%2C%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%22term%22%3A%20%22http%3A%2F%2Fexample.org%2Fnon-propagated-term%22%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%7D%2C%0A%20%20%22term%22%3A%20%7B%0A%20%20%0A%20%20%20%20%22term%22%3A%20%7B%0A%20%20%20%20%0A%20%20%20%20%20%20%22term%22%3A%20%22This%20term%20is%20from%20the%20first%20context%22%0A%20%20%20%20%20%20%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D">Open in playground</a>
    </div>
    <pre class="compacted input selected nohighlight">{
  "@context": {
    "@version": 1.1,
    "term": {
      "@id": "http://example.org/original",
      "@context": {
        "@propagate": false,
        <span class="comment"> ↑ Scoped context only lasts in one node-object</span>
        "term": "http://example.org/non-propagated-term"
      }
    }
  },
  "term": {
  <span class="comment"> ↑ This term is the original</span>
    "term": {
    <span class="comment"> ↑ This term is from the scoped context</span>
      "term": "This term is from the first context"
      <span class="comment"> ↑ This term is the original again</span>
    }
  }
}</pre>
    <pre class="expanded result result nohighlight" data-result-for="Marking a context to not propagate-compacted">[{
  "http://example.org/original": [{
    "http://example.org/non-propagated-term": [{
      "http://example.org/original": [
        {"@value": "This term is from the first context"}
      ]
    }]
  }]
}]</pre>
    <table class="statements" data-result-for="Marking a context to not propagate-expanded" data-to-rdf="" data-no-lint="">
      <thead><tr><th>Subject</th><th>Property</th><th>Value</th></tr></thead>
      <tbody>
        <tr><td>_:b2</td><td>http://example.org/original</td><td>This term is from the first context</td></tr>
        <tr><td>_:b1</td><td>http://example.org/non-propagated-term</td><td>_:b2</td></tr>
        <tr><td>_:b0</td><td>http://example.org/original</td><td>_:b1</td></tr>
      </tbody>
    </table>
    <pre class="turtle" data-content-type="text/turtle" data-result-for="Marking a context to not propagate-expanded" data-to-rdf="" data-no-lint="" aria-busy="false"><code class="hljs">@prefix ex: &lt;http://example.org/&gt; .
[
  ex:original [
    ex:non-propagated-term [
      ex:original "This term is from the first context"
    ]
  ]
] .</code></pre>
  </aside>

  <div class="note" role="note" id="issue-container-generatedID-20"><div role="heading" class="note-title marker" id="h-note-18" aria-level="5"><span>Note</span></div><p class="">Contexts included within an array must all have the same value for <code>@propagate</code>
    due to the way that rollback is defined in <cite><a href="https://www.w3.org/TR/json-ld11-api/">JSON-LD 1.1 Processing Algorithms and API</a></cite>.</p></div>
</section>

<section class="informative changed" id="imported-contexts"><h4 id="x4-1-10-imported-contexts"><bdi class="secno">4.1.10 </bdi>Imported Contexts<a class="self-link" aria-label="§" href="#imported-contexts"></a></h4><p><em>This section is non-normative.</em></p>
  <p>JSON-LD 1.0 included mechanisms for modifying the <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a> that
    is in effect. This included the capability to load and process a remote
    <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a> and then apply further changes to it via new <a href="#dfn-context" class="internalDFN" data-link-type="dfn">contexts</a>.
  </p>

  <p>However, with the introduction of JSON-LD 1.1, it is also desirable to
    be able to load a remote <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a>, in particular an existing JSON-LD
    1.0 <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a>, and apply JSON-LD 1.1 features to it prior to
    processing.</p>

  <p>By using the <code>@import</code> keyword in a <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a>, another remote
    <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a>, referred to as an imported <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a>, can be loaded and
    modified prior to processing. The modifications are expressed in the
    <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a> that includes the <code>@import</code> keyword, referred to as the
    wrapping <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a>. Once an imported <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a> is loaded, the
    contents of the wrapping <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a> are merged into it prior to
    processing. The merge operation will cause each key-value pair in the
    wrapping <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a> to be added to the loaded imported <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a>,
    with the wrapping <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a> key-value pairs taking precedence.</p>

  <p>By enabling existing <a href="#dfn-context" class="internalDFN" data-link-type="dfn">contexts</a> to be reused and edited inline prior
    to processing, context-wide keywords can be applied to adjust all term
    definitions in the imported <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a>. Similarly, term definitions can
    be replaced prior to processing, enabling adjustments that, for instance, ensure term
    definitions match previously protected terms or that they include
    additional type coercion information.</p>

  <p>The following examples illustrate how <code>@import</code> can be used to express
    a <a href="#dfn-type-scoped-context" class="internalDFN" data-link-type="dfn">type-scoped context</a> that loads an imported <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a> and
    sets <code>@propagate</code> to <code>true</code>, as a technique for making other similar modifications.</p>

  <p>Suppose there was a <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a> that could be referenced remotely
    via the URL <code>https://json-ld.org/contexts/remote-context.jsonld</code>:</p>

  <div class="example" id="example-50-a-remote-context-to-be-imported-in-a-type-scoped-context">
          <div class="marker">
      <a class="self-link" href="#example-50-a-remote-context-to-be-imported-in-a-type-scoped-context">Example<bdi> 50</bdi></a><span class="example-title">: A remote context to be imported in a type-scoped context</span>
    </div> <pre class="nohighlight">{
  "@context": {
    "Type1": "http://example.com/vocab/Type1",
    "Type2": "http://example.com/vocab/Type2",
    "term1": "http://example.com/vocab#term1",
    "term2": "http://example.com/vocab#term2"<span class="comment">,
    ...</span>
  }
}</pre>
        </div>

  <p>A wrapping <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a> could be used to source it and modify it:</p>

  <div class="example" id="example-51-sourcing-a-context-in-a-type-scoped-context-and-setting-it-to-propagate">
          <div class="marker">
      <a class="self-link" href="#example-51-sourcing-a-context-in-a-type-scoped-context-and-setting-it-to-propagate">Example<bdi> 51</bdi></a><span class="example-title">: Sourcing a context in a type-scoped context and setting it to propagate</span>
    </div> <pre class="nohighlight">{
  "@context": {
    "@version": 1.1,
    "MyType": {
      "@id": "http://example.com/vocab#MyType",
      "@context": {
        "@version": 1.1,
        "@import": "https://json-ld.org/contexts/remote-context.jsonld",
        "@propagate": true
      }
    }
  }
}</pre>
        </div>

  <p>The effect would be the same as if the entire imported <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a>
    had been copied into the <a href="#dfn-type-scoped-context" class="internalDFN" data-link-type="dfn">type-scoped context</a>:</p>

  <div class="example" id="example-52-result-of-sourcing-a-context-in-a-type-scoped-context-and-setting-it-to-propagate">
          <div class="marker">
      <a class="self-link" href="#example-52-result-of-sourcing-a-context-in-a-type-scoped-context-and-setting-it-to-propagate">Example<bdi> 52</bdi></a><span class="example-title">: Result of sourcing a context in a type-scoped context and setting it to propagate</span>
    </div> <pre class="nohighlight">{
  "@context": {
    "@version": 1.1,
    "MyType": {
      "@id": "http://example.com/vocab#MyType",
      "@context": {
        "@version": 1.1,
        "Type1": "http://example.com/vocab/Type1",
        "Type2": "http://example.com/vocab/Type2",
        "term1": "http://example.com/vocab#term1",
        "term2": "http://example.com/vocab#term2",<span class="comment">
        ...</span>
        "@propagate": true
      }
    }
  }
}</pre>
        </div>

  <p>Similarly, the wrapping <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a> may replace term definitions or
    set other context-wide keywords that may affect how the imported
    <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a> term definitions will be processed:</p>

  <div class="example" id="example-53-sourcing-a-context-to-modify-vocab-and-a-term-definition">
          <div class="marker">
      <a class="self-link" href="#example-53-sourcing-a-context-to-modify-vocab-and-a-term-definition">Example<bdi> 53</bdi></a><span class="example-title">: Sourcing a context to modify @vocab and a term definition</span>
    </div> <pre class="nohighlight">{
  "@context": {
    "@version": 1.1,
    "@import": "https://json-ld.org/contexts/remote-context.jsonld",
    "@vocab": "http://example.org/vocab#",
    <span class="comment"> ↑ This will replace any previous @vocab definition prior to processing it</span>
    "term1": {
      "@id": "http://example.org/vocab#term1",
      "@type": "http://www.w3.org/2001/XMLSchema#integer"
    }
    <span class="comment"> ↑ This will replace the old term1 definition prior to processing it</span>
  }
}</pre>
        </div>

  <p>Again, the effect would be the same as if the entire imported <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a>
    had been copied into the <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a>:</p>

  <div class="example" id="example-54-result-of-sourcing-a-context-to-modify-vocab-and-a-term-definition">
          <div class="marker">
      <a class="self-link" href="#example-54-result-of-sourcing-a-context-to-modify-vocab-and-a-term-definition">Example<bdi> 54</bdi></a><span class="example-title">: Result of sourcing a context to modify @vocab and a term definition</span>
    </div> <pre class="nohighlight">{
  "@context": {
    "@version": 1.1,
    "Type1": "http://example.com/vocab/Type1",
    "Type2": "http://example.com/vocab/Type2",
    "term1": {
      "@id": "http://example.org/vocab#term1",
      "@type": "http://www.w3.org/2001/XMLSchema#integer"
    },
    <span class="comment"> ↑ Note term1 has been replaced prior to processing</span>
    "term2": "http://example.com/vocab#term2",<span class="comment">
    ...,</span>
    "@vocab": "http://example.org/vocab#"
  }
}</pre>
        </div>

  <p>The result of loading imported <a href="#dfn-context" class="internalDFN" data-link-type="dfn">contexts</a> must be
    <a href="#dfn-context-definition" class="internalDFN" data-link-type="dfn">context definition</a>, not an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> or an <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a>.
    Additionally, the imported context cannot include an <code>@import</code> <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">entry</a>.</p>
</section>

<section class="informative changed" id="protected-term-definitions"><h4 id="x4-1-11-protected-term-definitions"><bdi class="secno">4.1.11 </bdi>Protected Term Definitions<a class="self-link" aria-label="§" href="#protected-term-definitions"></a></h4><p><em>This section is non-normative.</em></p>
  <p>JSON-LD is used in many specifications as the specified data format.
    However, there is also a desire to allow some JSON-LD contents to be processed as plain JSON,
    without using any of the JSON-LD algorithms.
    Because JSON-LD is very flexible,
    some terms from the original format may be locally overridden
    through the use of <a href="#dfn-embedded-context" class="internalDFN" data-link-type="dfn">embedded contexts</a>,
    and take a different meaning for JSON-LD based implementations.
    On the other hand, "plain JSON" implementations may not be able to interpret these <a href="#dfn-embedded-context" class="internalDFN" data-link-type="dfn">embedded contexts</a>,
    and hence will still interpret those terms with their original meaning.
    To prevent this divergence of interpretation,
    JSON-LD 1.1 allows term definitions to be <em>protected</em>.
    </p>
  <p>A <dfn data-dfn-type="dfn" id="dfn-protected-term-definition">protected term definition</dfn> is a term definition with an <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">entry</a> <code>@protected</code> set to <code>true</code>.
    It generally prevents further contexts from overriding this term definition,
    either through a new definition of the same term,
    or through clearing the context with <code>"@context": null</code>.
    Such attempts will raise an error and abort the processing
    (except in some specific situations described
    <a href="#overriding-protected-terms">below</a>).
  </p>


  <div class="example" id="example-55-a-protected-term-definition-can-generally-not-be-overridden">
          <div class="marker">
      <a class="self-link" href="#example-55-a-protected-term-definition-can-generally-not-be-overridden">Example<bdi> 55</bdi></a><span class="example-title">: A protected term definition can generally not be overridden</span>
    </div> <pre aria-busy="false"><code class="hljs">{
  "@context": [
    {
      <span class="hl-bold">"@version": 1.1</span>,
      "Person": "http://xmlns.com/foaf/0.1/Person",
      "knows": "http://xmlns.com/foaf/0.1/knows",
      "name": {
        "@id": "http://xmlns.com/foaf/0.1/name",
        <span class="hl-bold">"@protected": true</span>
      }
    },
    {
      <span class="comment">– this attempt will fail with an error</span>
      <span class="hl-bold">"name": "http://schema.org/name"</span>
    }
  ],
  "@type": "Person",
  "name": "Manu Sporny",
  "knows": {
    "@context": [
      <span class="comment">– this attempt would also fail with an error</span>
      <span class="hl-bold">null,</span>
      "http://schema.org/"
    ],
    "name": "Gregg Kellogg"
  }
}</code></pre>
        </div>

  <p>When all or most term definitions of a context need to be protected,
    it is possible to add an <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">entry</a> <code>@protected</code> set to <code>true</code>
    to the context itself.
    It has the same effect as protecting each of its term definitions individually.
    Exceptions can be made by adding an <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">entry</a> <code>@protected</code> set to <code>false</code>
    in some term definitions.
    </p>

  <aside class="example ds-selector-tabs changed" id="example-56-a-protected-context-with-an-exception"><div class="marker">
      <a class="self-link" href="#example-56-a-protected-context-with-an-exception">Example<bdi> 56</bdi></a><span class="example-title">: A protected @context with an exception</span>
    </div>
    <div class="selectors">
        <button class="selected" data-selects="compacted">Compacted (Input)</button>
        <button data-selects="expanded">Expanded (Result)</button>
        <button data-selects="statements">Statements</button>
        <button data-selects="turtle">Turtle</button>
        <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%22%40version%22%3A%201.1%2C%0A%20%20%20%20%20%20%22%40protected%22%3A%20true%2C%0A%20%20%20%20%20%20%22name%22%3A%20%22http%3A%2F%2Fschema.org%2Fname%22%2C%0A%20%20%20%20%20%20%22member%22%3A%20%22http%3A%2F%2Fschema.org%2Fmember%22%2C%0A%20%20%20%20%20%20%22Person%22%3A%20%7B%0A%20%20%20%20%20%20%20%20%22%40id%22%3A%20%22http%3A%2F%2Fschema.org%2FPerson%22%2C%0A%20%20%20%20%20%20%20%20%22%40protected%22%3A%20false%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%5D%2C%0A%20%20%22name%22%3A%20%22Digital%20Bazaar%22%2C%0A%20%20%22member%22%3A%20%7B%0A%20%20%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%20%20%0A%20%20%20%20%20%20%22Person%22%3A%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2FPerson%22%0A%20%20%20%20%7D%2C%0A%20%20%20%20%22%40type%22%3A%20%22Person%22%2C%0A%20%20%20%20%22name%22%3A%20%22Manu%20Sporny%22%0A%20%20%7D%0A%7D">Open in playground</a>
    </div>
    <pre class="compacted input selected nohighlight">{
  "@context": [
    {
      <span class="hl-bold">"@version": 1.1</span>,
      <span class="hl-bold">"@protected": true</span>,
      "name": "http://schema.org/name",
      "member": "http://schema.org/member",
      "Person": {
        "@id": "http://schema.org/Person",
        <span class="hl-bold">"@protected": false</span>
      }
    }
  ],
  "name": "Digital Bazaar",
  "member": {
    "@context": {
      <span class="comment">­– name *is* protected, so the following would fail with an error
      –   "name": "http://xmlns.com/foaf/0.1/Person",
      ­– Person is *not* protected, and can be overridden </span>
      "Person": "http://xmlns.com/foaf/0.1/Person"
    },
    "@type": "Person",
    "name": "Manu Sporny"
  }
}</pre>
    <pre class="expanded result nohighlight" data-result-for="A protected @context with an exception-compacted">[{
  "http://schema.org/name": [{"@value": "Digital Bazaar"}],
  "http://schema.org/member": [
    {
      "@type": ["http://xmlns.com/foaf/0.1/Person"],
      "http://schema.org/name": [{"@value": "Manu Sporny"}]
    }
  ]
}]</pre>
    <table class="statements" data-result-for="A protected @context with an exception-expanded" data-to-rdf="" data-no-lint="">
      <thead><tr><th>Subject</th><th>Property</th><th>Value</th></tr></thead>
      <tbody>
        <tr><td>_:b0</td><td>schema:name</td><td>Digital Bazaar</td></tr>
        <tr><td>_:b0</td><td>schema:member</td><td>_:b1</td></tr>
        <tr><td>_:b1</td><td>rdf:type</td><td>foaf:Person</td></tr>
        <tr><td>_:b1</td><td>schema:name</td><td>Manu Sporny</td></tr>
      </tbody>
    </table>
    <pre class="turtle" data-content-type="text/turtle" data-result-for="A protected @context with an exception-expanded" data-to-rdf="" data-no-lint="" aria-busy="false"><code class="hljs">@prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt; .
@prefix schema: &lt;http://schema.org/&gt; .

[
  schema:name "Digital Bazaar";
  schema:member [
    a foaf:Person;
    schema:name "Manu Sporny"
  ]
] .</code></pre>
  </aside>

  <p id="overriding-protected-terms">
    While protected terms can in general not be overridden,
    there are two exceptions to this rule.
    The first exception is that a context is allowed to redefine a protected term
    if the new definition is identical to the protected term definition
    (modulo the <code>@protected</code> flag).
    The rationale is that the new definition does not violate the protection,
    as it does not change the semantics of the protected term.
    This is useful for widespread term definitions,
    such as aliasing <code>@type</code> to <code>type</code>,
    which may occur (including in a protected form) in several contexts.
  </p>

  <aside class="example ds-selector-tabs changed" id="example-57-overriding-permitted-if-both-definitions-are-identical"><div class="marker">
      <a class="self-link" href="#example-57-overriding-permitted-if-both-definitions-are-identical">Example<bdi> 57</bdi></a><span class="example-title">: Overriding permitted if both definitions are identical</span>
    </div>
    <div class="selectors">
        <button class="selected" data-selects="original">Original</button>
        <button data-selects="expanded">Expanded</button>
        <button data-selects="statements">Statements</button>
        <button data-selects="turtle">Turtle</button>
        <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%22%40version%22%3A%201.1%2C%0A%20%20%20%20%20%20%22%40protected%22%3A%20true%2C%0A%20%20%20%20%20%20%22id%22%3A%20%22%40id%22%2C%0A%20%20%20%20%20%20%22type%22%3A%20%22%40type%22%2C%0A%20%20%20%20%20%20%22Organization%22%3A%20%22http%3A%2F%2Fexample.org%2Forga%2FOrganization%22%2C%0A%20%20%20%20%20%20%22member%22%3A%20%7B%0A%20%20%20%20%20%20%20%20%22%40id%22%3A%20%22http%3A%2F%2Fexample.org%2Forga%2Fmember%22%2C%0A%20%20%20%20%20%20%20%20%22%40type%22%3A%20%22%40id%22%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%22id%22%3A%20%22%40id%22%2C%0A%20%20%20%20%20%20%22type%22%3A%20%22%40type%22%2C%0A%20%20%20%20%20%20%0A%20%20%20%20%20%20%22Person%22%3A%20%22http%3A%2F%2Fschema.org%2FPerson%22%2C%0A%20%20%20%20%20%20%22name%22%3A%20%22http%3A%2F%2Fschema.org%2Fname%22%0A%20%20%20%20%7D%0A%20%20%5D%2C%0A%20%20%22id%22%3A%20%22https%3A%2F%2Fdigitalbazaar.com%2F%22%2C%0A%20%20%22type%22%3A%20%22Organization%22%2C%0A%20%20%22member%22%20%3A%20%7B%0A%20%20%20%20%22id%22%3A%20%22http%3A%2F%2Fmanu.sporny.org%2Fabout%23manu%22%2C%0A%20%20%20%20%22type%22%3A%20%22Person%22%2C%0A%20%20%20%20%22name%22%3A%20%22Manu%20Sporny%22%0A%20%20%7D%0A%7D">Open in playground</a>
    </div>
    <pre class="original selected nohighlight" data-ignore="">{
  "@context": [
    {
      "@version": 1.1,
      "@protected": true,
      <span class="hl-bold">"id": "@id",
      "type": "@type"</span>,
      "Organization": "http://example.org/orga/Organization",
      "member": {
        "@id": "http://example.org/orga/member",
        "@type": "@id"
      }
    },
    {
      <span class="hl-bold">"id": "@id",
      "type": "@type",</span>
      <span class="comment">­– Those "redefinitions" do not raise an error.
      ­– Note however that the terms are still protected </span>
      "Person": "http://schema.org/Person",
      "name": "http://schema.org/name"
    }
  ],
  "id": "https://digitalbazaar.com/",
  "type": "Organization",
  "member" : {
    "id": "http://manu.sporny.org/about#manu",
    "type": "Person",
    "name": "Manu Sporny"
  }
}</pre>
    <pre class="expanded nohighlight" data-result-for="Overriding permitted if both definitions are identical-original" data-ignore="">[{
  "@id": "https://digitalbazaar.com/",
  "@type": ["http://example.org/orga/Organization"],
  "http://example.org/orga/member": [
    {
      "@id": "http://manu.sporny.org/about#manu",
      "@type": ["http://schema.org/Person"],
      "http://schema.org/name": [{"@value": "Manu Sporny"}]
    }
  ]
}]</pre>
    <table class="statements" data-result-for="Overriding permitted if both definitions are identical-expanded" data-to-rdf="">
      <thead><tr><th>Subject</th><th>Property</th><th>Value</th></tr></thead>
      <tbody>
        <tr><td>https://digitalbazaar.com/</td><td>rdf:type</td><td>http://example.org/orga/Organization</td></tr>
        <tr><td>https://digitalbazaar.com/</td><td>http://example.org/orga/member</td><td>http://manu.sporny.org/about#manu</td></tr>
        <tr><td>http://manu.sporny.org/about#manu</td><td>rdf:type</td><td>schema:Person</td></tr>
        <tr><td>http://manu.sporny.org/about#manu</td><td>schema:name</td><td>Manu Sporny</td></tr>
      </tbody>
    </table>
    <pre class="turtle" data-content-type="text/turtle" data-result-for="Overriding permitted if both definitions are identical-expanded" data-ignore="" data-to-rdf="" aria-busy="false"><code class="hljs">@prefix o: &lt;http://example.org/orga/&gt;.
@prefix schema: &lt;http://schema.org/&gt;.

&lt;https://digitalbazaar.com/&gt; a o:Organization ;
  o:member &lt;http://manu.sporny.org/about#manu&gt;.

&lt;http://manu.sporny.org/about#manu&gt; a schema:Person ;
  schema:name "Manu Sporny".</code></pre>
  </aside>

  <p>The second exception is that a <a href="#dfn-property-scoped-context" class="internalDFN" data-link-type="dfn">property-scoped context</a>
    is not affected by protection, and can therefore override protected terms,
    either with a new term definition,
    or by clearing the context with <code>"@context": null</code>.
  </p>
  <p>The rationale is that "plain JSON" implementations,
    relying on a given specification,
    will only traverse properties defined by that specification.
    <a href="#dfn-scoped-context" class="internalDFN" data-link-type="dfn">Scoped contexts</a> belonging to the specified properties are part of the specification,
    so the "plain JSON" implementations are expected to be aware of the change of semantics they induce.
    <a href="#dfn-scoped-context" class="internalDFN" data-link-type="dfn">Scoped contexts</a> belonging to other properties apply to parts of the document that "plain JSON" implementations will ignore.
    In both cases, there is therefore no risk of diverging interpretations between JSON-LD-aware implementations and "plain JSON" implementations,
    so overriding is permitted.
  </p>

  <aside class="example ds-selector-tabs changed" id="example-58-overriding-permitted-in-property-scoped-context"><div class="marker">
      <a class="self-link" href="#example-58-overriding-permitted-in-property-scoped-context">Example<bdi> 58</bdi></a><span class="example-title">: overriding permitted in property scoped context</span>
    </div>
    <div class="selectors">
        <button class="selected" data-selects="compacted">Compacted (Input)</button>
        <button data-selects="expanded">Expanded (Result)</button>
        <button data-selects="statements">Statements</button>
        <button data-selects="turtle">Turtle</button>
        <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%0A%20%20%20%20%20%20%22%40version%22%3A%201.1%2C%0A%20%20%20%20%20%20%22%40protected%22%3A%20true%2C%0A%20%20%20%20%20%20%22Organization%22%3A%20%22http%3A%2F%2Fschema.org%2FOrganization%22%2C%0A%20%20%20%20%20%20%22name%22%3A%20%22http%3A%2F%2Fschema.org%2Fname%22%2C%0A%20%20%20%20%20%20%22employee%22%3A%20%7B%0A%20%20%20%20%20%20%20%20%22%40id%22%3A%20%22http%3A%2F%2Fschema.org%2Femployee%22%2C%0A%20%20%20%20%20%20%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20%22%40protected%22%3A%20true%2C%0A%20%20%20%20%20%20%20%20%20%20%22name%22%3A%20%22http%3A%2F%2Fschema.org%2FfamilyName%22%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%0A%20%20%20%20%20%20%22location%22%3A%20%7B%0A%20%20%20%20%20%20%20%20%22%40id%22%3A%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2Fbased_near%22%2C%0A%20%20%20%20%20%20%20%20%22%40context%22%3A%20%5B%0A%20%20%20%20%20%20%20%20%20%20null%2C%0A%20%20%20%20%20%20%20%20%20%20%0A%20%20%20%20%20%20%20%20%20%20%7B%20%22%40vocab%22%3A%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2F%22%20%7D%0A%20%20%20%20%20%20%20%20%5D%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%5D%2C%0A%20%20%22%40type%22%3A%20%22Organization%22%2C%0A%20%20%22name%22%3A%20%22Digital%20Bazaar%22%2C%0A%20%20%22employee%22%20%3A%20%7B%0A%20%20%20%20%22name%22%3A%20%22Sporny%22%2C%0A%20%20%20%20%22location%22%3A%20%7B%22name%22%3A%20%22Blacksburg%2C%20Virginia%22%7D%0A%20%20%7D%0A%7D">Open in playground</a>
    </div>
    <pre class="compacted input selected nohighlight">{
  "@context": [
    {
      <span class="comment">– This context reflects the specification used by "plain JSON" implementations</span>
      <span class="hl-bold">"@version": 1.1</span>,
      <span class="hl-bold">"@protected": true</span>,
      "Organization": "http://schema.org/Organization",
      "name": "http://schema.org/name",
      "employee": {
        "@id": "http://schema.org/employee",
        <span class="hl-bold">"@context": {
          "@protected": true,
          "name": "http://schema.org/familyName"
        }</span>
        <span class="comment">↑ overrides the definition of "name"</span>
      }
    },
    {
      <span class="comment">– This context extends the previous one,
      – only JSON-LD-aware implementations are expected to use it</span>
      "location": {
        "@id": "http://xmlns.com/foaf/0.1/based_near",
        "@context": [
          <span class="hl-bold">null,</span>
          <span class="comment">↑ clears the context entirely, including all protected terms</span>
          { "@vocab": "http://xmlns.com/foaf/0.1/" }
        ]
      }
    }
  ],
  "@type": "Organization",
  "name": "Digital Bazaar",
  "employee" : {
    "name": "Sporny",
    "location": {"name": "Blacksburg, Virginia"}
  }
}</pre>
    <pre class="expanded result nohighlight" data-result-for="overriding permitted in property scoped context-compacted" data-ignore="">[{
  "@type": ["http://schema.org/Organization"],
  "http://schema.org/name": [{"@value": "Digital Bazaar"}],
  "http://schema.org/employee": [
    {
      "http://schema.org/familyName": [{"@value": "Sporny"}],
      "http://xmlns.com/foaf/0.1/based_near": [
        {
          "http://xmlns.com/foaf/0.1/name": [{"@value": "Blacksburg, Virginia"}]
        }
      ]
    }
  ]
}]</pre>
    <table class="statements" data-result-for="overriding permitted in property scoped context-expanded" data-to-rdf="">
      <thead><tr><th>Subject</th><th>Property</th><th>Value</th></tr></thead>
      <tbody>
        <tr><td>_:b0</td><td>rdf:type</td><td>schema:Organization</td></tr>
        <tr><td>_:b0</td><td>schema:name</td><td>Digital Bazaar</td></tr>
        <tr><td>_:b0</td><td>schema:employee</td><td>_:b1</td></tr>
        <tr><td>_:b1</td><td>schema:familyName</td><td>Sporny</td></tr>
        <tr><td>_:b1</td><td>foaf:based_near</td><td>_:b2</td></tr>
        <tr><td>_:b2</td><td>foaf:name</td><td>Blacksburg, Virginia</td></tr>
      </tbody>
    </table>
    <pre class="turtle" data-content-type="text/turtle" data-result-for="overriding permitted in property scoped context-expanded" data-to-rdf="" aria-busy="false"><code class="hljs">@prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt;.
@prefix schema: &lt;http://schema.org/&gt;.

[
  a schema:Organization;
  schema:name "Digital Bazaar";
  schema:employee [
    schema:familyName "Sporny";
    foaf:based_near [
      foaf:name "Blacksburg, Virginia"
    ];
  ];
] .</code></pre>
  </aside>
  <div class="note" role="note" id="issue-container-generatedID-21"><div role="heading" class="note-title marker" id="h-note-19" aria-level="5"><span>Note</span></div><p class="">By preventing terms from being overridden,
    protection also prevents any adaptation of a term
    (e.g., defining a more precise datatype, restricting the term's use to lists, etc.).
    This kind of adaptation is frequent with some general purpose contexts,
    for which protection would therefore hinder their usability.
    As a consequence, context publishers should use this feature with care.
    </p></div>

  <div class="note" role="note" id="issue-container-generatedID-22"><div role="heading" class="note-title marker" id="h-note-20" aria-level="5"><span>Note</span></div><p class="">Protected term definitions are a new feature in JSON-LD 1.1.</p></div>
</section>
</section>

<section class="informative" id="describing-values"><h3 id="x4-2-describing-values"><bdi class="secno">4.2 </bdi>Describing Values<a class="self-link" aria-label="§" href="#describing-values"></a></h3><p><em>This section is non-normative.</em></p>
  <p>Values are leaf nodes in a graph associated with scalar values such as
    <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">strings</a>, dates, times, and other such atomic values.</p>

<section class="informative" id="typed-values"><h4 id="x4-2-1-typed-values"><bdi class="secno">4.2.1 </bdi>Typed Values<a class="self-link" aria-label="§" href="#typed-values"></a></h4><p><em>This section is non-normative.</em></p>

<p>A value with an associated type, also known as a
  <a href="#dfn-typed-value" class="internalDFN" data-link-type="dfn">typed value</a>, is indicated by associating a value with
  an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> which indicates the value's type. Typed values may be
  expressed in JSON-LD in three ways:</p>

<ol>
  <li>By utilizing the <code>@type</code> <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a> when defining
    a <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a> within an <code>@context</code> section.</li>
  <li>By utilizing a <a href="#dfn-value-object" class="internalDFN" data-link-type="dfn">value object</a>.</li>
  <li>By using a native JSON type such as <a data-link-type="dfn" href="https://tc39.es/ecma262/#sec-terms-and-definitions-number-value">number</a>, <code>true</code>, or <code>false</code>.</li>
</ol>

<p>The first example uses the <code>@type</code> keyword to associate a
  type with a particular <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a> in the <code>@context</code>:</p>

<aside class="example ds-selector-tabs changed" id="example-59-expanded-term-definition-with-type-coercion"><div class="marker">
      <a class="self-link" href="#example-59-expanded-term-definition-with-type-coercion">Example<bdi> 59</bdi></a><span class="example-title">: Expanded term definition with type coercion</span>
    </div>
  <div class="selectors">
    <button class="selected" data-selects="compacted">Compacted (Input)</button>
    <button data-selects="expanded">Expanded (Result)</button>
    <button data-selects="statements">Statements</button>
    <button data-selects="turtle">Turtle</button>
    <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%22modified%22%3A%20%7B%0A%20%20%20%20%20%20%22%40id%22%3A%20%22http%3A%2F%2Fpurl.org%2Fdc%2Fterms%2Fmodified%22%2C%0A%20%20%20%20%20%20%22%40type%22%3A%20%22http%3A%2F%2Fwww.w3.org%2F2001%2FXMLSchema%23dateTime%22%0A%20%20%20%20%7D%0A%20%20%7D%2C%0A%20%20%0A%20%20%22%40id%22%3A%20%22http%3A%2F%2Fexample.com%2Fdocs%2F1%22%2C%0A%20%20%22modified%22%3A%20%222010-05-29T14%3A17%3A39%2B02%3A00%22%0A%7D">Open in playground</a>
  </div>
  <pre class="compacted input selected nohighlight">{
  <span class="hl-bold">"@context": {
    "modified": {
      "@id": "http://purl.org/dc/terms/modified",
      "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
    }
  },</span>
  <span class="comment">...</span>
  "@id": "http://example.com/docs/1",
  "modified": "2010-05-29T14:17:39+02:00"<span class="comment">,
  ...</span>
}</pre>
  <pre class="expanded result nohighlight" data-result-for="Expanded term definition with type coercion-compacted">[{
  "@id": "http://example.com/docs/1",
  "http://purl.org/dc/terms/modified": [
    {
      "@type": "http://www.w3.org/2001/XMLSchema#dateTime",
      "@value": "2010-05-29T14:17:39+02:00"
    }
  ]
}]</pre>
  <table class="statements" data-result-for="Expanded term definition with type coercion-expanded" data-to-rdf="">
    <thead><tr><th>Subject</th><th>Property</th><th>Value</th><th>Value Type</th></tr></thead>
    <tbody>
      <tr><td>http://example.com/docs/1</td><td>dcterms:modified</td><td>2010-05-29T14:17:39+02:00</td><td>xsd:dateTime</td></tr>
    </tbody>
  </table>
  <pre class="turtle" data-content-type="text/turtle" data-result-for="Expanded term definition with type coercion-expanded" data-to-rdf="" aria-busy="false"><code class="hljs">@prefix dcterms: &lt;http://purl.org/dc/terms/&gt; .
@prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt; .

&lt;http://example.com/docs/1&gt; dcterms:modified "2010-05-29T14:17:39+02:00"^^xsd:dateTime .</code></pre>
</aside>

<p>The <em>modified</em> key's value above is automatically interpreted as a
  <em>dateTime</em> value because of the information specified in the
  <code>@context</code>. The example tabs show how a <a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-api/#dfn-json-ld-processor">JSON-LD processor</a> will interpret the data.</p>

<p>The second example uses the expanded form of setting the type information
  in the body of a JSON-LD document:</p>

<aside class="example ds-selector-tabs changed" id="example-60-expanded-value-with-type"><div class="marker">
      <a class="self-link" href="#example-60-expanded-value-with-type">Example<bdi> 60</bdi></a><span class="example-title">: Expanded value with type</span>
    </div>
  <div class="selectors">
    <button class="selected" data-selects="compacted">Compacted (Input)</button>
    <button data-selects="expanded">Expanded (Result)</button>
    <button data-selects="statements">Statements</button>
    <button data-selects="turtle">Turtle</button>
    <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%22modified%22%3A%20%7B%0A%20%20%20%20%20%20%22%40id%22%3A%20%22http%3A%2F%2Fpurl.org%2Fdc%2Fterms%2Fmodified%22%0A%20%20%20%20%7D%0A%20%20%7D%2C%0A%20%20%0A%20%20%22modified%22%3A%20%7B%0A%20%20%20%20%22%40value%22%3A%20%222010-05-29T14%3A17%3A39%2B02%3A00%22%2C%0A%20%20%20%20%22%40type%22%3A%20%22http%3A%2F%2Fwww.w3.org%2F2001%2FXMLSchema%23dateTime%22%0A%20%20%7D%0A%20%20%0A%7D">Open in playground</a>
  </div>
  <pre class="compacted input selected nohighlight">{
  "@context": {
    "modified": {
      "@id": "http://purl.org/dc/terms/modified"
    }
  },
  <span class="comment">...</span>
  "modified": <span class="hl-bold">{
    "@value": "2010-05-29T14:17:39+02:00",
    "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
  }</span>
  <span class="comment">...</span>
}</pre>
  <pre class="expanded result nohighlight" data-result-for="Expanded value with type-compacted">[{
  "http://purl.org/dc/terms/modified": [
    {
      "@type": "http://www.w3.org/2001/XMLSchema#dateTime",
      "@value": "2010-05-29T14:17:39+02:00"
    }
  ]
}]</pre>
  <table class="statements" data-result-for="Expanded value with type-expanded" data-to-rdf="">
    <thead><tr><th>Subject</th><th>Property</th><th>Value</th><th>Value Type</th></tr></thead>
    <tbody>
      <tr><td>_:b0</td><td>dcterms:modified</td><td>2010-05-29T14:17:39+02:00</td><td>xsd:dateTime</td></tr>
    </tbody>
  </table>
  <pre class="turtle" data-content-type="text/turtle" data-result-for="Expanded value with type-expanded" data-to-rdf="" aria-busy="false"><code class="hljs">@prefix dcterms: &lt;http://purl.org/dc/terms/&gt; .
@prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt; .

[ dcterms:modified "2010-05-29T14:17:39+02:00"^^xsd:dateTime ] .</code></pre>
</aside>

<p>Both examples above would generate the value
  <code>2010-05-29T14:17:39+02:00</code> with the type
  <code>http://www.w3.org/2001/XMLSchema#dateTime</code>. Note that it is
  also possible to use a <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a> or a <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a> to
  express the value of a type.</p>

<div class="note" role="note" id="issue-container-generatedID-23"><div role="heading" class="note-title marker" id="h-note-21" aria-level="5"><span>Note</span></div><p class="">The <code>@type</code> <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a> is also used to associate a type
  with a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-node">node</a>.
  The concept of a <a href="#dfn-node-type" class="internalDFN" data-link-type="dfn">node type</a> and a <a href="#dfn-value-type" class="internalDFN" data-link-type="dfn">value type</a> are distinct.
  For more on adding types to <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-node">nodes</a>, see <a class="sectionRef sec-ref" href="#specifying-the-type">§&nbsp;<bdi class="secno">3.5 </bdi>Specifying the Type</a>.</p></div>

<div class="note" role="note" id="issue-container-generatedID-24"><div role="heading" class="note-title marker" id="h-note-22" aria-level="5"><span>Note</span></div><p class="">When expanding, an <code>@type</code> defined within a <a href="#dfn-term-definition" class="internalDFN" data-link-type="dfn">term definition</a>
  can be associated with a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">string</a> value to create an expanded <a href="#dfn-value-object" class="internalDFN" data-link-type="dfn">value object</a>,
  which is described in <a href="#type-coercion" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">4.2.3 </bdi>Type Coercion</a>.
  Type coercion only takes place on string values, not for values which are <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">maps</a>,
  such as <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a> and <a href="#dfn-value-object" class="internalDFN" data-link-type="dfn">value objects</a> in their expanded form.</p></div>

<p>A <dfn data-dfn-type="dfn" id="dfn-node-type">node type</dfn> specifies the type of thing
  that is being described, like a person, place, event, or web page. A
  <dfn data-dfn-type="dfn" id="dfn-value-type">value type</dfn> specifies the data type of a particular value, such
  as an integer, a floating point number, or a date.</p>

<div class="example" id="context-sensitivity-for-type">
          <div class="marker">
      <a class="self-link" href="#context-sensitivity-for-type">Example<bdi> 61</bdi></a><span class="example-title">: Example demonstrating the context-sensitivity for @type</span>
    </div> <pre class="nohighlight">{
  <span class="comment">...</span>
  "@id": "http://example.org/posts#TripToWestVirginia",
  <span class="hl-bold">"@type": "http://schema.org/BlogPosting"</span>,  <span class="comment">← This is a node type</span>
  "http://purl.org/dc/terms/modified": {
    "@value": "2010-05-29T14:17:39+02:00",
    <span class="hl-bold">"@type": "http://www.w3.org/2001/XMLSchema#dateTime"</span>  <span class="comment">← This is a value type</span>
  }
  <span class="comment">...</span>
}</pre>
        </div>

<p>The first use of <code>@type</code> associates a <a href="#dfn-node-type" class="internalDFN" data-link-type="dfn">node type</a>
  (<code>http://schema.org/BlogPosting</code>) with the <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-node">node</a>,
  which is expressed using the <code>@id</code> <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a>.
  The second use of <code>@type</code> associates a <a href="#dfn-value-type" class="internalDFN" data-link-type="dfn">value type</a>
  (<code>http://www.w3.org/2001/XMLSchema#dateTime</code>) with the
  value expressed using the <code>@value</code> <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a>. As a
  general rule, when <code>@value</code> and <code>@type</code> are used in
  the same <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a>, the <code>@type</code>
  <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a> is expressing a <a href="#dfn-value-type" class="internalDFN" data-link-type="dfn">value type</a>.
  Otherwise, the <code>@type</code> <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a> is expressing a
  <a href="#dfn-node-type" class="internalDFN" data-link-type="dfn">node type</a>. The example above expresses the following data:</p>

<aside class="example ds-selector-tabs" id="example-62-example-demonstrating-the-context-sensitivity-for-type-statements"><div class="marker">
      <a class="self-link" href="#example-62-example-demonstrating-the-context-sensitivity-for-type-statements">Example<bdi> 62</bdi></a><span class="example-title">: Example demonstrating the context-sensitivity for @type (statements)</span>
    </div>
  <div class="selectors">
    <button class="selected" data-selects="compacted">Compacted (Input)</button>
    <button data-selects="turtle">Turtle</button>
    <a class="playground" target="_blank" data-result-for="#context-sensitivity-for-type" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%0A%20%20%22%40id%22%3A%20%22http%3A%2F%2Fexample.org%2Fposts%23TripToWestVirginia%22%2C%0A%20%20%22%40type%22%3A%20%22http%3A%2F%2Fschema.org%2FBlogPosting%22%2C%20%20%0A%20%20%22http%3A%2F%2Fpurl.org%2Fdc%2Fterms%2Fmodified%22%3A%20%7B%0A%20%20%20%20%22%40value%22%3A%20%222010-05-29T14%3A17%3A39%2B02%3A00%22%2C%0A%20%20%20%20%22%40type%22%3A%20%22http%3A%2F%2Fwww.w3.org%2F2001%2FXMLSchema%23dateTime%22%20%20%0A%20%20%7D%0A%20%20%0A%7D">Open in playground</a>
  </div>
  <table class="compacted input selected" data-result-for="Example demonstrating the context-sensitivity for @type" data-to-rdf="">
  <thead><tr>
    <th>Subject</th>
    <th>Property</th>
    <th>Value</th>
    <th>Value Type</th>
  </tr></thead>
  <tbody>
  <tr>
    <td>http://example.org/posts#TripToWestVirginia</td>
    <td>rdf:type</td>
    <td>schema:BlogPosting</td>
    <td></td>
  </tr>
  <tr>
    <td>http://example.org/posts#TripToWestVirginia</td>
    <td>dcterms:modified</td>
    <td>2010-05-29T14:17:39+02:00</td>
    <td>xsd:dateTime</td>
  </tr>
  </tbody>
  </table>
  <pre class="turtle nohighlight" data-content-type="text/turtle" data-result-for="Example demonstrating the context-sensitivity for @type" data-to-rdf="">@prefix dcterms: &lt;http://purl.org/dc/terms/&gt; .
@prefix schema: &lt;http://schema.org/&gt; .
@prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt; .

&lt;http://example.org/posts#TripToWestVirginia&gt; a <span class="hl-bold">schema:BlogPosting</span>;
  dcterms:modified "2010-05-29T14:17:39+02:00"^^<span class="hl-bold">xsd:dateTime</span> .</pre>
</aside>
</section>

<section class="informative changed" id="json-literals"><h4 id="x4-2-2-json-literals"><bdi class="secno">4.2.2 </bdi>JSON Literals<a class="self-link" aria-label="§" href="#json-literals"></a></h4><p><em>This section is non-normative.</em></p>
  <p>At times, it is useful to include JSON within JSON-LD that is not interpreted as JSON-LD.
    Generally, a JSON-LD processor will ignore properties which don't map to <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">IRIs</a>,
    but this causes them to be excluded when performing various algorithmic transformations.
    But, when the data that is being described is, itself, JSON, it's important that
    it survive algorithmic transformations.</p>

  <div class="warning" id="issue-container-generatedID-25"><div role="heading" class="warning-title marker" id="h-warning-1" aria-level="5"><span>Warning</span></div><p class="">JSON-LD is intended to allow native JSON to be
    interpreted through the use of a <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a>.
    The use of <a href="#dfn-json-literal" class="internalDFN" data-link-type="dfn">JSON literals</a> creates blobs of data which are not available for interpretation.
    It is for use only in the rare cases that JSON cannot be represented as JSON-LD.</p></div>

  <p>When a term is defined with <code>@type</code> set to <code>@json</code>,
    a JSON-LD processor will treat the value as a <a href="#dfn-json-literal" class="internalDFN" data-link-type="dfn">JSON literal</a>,
    rather than interpreting it further as JSON-LD.
    In the <a href="#dfn-expanded-document-form" class="internalDFN" data-link-type="dfn">expanded document form</a>, such JSON will become the value of <code>@value</code> within a <a href="#dfn-value-object" class="internalDFN" data-link-type="dfn">value object</a>
    having <code>"@type": "@json"</code>.</p>

  <p>When transformed into RDF, the JSON literal will have a lexical form based on
    a specific serialization of the JSON,
    as described in <a href="https://www.w3.org/TR/json-ld11-api/#compaction-algorithm">Compaction algorithm</a> of [<cite><a class="bibref" data-link-type="biblio" href="#bib-json-ld11-api" title="JSON-LD 1.1 Processing Algorithms and API">JSON-LD11-API</a></cite>]
    and <a href="#the-rdf-json-datatype" class="sectionRef">the JSON datatype</a>.</p>

  <p>The following example shows an example of a <a href="#dfn-json-literal" class="internalDFN" data-link-type="dfn">JSON Literal</a> contained as the
    value of a property. Note that the RDF results use a canonicalized form of the JSON
    to ensure interoperability between different processors.
    JSON canonicalization is described in <a href="https://www.w3.org/TR/json-ld11-api/#data-round-tripping">Data Round Tripping</a> in [<cite><a class="bibref" data-link-type="biblio" href="#bib-json-ld11-api" title="JSON-LD 1.1 Processing Algorithms and API">JSON-LD11-API</a></cite>].</p>

<aside class="example ds-selector-tabs" id="example-63-json-literal"><div class="marker">
      <a class="self-link" href="#example-63-json-literal">Example<bdi> 63</bdi></a><span class="example-title">: JSON Literal</span>
    </div>
  <div class="selectors">
    <button class="selected" data-selects="compacted">Compacted (Input)</button>
    <button data-selects="expanded">Expanded (Result)</button>
    <button data-selects="statements">Statements</button>
    <button data-selects="turtle">Turtle</button>
    <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%22%40version%22%3A%201.1%2C%0A%20%20%20%20%22e%22%3A%20%7B%22%40id%22%3A%20%22http%3A%2F%2Fexample.com%2Fvocab%2Fjson%22%2C%20%22%40type%22%3A%20%22%40json%22%7D%0A%20%20%7D%2C%0A%20%20%22e%22%3A%20%5B%0A%20%20%20%2056.0%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%22d%22%3A%20true%2C%0A%20%20%20%20%20%20%2210%22%3A%20null%2C%0A%20%20%20%20%20%20%221%22%3A%20%5B%20%5D%0A%20%20%20%20%7D%0A%20%20%5D%0A%7D">Open in playground</a>
  </div>
  <pre class="compacted input selected nohighlight">{
  "@context": {
    "@version": 1.1,
    "e": {"@id": "http://example.com/vocab/json", <span class="hl-bold">"@type": "@json"</span>}
  },
  "e": <span class="hl-bold">[
    56.0,
    {
      "d": true,
      "10": null,
      "1": [ ]
    }
  ]</span>
}</pre>
  <pre class="expanded result nohighlight" data-result-for="JSON Literal-compacted">[{
  "http://example.com/vocab/json": [{
    "@value": [
      56.0,
      {
        "d": true,
        "10": null,
        "1": []
      }
    ],
    "@type": "@json"
  }]
}]</pre>
  <table class="statements" data-result-for="JSON Literal-compacted" data-to-rdf="">
  <thead><tr>
    <th>Subject</th>
    <th>Property</th>
    <th>Value</th>
    <th>Value Type</th>
  </tr></thead>
  <tbody>
  <tr>
    <td>_:b0</td>
    <td>http://example.com/vocab/json</td>
    <td>[56,{"1":[],"10":null,"d":true}]</td>
    <td>rdf:JSON</td>
  </tr>
  </tbody>
  </table>
  <pre class="turtle nohighlight" data-content-type="text/turtle" data-result-for="JSON Literal-compacted" data-to-rdf="">@prefix ex: &lt;http://example.com/vocab/&gt; .
@prefix rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; .
[ex:json <span class="hl-bold">"""[56,{"1":[],"10":null,"d":true}]"""^^rdf:JSON</span>] .</pre>
</aside>

<div class="note" role="note" id="issue-container-generatedID-26"><div role="heading" class="note-title marker" id="h-note-23" aria-level="5"><span>Note</span></div><p class="">Generally, when a JSON-LD processor encounters <code>null</code>,
  the associated <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">entry</a> or value is removed.
  However, <code>null</code> is a valid JSON token; when used as the value
  of a <a href="#dfn-json-literal" class="internalDFN" data-link-type="dfn">JSON literal</a>, a <code>null</code> value will be preserved.</p></div>
</section>

<section class="informative" id="type-coercion"><h4 id="x4-2-3-type-coercion"><bdi class="secno">4.2.3 </bdi>Type Coercion<a class="self-link" aria-label="§" href="#type-coercion"></a></h4><p><em>This section is non-normative.</em></p>

<p>JSON-LD supports the coercion of <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">string</a> values to particular data types.
Type <dfn data-dfn-type="dfn" id="dfn-coercion">coercion</dfn> allows someone deploying JSON-LD to use <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">string</a> property values
and have those values be interpreted as <a href="#dfn-typed-value" class="internalDFN" data-link-type="dfn">typed values</a>
by associating an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> with the value in the expanded <a href="#dfn-value-object" class="internalDFN" data-link-type="dfn">value object</a> representation.
Using type coercion, <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">string</a> value representation can be used without requiring
the data type to be specified explicitly with each piece of data.</p>

<p>Type coercion is specified within an <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a>
  using the <code>@type</code> key. The value of this key expands to an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>.
  Alternatively, the <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a> <code>@id</code> or <code>@vocab</code> may be used
  as value to indicate that within the body of a JSON-LD document, a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">string</a> value of a
  <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a> coerced to <code>@id</code> or <code>@vocab</code> is to be interpreted as an
  <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>. The difference between <code>@id</code> and <code>@vocab</code> is how values are expanded
  to <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">IRIs</a>. <code>@vocab</code> first tries to expand the value
  by interpreting it as <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a>. If no matching <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a> is found in the
  <a href="#dfn-active-context" class="internalDFN" data-link-type="dfn">active context</a>, it tries to expand it as an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> or a <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a>
  if there's a colon in the value; otherwise, it will expand the value using the
  <a data-lt="active context" href="#dfn-active-context" class="internalDFN" data-link-type="dfn">active context's</a> <a href="#dfn-vocabulary-mapping" class="internalDFN" data-link-type="dfn">vocabulary mapping</a>, if present.
  Values coerced to <code>@id</code> in contrast are expanded as
  an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> or a <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a> if a colon is present; otherwise, they are interpreted
  as <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-6.5">relative <abbr title="Internationalized Resource Identifier">IRI</abbr> references</a>.</p>

<div class="note" role="note" id="issue-container-generatedID-27"><div role="heading" class="note-title marker" id="h-note-24" aria-level="5"><span>Note</span></div><p class="">The ability to coerce a value using a <a href="#dfn-term-definition" class="internalDFN" data-link-type="dfn">term definition</a> is distinct
  from setting one or more types on a <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a>, as the former does not result in
  new data being added to the graph, while the later manages node types
  through adding additional relationships to the graph.</p></div>

<p><a href="#dfn-term" class="internalDFN" data-link-type="dfn">Terms</a> or <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">compact IRIs</a> used as the value of a
  <code>@type</code> key may be defined within the same context. This means that one may specify a
  <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a> like <code>xsd</code> and then use <code>xsd:integer</code> within the same
  context definition.</p>

<p>The example below demonstrates how a JSON-LD author can coerce values to
<a href="#dfn-typed-value" class="internalDFN" data-link-type="dfn">typed values</a> and <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">IRIs</a>.</p>

<aside class="example ds-selector-tabs" id="example-64-expanded-term-definition-with-types"><div class="marker">
      <a class="self-link" href="#example-64-expanded-term-definition-with-types">Example<bdi> 64</bdi></a><span class="example-title">: Expanded term definition with types</span>
    </div>
  <div class="selectors">
    <button class="selected" data-selects="compacted">Compacted (Input)</button>
    <button data-selects="expanded">Expanded (Result)</button>
    <button data-selects="statements">Statements</button>
    <button data-selects="turtle">Turtle</button>
    <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%22xsd%22%3A%20%22http%3A%2F%2Fwww.w3.org%2F2001%2FXMLSchema%23%22%2C%0A%20%20%20%20%22name%22%3A%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2Fname%22%2C%0A%20%20%20%20%22age%22%3A%20%7B%0A%20%20%20%20%20%20%22%40id%22%3A%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2Fage%22%2C%0A%20%20%20%20%20%20%22%40type%22%3A%20%22xsd%3Ainteger%22%0A%20%20%20%20%7D%2C%0A%20%20%20%20%22homepage%22%3A%20%7B%0A%20%20%20%20%20%20%22%40id%22%3A%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2Fhomepage%22%2C%0A%20%20%20%20%20%20%22%40type%22%3A%20%22%40id%22%0A%20%20%20%20%7D%0A%20%20%7D%2C%0A%20%20%22%40id%22%3A%20%22http%3A%2F%2Fexample.com%2Fpeople%23john%22%2C%0A%20%20%22name%22%3A%20%22John%20Smith%22%2C%0A%20%20%22age%22%3A%20%2241%22%2C%0A%20%20%22homepage%22%3A%20%5B%0A%20%20%20%20%22http%3A%2F%2Fpersonal.example.org%2F%22%2C%0A%20%20%20%20%22http%3A%2F%2Fwork.example.com%2Fjsmith%2F%22%0A%20%20%5D%0A%7D">Open in playground</a>
  </div>
  <pre class="compacted input selected nohighlight">{
  "@context": {
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "name": "http://xmlns.com/foaf/0.1/name",
    "age": <span class="hl-bold">{
      "@id": "http://xmlns.com/foaf/0.1/age",
      "@type": "xsd:integer"
    }</span>,
    "homepage": <span class="hl-bold">{
      "@id": "http://xmlns.com/foaf/0.1/homepage",
      "@type": "@id"
    }</span>
  },
  "@id": "http://example.com/people#john",
  "name": "John Smith",
  "age": <span class="hl-bold">"41"</span>,
  "homepage": <span class="hl-bold">[
    "http://personal.example.org/",
    "http://work.example.com/jsmith/"
  ]</span>
}</pre>
  <pre class="expanded result nohighlight" data-result-for="Expanded term definition with types-compacted">[{
  "@id": "http://example.com/people#john",
  "http://xmlns.com/foaf/0.1/name": [{"@value": "John Smith"}],
  "http://xmlns.com/foaf/0.1/age": <span class="hl-bold">[{
    "@value": "41",
    "@type": "http://www.w3.org/2001/XMLSchema#integer"
  }]</span>,
  "http://xmlns.com/foaf/0.1/homepage": <span class="hl-bold">[{
    "@id": "http://personal.example.org/"
  }, {
    "@id": "http://work.example.com/jsmith/"
  }]</span>
}]</pre>
  <table class="statements" data-result-for="Expanded term definition with types-expanded" data-to-rdf="">
  <thead><tr>
    <th>Subject</th>
    <th>Property</th>
    <th>Value</th>
    <th>Value Type</th>
  </tr></thead>
  <tbody>
  <tr>
    <td>http://example.com/people#john</td>
    <td>foaf:name</td>
    <td>John Smith</td>
    <td>&nbsp;</td>
  </tr>
  <tr>
    <td>http://example.com/people#john</td>
    <td>foaf:age</td>
    <td>41</td>
    <td>xsd:integer</td>
  </tr>
  <tr>
    <td>http://example.com/people#john</td>
    <td>foaf:homepage</td>
    <td>http://personal.example.org/</td>
    <td><a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a></td>
  </tr>
  <tr>
    <td>http://example.com/people#john</td>
    <td>foaf:homepage</td>
    <td>http://work.example.com/jsmith/</td>
    <td><a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a></td>
  </tr>
</tbody>
  </table>
  <pre class="turtle nohighlight" data-content-type="text/turtle" data-result-for="Expanded term definition with types-expanded" data-to-rdf="">@prefix dcterms: &lt;http://purl.org/dc/terms/&gt; .
@prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt; .

&lt;http://example.com/people#john&gt; foaf:name "John Smith";
  foaf:age <span class="hl-bold">41</span>;
  foaf:homepage <span class="hl-bold">&lt;http://personal.example.org/&gt;,
    &lt;http://work.example.com/jsmith/&gt;</span>
.</pre>
</aside>

<p>It is important to note that <a href="#dfn-term" class="internalDFN" data-link-type="dfn">terms</a> are only used in expansion
  for vocabulary-relative positions, such as for keys and values of <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">map entries</a>.
  Values of <code>@id</code> are considered to be document-relative,
  and do not use term definitions for expansion. For example, consider the following:</p>

<aside class="example ds-selector-tabs changed" id="example-65-term-expansion-for-values-not-identifiers"><div class="marker">
      <a class="self-link" href="#example-65-term-expansion-for-values-not-identifiers">Example<bdi> 65</bdi></a><span class="example-title">: Term expansion for values, not identifiers</span>
    </div>
  <div class="selectors">
    <button class="selected" data-selects="compacted">Compacted (Input)</button>
    <button data-selects="expanded">Expanded (Result)</button>
    <button data-selects="statements">Statements</button>
    <button data-selects="turtle">Turtle</button>
    <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%22%40base%22%3A%20%22http%3A%2F%2Fexample1.com%2F%22%2C%0A%20%20%20%20%22%40vocab%22%3A%20%22http%3A%2F%2Fexample2.com%2F%22%2C%0A%20%20%20%20%22knows%22%3A%20%7B%22%40type%22%3A%20%22%40vocab%22%7D%0A%20%20%7D%2C%0A%20%20%22%40id%22%3A%20%22fred%22%2C%0A%20%20%22knows%22%3A%20%5B%0A%20%20%20%20%7B%22%40id%22%3A%20%22barney%22%2C%20%22mnemonic%22%3A%20%22the%20sidekick%22%7D%2C%0A%20%20%20%20%22barney%22%0A%20%20%5D%0A%7D">Open in playground</a>
  </div>
  <pre class="compacted input selected nohighlight">{
  "@context": {
    "@base": "http://example1.com/",
    "@vocab": "http://example2.com/",
    "knows": {"@type": "@vocab"}
  },
  "@id": "fred",
  "knows": [
    {"@id": "barney", "mnemonic": "the sidekick"},
    "barney"
  ]
}</pre>
  <pre class="expanded result nohighlight" data-result-for="Term expansion for values, not identifiers-compacted">[{
  "@id": "http://example1.com/fred",
  "http://example2.com/knows": [{
    "@id": "http://example1.com/barney",
    "http://example2.com/mnemonic": [{"@value": "the sidekick"}]
  }, {
    "@id": "http://example2.com/barney"
  }]
}]</pre>
  <table class="statements" data-result-for="Term expansion for values, not identifiers-expanded" data-to-rdf="">
    <thead><tr><th>Subject</th><th>Property</th><th>Value</th></tr></thead>
    <tbody>
      <tr><td>http://example1.com/barney</td><td>http://example2.com/mnemonic</td><td>the sidekick</td></tr>
      <tr><td>http://example1.com/fred</td><td>http://example2.com/knows</td><td>http://example1.com/barney</td></tr>
      <tr><td>http://example1.com/fred</td><td>http://example2.com/knows</td><td>http://example2.com/barney</td></tr>
    </tbody>
  </table>
  <pre class="turtle" data-content-type="text/turtle" data-result-for="Term expansion for values, not identifiers-expanded" data-to-rdf="" aria-busy="false"><code class="hljs">@prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt; .
@prefix ex1: &lt;http://example1.com/&gt; .
@prefix ex2: &lt;http://example2.com/&gt; .

ex1:barney ex2:mnemonic "the sidekick" .

ex1:fred ex2:knows ex1:barney, ex2:barney .</code></pre>
</aside>

<p>The unexpected result is that "barney" expands to both <code>http://example1.com/barney</code>
  and <code>http://example2.com/barney</code>, depending where it is encountered.
  String values interpreted as <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">IRIs</a> because of the associated <a href="#dfn-term-definition" class="internalDFN" data-link-type="dfn">term definitions</a>
  are typically considered to be document-relative.
  In some cases, it makes sense to interpret these relative to the vocabulary,
  prescribed using <code>"@type": "@vocab"</code> in the <a href="#dfn-term-definition" class="internalDFN" data-link-type="dfn">term definition</a>, though this can
  lead to unexpected consequences such as these.</p>

<p>In the previous example, "barney" appears twice, once as the value of <code>@id</code>,
  which is always interpreted as a document-relative <abbr title="Internationalized Resource Identifier">IRI</abbr>, and once as the value of
  "fred", which is defined to be vocabulary-relative, thus the different expanded values.</p>

<p>For more on this see <a class="sectionRef sec-ref" href="#default-vocabulary">§&nbsp;<bdi class="secno">4.1.2 </bdi>Default Vocabulary</a>.</p>

<p>A variation on the previous example using <code>"@type": "@id"</code> instead
  of <code>@vocab</code> illustrates the behavior of interpreting "barney" relative to the document:</p>


<aside class="example ds-selector-tabs" id="example-66-terms-not-expanded-when-document-relative"><div class="marker">
      <a class="self-link" href="#example-66-terms-not-expanded-when-document-relative">Example<bdi> 66</bdi></a><span class="example-title">: Terms not expanded when document-relative</span>
    </div>
  <div class="selectors">
    <button class="selected" data-selects="compacted">Compacted (Input)</button>
    <button data-selects="expanded">Expanded (Result)</button>
    <button data-selects="statements">Statements</button>
    <button data-selects="turtle">Turtle</button>
    <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%22%40base%22%3A%20%22http%3A%2F%2Fexample1.com%2F%22%2C%0A%20%20%20%20%22%40vocab%22%3A%20%22http%3A%2F%2Fexample2.com%2F%22%2C%0A%20%20%20%20%22knows%22%3A%20%7B%22%40type%22%3A%20%22%40id%22%7D%0A%20%20%7D%2C%0A%20%20%22%40id%22%3A%20%22fred%22%2C%0A%20%20%22knows%22%3A%20%5B%0A%20%20%20%20%7B%22%40id%22%3A%20%22barney%22%2C%20%22mnemonic%22%3A%20%22the%20sidekick%22%7D%2C%0A%20%20%20%20%22barney%22%0A%20%20%5D%0A%7D">Open in playground</a>
  </div>
  <pre class="compacted input selected nohighlight">{
  "@context": {
    "@base": "http://example1.com/",
    "@vocab": "http://example2.com/",
    "knows": {"@type": "@id"}
  },
  "@id": "fred",
  "knows": [
    {"@id": "barney", "mnemonic": "the sidekick"},
    "barney"
  ]
}</pre>
  <pre class="expanded result nohighlight" data-result-for="Terms not expanded when document-relative-compacted">[{
  "@id": "http://example1.com/fred",
  "http://example2.com/knows": [{
    "@id": "http://example1.com/barney",
    "http://example2.com/mnemonic": [{"@value": "the sidekick"}]
  }, {
    "@id": "http://example1.com/barney"
  }]
}]</pre>
  <pre class="turtle" data-content-type="text/turtle" data-result-for="Terms not expanded when document-relative-expanded" data-to-rdf="" aria-busy="false"><code class="hljs">@prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt; .
@prefix ex1: &lt;http://example1.com/&gt; .
@prefix ex2: &lt;http://example2.com/&gt; .

ex1:barney ex2:mnemonic "the sidekick" .

ex1:fred ex2:knows ex1:barney, ex1:barney .</code></pre>
</aside>

<div class="note" role="note" id="issue-container-generatedID-28"><div role="heading" class="note-title marker" id="h-note-25" aria-level="5"><span>Note</span></div><p class="">The triple <code>ex1:fred ex2:knows ex1:barney .</code> is emitted twice,
  but exists only once in an output dataset, as it is a duplicate triple.</p></div>

<p>Terms may also be defined using <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">IRIs</a>
  or <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">compact IRIs</a>. This allows coercion rules
  to be applied to keys which are not represented as a simple <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a>.
  For example:</p>

<aside class="example ds-selector-tabs" id="example-67-term-definitions-using-iris-and-compact-iris"><div class="marker">
      <a class="self-link" href="#example-67-term-definitions-using-iris-and-compact-iris">Example<bdi> 67</bdi></a><span class="example-title">: Term definitions using IRIs and compact IRIs</span>
    </div>
  <div class="selectors">
    <button class="selected" data-selects="compacted">Compacted (Input)</button>
    <button data-selects="expanded">Expanded (Result)</button>
    <button data-selects="statements">Statements</button>
    <button data-selects="turtle">Turtle</button>
    <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%22xsd%22%3A%20%22http%3A%2F%2Fwww.w3.org%2F2001%2FXMLSchema%23%22%2C%0A%20%20%20%20%22foaf%22%3A%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2F%22%2C%0A%20%20%20%20%22foaf%3Aage%22%3A%20%7B%0A%20%20%20%20%20%20%22%40id%22%3A%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2Fage%22%2C%0A%20%20%20%20%20%20%22%40type%22%3A%20%22xsd%3Ainteger%22%0A%20%20%20%20%7D%2C%0A%20%20%20%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2Fhomepage%22%3A%20%7B%0A%20%20%20%20%20%20%22%40type%22%3A%20%22%40id%22%0A%20%20%20%20%7D%0A%20%20%7D%2C%0A%20%20%22foaf%3Aname%22%3A%20%22John%20Smith%22%2C%0A%20%20%22foaf%3Aage%22%3A%20%2241%22%2C%0A%20%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2Fhomepage%22%3A%20%5B%0A%20%20%20%20%22http%3A%2F%2Fpersonal.example.org%2F%22%2C%0A%20%20%20%20%22http%3A%2F%2Fwork.example.com%2Fjsmith%2F%22%0A%20%20%5D%0A%7D">Open in playground</a>
  </div>
  <pre class="compacted input selected nohighlight">{
  "@context": {
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "foaf": "http://xmlns.com/foaf/0.1/",
    "<span class="hl-bold">foaf:age</span>": {
      <span class="hl-bold">"@id": "http://xmlns.com/foaf/0.1/age"</span>,
      "@type": "xsd:integer"
    },
    "<span class="hl-bold">http://xmlns.com/foaf/0.1/homepage</span>": {
      "@type": "@id"
    }
  },
  "foaf:name": "John Smith",
  "<span class="hl-bold">foaf:age</span>": "41",
  "<span class="hl-bold">http://xmlns.com/foaf/0.1/homepage</span>": [
    "http://personal.example.org/",
    "http://work.example.com/jsmith/"
  ]
}</pre>
  <pre class="expanded result nohighlight" data-result-for="Term definitions using IRIs and compact IRIs-compacted">[{
  "http://xmlns.com/foaf/0.1/age": [{"@type": "http://www.w3.org/2001/XMLSchema#integer", "@value": "41"}],
  "http://xmlns.com/foaf/0.1/name": [{"@value": "John Smith"}],
  "http://xmlns.com/foaf/0.1/homepage": [
    {"@id": "http://personal.example.org/"},
    {"@id": "http://work.example.com/jsmith/"}
  ]
}
]</pre>
  <table class="statements" data-result-for="Term definitions using IRIs and compact IRIs-expanded" data-to-rdf="">
  <thead><tr><th>Subject</th><th>Property</th><th>Value</th><th>Value Type</th></tr></thead>
  <tbody>
    <tr><td>_:b0</td><td>foaf:age</td><td>41</td><td>xsd:integer</td></tr>
    <tr><td>_:b0</td><td>foaf:name</td><td>John Smith</td><td></td></tr>
    <tr><td>_:b0</td><td>foaf:homepage</td><td>http://personal.example.org/</td><td></td></tr>
    <tr><td>_:b0</td><td>foaf:homepage</td><td>http://work.example.com/jsmith/</td><td></td></tr>
  </tbody>
  </table>
  <pre class="turtle" data-content-type="text/turtle" data-result-for="Term definitions using IRIs and compact IRIs-expanded" data-to-rdf="" aria-busy="false"><code class="hljs">@prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt; .
@prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt; .

 [
   foaf:age 41;
   foaf:homepage &lt;http://personal.example.org/&gt;,
     &lt;http://work.example.com/jsmith/&gt;;
   foaf:name "John Smith"
] .</code></pre>
</aside>

<p>In this case the <code>@id</code> definition in the term definition is optional.
  If it does exist, the <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> or <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a> representing
  the term will always be expanded to <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> defined by the <code>@id</code>
  key—regardless of whether a prefix is defined or not.</p>

<p>Type coercion is always performed using the unexpanded value of the key. In the
  example above, that means that type coercion is done looking for <code>foaf:age</code>
  in the <a href="#dfn-active-context" class="internalDFN" data-link-type="dfn">active context</a> and not for the corresponding, expanded
  <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> <code>http://xmlns.com/foaf/0.1/age</code>.</p>

<div class="note" role="note" id="issue-container-generatedID-29"><div role="heading" class="note-title marker" id="h-note-26" aria-level="5"><span>Note</span></div><p class="">Keys in the context are treated as <a href="#dfn-term" class="internalDFN" data-link-type="dfn">terms</a> for the purpose of
  expansion and value coercion. At times, this may result in multiple representations for the same expanded <abbr title="Internationalized Resource Identifier">IRI</abbr>.
  For example, one could specify that <code>dog</code> and <code>cat</code> both expanded to <code>http://example.com/vocab#animal</code>.
  Doing this could be useful for establishing different type coercion or language specification rules.</p></div>
</section>

<section class="informative" id="string-internationalization"><h4 id="x4-2-4-string-internationalization"><bdi class="secno">4.2.4 </bdi>String Internationalization<a class="self-link" aria-label="§" href="#string-internationalization"></a></h4><p><em>This section is non-normative.</em></p>
  <p>At times, it is important to annotate a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">string</a>
    with its language. In JSON-LD this is possible in a variety of ways.
    First, it is possible to define a <a href="#dfn-default-language" class="internalDFN" data-link-type="dfn">default language</a> for a JSON-LD document
    by setting the <code>@language</code> key in the <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a>:</p>

  <aside class="example ds-selector-tabs changed" id="example-68-setting-the-default-language-of-a-json-ld-document"><div class="marker">
      <a class="self-link" href="#example-68-setting-the-default-language-of-a-json-ld-document">Example<bdi> 68</bdi></a><span class="example-title">: Setting the default language of a JSON-LD document</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="expanded">Expanded (Result)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="turtle">Turtle</button>
      <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%22name%22%3A%20%22http%3A%2F%2Fexample.org%2Fname%22%2C%0A%20%20%20%20%22occupation%22%3A%20%22http%3A%2F%2Fexample.org%2Foccupation%22%2C%0A%20%20%20%20%0A%20%20%20%20%22%40language%22%3A%20%22ja%22%0A%20%20%7D%2C%0A%20%20%22name%22%3A%20%22%E8%8A%B1%E6%BE%84%22%2C%0A%20%20%22occupation%22%3A%20%22%E7%A7%91%E5%AD%A6%E8%80%85%22%0A%7D">Open in playground</a>
    </div>
    <pre class="compacted input selected nohighlight">{
  <span class="hl-bold">"@context": {
    "name": "http://example.org/name",
    "occupation": "http://example.org/occupation",
    <span class="comment">...</span>
    "@language": "ja"
  }</span>,
  "name": <span class="hl-bold">"花澄"</span>,
  "occupation": <span class="hl-bold">"科学者"</span>
}</pre>
    <pre class="expanded result nohighlight" data-result-for="Setting the default language of a JSON-LD document-compacted">[{
  "http://example.org/name": [{"@value": <span class="hl-bold">"花澄"</span>, "@language": "ja"}],
  "http://example.org/occupation": [{"@value": <span class="hl-bold">"科学者"</span>, "@language": "ja"}]
}]</pre>
    <table class="statements" data-result-for="Setting the default language of a JSON-LD document-expanded" data-to-rdf="">
      <thead><tr><th>Subject</th><th>Property</th><th>Value</th><th>Language</th></tr></thead>
      <tbody>
        <tr><td>_:b0</td><td>http://example.org/name</td><td lang="ja">花澄</td><td>ja</td></tr>
        <tr><td>_:b0</td><td>http://example.org/occupation</td><td lang="ja">科学者</td><td>ja</td></tr>
      </tbody>
    </table>
    <pre class="turtle nohighlight" data-content-type="text/turtle" data-result-for="Setting the default language of a JSON-LD document-expanded" data-to-rdf="">@prefix ex: &lt;http://example.org/&gt; .

[
  ex:name <span class="hl-bold">"花澄"</span>@ja;
  ex:occupation <span class="hl-bold">"科学者"</span>@ja
] .</pre>
  </aside>

  <p>The example above would associate the <code>ja</code> language
    tag with the two <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">strings</a> <em lang="ja">花澄</em> and <em lang="ja">科学者</em>
    <a href="https://tools.ietf.org/html/bcp47#section-2">Languages tags</a> are defined in [<cite><a class="bibref" data-link-type="biblio" href="#bib-bcp47" title="Tags for Identifying Languages">BCP47</a></cite>].
    The <a href="#dfn-default-language" class="internalDFN" data-link-type="dfn">default language</a> applies to all
    <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">string</a> values that are not <a href="#type-coercion">type coerced</a>.</p>

  <p>To clear the <a href="#dfn-default-language" class="internalDFN" data-link-type="dfn">default language</a> for a subtree, <code>@language</code> can
    be set to <code>null</code> in an intervening context, such as a <a href="#dfn-scoped-context" class="internalDFN" data-link-type="dfn">scoped context</a> as follows:</p>

  <div class="example" id="example-69-clearing-default-language">
          <div class="marker">
      <a class="self-link" href="#example-69-clearing-default-language">Example<bdi> 69</bdi></a><span class="example-title">: Clearing default language</span>
    </div> <pre class="nohighlight">{
  "@context": {
    <span class="comment">...</span>
    <span class="hl-bold">"@version": 1.1,</span>
    "@vocab": "http://example.com/",
    "@language": "ja",
    "details": {
      <span class="hl-bold">"@context": {
        "@language": null
      }</span>
    }
  },
  "name": "花澄",
  "details": {"occupation": "Ninja"}
}</pre>
        </div>

  <p>Second, it is possible to associate a language with a specific <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a>
    using an <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a>:</p>

  <div class="example" id="example-70-expanded-term-definition-with-language">
          <div class="marker">
      <a class="self-link" href="#example-70-expanded-term-definition-with-language">Example<bdi> 70</bdi></a><span class="example-title">: Expanded term definition with language</span>
    </div> <pre class="nohighlight">{
  "@context": {
    <span class="comment">...</span>
    "ex": "http://example.com/vocab/",
    "@language": "ja",
    "name": { "@id": "ex:name", <span class="hl-bold">"@language": null</span> },
    "occupation": { "@id": "ex:occupation" },
    "occupation_en": { "@id": "ex:occupation", <span class="hl-bold">"@language": "en"</span> },
    "occupation_cs": { "@id": "ex:occupation", <span class="hl-bold">"@language": "cs"</span> }
  },
  <span class="hl-bold">"name": "Yagyū Muneyoshi",
  "occupation": "忍者",
  "occupation_en": "Ninja",
  "occupation_cs": "Nindža"</span><span class="comment">,
  ...</span>
}</pre>
        </div>

  <p>The example above would associate <em lang="ja">忍者</em> with the specified default
    language tag <code>ja</code>, <em lang="en">Ninja</em> with the language tag
    <code>en</code>, and <em lang="cs">Nindža</em> with the language tag <code>cs</code>.
    The value of <code>name</code>, <em lang="">Yagyū Muneyoshi</em> wouldn't be
    associated with any language tag since <code>@language</code> was reset to
    <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#nulls">null</a> in the <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a>.</p>

  <div class="note" role="note" id="issue-container-generatedID-30"><div role="heading" class="note-title marker" id="h-note-27" aria-level="5"><span>Note</span></div><p class="">Language associations are only applied to plain
    <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">strings</a>. <a href="#dfn-typed-value" class="internalDFN" data-link-type="dfn">Typed values</a>
    or values that are subject to <a href="#type-coercion">type coercion</a>
    are not language tagged.</p></div>

  <p>Just as in the example above, systems often need to express the value of a
    property in multiple languages. Typically, such systems also try to ensure that
    developers have a programmatically easy way to navigate the data structures for
    the language-specific data. In this case, <a href="#dfn-language-map" class="internalDFN" data-link-type="dfn">language maps</a>
    may be utilized.</p>

  <div class="example" id="example-71-language-map-expressing-a-property-in-three-languages">
          <div class="marker">
      <a class="self-link" href="#example-71-language-map-expressing-a-property-in-three-languages">Example<bdi> 71</bdi></a><span class="example-title">: Language map expressing a property in three languages</span>
    </div> <pre class="nohighlight">{
  "@context": {
    <span class="comment">...</span>
    "occupation": { "@id": "ex:occupation", <span class="hl-bold">"@container": "@language"</span> }
  },
  "name": "Yagyū Muneyoshi",
  "occupation": <span class="hl-bold">{
    "ja": "忍者",
    "en": "Ninja",
    "cs": "Nindža"
  }</span>
  <span class="comment">...</span>
}</pre>
        </div>

  <p>The example above expresses exactly the same information as the previous
    example but consolidates all values in a single property. To access the
    value in a specific language in a programming language supporting dot-notation
    accessors for object properties, a developer may use the
    <code>property.language</code> pattern
    (when languages are limited to the primary language sub-tag,
    and do not depend on other sub-tags, such as <code>"en-us"</code>).
    For example, to access the occupation
    in English, a developer would use the following code snippet:
    <code>obj.occupation.en</code>.</p>

  <p>Third, it is possible to override the <a href="#dfn-default-language" class="internalDFN" data-link-type="dfn">default language</a> by using a
    <a href="#dfn-value-object" class="internalDFN" data-link-type="dfn">value object</a>:</p>

  <div class="example" id="example-72-overriding-default-language-using-an-expanded-value">
          <div class="marker">
      <a class="self-link" href="#example-72-overriding-default-language-using-an-expanded-value">Example<bdi> 72</bdi></a><span class="example-title">: Overriding default language using an expanded value</span>
    </div> <pre class="nohighlight">{
  "@context": {
    <span class="comment">...</span>
    "@language": "ja"
  },
  "name": "花澄",
  "occupation": <span class="hl-bold">{
    "@value": "Scientist",
    "@language": "en"
  }</span>
}</pre>
        </div>

  <p>This makes it possible to specify a plain string by omitting the
    <code>@language</code> tag or setting it to <code>null</code> when expressing
    it using a <a href="#dfn-value-object" class="internalDFN" data-link-type="dfn">value object</a>:</p>

  <div class="example" id="example-73-removing-language-information-using-an-expanded-value">
          <div class="marker">
      <a class="self-link" href="#example-73-removing-language-information-using-an-expanded-value">Example<bdi> 73</bdi></a><span class="example-title">: Removing language information using an expanded value</span>
    </div> <pre class="nohighlight">{
  "@context": {
    <span class="comment">...</span>
    "@language": "ja"
  },
  "name": <span class="hl-bold">{
    "@value": "Frank"
  }</span>,
  "occupation": {
    "@value": "Ninja",
    "@language": "en"
  },
  "speciality": "手裏剣"
}</pre>
        </div>

  <p>See <a href="#language-maps" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">9.8 </bdi>Language Maps</a> for a description
    of using <a href="#dfn-language-map" class="internalDFN" data-link-type="dfn">language maps</a> to set the language of mapped values.</p>

  <section class="changed informative" id="base-direction"><h5 id="x4-2-4-1-base-direction"><bdi class="secno">4.2.4.1 </bdi>Base Direction<a class="self-link" aria-label="§" href="#base-direction"></a></h5><p><em>This section is non-normative.</em></p>
    <p>It is also possible to annotate a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">string</a>, or <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-language-tagged-string">language-tagged string</a>,
      with its <a href="#dfn-base-direction" class="internalDFN" data-link-type="dfn">base direction</a>.
      As with language, it is possible to define a <a href="#dfn-base-direction" class="internalDFN" data-link-type="dfn">default base direction</a> for a JSON-LD document
      by setting the <code>@direction</code> key in the <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a>:</p>

  <aside class="example ds-selector-tabs changed" id="example-74-setting-the-default-base-direction-of-a-json-ld-document"><div class="marker">
      <a class="self-link" href="#example-74-setting-the-default-base-direction-of-a-json-ld-document">Example<bdi> 74</bdi></a><span class="example-title">: Setting the default base direction of a JSON-LD document</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="expanded">Expanded (Result)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="turtle">Turtle (drops direction)</button>
      <button data-selects="turtle-dt">Turtle (with datatype)</button>
      <button data-selects="turtle-bn">Turtle (with bnode structure)</button>
      <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%22title%22%3A%20%22http%3A%2F%2Fexample.org%2Ftitle%22%2C%0A%20%20%20%20%22publisher%22%3A%20%22http%3A%2F%2Fexample.org%2Fpublisher%22%2C%0A%20%20%20%20%0A%20%20%20%20%22%40language%22%3A%20%22ar-EG%22%2C%0A%20%20%20%20%22%40direction%22%3A%20%22rtl%22%0A%20%20%7D%2C%0A%20%20%22title%22%3A%20%22HTML%20%D9%88%20CSS%3A%20%D8%AA%D8%B5%D9%85%D9%8A%D9%85%20%D9%88%20%D8%A5%D9%86%D8%B4%D8%A7%D8%A1%20%D9%85%D9%88%D8%A7%D9%82%D8%B9%20%D8%A7%D9%84%D9%88%D9%8A%D8%A8%22%2C%0A%20%20%22publisher%22%3A%20%22%D9%85%D9%83%D8%AA%D8%A8%D8%A9%22%0A%7D">Open in playground</a>
    </div>
    <pre class="compacted input selected nohighlight">{
  "@context": {
    "title": "http://example.org/title",
    "publisher": "http://example.org/publisher",
    <span class="comment">...</span>
    <span class="hl-bold">"@language": "ar-EG",
    "@direction": "rtl"</span>
  },
  <span class="hl-bold">"title": "HTML و CSS: تصميم و إنشاء مواقع الويب",
  "publisher": "مكتبة"</span>
}</pre>
    <pre class="expanded result nohighlight" data-result-for="Setting the default base direction of a JSON-LD document-compacted">[{
  "http://example.org/title": [{"@value": <span class="hl-bold">"HTML و CSS: تصميم و إنشاء مواقع الويب"</span>, "@language": "ar-EG", <span class="hl-bold">"@direction": "rtl"</span>}],
  "http://example.org/publisher": [{"@value": <span class="hl-bold">"مكتبة"</span>, "@language": "ar-EG", <span class="hl-bold">"@direction": "rtl"</span>}]
}]</pre>
    <table class="statements" data-options="rdfDirection=i18n-datatype" data-to-rdf="">
      <thead><tr><th>Subject</th><th>Property</th><th>Value</th><th>Language</th><th>Direction</th></tr></thead>
      <tbody>
        <tr><td>_:b0</td><td>http://example.org/title</td><td lang="ar-EG" dir="rtl">HTML و CSS: تصميم و إنشاء مواقع الويب</td><td>ar-EG</td><td>rtl</td></tr>
        <tr><td>_:b0</td><td>http://example.org/publisher</td><td lang="ar-EG" dir="rtl">مكتبة</td><td>ar-EG</td><td>rtl</td></tr>
      </tbody>
    </table>
    <pre class="turtle nohighlight" data-content-type="text/turtle" data-result-for="Setting the default base direction of a JSON-LD document-expanded" data-to-rdf="">@prefix ex: &lt;http://example.org/&gt; .

# Note that this version drops the base direction.
[
  ex:title <span class="hl-bold">"HTML و CSS: تصميم و إنشاء مواقع الويب"</span>@ar-EG;
  ex:publisher <span class="hl-bold">"مكتبة"</span>@ar-EG
] .</pre>
    <pre class="turtle-dt nohighlight" data-content-type="text/turtle" data-result-for="Setting the default base direction of a JSON-LD document-expanded" data-options="rdfDirection=i18n-datatype" data-to-rdf="">@prefix ex: &lt;http://example.org/&gt; .
@prefix i18n: &lt;https://www.w3.org/ns/i18n#&gt; .

# Note that this version preserves the base direction using a datatype.
[
  ex:title <span class="hl-bold">"HTML و CSS: تصميم و إنشاء مواقع الويب"^^i18n:ar-EG_rtl</span>;
  ex:publisher <span class="hl-bold">"مكتبة"^^i18n:ar-EG_rtl</span>
] .</pre>
    <pre class="turtle-bn nohighlight" data-content-type="text/turtle" data-result-for="Setting the default base direction of a JSON-LD document-expanded" data-options="rdfDirection=compound-literal" data-to-rdf="">@prefix ex: &lt;http://example.org/&gt; .

# Note that this version preserves the base direction using a bnode structure.
[
  ex:title <span class="hl-bold">[
    rdf:value "HTML و CSS: تصميم و إنشاء مواقع الويب",
    rdf:language "ar-EG",
    rdf:direction "rtl"
  ]</span>;
  ex:publisher <span class="hl-bold">[
    rdf:value "مكتبة",
    rdf:language "ar-EG",
    rdf:direction "rtl"
  ]</span>
] .</pre>
  </aside>

  <p>The example above would associate the <code>ar-EG</code> language tag
    and "rtl" base direction
    with the two <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">strings</a>
    <em lang="ar-EG" dir="rtl">HTML و CSS: تصميم و إنشاء مواقع الويب</em> and <em lang="ar-EG" dir="rtl">مكتبة</em>.
    The <a href="#dfn-base-direction" class="internalDFN" data-link-type="dfn">default base direction</a> applies to all
    <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">string</a> values that are not <a href="#type-coercion">type coerced</a>.</p>

  <p>To clear the <a href="#dfn-base-direction" class="internalDFN" data-link-type="dfn">default base direction</a> for a subtree, <code>@direction</code> can
    be set to <code>null</code> in an intervening context, such as a <a href="#dfn-scoped-context" class="internalDFN" data-link-type="dfn">scoped context</a> as follows:</p>

  <div class="example" id="example-75-clearing-default-base-direction">
          <div class="marker">
      <a class="self-link" href="#example-75-clearing-default-base-direction">Example<bdi> 75</bdi></a><span class="example-title">: Clearing default base direction</span>
    </div> <pre class="nohighlight">{
  "@context": {
    <span class="comment">...</span>
    <span class="hl-bold">"@version": 1.1,</span>
    "@vocab": "http://example.com/",
    "@language": "ar-EG",
    "@direction": "rtl",
    "details": {
      <span class="hl-bold">"@context": {
        "@direction": null
      }</span>
    }
  },
  "title": "HTML و CSS: تصميم و إنشاء مواقع الويب",
  "details": {"genre": "Technical Publication"}
}</pre>
        </div>

  <p>Second, it is possible to associate a base direction with a specific <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a>
    using an <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a>:</p>

  <div class="example" id="example-76-expanded-term-definition-with-language-and-direction">
          <div class="marker">
      <a class="self-link" href="#example-76-expanded-term-definition-with-language-and-direction">Example<bdi> 76</bdi></a><span class="example-title">: Expanded term definition with language and direction</span>
    </div> <pre class="nohighlight">{
  "@context": {
    <span class="comment">...</span>
    "@version": 1.1,
    "@language": "ar-EG",
    "@direction": "rtl",
    "ex": "http://example.com/vocab/",
    "publisher": { "@id": "ex:publisher", <span class="hl-bold">"@direction": null</span> },
    "title": { "@id": "ex:title" },
    "title_en": { "@id": "ex:title", <span class="hl-bold">"@language": "en", "@direction": "ltr"</span> }
  },
  <span class="hl-bold">"publisher": "مكتبة",
  "title": "HTML و CSS: تصميم و إنشاء مواقع الويب",
  "title_en": "HTML and CSS: Design and Build Websites"</span><span class="comment">,
  ...</span>
}</pre>
        </div>

  <p>The example above would create three properties:</p>
  <table class="example statements" title="Statements associated with expanded term definition with language and direction" data-result-for="Expanded term definition with language and direction" data-to-rdf="">
    <thead><tr><th>Subject</th><th>Property</th><th>Value</th><th>Language</th><th>Direction</th></tr></thead>
    <tbody>
    <tr><td>_:b0</td><td>http://example.com/vocab/publisher</td><td lang="ar-EG">مكتبة</td><td>ar-EG</td><td></td></tr>
    <tr><td>_:b0</td><td>http://example.com/vocab/title</td><td lang="ar-EG" dir="rtl">HTML و CSS: تصميم و إنشاء مواقع الويب</td><td>ar-EG</td><td><code>rtl</code></td></tr>
    <tr><td>_:b0</td><td>http://example.com/vocab/title</td><td lang="en" dir="ltr">HTML and CSS: Design and Build Websites</td><td>en</td><td><code>ltr</code></td></tr>
    </tbody>
  </table>

  <div class="note" role="note" id="issue-container-generatedID-31"><div role="heading" class="note-title marker" id="h-note-28" aria-level="6"><span>Note</span></div><p class="">Base direction associations are only applied to plain
    <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">strings</a> and <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-language-tagged-string">language-tagged strings</a>.
    <a href="#dfn-typed-value" class="internalDFN" data-link-type="dfn">Typed values</a> or values that are subject to <a href="#type-coercion">type coercion</a>
    are not given a base direction.</p></div>

  <p>Third, it is possible to override the <a href="#dfn-base-direction" class="internalDFN" data-link-type="dfn">default base direction</a> by using a
    <a href="#dfn-value-object" class="internalDFN" data-link-type="dfn">value object</a>:</p>

  <div class="example" id="example-77-overriding-default-language-and-default-base-direction-using-an-expanded-value">
          <div class="marker">
      <a class="self-link" href="#example-77-overriding-default-language-and-default-base-direction-using-an-expanded-value">Example<bdi> 77</bdi></a><span class="example-title">: Overriding default language and default base direction using an expanded value</span>
    </div> <pre class="nohighlight">{
  "@context": {
    <span class="comment">...</span>
    "@language": "ar-EG",
    "@direction": "rtl"
  },
  "title": "HTML و CSS: تصميم و إنشاء مواقع الويب",
  "author": <span class="hl-bold">{
    "@value": "Jon Duckett",
    "@language": "en",
    "@direction": null
  }</span>
}</pre>
        </div>

  <p>See <cite><a href="https://www.w3.org/TR/string-meta/">Strings on the Web: Language and Direction Metadata</a></cite> [<cite><a class="bibref" data-link-type="biblio" href="#bib-string-meta" title="Strings on the Web: Language and Direction Metadata">string-meta</a></cite>] for a deeper discussion of <a href="#dfn-base-direction" class="internalDFN" data-link-type="dfn">base direction</a>.</p>
  </section>
</section>

</section>

<section class="informative" id="sets-and-lists"><h3 id="x4-3-value-ordering"><bdi class="secno">4.3 </bdi>Value Ordering<a class="self-link" aria-label="§" href="#sets-and-lists"></a></h3><p><em>This section is non-normative.</em></p>

<p>A JSON-LD author can express multiple values in a compact way by using
  <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">arrays</a>. Since graphs do not describe ordering for links
  between nodes, arrays in JSON-LD do not convey any ordering of the
  contained elements by default. This is exactly the opposite from regular JSON
  arrays, which are ordered by default. For example, consider the following
  simple document:</p>

<aside class="example ds-selector-tabs" id="example-78-multiple-values-with-no-inherent-order"><div class="marker">
      <a class="self-link" href="#example-78-multiple-values-with-no-inherent-order">Example<bdi> 78</bdi></a><span class="example-title">: Multiple values with no inherent order</span>
    </div>
  <div class="selectors">
    <button class="selected" data-selects="compacted">Compacted (Input)</button>
    <button data-selects="expanded">Expanded (Result)</button>
    <button data-selects="statements">Statements</button>
    <button data-selects="turtle">Turtle</button>
    <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%22foaf%22%3A%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2F%22%7D%2C%0A%20%20%0A%20%20%22%40id%22%3A%20%22http%3A%2F%2Fexample.org%2Fpeople%23joebob%22%2C%0A%20%20%22foaf%3Anick%22%3A%20%5B%20%22joe%22%2C%20%22bob%22%2C%20%22JB%22%20%5D%0A%7D">Open in playground</a>
  </div>
  <pre class="compacted input selected nohighlight">{
  "@context": {"foaf": "http://xmlns.com/foaf/0.1/"},
  <span class="comment">...</span>
  "@id": "http://example.org/people#joebob",
  "foaf:nick": <span class="hl-bold">[ "joe", "bob", "JB" ]</span><span class="comment">,
  ...</span>
}</pre>
  <pre class="expanded result nohighlight" data-result-for="Multiple values with no inherent order-compacted">[{
  "@id": "http://example.org/people#joebob",
  "http://xmlns.com/foaf/0.1/nick": [
    {"@value": "joe"},
    {"@value": "bob"},
    {"@value": "JB"}
  ]
}]</pre>
  <table class="statements" data-result-for="Multiple values with no inherent order-expanded" data-to-rdf="">
  <thead><tr>
    <th>Subject</th>
    <th>Property</th>
    <th>Value</th>
  </tr></thead>
  <tbody>
  <tr>
    <td>http://example.org/people#joebob</td>
    <td>foaf:nick</td>
    <td>joe</td>
  </tr>
  <tr>
    <td>http://example.org/people#joebob</td>
    <td>foaf:nick</td>
    <td>bob</td>
  </tr>
  <tr>
    <td>http://example.org/people#joebob</td>
    <td>foaf:nick</td>
    <td>JB</td>
  </tr>
  </tbody>
  </table>
  <pre class="turtle" data-content-type="text/turtle" data-result-for="Multiple values with no inherent order-expanded" data-to-rdf="" aria-busy="false"><code class="hljs">@prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt; .

&lt;http://example.org/people#joebob&gt; foaf:nick
  "joe", "bob", "JB" .</code></pre>
</aside>

<p>Multiple values may also be expressed using the expanded form:</p>

<aside class="example ds-selector-tabs" id="example-79-using-an-expanded-form-to-set-multiple-values"><div class="marker">
      <a class="self-link" href="#example-79-using-an-expanded-form-to-set-multiple-values">Example<bdi> 79</bdi></a><span class="example-title">: Using an expanded form to set multiple values</span>
    </div>
  <div class="selectors">
    <button class="selected" data-selects="compacted">Compacted (Input)</button>
    <button data-selects="expanded">Expanded (Result)</button>
    <button data-selects="statements">Statements</button>
    <button data-selects="turtle">Turtle</button>
    <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%22dcterms%22%3A%20%22http%3A%2F%2Fpurl.org%2Fdc%2Fterms%2F%22%7D%2C%0A%20%20%22%40id%22%3A%20%22http%3A%2F%2Fexample.org%2Farticles%2F8%22%2C%0A%20%20%22dcterms%3Atitle%22%3A%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%22%40value%22%3A%20%22Das%20Kapital%22%2C%0A%20%20%20%20%20%20%22%40language%22%3A%20%22de%22%0A%20%20%20%20%7D%2C%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%22%40value%22%3A%20%22Capital%22%2C%0A%20%20%20%20%20%20%22%40language%22%3A%20%22en%22%0A%20%20%20%20%7D%0A%20%20%5D%0A%7D">Open in playground</a>
  </div>
  <pre class="compacted input selected nohighlight">{
  "@context": {"dcterms": "http://purl.org/dc/terms/"},
  "@id": "http://example.org/articles/8",
  "dcterms:title": <span class="hl-bold">[
    {
      "@value": "Das Kapital",
      "@language": "de"
    },
    {
      "@value": "Capital",
      "@language": "en"
    }
  ]</span>
}</pre>
  <pre class="expanded result nohighlight" data-result-for="Using an expanded form to set multiple values-compacted">[{
  "@id": "http://example.org/articles/8",
  "http://purl.org/dc/terms/title": <span class="hl-bold">[
    {"@value": "Das Kapital", "@language": "de"},
    {"@value": "Capital", "@language": "en"}
  ]</span>
}]</pre>
  <table class="statements" data-result-for="Using an expanded form to set multiple values-expanded" data-to-rdf="">
  <thead><tr>
    <th>Subject</th>
    <th>Property</th>
    <th>Value</th>
    <th>Language</th>
  </tr></thead>
  <tbody>
  <tr>
    <td>http://example.org/articles/8</td>
    <td>dcterms:title</td>
    <td lang="de">Das Kapital</td>
    <td>de</td>
  </tr>
  <tr>
    <td>http://example.org/articles/8</td>
    <td>dcterms:title</td>
    <td>Capital</td>
    <td>en</td>
  </tr>
  </tbody>
  </table>
  <pre class="turtle nohighlight" data-content-type="text/turtle" data-result-for="Using an expanded form to set multiple values-expanded" data-to-rdf="">@prefix dcterms: &lt;http://purl.org/dc/terms/&gt; .

&lt;http://example.org/articles/8&gt; dcterms:title
  <span class="hl-bold">"Das Kapital"@de, "Capital"@en</span> .</pre>
</aside>

<div class="note" role="note" id="issue-container-generatedID-32"><div role="heading" class="note-title marker" id="h-note-29" aria-level="4"><span>Note</span></div><p class="">The example shown above would generates statement, again with
  no inherent order.</p></div>

<p>Although multiple values of a property are typically of the same type,
  JSON-LD places no restriction on this, and a property may have values
  of different types:</p>

<aside class="example ds-selector-tabs" id="example-80-multiple-array-values-of-different-types"><div class="marker">
      <a class="self-link" href="#example-80-multiple-array-values-of-different-types">Example<bdi> 80</bdi></a><span class="example-title">: Multiple array values of different types</span>
    </div>
  <div class="selectors">
    <button class="selected" data-selects="compacted">Compacted (Input)</button>
    <button data-selects="expanded">Expanded (Result)</button>
    <button data-selects="statements">Statements</button>
    <button data-selects="turtle">Turtle</button>
    <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%22ex%22%3A%20%22http%3A%2F%2Fexample.org%2F%22%7D%2C%0A%20%20%22%40id%22%3A%20%22http%3A%2F%2Fexample.org%2Fpeople%23michael%22%2C%0A%20%20%22ex%3Aname%22%3A%20%5B%0A%20%20%20%20%22Michael%22%2C%0A%20%20%20%20%7B%22%40value%22%3A%20%22Mike%22%7D%2C%0A%20%20%20%20%7B%22%40value%22%3A%20%22Miguel%22%2C%20%22%40language%22%3A%20%22es%22%7D%2C%0A%20%20%20%20%7B%20%22%40id%22%3A%20%22https%3A%2F%2Fwww.wikidata.org%2Fwiki%2FQ4927524%22%20%7D%2C%0A%20%20%20%2042%0A%20%20%5D%0A%7D">Open in playground</a>
  </div>
  <pre class="compacted input selected nohighlight">{
  "@context": {"ex": "http://example.org/"},
  "@id": "http://example.org/people#michael",
  "ex:name": [
    "Michael",
    {"@value": "Mike"},
    {"@value": "Miguel", "@language": "es"},
    { "@id": "https://www.wikidata.org/wiki/Q4927524" },
    42
  ]
}</pre>
  <pre class="expanded result nohighlight" data-result-for="Multiple array values of different types-compacted">[{
  "@id": "http://example.org/people#michael",
  "http://example.org/name": <span class="hl-bold">[
    {"@value": "Michael"},
    {"@value": "Mike"},
    {"@value": "Miguel", "@language": "es"},
    {"@id": "https://www.wikidata.org/wiki/Q4927524" },
    {"@value": 42}
  ]</span>
}]</pre>
  <table class="statements" data-result-for="Multiple array values of different types-expanded" data-to-rdf="">
  <thead><tr>
    <th>Subject</th>
    <th>Property</th>
    <th>Value</th>
    <th>Language</th>
    <th>Value Type</th>
  </tr></thead>
  <tbody>
  <tr>
    <td>http://example.org/people#michael</td>
    <td>http://example.org/name</td>
    <td>Michael</td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td>http://example.org/people#michael</td>
    <td>http://example.org/name</td>
    <td>Mike</td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td>http://example.org/people#michael</td>
    <td>http://example.org/name</td>
    <td>Miguel</td>
    <td>es</td>
    <td></td>
  </tr>
  <tr>
    <td>http://example.org/people#michael</td>
    <td>http://example.org/name</td>
    <td>https://www.wikidata.org/wiki/Q4927524</td>
    <td></td>
    <td></td>
  </tr>
  <tr>
    <td>http://example.org/people#michael</td>
    <td>http://example.org/name</td>
    <td>42</td>
    <td>&nbsp;</td>
    <td>xsd:integer</td>
  </tr>
  </tbody>
  </table>
  <pre class="turtle" data-content-type="text/turtle" data-result-for="Multiple array values of different types-expanded" data-to-rdf="" aria-busy="false"><code class="hljs">@prefix ex: &lt;http://example.org/&gt; .

&lt;http://example.org/people#michael&gt; ex:name
  "Michael",
  "Mike",
  "Miguel"@es,
  &lt;https://www.wikidata.org/wiki/Q4927524&gt;,
  42 .</code></pre>
</aside>

<div class="note" role="note" id="issue-container-generatedID-33"><div role="heading" class="note-title marker" id="h-note-30" aria-level="4"><span>Note</span></div><p class="">When viewed as statements, the values have no inherent order.</p></div>


<section class="informative" id="lists"><h4 id="x4-3-1-lists"><bdi class="secno">4.3.1 </bdi>Lists<a class="self-link" aria-label="§" href="#lists"></a></h4><p><em>This section is non-normative.</em></p>
<p>As the notion of ordered collections is rather important in data
  modeling, it is useful to have specific language support. In JSON-LD,
  a list may be represented using the <code>@list</code> <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a> as follows:</p>

<aside class="example ds-selector-tabs" id="example-81-an-ordered-collection-of-values-in-json-ld"><div class="marker">
      <a class="self-link" href="#example-81-an-ordered-collection-of-values-in-json-ld">Example<bdi> 81</bdi></a><span class="example-title">: An ordered collection of values in JSON-LD</span>
    </div>
  <div class="selectors">
    <button class="selected" data-selects="compacted">Compacted (Input)</button>
    <button data-selects="expanded">Expanded (Result)</button>
    <button data-selects="statements">Statements</button>
    <button data-selects="turtle">Turtle</button>
    <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%22foaf%22%3A%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2F%22%7D%2C%0A%20%20%0A%20%20%22%40id%22%3A%20%22http%3A%2F%2Fexample.org%2Fpeople%23joebob%22%2C%0A%20%20%22foaf%3Anick%22%3A%20%7B%0A%20%20%20%20%22%40list%22%3A%20%5B%20%22joe%22%2C%20%22bob%22%2C%20%22jaybee%22%20%5D%0A%20%20%7D%0A%7D">Open in playground</a>
  </div>
  <pre class="compacted input selected nohighlight">{
  "@context": {"foaf": "http://xmlns.com/foaf/0.1/"},
  <span class="comment">...</span>
  "@id": "http://example.org/people#joebob",
  "foaf:nick": <span class="hl-bold">{
    "@list": [ "joe", "bob", "jaybee" ]
  }</span><span class="comment">,
  ...</span>
}</pre>
  <pre class="expanded result nohighlight" data-result-for="An ordered collection of values in JSON-LD-compacted">[{
  "@id": "http://example.org/people#joebob",
  "http://xmlns.com/foaf/0.1/nick": <span class="hl-bold">[{
    "@list": [
      {"@value": "joe"},
      {"@value": "bob"},
      {"@value": "jaybee"}
    ]
  }]</span>
}]</pre>
  <table class="statements" data-result-for="An ordered collection of values in JSON-LD-expanded" data-to-rdf="">
  <thead><tr>
    <th>Subject</th>
    <th>Property</th>
    <th>Value</th>
  </tr></thead>
  <tbody>
  <tr><td>http://example.org/people#joebob</td><td>foaf:nick</td><td>_:b0</td></tr>
  <tr><td>_:b0</td><td>rdf:first</td><td>joe</td></tr>
  <tr><td>_:b0</td><td>rdf:rest</td><td>_:b1</td></tr>
  <tr><td>_:b1</td><td>rdf:first</td><td>bob</td></tr>
  <tr><td>_:b1</td><td>rdf:rest</td><td>_:b2</td></tr>
  <tr><td>_:b2</td><td>rdf:first</td><td>jaybee</td></tr>
  <tr><td>_:b2</td><td>rdf:rest</td><td>rdf:nil</td></tr>
  </tbody>
  </table>
  <pre class="turtle" data-content-type="text/turtle" data-result-for="An ordered collection of values in JSON-LD-expanded" data-to-rdf="" aria-busy="false"><code class="hljs">@prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt; .

&lt;http://example.org/people#joebob&gt; foaf:nick ("joe" "bob" "jaybee") .</code></pre>
</aside>

<p>This describes the use of this <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a> as being ordered,
  and order is maintained when processing a document. If every use of a given multi-valued
  property is a list, this may be abbreviated by setting <code>@container</code>
  to <code>@list</code> in the <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a>:</p>

<aside class="example ds-selector-tabs" id="example-82-specifying-that-a-collection-is-ordered-in-the-context"><div class="marker">
      <a class="self-link" href="#example-82-specifying-that-a-collection-is-ordered-in-the-context">Example<bdi> 82</bdi></a><span class="example-title">: Specifying that a collection is ordered in the context</span>
    </div>
  <div class="selectors">
    <button class="selected" data-selects="compacted">Compacted (Input)</button>
    <button data-selects="expanded">Expanded (Result)</button>
    <button data-selects="statements">Statements</button>
    <button data-selects="turtle">Turtle</button>
    <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%0A%20%20%20%20%22nick%22%3A%20%7B%0A%20%20%20%20%20%20%22%40id%22%3A%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2Fnick%22%2C%0A%20%20%20%20%20%20%22%40container%22%3A%20%22%40list%22%0A%20%20%20%20%7D%0A%20%20%7D%2C%0A%20%20%0A%20%20%22%40id%22%3A%20%22http%3A%2F%2Fexample.org%2Fpeople%23joebob%22%2C%0A%20%20%22nick%22%3A%20%5B%20%22joe%22%2C%20%22bob%22%2C%20%22jaybee%22%20%5D%0A%7D">Open in playground</a>
  </div>
  <pre class="compacted input selected nohighlight">{
  <span class="hl-bold">"@context": {
    <span class="comment">...</span>
    "nick": {
      "@id": "http://xmlns.com/foaf/0.1/nick",
      "@container": "@list"
    }
  }</span>,
  <span class="comment">...</span>
  "@id": "http://example.org/people#joebob",
  "nick": <span class="hl-bold">[ "joe", "bob", "jaybee" ]</span><span class="comment">,
  ...</span>
}</pre>
  <pre class="expanded result nohighlight" data-result-for="Specifying that a collection is ordered in the context-compacted">[{
  "@id": "http://example.org/people#joebob",
  "http://xmlns.com/foaf/0.1/nick": <span class="hl-bold">[{
    "@list": [
      {"@value": "joe"},
      {"@value": "bob"},
      {"@value": "jaybee"}
    ]
  }]</span>
}]</pre>
  <table class="statements" data-result-for="Specifying that a collection is ordered in the context-expanded" data-to-rdf="">
    <thead><tr><th>Subject</th><th>Property</th><th>Value</th></tr></thead>
    <tbody>
      <tr><td>http://example.org/people#joebob</td><td>foaf:nick</td><td>_:b0</td></tr>
      <tr><td>_:b0</td><td>rdf:first</td><td>joe</td></tr>
      <tr><td>_:b0</td><td>rdf:rest</td><td>_:b1</td></tr>
      <tr><td>_:b1</td><td>rdf:first</td><td>bob</td></tr>
      <tr><td>_:b1</td><td>rdf:rest</td><td>_:b2</td></tr>
      <tr><td>_:b2</td><td>rdf:first</td><td>jaybee</td></tr>
      <tr><td>_:b2</td><td>rdf:rest</td><td>rdf:nil</td></tr>
    </tbody>
  </table>
  <pre class="turtle" data-content-type="text/turtle" data-result-for="Specifying that a collection is ordered in the context-expanded" data-to-rdf="" aria-busy="false"><code class="hljs">@prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt; .

&lt;http://example.org/people#joebob&gt; foaf:nick ("joe" "bob" "jaybee") .</code></pre>
</aside>

<p>The implementation of <a data-link-type="dfn" href="https://www.w3.org/TR/rdf-schema/#ch_collectionvocab">lists</a> in RDF depends on linking anonymous nodes
  together using the properties <code>rdf:first</code> and
  <code>rdf:rest</code>, with the end of the list defined as the resource
  <code>rdf:nil</code>, as the "statements" tab illustrates.
  This allows order to be represented within an unordered set of statements.
</p>

<p>Both JSON-LD and Turtle provide shortcuts for representing ordered lists.</p>

<p class="changed">In JSON-LD 1.1, lists of lists, where the value of
  a <a href="#dfn-list-object" class="internalDFN" data-link-type="dfn">list object</a>, may itself be a <a href="#dfn-list-object" class="internalDFN" data-link-type="dfn">list object</a>, are
  fully supported.</p>

<p class="changed">Note that the <code>"@container": "@list"</code> definition recursively
  describes array values of lists as being, themselves, lists. For example, in <cite><a href="https://tools.ietf.org/html/rfc7946">The GeoJSON Format</a></cite> (see [<cite><a class="bibref" data-link-type="biblio" href="#bib-rfc7946" title="The GeoJSON Format">RFC7946</a></cite>]),
  <em>coordinates</em> are an ordered list of <em>positions</em>, which are
  represented as an array of two or more numbers:</p>

<div class="example" id="example-83-coordinates-expressed-in-geojson">
          <div class="marker">
      <a class="self-link" href="#example-83-coordinates-expressed-in-geojson">Example<bdi> 83</bdi></a><span class="example-title">: Coordinates expressed in GeoJSON</span>
    </div> <pre class="changed nohighlight" data-content-type="application/json">{
  "type": "Feature",
  "bbox": [-10.0, -10.0, 10.0, 10.0],
  "geometry": {
    "type": "Polygon",
    "coordinates": [
        [
            [-10.0, -10.0],
            [10.0, -10.0],
            [10.0, 10.0],
            [-10.0, -10.0]
        ]
    ]
  }
  <span class="comment">//...</span>
}</pre>
        </div>

<p class="changed">For these examples, it's important that values
  expressed within <em>bbox</em> and <em>coordinates</em> maintain their order,
  which requires the use of embedded list structures. In JSON-LD 1.1, we can
  express this using recursive lists, by simply adding the appropriate context
  definition:</p>

<aside class="example ds-selector-tabs" id="example-84-coordinates-expressed-in-json-ld"><div class="marker">
      <a class="self-link" href="#example-84-coordinates-expressed-in-json-ld">Example<bdi> 84</bdi></a><span class="example-title">: Coordinates expressed in JSON-LD</span>
    </div>
  <div class="selectors">
    <button class="selected" data-selects="compacted">Compacted (Input)</button>
    <button data-selects="expanded">Expanded (Result)</button>
    <button data-selects="statements">Statements</button>
    <button data-selects="turtle">Turtle</button>
    <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%22%40vocab%22%3A%20%22https%3A%2F%2Fpurl.org%2Fgeojson%2Fvocab%23%22%2C%0A%20%20%20%20%22type%22%3A%20%22%40type%22%2C%0A%20%20%20%20%22bbox%22%3A%20%7B%22%40container%22%3A%20%22%40list%22%7D%2C%0A%20%20%20%20%22coordinates%22%3A%20%7B%22%40container%22%3A%20%22%40list%22%7D%0A%20%20%7D%2C%0A%20%20%22type%22%3A%20%22Feature%22%2C%0A%20%20%22bbox%22%3A%20%5B-10.0%2C%20-10.0%2C%2010.0%2C%2010.0%5D%2C%0A%20%20%22geometry%22%3A%20%7B%0A%20%20%20%20%22type%22%3A%20%22Polygon%22%2C%0A%20%20%20%20%22coordinates%22%3A%20%5B%0A%20%20%20%20%20%20%20%20%5B%0A%20%20%20%20%20%20%20%20%20%20%20%20%5B-10.0%2C%20-10.0%5D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%5B10.0%2C%20-10.0%5D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%5B10.0%2C%2010.0%5D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%5B-10.0%2C%20-10.0%5D%0A%20%20%20%20%20%20%20%20%5D%0A%20%20%20%20%5D%0A%20%20%7D%0A%20%20%0A%7D">Open in playground</a>
  </div>
  <pre class="compacted input selected changed" data-content-type="application/json" aria-busy="false"><code class="hljs">{
  "@context": {
    "@vocab": "https://purl.org/geojson/vocab#",
    "type": "@type",
    "bbox": {"@container": "@list"},
    "coordinates": {"@container": "@list"}
  },
  "type": "Feature",
  "bbox": [-10.0, -10.0, 10.0, 10.0],
  "geometry": {
    "type": "Polygon",
    "coordinates": [
        [
            [-10.0, -10.0],
            [10.0, -10.0],
            [10.0, 10.0],
            [-10.0, -10.0]
        ]
    ]
  }
  <span class="comment">//...</span>
}</code></pre>
  <pre class="expanded result nohighlight" data-result-for="Coordinates expressed in JSON-LD-compacted">[{
  "@type": ["https://purl.org/geojson/vocab#Feature"],
  "https://purl.org/geojson/vocab#bbox": [{
    "@list": [
      {"@value": -10.0},
      {"@value": -10.0},
      {"@value": 10.0},
      {"@value": 10.0}
    ]
  }],
  "https://purl.org/geojson/vocab#geometry": [{
    "@type": ["https://purl.org/geojson/vocab#Polygon"],
    "https://purl.org/geojson/vocab#coordinates": [{
      "@list": [{
        "@list": [
          {"@list": [{"@value": -10.0}, {"@value": -10.0}]},
          {"@list": [{"@value": 10.0}, {"@value": -10.0}]},
          {"@list": [{"@value": 10.0}, {"@value": 10.0}]},
          {"@list": [{"@value": -10.0}, {"@value": -10.0}]}
        ]
      }]
    }]
  }]
}]</pre>
  <table class="statements" data-result-for="Coordinates expressed in JSON-LD-expanded" data-to-rdf="">
  <thead><tr>
    <th>Subject</th>
    <th>Property</th>
    <th>Value</th>
    <th>Value Type</th>
  </tr></thead>
  <tbody>
  <tr><td>_:b0</td><td>rdf:type</td><td>geojson:Feature</td><td></td></tr>
  <tr><td>_:b0</td><td>geojson:bbox</td><td>_:b1</td><td></td></tr>
  <tr><td>_:b0</td><td>geojson:geometry</td><td>_:b5</td><td></td></tr>
  <tr><td>_:b1</td><td>rdf:first</td><td>-10</td><td>xsd:integer</td></tr>
  <tr><td>_:b1</td><td>rdf:rest</td><td>_:b2</td><td></td></tr>
  <tr><td>_:b2</td><td>rdf:first</td><td>-10</td><td>xsd:integer</td></tr>
  <tr><td>_:b2</td><td>rdf:rest</td><td>_:b3</td><td></td></tr>
  <tr><td>_:b3</td><td>rdf:first</td><td>10</td><td>xsd:integer</td></tr>
  <tr><td>_:b3</td><td>rdf:rest</td><td>_:b4</td><td></td></tr>
  <tr><td>_:b4</td><td>rdf:first</td><td>10</td><td>xsd:integer</td></tr>
  <tr><td>_:b4</td><td>rdf:rest</td><td>rdf:nil</td><td></td></tr>
  <tr><td>_:b5</td><td>rdf:type</td><td>geojson:Polygon</td><td></td></tr>
  <tr><td>_:b5</td><td>geojson:coordinates</td><td>_:b6</td><td></td></tr>
  <tr><td>_:b6</td><td>rdf:first</td><td>_:b7</td><td></td></tr>
  <tr><td>_:b6</td><td>rdf:rest</td><td>rdf:nil</td><td></td></tr>
  <tr><td>_:b7</td><td>rdf:first</td><td>_:b8</td><td></td></tr>
  <tr><td>_:b7</td><td>rdf:rest</td><td>_:b10</td><td></td></tr>
  <tr><td>_:b8</td><td>rdf:first</td><td>-10</td><td>xsd:integer</td></tr>
  <tr><td>_:b8</td><td>rdf:rest</td><td>_:b9</td><td></td></tr>
  <tr><td>_:b9</td><td>rdf:first</td><td>-10</td><td>xsd:integer</td></tr>
  <tr><td>_:b9</td><td>rdf:rest</td><td>rdf:nil</td><td></td></tr>
  <tr><td>_:b10</td><td>rdf:first</td><td>_:b11</td><td></td></tr>
  <tr><td>_:b10</td><td>rdf:rest</td><td>_:b13</td><td></td></tr>
  <tr><td>_:b11</td><td>rdf:first</td><td>10</td><td>xsd:integer</td></tr>
  <tr><td>_:b11</td><td>rdf:rest</td><td>_:b12</td><td></td></tr>
  <tr><td>_:b12</td><td>rdf:first</td><td>-10</td><td>xsd:integer</td></tr>
  <tr><td>_:b12</td><td>rdf:rest</td><td>rdf:nil</td><td></td></tr>
  <tr><td>_:b13</td><td>rdf:first</td><td>_:b14</td><td></td></tr>
  <tr><td>_:b13</td><td>rdf:rest</td><td>_:b16</td><td></td></tr>
  <tr><td>_:b14</td><td>rdf:first</td><td>10</td><td>xsd:integer</td></tr>
  <tr><td>_:b14</td><td>rdf:rest</td><td>_:b15</td><td></td></tr>
  <tr><td>_:b15</td><td>rdf:first</td><td>10</td><td>xsd:integer</td></tr>
  <tr><td>_:b15</td><td>rdf:rest</td><td>rdf:nil</td><td></td></tr>
  <tr><td>_:b16</td><td>rdf:first</td><td>_:b17</td><td></td></tr>
  <tr><td>_:b16</td><td>rdf:rest</td><td>rdf:nil</td><td></td></tr>
  <tr><td>_:b17</td><td>rdf:first</td><td>-10</td><td>xsd:integer</td></tr>
  <tr><td>_:b17</td><td>rdf:rest</td><td>_:b18</td><td></td></tr>
  <tr><td>_:b18</td><td>rdf:first</td><td>-10</td><td>xsd:integer</td></tr>
  <tr><td>_:b18</td><td>rdf:rest</td><td>rdf:nil</td><td></td></tr>
  </tbody>
  </table>
  <pre class="turtle" data-content-type="text/turtle" data-result-for="Coordinates expressed in JSON-LD-expanded" data-to-rdf="" aria-busy="false"><code class="hljs">@prefix geojson: &lt;https://purl.org/geojson/vocab#&gt;.

[
  a geojson:Feature ;
  geojson:bbox (-10 -10 10 10) ;
  geojson:geometry [
    a geojson:Polygon ;
    geojson:coordinates (
      (
        (-10 -10)
        (10 -10)
        (10 10)
        (-10 -10)
      )
    )
  ]
] .</code></pre>
</aside>

<p class="changed">Note that <em>coordinates</em> includes three levels of lists.</p>

<p>Values of terms associated with an <code>@list</code> container
  are always represented in the form of an <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a>,
  even if there is just a single value or no value at all.</p>
</section>

<section class="informative" id="sets"><h4 id="x4-3-2-sets"><bdi class="secno">4.3.2 </bdi>Sets<a class="self-link" aria-label="§" href="#sets"></a></h4><p><em>This section is non-normative.</em></p>

<p>While <code>@list</code> is used to describe <em>ordered lists</em>,
  the <code>@set</code> keyword is used to describe <em>unordered sets</em>.
  The use of <code>@set</code> in the body of a JSON-LD document
  is optimized away when processing the document, as it is just syntactic
  sugar. However, <code>@set</code> is helpful when used within the context
  of a document.
  Values of terms associated with an <code>@set</code> container
  are always represented in the form of an <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a>,
  even if there is just a single value that would otherwise be optimized to
  a non-array form in compact form (see
  <a class="sectionRef sec-ref" href="#compacted-document-form">§&nbsp;<bdi class="secno">5.2 </bdi>Compacted Document Form</a>). This makes post-processing of
  JSON-LD documents easier as the data is always in array form, even if the
  array only contains a single value.</p>

<aside class="example ds-selector-tabs" id="example-85-an-unordered-collection-of-values-in-json-ld"><div class="marker">
      <a class="self-link" href="#example-85-an-unordered-collection-of-values-in-json-ld">Example<bdi> 85</bdi></a><span class="example-title">: An unordered collection of values in JSON-LD</span>
    </div>
  <div class="selectors">
    <button class="selected" data-selects="compacted">Compacted (Input)</button>
    <button data-selects="expanded">Expanded (Result)</button>
    <button data-selects="statements">Statements</button>
    <button data-selects="turtle">Turtle</button>
    <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%22foaf%22%3A%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2F%22%7D%2C%0A%20%20%0A%20%20%22%40id%22%3A%20%22http%3A%2F%2Fexample.org%2Fpeople%23joebob%22%2C%0A%20%20%22foaf%3Anick%22%3A%20%7B%0A%20%20%20%20%22%40set%22%3A%20%5B%20%22joe%22%2C%20%22bob%22%2C%20%22jaybee%22%20%5D%0A%20%20%7D%0A%7D">Open in playground</a>
  </div>
  <pre class="compacted input selected nohighlight">{
  "@context": {"foaf": "http://xmlns.com/foaf/0.1/"},
  <span class="comment">...</span>
  "@id": "http://example.org/people#joebob",
  "foaf:nick": <span class="hl-bold">{
    "@set": [ "joe", "bob", "jaybee" ]
  }</span><span class="comment">,
  ...</span>
}</pre>
  <pre class="expanded result nohighlight" data-result-for="An unordered collection of values in JSON-LD-compacted">[{
  "@id": "http://example.org/people#joebob",
  "http://xmlns.com/foaf/0.1/nick": <span class="hl-bold">[
    {"@value": "joe"},
    {"@value": "bob"},
    {"@value": "jaybee"}
  ]</span>
}]</pre>
  <table class="statements" data-result-for="An unordered collection of values in JSON-LD-expanded" data-to-rdf="">
  <thead><tr>
    <th>Subject</th>
    <th>Property</th>
    <th>Value</th>
  </tr></thead>
  <tbody>
  <tr>
    <td>http://example.org/people#joebob</td>
    <td>foaf:nick</td>
    <td>joe</td>
  </tr>
  <tr>
    <td>http://example.org/people#joebob</td>
    <td>foaf:nick</td>
    <td>bob</td>
  </tr>
  <tr>
    <td>http://example.org/people#joebob</td>
    <td>foaf:nick</td>
    <td>jaybee</td>
  </tr>
  </tbody>
  </table>
  <pre class="turtle" data-content-type="text/turtle" data-result-for="An unordered collection of values in JSON-LD-expanded" data-to-rdf="" aria-busy="false"><code class="hljs">@prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt; .

&lt;http://example.org/people#joebob&gt; foaf:nick "joe", "bob", "jaybee" .</code></pre>
</aside>

<p>This describes the use of this <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a> as being unordered,
  and order may change when processing a document. By default,
  arrays of values are unordered, but this may be made explicit by
  setting <code>@container</code> to <code>@set</code> in the <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a>:

</p><aside class="example ds-selector-tabs" id="example-86-specifying-that-a-collection-is-unordered-in-the-context"><div class="marker">
      <a class="self-link" href="#example-86-specifying-that-a-collection-is-unordered-in-the-context">Example<bdi> 86</bdi></a><span class="example-title">: Specifying that a collection is unordered in the context</span>
    </div>
  <div class="selectors">
    <button class="selected" data-selects="compacted">Compacted (Input)</button>
    <button data-selects="expanded">Expanded (Result)</button>
    <button data-selects="statements">Statements</button>
    <button data-selects="turtle">Turtle</button>
    <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%0A%20%20%20%20%22nick%22%3A%20%7B%0A%20%20%20%20%20%20%22%40id%22%3A%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2Fnick%22%2C%0A%20%20%20%20%20%20%22%40container%22%3A%20%22%40set%22%0A%20%20%20%20%7D%0A%20%20%7D%2C%0A%20%20%0A%20%20%22%40id%22%3A%20%22http%3A%2F%2Fexample.org%2Fpeople%23joebob%22%2C%0A%20%20%22nick%22%3A%20%5B%20%22joe%22%2C%20%22bob%22%2C%20%22jaybee%22%20%5D%0A%7D">Open in playground</a>
  </div>
  <pre class="compacted input selected nohighlight">{
  <span class="hl-bold">"@context": {
    <span class="comment">...</span>
    "nick": {
      "@id": "http://xmlns.com/foaf/0.1/nick",
      "@container": "@set"
    }
  }</span>,
  <span class="comment">...</span>
  "@id": "http://example.org/people#joebob",
  "nick": <span class="hl-bold">[ "joe", "bob", "jaybee" ]</span><span class="comment">,
  ...</span>
}</pre>
  <pre class="expanded result nohighlight" data-result-for="Specifying that a collection is unordered in the context-compacted">[{
  "@id": "http://example.org/people#joebob",
  "http://xmlns.com/foaf/0.1/nick": <span class="hl-bold">[
    {"@value": "joe"},
    {"@value": "bob"},
    {"@value": "jaybee"}
  ]</span>
}]</pre>
  <table class="statements" data-result-for="Specifying that a collection is unordered in the context-expanded" data-to-rdf="">
  <thead><tr>
    <th>Subject</th>
    <th>Property</th>
    <th>Value</th>
  </tr></thead>
  <tbody>
  <tr>
    <td>http://example.org/people#joebob</td>
    <td>foaf:nick</td>
    <td>joe</td>
  </tr>
  <tr>
    <td>http://example.org/people#joebob</td>
    <td>foaf:nick</td>
    <td>bob</td>
  </tr>
  <tr>
    <td>http://example.org/people#joebob</td>
    <td>foaf:nick</td>
    <td>jaybee</td>
  </tr>
  </tbody>
  </table>
  <pre class="turtle" data-content-type="text/turtle" data-result-for="Specifying that a collection is unordered in the context-expanded" data-to-rdf="" aria-busy="false"><code class="hljs">@prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt; .

&lt;http://example.org/people#joebob&gt; foaf:nick "joe", "bob", "jaybee" .</code></pre>
</aside>

<p class="changed">Since JSON-LD 1.1, the <code>@set</code> keyword may be
  combined with other container specifications within an expanded term
  definition to similarly cause compacted values of indexes to be consistently
  represented using arrays. See <a href="#indexed-values" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">4.6 </bdi>Indexed Values</a> for a further discussion.</p>
</section>

<section class="informative changed" id="using-set-with-type"><h4 id="x4-3-3-using-set-with-type"><bdi class="secno">4.3.3 </bdi>Using <code>@set</code> with <code>@type</code><a class="self-link" aria-label="§" href="#using-set-with-type"></a></h4><p><em>This section is non-normative.</em></p>
  <p class="changed">Unless the <a href="#dfn-processing-mode" class="internalDFN" data-link-type="dfn">processing mode</a> is set to <code>json-ld-1.0</code>,
    <code>@type</code> may be used with an <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a> with <code>@container</code> set
    to <code>@set</code>; no other <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">entries</a> may be set within such an <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a>.
    This is used by the <a href="https://www.w3.org/TR/json-ld11-api/#compaction-algorithm">Compaction algorithm</a> to ensure that the values of <code>@type</code> (or an alias)
    are always represented in an <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a>.</p>

  <div class="example" id="example-87-setting-container-set-on-type">
          <div class="marker">
      <a class="self-link" href="#example-87-setting-container-set-on-type">Example<bdi> 87</bdi></a><span class="example-title">: Setting @container: @set on @type</span>
    </div> <pre aria-busy="false"><code class="hljs json">{
  <span class="hljs-attr">"@context"</span>: {
    <span class="hljs-attr">"@version"</span>: <span class="hljs-number">1.1</span>,
    <span class="hljs-attr">"@type"</span>: {<span class="hljs-attr">"@container"</span>: <span class="hljs-string">"@set"</span>}
  },
  <span class="hljs-attr">"@type"</span>: [<span class="hljs-string">"http:/example.org/type"</span>]
}</code></pre>
        </div>

</section>
</section>


<section class="informative changed" id="nested-properties"><h3 id="x4-4-nested-properties"><bdi class="secno">4.4 </bdi>Nested Properties<a class="self-link" aria-label="§" href="#nested-properties"></a></h3><p><em>This section is non-normative.</em></p>

  <p>Many JSON APIs separate properties from their entities using an
    intermediate object; in JSON-LD these are called <a href="#dfn-nested-property" class="internalDFN" data-link-type="dfn">nested properties</a>.
    For example, a set of possible labels may be grouped
    under a common property:</p>

  <aside class="example ds-selector-tabs" id="example-88-nested-properties"><div class="marker">
      <a class="self-link" href="#example-88-nested-properties">Example<bdi> 88</bdi></a><span class="example-title">: Nested properties</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="expanded">Expanded (Result)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="turtle">Turtle</button>
      <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%22%40version%22%3A%201.1%2C%0A%20%20%20%20%22skos%22%3A%20%22http%3A%2F%2Fwww.w3.org%2F2004%2F02%2Fskos%2Fcore%23%22%2C%0A%20%20%20%20%22labels%22%3A%20%22%40nest%22%2C%0A%20%20%20%20%22main_label%22%3A%20%7B%22%40id%22%3A%20%22skos%3AprefLabel%22%7D%2C%0A%20%20%20%20%22other_label%22%3A%20%7B%22%40id%22%3A%20%22skos%3AaltLabel%22%7D%2C%0A%20%20%20%20%22homepage%22%3A%20%7B%22%40id%22%3A%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2Fhomepage%22%2C%20%22%40type%22%3A%20%22%40id%22%7D%0A%20%20%7D%2C%0A%20%20%22%40id%22%3A%20%22http%3A%2F%2Fexample.org%2Fmyresource%22%2C%0A%20%20%22homepage%22%3A%20%22http%3A%2F%2Fexample.org%22%2C%0A%20%20%22labels%22%3A%20%7B%0A%20%20%20%20%20%22main_label%22%3A%20%22This%20is%20the%20main%20label%20for%20my%20resource%22%2C%0A%20%20%20%20%20%22other_label%22%3A%20%22This%20is%20the%20other%20label%22%0A%20%20%7D%0A%7D">Open in playground</a>
    </div>
    <pre class="compacted input selected nohighlight">{
  "@context": {
    <span class="hl-bold">"@version": 1.1</span>,
    "skos": "http://www.w3.org/2004/02/skos/core#",
    <span class="hl-bold">"labels": "@nest"</span>,
    "main_label": {"@id": "skos:prefLabel"},
    "other_label": {"@id": "skos:altLabel"},
    "homepage": {"@id": "http://xmlns.com/foaf/0.1/homepage", "@type": "@id"}
  },
  "@id": "http://example.org/myresource",
  "homepage": "http://example.org",
  "labels": {
     "main_label": "This is the main label for my resource",
     "other_label": "This is the other label"
  }
}</pre>
    <pre class="expanded result nohighlight" data-result-for="Nested properties-compacted">[{
  "@id": "http://example.org/myresource",
  "http://xmlns.com/foaf/0.1/homepage": [
    {"@id": "http://example.org"}
  ],
  "http://www.w3.org/2004/02/skos/core#prefLabel": [
    {"@value": "This is the main label for my resource"}
  ],
  "http://www.w3.org/2004/02/skos/core#altLabel": [
    {"@value": "This is the other label"}
  ]
}]</pre>
    <table class="statements" data-result-for="Nested properties-expanded" data-to-rdf="">
    <thead><tr>
      <th>Subject</th>
      <th>Property</th>
      <th>Value</th>
    </tr></thead>
    <tbody>
    <tr>
      <td>http://example.org/myresource</td>
      <td>foaf:homepage</td>
      <td>http://example.org</td>
    </tr>
    <tr>
      <td>http://example.org/myresource</td>
      <td>skos:prefLabel</td>
      <td>This is the main label for my resource</td>
    </tr>
    <tr>
      <td>http://example.org/myresource</td>
      <td>skos:altLabel</td>
      <td>This is the other label</td>
    </tr>
    </tbody>
    </table>
    <pre class="turtle" data-content-type="text/turtle" data-result-for="Nested properties-expanded" data-to-rdf="" aria-busy="false"><code class="hljs">@prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt; .
@prefix skos: &lt;http://www.w3.org/2004/02/skos/core#&gt; .

&lt;http://example.org/myresource&gt;
  skos:prefLabel "This is the main label for my resource";
  skos:altLabel "This is the other label";
  foaf:homepage &lt;http://example.org&gt; .</code></pre>
  </aside>

  <p>By defining <em>labels</em> using the <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a> <code>@nest</code>,
    a <a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-api/#dfn-json-ld-processor">JSON-LD processor</a> will ignore the nesting created by using the
    <em>labels</em> property and process the contents as if it were declared
    directly within containing object. In this case, the <em>labels</em>
    property is semantically meaningless. Defining it as equivalent to
    <code>@nest</code> causes it to be ignored when expanding, making it
    equivalent to the following:</p>

  <aside class="example ds-selector-tabs" id="example-89-nested-properties-folded-into-containing-object"><div class="marker">
      <a class="self-link" href="#example-89-nested-properties-folded-into-containing-object">Example<bdi> 89</bdi></a><span class="example-title">: Nested properties folded into containing object</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="expanded">Expanded (Result)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="turtle">Turtle</button>
      <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%22skos%22%3A%20%22http%3A%2F%2Fwww.w3.org%2F2004%2F02%2Fskos%2Fcore%23%22%2C%0A%20%20%20%20%22main_label%22%3A%20%7B%22%40id%22%3A%20%22skos%3AprefLabel%22%7D%2C%0A%20%20%20%20%22other_label%22%3A%20%7B%22%40id%22%3A%20%22skos%3AaltLabel%22%7D%2C%0A%20%20%20%20%22homepage%22%3A%20%7B%22%40id%22%3A%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2Fhomepage%22%2C%20%22%40type%22%3A%20%22%40id%22%7D%0A%20%20%7D%2C%0A%20%20%22%40id%22%3A%20%22http%3A%2F%2Fexample.org%2Fmyresource%22%2C%0A%20%20%22homepage%22%3A%20%22http%3A%2F%2Fexample.org%22%2C%0A%20%20%22main_label%22%3A%20%22This%20is%20the%20main%20label%20for%20my%20resource%22%2C%0A%20%20%22other_label%22%3A%20%22This%20is%20the%20other%20label%22%0A%7D">Open in playground</a>
    </div>
    <pre class="compacted input selected nohighlight">{
  "@context": {
    "skos": "http://www.w3.org/2004/02/skos/core#",
    "main_label": {"@id": "skos:prefLabel"},
    "other_label": {"@id": "skos:altLabel"},
    "homepage": {"@id": "http://xmlns.com/foaf/0.1/homepage", "@type": "@id"}
  },
  "@id": "http://example.org/myresource",
  "homepage": "http://example.org",
  <span class="hl-bold">"main_label": "This is the main label for my resource",
  "other_label": "This is the other label"</span>
}</pre>
    <pre class="expanded result nohighlight" data-result-for="Nested properties folded into containing object-compacted">[{
  "@id": "http://example.org/myresource",
  "http://xmlns.com/foaf/0.1/homepage": [
    {"@id": "http://example.org"}
  ],
  "http://www.w3.org/2004/02/skos/core#prefLabel": [
    {"@value": "This is the main label for my resource"}
  ],
  "http://www.w3.org/2004/02/skos/core#altLabel": [
    {"@value": "This is the other label"}
  ]
}]</pre>
    <table class="statements" data-result-for="Nested properties folded into containing object-expanded" data-to-rdf="">
    <thead><tr>
      <th>Subject</th>
      <th>Property</th>
      <th>Value</th>
    </tr></thead>
    <tbody>
    <tr>
      <td>http://example.org/myresource</td>
      <td>foaf:homepage</td>
      <td>http://example.org</td>
    </tr>
    <tr>
      <td>http://example.org/myresource</td>
      <td>skos:prefLabel</td>
      <td>This is the main label for my resource</td>
    </tr>
    <tr>
      <td>http://example.org/myresource</td>
      <td>skos:altLabel</td>
      <td>This is the other label</td>
    </tr>
    </tbody>
    </table>
    <pre class="turtle" data-content-type="text/turtle" data-result-for="Nested properties folded into containing object-expanded" data-to-rdf="" aria-busy="false"><code class="hljs">@prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt; .
@prefix skos: &lt;http://www.w3.org/2004/02/skos/core#&gt; .

&lt;http://example.org/myresource&gt;
  skos:prefLabel "This is the main label for my resource";
  skos:altLabel "This is the other label";
  foaf:homepage &lt;http://example.org&gt; .</code></pre>
  </aside>

  <p>Similarly, <a href="#dfn-term-definition" class="internalDFN" data-link-type="dfn">term definitions</a> may contain a <code>@nest</code> property
    referencing a term aliased to <code>@nest</code> which will cause such
    properties to be nested under that aliased term when compacting.
    In the example below, both <code>main_label</code> and <code>other_label</code> are defined
    with <code>"@nest": "labels"</code>, which will cause them to be serialized under
    <code>labels</code> when compacting.</p>

  <div class="example" id="defining-property-nesting-expanded">
          <div class="marker">
      <a class="self-link" href="#defining-property-nesting-expanded">Example<bdi> 90</bdi></a><span class="example-title">: Defining property nesting - Expanded Input</span>
    </div> <pre class="expanded input preserve nohighlight" data-result-for="Defining property nesting-compacted">[{
  "@id": "http://example.org/myresource",
  "http://xmlns.com/foaf/0.1/homepage": [
    {"@id": "http://example.org"}
  ],
  "http://www.w3.org/2004/02/skos/core#prefLabel": [
    {"@value": "This is the main label for my resource"}
  ],
  "http://www.w3.org/2004/02/skos/core#altLabel": [
    {"@value": "This is the other label"}
  ]
}]</pre>
        </div>

  <div class="example" id="defining-property-nesting-context">
          <div class="marker">
      <a class="self-link" href="#defining-property-nesting-context">Example<bdi> 91</bdi></a><span class="example-title">: Defining property nesting - Context</span>
    </div> <pre class="context preserve nohighlight">{
  "@context": {
    <span class="hl-bold">"@version": 1.1</span>,
    "skos": "http://www.w3.org/2004/02/skos/core#",
    <span class="hl-bold">"labels": "@nest"</span>,
    "main_label": {"@id": "skos:prefLabel", <span class="hl-bold">"@nest": "labels"</span>},
    "other_label": {"@id": "skos:altLabel", <span class="hl-bold">"@nest": "labels"</span>},
    "homepage": {"@id": "http://xmlns.com/foaf/0.1/homepage", "@type": "@id"}
  }
}</pre>
        </div>

  <aside class="example ds-selector-tabs" id="example-92-defining-property-nesting"><div class="marker">
      <a class="self-link" href="#example-92-defining-property-nesting">Example<bdi> 92</bdi></a><span class="example-title">: Defining property nesting</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Result)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="turtle">Turtle</button>
      <a class="playground" data-result-for="#defining-property-nesting-expanded" data-context="#defining-property-nesting-context" data-compact="" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-compacted&amp;json-ld=%5B%7B%0A%20%20%22%40id%22%3A%20%22http%3A%2F%2Fexample.org%2Fmyresource%22%2C%0A%20%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2Fhomepage%22%3A%20%5B%0A%20%20%20%20%7B%22%40id%22%3A%20%22http%3A%2F%2Fexample.org%22%7D%0A%20%20%5D%2C%0A%20%20%22http%3A%2F%2Fwww.w3.org%2F2004%2F02%2Fskos%2Fcore%23prefLabel%22%3A%20%5B%0A%20%20%20%20%7B%22%40value%22%3A%20%22This%20is%20the%20main%20label%20for%20my%20resource%22%7D%0A%20%20%5D%2C%0A%20%20%22http%3A%2F%2Fwww.w3.org%2F2004%2F02%2Fskos%2Fcore%23altLabel%22%3A%20%5B%0A%20%20%20%20%7B%22%40value%22%3A%20%22This%20is%20the%20other%20label%22%7D%0A%20%20%5D%0A%7D%5D&amp;context=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%22%40version%22%3A%201.1%2C%0A%20%20%20%20%22skos%22%3A%20%22http%3A%2F%2Fwww.w3.org%2F2004%2F02%2Fskos%2Fcore%23%22%2C%0A%20%20%20%20%22labels%22%3A%20%22%40nest%22%2C%0A%20%20%20%20%22main_label%22%3A%20%7B%22%40id%22%3A%20%22skos%3AprefLabel%22%2C%20%22%40nest%22%3A%20%22labels%22%7D%2C%0A%20%20%20%20%22other_label%22%3A%20%7B%22%40id%22%3A%20%22skos%3AaltLabel%22%2C%20%22%40nest%22%3A%20%22labels%22%7D%2C%0A%20%20%20%20%22homepage%22%3A%20%7B%22%40id%22%3A%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2Fhomepage%22%2C%20%22%40type%22%3A%20%22%40id%22%7D%0A%20%20%7D%0A%7D">Open in playground</a>
    </div>
    <pre class="compacted result selected nohighlight">{
  "@context": {
    <span class="hl-bold">"@version": 1.1</span>,
    "skos": "http://www.w3.org/2004/02/skos/core#",
    <span class="hl-bold">"labels": "@nest"</span>,
    "main_label": {"@id": "skos:prefLabel", <span class="hl-bold">"@nest": "labels"</span>},
    "other_label": {"@id": "skos:altLabel", <span class="hl-bold">"@nest": "labels"</span>},
    "homepage": {"@id": "http://xmlns.com/foaf/0.1/homepage", "@type": "@id"}
  },
  "@id": "http://example.org/myresource",
  "homepage": "http://example.org",
  <span class="hl-bold">"labels": {
     "main_label": "This is the main label for my resource",
     "other_label": "This is the other label"
  }</span>
}</pre>
    <table class="statements" data-result-for="Defining property nesting - Expanded Input" data-to-rdf="">
    <thead><tr>
      <th>Subject</th>
      <th>Property</th>
      <th>Value</th>
    </tr></thead>
    <tbody>
    <tr>
      <td>http://example.org/myresource</td>
      <td>foaf:homepage</td>
      <td>http://example.org</td>
    </tr>
    <tr>
      <td>http://example.org/myresource</td>
      <td>skos:prefLabel</td>
      <td>This is the main label for my resource</td>
    </tr>
    <tr>
      <td>http://example.org/myresource</td>
      <td>skos:altLabel</td>
      <td>This is the other label</td>
    </tr>
    </tbody>
    </table>
    <pre class="turtle" data-content-type="text/turtle" data-result-for="Defining property nesting - Expanded Input" data-to-rdf="" aria-busy="false"><code class="hljs">@prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt; .
@prefix skos: &lt;http://www.w3.org/2004/02/skos/core#&gt; .

&lt;http://example.org/myresource&gt;
  skos:prefLabel "This is the main label for my resource";
  skos:altLabel "This is the other label";
  foaf:homepage &lt;http://example.org&gt; .</code></pre>
  </aside>

  <div class="note" role="note" id="issue-container-generatedID-34"><div role="heading" class="note-title marker" id="h-note-31" aria-level="4"><span>Note</span></div><p class=""><a href="#dfn-nested-property" class="internalDFN" data-link-type="dfn">Nested properties</a> are a new feature in JSON-LD 1.1.</p></div>
</section>

<section class="informative" id="embedding"><h3 id="x4-5-embedding"><bdi class="secno">4.5 </bdi>Embedding<a class="self-link" aria-label="§" href="#embedding"></a></h3><p><em>This section is non-normative.</em></p>

  <p><dfn data-dfn-type="dfn" id="dfn-embedding">Embedding</dfn> is a JSON-LD feature that allows an author to
    use <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a> as
    <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-property">property</a> values. This is a commonly used mechanism for
    creating a parent-child relationship between two <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-node">nodes</a>.</p>

  <p>Without embedding, <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a> can be linked by referencing the
    identifier of another <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a>. For example:</p>

  <aside class="example ds-selector-tabs" id="example-93-referencing-node-objects"><div class="marker">
      <a class="self-link" href="#example-93-referencing-node-objects">Example<bdi> 93</bdi></a><span class="example-title">: Referencing node objects</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="expanded">Expanded (Result)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="turtle">Turtle</button>
      <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%22%40vocab%22%3A%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2F%22%2C%0A%20%20%20%20%22knows%22%3A%20%7B%22%40type%22%3A%20%22%40id%22%7D%0A%20%20%7D%2C%0A%20%20%22%40graph%22%3A%20%5B%7B%0A%20%20%20%20%22name%22%3A%20%22Manu%20Sporny%22%2C%0A%20%20%20%20%22%40type%22%3A%20%22Person%22%2C%0A%20%20%20%20%22knows%22%3A%20%22https%3A%2F%2Fgreggkellogg.net%2Ffoaf%23me%22%0A%20%20%7D%2C%20%7B%0A%20%20%20%20%22%40id%22%3A%20%22https%3A%2F%2Fgreggkellogg.net%2Ffoaf%23me%22%2C%0A%20%20%20%20%22%40type%22%3A%20%22Person%22%2C%0A%20%20%20%20%22name%22%3A%20%22Gregg%20Kellogg%22%0A%20%20%7D%5D%0A%7D">Open in playground</a>
    </div>
    <pre class="compacted input selected nohighlight">{
  "@context": {
    "@vocab": "http://xmlns.com/foaf/0.1/",
    <span class="hl-bold">"knows": {"@type": "@id"}</span>
  },
  "@graph": [{
    "name": "Manu Sporny",
    "@type": "Person",
    <span class="hl-bold">"knows": "https://greggkellogg.net/foaf#me"</span>
  }, {
    "@id": "https://greggkellogg.net/foaf#me",
    "@type": "Person",
    "name": "Gregg Kellogg"
  }]
}</pre>
    <pre class="expanded result nohighlight" data-result-for="Referencing node objects-compacted">[{
  "@type": ["http://xmlns.com/foaf/0.1/Person"],
  "http://xmlns.com/foaf/0.1/knows": [
    {"@id": "https://greggkellogg.net/foaf#me"}
  ],
  "http://xmlns.com/foaf/0.1/name": [
    {"@value": "Manu Sporny"}
  ]
}, {
  "@id": "https://greggkellogg.net/foaf#me",
  "@type": ["http://xmlns.com/foaf/0.1/Person"],
  "http://xmlns.com/foaf/0.1/name": [
    {"@value": "Gregg Kellogg"}
  ]
}]</pre>
    <table class="statements" data-result-for="Referencing node objects-expanded" data-to-rdf="">
    <thead><tr>
      <th>Subject</th>
      <th>Property</th>
      <th>Value</th>
    </tr></thead>
    <tbody>
    <tr>
      <td>_:b0</td>
      <td>rdf:type</td>
      <td>foaf:Person</td>
    </tr>
    <tr>
      <td>_:b0</td>
      <td>foaf:name</td>
      <td>Manu Sporny</td>
    </tr>
    <tr>
      <td>_:b0</td>
      <td>foaf:knows</td>
      <td>https://greggkellogg.net/foaf#me</td>
    </tr>
    <tr>
      <td>https://greggkellogg.net/foaf#me</td>
      <td>rdf:type</td>
      <td>foaf:Person</td>
    </tr>
    <tr>
      <td>https://greggkellogg.net/foaf#me</td>
      <td>foaf:name</td>
      <td>Gregg Kellogg</td>
    </tr>
    </tbody>
    </table>
    <pre class="turtle" data-content-type="text/turtle" data-result-for="Referencing node objects-expanded" data-to-rdf="" aria-busy="false"><code class="hljs">@prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt; .

[
  a foaf:Person;
  foaf:name "Manu Sporny";
  foaf:knows &lt;https://greggkellogg.net/foaf#me&gt;
] .

&lt;https://greggkellogg.net/foaf#me&gt; a foaf:Person;
  foaf:name "Gregg Kellogg" .</code></pre>
  </aside>

  <p>The previous example describes two <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a>, for Manu and Gregg, with
    the <code>knows</code> property defined to treat string values as identifiers.
    <a href="#dfn-embedding" class="internalDFN" data-link-type="dfn">Embedding</a> allows the <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> for Gregg to be <em>embedded</em> as a value
    of the <code>knows</code> property:</p>

  <aside class="example ds-selector-tabs" id="example-94-embedding-a-node-object-as-property-value-of-another-node-object"><div class="marker">
      <a class="self-link" href="#example-94-embedding-a-node-object-as-property-value-of-another-node-object">Example<bdi> 94</bdi></a><span class="example-title">: Embedding a node object as property value of another node object</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="expanded">Expanded (Result)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="turtle">Turtle</button>
      <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%22%40vocab%22%3A%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2F%22%0A%20%20%7D%2C%0A%20%20%22%40type%22%3A%20%22Person%22%2C%0A%20%20%22name%22%3A%20%22Manu%20Sporny%22%2C%0A%20%20%22knows%22%3A%20%7B%0A%20%20%20%20%22%40id%22%3A%20%22https%3A%2F%2Fgreggkellogg.net%2Ffoaf%23me%22%2C%0A%20%20%20%20%22%40type%22%3A%20%22Person%22%2C%0A%20%20%20%20%22name%22%3A%20%22Gregg%20Kellogg%22%0A%20%20%7D%0A%7D">Open in playground</a>
    </div>
    <pre class="compacted input selected nohighlight">{
  "@context": {
    "@vocab": "http://xmlns.com/foaf/0.1/"
  },
  "@type": "Person",
  "name": "Manu Sporny",
  <span class="hl-bold">"knows": {</span>
    "@id": "https://greggkellogg.net/foaf#me",
    "@type": "Person",
    "name": "Gregg Kellogg"
  <span class="hl-bold">}</span>
}</pre>
    <pre class="expanded result nohighlight" data-result-for="Embedding a node object as property value of another node object-compacted">[{
  "@type": ["http://xmlns.com/foaf/0.1/Person"],
  "http://xmlns.com/foaf/0.1/knows": [{
    "@id": "https://greggkellogg.net/foaf#me",
    "@type": ["http://xmlns.com/foaf/0.1/Person"],
    "http://xmlns.com/foaf/0.1/name": [
      {"@value": "Gregg Kellogg"}
    ]
  }],
  "http://xmlns.com/foaf/0.1/name": [
    {"@value": "Manu Sporny"}
  ]
}]</pre>
    <table class="statements" data-result-for="Embedding a node object as property value of another node object-expanded" data-to-rdf="">
    <thead><tr>
      <th>Subject</th>
      <th>Property</th>
      <th>Value</th>
    </tr></thead>
    <tbody>
    <tr>
      <td>_:b0</td>
      <td>rdf:type</td>
      <td>foaf:Person</td>
    </tr>
    <tr>
      <td>_:b0</td>
      <td>foaf:name</td>
      <td>Manu Sporny</td>
    </tr>
    <tr>
      <td>_:b0</td>
      <td>foaf:knows</td>
      <td>https://greggkellogg.net/foaf#me</td>
    </tr>
    <tr>
      <td>https://greggkellogg.net/foaf#me</td>
      <td>rdf:type</td>
      <td>foaf:Person</td>
    </tr>
    <tr>
      <td>https://greggkellogg.net/foaf#me</td>
      <td>foaf:name</td>
      <td>Gregg Kellogg</td>
    </tr>
    </tbody>
    </table>
    <pre class="turtle" data-content-type="text/turtle" data-result-for="Embedding a node object as property value of another node object-expanded" data-to-rdf="" aria-busy="false"><code class="hljs">@prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt; .

[
  a foaf:Person;
  foaf:name "Manu Sporny";
  foaf:knows &lt;https://greggkellogg.net/foaf#me&gt;
] .

&lt;https://greggkellogg.net/foaf#me&gt; a foaf:Person;
  foaf:name "Gregg Kellogg" .</code></pre>
  </aside>

  <p>A <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a>, like the one used above, may be used in
    any value position in the body of a JSON-LD document.</p>

  <p>While it is considered a best practice to identify nodes in a graph,
    at times this is impractical. In the data model, nodes without an explicit
    identifier are called <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node">blank nodes</a>, which can be represented in a
    serialization such as JSON-LD using a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node-identifier">blank node identifier</a>. In the
    previous example, the top-level node for Manu does not have an identifier,
    and does not need one to describe it within the data model. However, if we
    were to want to describe a <em>knows</em> relationship from Gregg to Manu,
    we would need to introduce a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node-identifier">blank node identifier</a>
    (here <code>_:b0</code>).</p>

  <aside class="example ds-selector-tabs" id="example-95-referencing-an-unidentified-node"><div class="marker">
      <a class="self-link" href="#example-95-referencing-an-unidentified-node">Example<bdi> 95</bdi></a><span class="example-title">: Referencing an unidentified node</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="expanded">Expanded (Result)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="turtle">Turtle</button>
      <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%22%40vocab%22%3A%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2F%22%0A%20%20%7D%2C%0A%20%20%22%40id%22%3A%20%22_%3Ab0%22%2C%0A%20%20%22%40type%22%3A%20%22Person%22%2C%0A%20%20%22name%22%3A%20%22Manu%20Sporny%22%2C%0A%20%20%22knows%22%3A%20%7B%0A%20%20%20%20%22%40id%22%3A%20%22https%3A%2F%2Fgreggkellogg.net%2Ffoaf%23me%22%2C%0A%20%20%20%20%22%40type%22%3A%20%22Person%22%2C%0A%20%20%20%20%22name%22%3A%20%22Gregg%20Kellogg%22%2C%0A%20%20%20%20%22knows%22%3A%20%7B%22%40id%22%3A%20%22_%3Ab0%22%7D%0A%20%20%7D%0A%7D">Open in playground</a>
    </div>
    <pre class="compacted input selected nohighlight">{
  "@context": {
    "@vocab": "http://xmlns.com/foaf/0.1/"
  },
  <span class="hl-bold">"@id": "_:b0",</span>
  "@type": "Person",
  "name": "Manu Sporny",
  "knows": {
    "@id": "https://greggkellogg.net/foaf#me",
    "@type": "Person",
    "name": "Gregg Kellogg",
    <span class="hl-bold">"knows": {"@id": "_:b0"}</span>
  }
}</pre>
    <pre class="expanded result nohighlight" data-result-for="Referencing an unidentified node-compacted">[{
  <span class="hl-bold">"@id": "_:b0"</span>,
  "@type": ["http://xmlns.com/foaf/0.1/Person"],
  "http://xmlns.com/foaf/0.1/knows": [{
    "@id": "https://greggkellogg.net/foaf#me",
    "@type": ["http://xmlns.com/foaf/0.1/Person"],
    "http://xmlns.com/foaf/0.1/name": [
      {"@value": "Gregg Kellogg"}
    ],
    <span class="hl-bold">"http://xmlns.com/foaf/0.1/knows": [
      {"@id": "_:b0"}
    ]</span>
  }],
  "http://xmlns.com/foaf/0.1/name": [
    {"@value": "Manu Sporny"}
  ]
}]</pre>
    <table class="statements" data-result-for="Referencing an unidentified node-expanded" data-to-rdf="">
    <thead><tr>
      <th>Subject</th>
      <th>Property</th>
      <th>Value</th>
    </tr></thead>
    <tbody>
    <tr>
      <td>_:b0</td>
      <td>rdf:type</td>
      <td>foaf:Person</td>
    </tr>
    <tr>
      <td>_:b0</td>
      <td>foaf:name</td>
      <td>Manu Sporny</td>
    </tr>
    <tr>
      <td>_:b0</td>
      <td>foaf:knows</td>
      <td>https://greggkellogg.net/foaf#me</td>
    </tr>
    <tr>
      <td>https://greggkellogg.net/foaf#me</td>
      <td>rdf:type</td>
      <td>foaf:Person</td>
    </tr>
    <tr>
      <td>https://greggkellogg.net/foaf#me</td>
      <td>foaf:name</td>
      <td>Gregg Kellogg</td>
    </tr>
    <tr>
      <td>https://greggkellogg.net/foaf#me</td>
      <td>foaf:knows</td>
      <td>_:b0</td>
    </tr>
    </tbody>
    </table>
    <pre class="turtle nohighlight" data-content-type="text/turtle" data-result-for="Referencing an unidentified node-expanded" data-to-rdf="">@prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt; .

<span class="hl-bold">_:b0</span> a foaf:Person;
  foaf:name "Manu Sporny";
  foaf:knows &lt;https://greggkellogg.net/foaf#me&gt; .

&lt;https://greggkellogg.net/foaf#me&gt; a foaf:Person;
  foaf:name "Gregg Kellogg";
  <span class="hl-bold">foaf:knows _:b0</span> .</pre>
  </aside>

  <p><a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node-identifier">Blank node identifiers</a> may be automatically introduced by algorithms such as <a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-api/#dfn-flattened">flattening</a>, but they are also useful for authors to describe such relationships directly.</p>

<section class="informative" id="identifying-blank-nodes"><h4 id="x4-5-1-identifying-blank-nodes"><bdi class="secno">4.5.1 </bdi>Identifying Blank Nodes<a class="self-link" aria-label="§" href="#identifying-blank-nodes"></a></h4><p><em>This section is non-normative.</em></p>

  <p>At times, it becomes necessary to be able to express information without
    being able to uniquely identify the <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-node">node</a> with an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>.
    This type of node is called a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node">blank node</a>. JSON-LD does not require
    all nodes to be identified using <code>@id</code>. However, some graph topologies
    may require identifiers to be serializable. Graphs containing loops, e.g., cannot
    be serialized using <a href="#dfn-embedding" class="internalDFN" data-link-type="dfn">embedding</a> alone, <code>@id</code> must be used to connect the nodes.
    In these situations, one can use <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node-identifier">blank node identifiers</a>,
    which look like <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">IRIs</a> using an underscore (<code>_</code>)
    as scheme. This allows one to reference the node locally within the document, but
    makes it impossible to reference the node from an external document. The
    <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node-identifier">blank node identifier</a> is scoped to the document in which it is used.</p>

  <aside class="example ds-selector-tabs" id="example-96-specifying-a-local-blank-node-identifier"><div class="marker">
      <a class="self-link" href="#example-96-specifying-a-local-blank-node-identifier">Example<bdi> 96</bdi></a><span class="example-title">: Specifying a local blank node identifier</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="expanded">Expanded (Result)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="turtle">Turtle</button>
      <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%22http%3A%2F%2Fschema.org%2F%22%2C%0A%20%20%20%0A%20%20%20%22%40id%22%3A%20%22_%3An1%22%2C%0A%20%20%20%22name%22%3A%20%22Secret%20Agent%201%22%2C%0A%20%20%20%22knows%22%3A%20%7B%0A%20%20%20%20%20%22name%22%3A%20%22Secret%20Agent%202%22%2C%0A%20%20%20%20%20%22knows%22%3A%20%7B%20%22%40id%22%3A%20%22_%3An1%22%20%7D%0A%20%20%20%7D%0A%7D">Open in playground</a>
    </div>
    <pre class="compacted input selected nohighlight">{
  "@context": "http://schema.org/",
   <span class="comment">...</span>
   "@id": "<span class="hl-bold">_:n1</span>",
   "name": "Secret Agent 1",
   "knows": {
     "name": "Secret Agent 2",
     "knows": { "@id": "<span class="hl-bold">_:n1</span>" }
   }
}</pre>
    <pre class="expanded result nohighlight" data-result-for="Specifying a local blank node identifier-compacted">[{
  <span class="hl-bold">"@id": "_:n1"</span>,
  "http://schema.org/name": [{"@value": "Secret Agent 1"}],
  "http://schema.org/knows": [{
    "http://schema.org/name": [{"@value": "Secret Agent 2"}],
    <span class="hl-bold">"http://schema.org/knows": [{"@id": "_:n1"}]</span>
  }]
}]</pre>
    <table class="statements" data-result-for="Specifying a local blank node identifier-expanded" data-to-rdf="">
    <thead><tr>
      <th>Subject</th>
      <th>Property</th>
      <th>Value</th>
    </tr></thead>
    <tbody>
    <tr>
      <td>_:b0</td>
      <td>schema:name</td>
      <td>Secret Agent 1</td>
    </tr>
    <tr>
      <td>_:b0</td>
      <td>schema:knows</td>
      <td>_:b1</td>
    </tr>
    <tr>
      <td>_:b1</td>
      <td>schema:name</td>
      <td>Secret Agent 2</td>
    </tr>
    <tr>
      <td>_:b1</td>
      <td>schema:knows</td>
      <td>_:b0</td>
    </tr>
    </tbody>
    </table>
    <pre class="turtle nohighlight" data-content-type="text/turtle" data-result-for="Specifying a local blank node identifier-expanded" data-to-rdf="">@prefix schema: &lt;http://schema.org/&gt; .

<span class="hl-bold">_:b0</span> schema:name "Secret Agent 1";
  schema:knows _:b1 .

_:b1 schema:name "Secret Agent 2";
  <span class="hl-bold">schema:knows _:b0</span> .</pre>
  </aside>

  <p>The example above contains information about two secret agents that cannot be identified
    with an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>. While expressing that <em>agent&nbsp;1</em> knows <em>agent&nbsp;2</em>
    is possible without using <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node-identifier">blank node identifiers</a>,
    it is necessary to assign <em>agent&nbsp;1</em> an identifier so that it can be referenced
    from <em>agent&nbsp;2</em>.</p>
  <p>It is worth noting that blank node identifiers may be relabeled during processing.
    If a developer finds that they refer to the <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node">blank node</a> more than once,
    they should consider naming the node using a dereferenceable <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> so that
    it can also be referenced from other documents.</p>
</section>
</section>

<section class="informative" id="indexed-values"><h3 id="x4-6-indexed-values"><bdi class="secno">4.6 </bdi>Indexed Values<a class="self-link" aria-label="§" href="#indexed-values"></a></h3><p><em>This section is non-normative.</em></p>

<p>Sometimes multiple property values need to be accessed
  in a more direct fashion than iterating though multiple array values. JSON-LD
  provides an indexing mechanism to allow the use of an intermediate <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a>
  to associate specific indexes with associated values.</p>

<dl>
  <dt>Data Indexing</dt><dd>As described in <a href="#data-indexing" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">4.6.1 </bdi>Data Indexing</a>,
    data indexing allows an arbitrary key to reference a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-node">node</a> or value.</dd>
  <dt>Language Indexing</dt><dd>As described in <a href="#language-indexing" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">4.6.2 </bdi>Language Indexing</a>,
    language indexing allows a language to reference a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">string</a> and be
    interpreted as the language associated with that string.</dd>
  <dt>Node Identifier Indexing</dt><dd>As described in <a href="#node-identifier-indexing" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">4.6.3 </bdi>Node Identifier Indexing</a>,
    node identifier indexing allows an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> to reference a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-node">node</a>
    and be interpreted as the identifier of that <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-node">node</a>.</dd>
  <dt>Node Type Indexing</dt><dd>As described in <a href="#node-type-indexing" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">4.6.4 </bdi>Node Type Indexing</a>,
    node type indexing allows an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> to reference a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-node">node</a>
    and be interpreted as a type of that <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-node">node</a>.</dd>
</dl>

<p>See <a href="#named-graphs" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">4.9 </bdi>Named Graphs</a> for other uses of indexing in JSON-LD.</p>

<section class="informative" id="data-indexing"><h4 id="x4-6-1-data-indexing"><bdi class="secno">4.6.1 </bdi>Data Indexing<a class="self-link" aria-label="§" href="#data-indexing"></a></h4><p><em>This section is non-normative.</em></p>

  <p>Databases are typically used to make access to
    data more efficient. Developers often extend this sort of functionality into
    their application data to deliver similar performance gains.
    This data may have no meaning from a Linked Data standpoint, but is
    still useful for an application.</p>

  <p>JSON-LD introduces the notion of <a href="#dfn-index-map" class="internalDFN" data-link-type="dfn">index maps</a>
    that can be used to structure data into a form that is
    more efficient to access. The data indexing feature allows an author to
    structure data using a simple key-value map where the keys do not map
    to <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">IRIs</a>. This enables direct access to data
    instead of having to scan an array in search of a specific item.
    In JSON-LD such data can be specified by associating the
    <code>@index</code> <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a> with a
    <code>@container</code> declaration in the context:</p>

  <aside class="example ds-selector-tabs" id="example-97-indexing-data-in-json-ld"><div class="marker">
      <a class="self-link" href="#example-97-indexing-data-in-json-ld">Example<bdi> 97</bdi></a><span class="example-title">: Indexing data in JSON-LD</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="expanded">Expanded (Result)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="turtle">Turtle</button>
      <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%22schema%22%3A%20%22http%3A%2F%2Fschema.org%2F%22%2C%0A%20%20%20%20%22name%22%3A%20%22schema%3Aname%22%2C%0A%20%20%20%20%22body%22%3A%20%22schema%3AarticleBody%22%2C%0A%20%20%20%20%22athletes%22%3A%20%7B%0A%20%20%20%20%20%20%22%40id%22%3A%20%22schema%3Aathlete%22%2C%0A%20%20%20%20%20%20%22%40container%22%3A%20%22%40index%22%0A%20%20%20%20%7D%2C%0A%20%20%20%20%22position%22%3A%20%22schema%3AjobTitle%22%0A%20%20%7D%2C%0A%20%20%22%40id%22%3A%20%22http%3A%2F%2Fexample.com%2F%22%2C%0A%20%20%22%40type%22%3A%20%22schema%3ASportsTeam%22%2C%0A%20%20%22name%22%3A%20%22San%20Francisco%20Giants%22%2C%0A%20%20%22athletes%22%3A%20%7B%0A%20%20%20%20%22catcher%22%3A%20%7B%0A%20%20%20%20%20%20%22%40type%22%3A%20%22schema%3APerson%22%2C%0A%20%20%20%20%20%20%22name%22%3A%20%22Buster%20Posey%22%2C%0A%20%20%20%20%20%20%22position%22%3A%20%22Catcher%22%0A%20%20%20%20%7D%2C%0A%20%20%20%20%22pitcher%22%3A%20%7B%0A%20%20%20%20%20%20%22%40type%22%3A%20%22schema%3APerson%22%2C%0A%20%20%20%20%20%20%22name%22%3A%20%22Madison%20Bumgarner%22%2C%0A%20%20%20%20%20%20%22position%22%3A%20%22Starting%20Pitcher%22%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D">Open in playground</a>
    </div>
    <pre class="compacted input selected nohighlight">{
  "@context": {
    "schema": "http://schema.org/",
    "name": "schema:name",
    "body": "schema:articleBody",
    "athletes": {
      "@id": "schema:athlete",
      <span class="hl-bold">"@container": "@index"</span>
    },
    "position": "schema:jobTitle"
  },
  "@id": "http://example.com/",
  "@type": "schema:SportsTeam",
  "name": "San Francisco Giants",
  <span class="hl-bold">"athletes": {
    "catcher": {
      "@type": "schema:Person",
      "name": "Buster Posey",
      "position": "Catcher"
    },
    "pitcher": {
      "@type": "schema:Person",
      "name": "Madison Bumgarner",
      "position": "Starting Pitcher"
    }</span><span class="comment">,
    ....</span>
  }
}</pre>
    <pre class="expanded result nohighlight" data-result-for="Indexing data in JSON-LD-compacted">[{
  "@id": "http://example.com/",
  "@type": ["http://schema.org/SportsTeam"],
  "http://schema.org/name": [{"@value": "San Francisco Giants"}],
  <span class="hl-bold">"http://schema.org/athlete": [{
    "@type": ["http://schema.org/Person"],
    "http://schema.org/name": [{"@value": "Buster Posey"}],
    "http://schema.org/jobTitle": [{"@value": "Catcher"}],
    "@index": "catcher"
  }, {
    "@type": ["http://schema.org/Person"],
    "http://schema.org/name": [{"@value": "Madison Bumgarner"}],
    "http://schema.org/jobTitle": [{"@value": "Starting Pitcher"}],
    "@index": "pitcher"
  }<span class="comment">,
  ....</span>
  ]</span>
}]</pre>
    <table class="statements" data-result-for="Indexing data in JSON-LD-expanded" data-to-rdf="">
    <thead><tr>
      <th>Subject</th>
      <th>Property</th>
      <th>Value</th>
      <th>Value Type</th>
    </tr></thead>
    <tbody>
      <tr><td>http://example.com/</td><td>rdf:type</td><td>schema:SportsTeam</td></tr>
      <tr><td>http://example.com/</td><td>schema:name</td><td>San Francisco Giants</td></tr>
      <tr><td>_:b0</td><td>rdf:type</td><td>schema:Person</td></tr>
      <tr><td>_:b0</td><td>schema:name</td><td>Buster Posey</td></tr>
      <tr><td>_:b0</td><td>schema:jobTitle</td><td>Catcher</td></tr>
      <tr><td>http://example.com/</td><td>schema:athlete</td><td>_:b0</td></tr>
      <tr><td>_:b1</td><td>rdf:type</td><td>schema:Person</td></tr>
      <tr><td>_:b1</td><td>schema:name</td><td>Madison Bumgarner</td></tr>
      <tr><td>_:b1</td><td>schema:jobTitle</td><td>Starting Pitcher</td></tr>
      <tr><td>http://example.com/</td><td>schema:athlete</td><td>_:b1</td></tr>
    </tbody>
    </table>
    <pre class="turtle nohighlight" data-content-type="text/turtle" data-result-for="Indexing data in JSON-LD-expanded" data-to-rdf="">@prefix schema: &lt;http://schema.org/&gt; .

&lt;http://example.com/&gt; a schema:SportsTeam;
  schema:name "San Francisco Giants";
  schema:athlete [
    a schema:Person;
    schema:jobTitle "Catcher";
    schema:name "Buster Posey"
  ], [
    a schema:Person;
    schema:jobTitle "Starting Pitcher";
    schema:name "Madison Bumgarner"
  ]<span class="comment">,
  ....</span>
  .</pre>
  </aside>

  <p>In the example above, the <strong>athletes</strong> <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a> has
    been marked as an <a href="#dfn-index-map" class="internalDFN" data-link-type="dfn">index map</a>.
    The <strong>catcher</strong> and <strong>pitcher</strong> keys will be ignored  semantically,
    but preserved syntactically, by the <a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-api/#dfn-json-ld-processor">JSON-LD Processor</a>.
    If used in JavaScript, this can allow a developer to access a particular athlete using the
    following code snippet: <code>obj.athletes.pitcher</code>.</p>

  <p>The interpretation of the data is expressed in the statements table.
    <strong>Note how the index keys do not appear in the statements</strong>,
    but would continue to exist if the document were compacted or
    expanded (see <a class="sectionRef sec-ref" href="#compacted-document-form">§&nbsp;<bdi class="secno">5.2 </bdi>Compacted Document Form</a> and
    <a class="sectionRef sec-ref" href="#expanded-document-form">§&nbsp;<bdi class="secno">5.1 </bdi>Expanded Document Form</a>) using a <a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-api/#dfn-json-ld-processor">JSON-LD processor</a>.</p>

  <div class="warning" id="issue-container-generatedID-35"><div role="heading" class="warning-title marker" id="h-warning-2" aria-level="5"><span>Warning</span></div><p class="">As data indexes are not preserved when round-tripping to RDF;
    this feature should be used judiciously.
    Often, other indexing mechanisms, which are preserved, are more appropriate.</p></div>

  <p class="changed">The value of <code>@container</code> can also
    be an array containing both <code>@index</code> and <code>@set</code>.
    When <em>compacting</em>, this ensures that a <a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-api/#dfn-json-ld-processor">JSON-LD Processor</a> will use
    the <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a> form for all values of indexes.</p>

  <p class="changed">Unless the <a href="#dfn-processing-mode" class="internalDFN" data-link-type="dfn">processing mode</a> is set to <code>json-ld-1.0</code>,
    the special index <code>@none</code> is used for indexing
    data which does not have an associated index, which is useful to maintain
    a normalized representation.</p>

  <aside class="example ds-selector-tabs changed" id="example-98-indexing-data-using-none"><div class="marker">
      <a class="self-link" href="#example-98-indexing-data-using-none">Example<bdi> 98</bdi></a><span class="example-title">: Indexing data using @none</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="expanded">Expanded (Result)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="turtle">Turtle</button>
      <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%20%22%40version%22%3A%201.1%2C%0A%20%20%20%20%22schema%22%3A%20%22http%3A%2F%2Fschema.org%2F%22%2C%0A%20%20%20%20%22name%22%3A%20%22schema%3Aname%22%2C%0A%20%20%20%20%22body%22%3A%20%22schema%3AarticleBody%22%2C%0A%20%20%20%20%22athletes%22%3A%20%7B%0A%20%20%20%20%20%20%22%40id%22%3A%20%22schema%3Aathlete%22%2C%0A%20%20%20%20%20%20%22%40container%22%3A%20%22%40index%22%0A%20%20%20%20%7D%2C%0A%20%20%20%20%22position%22%3A%20%22schema%3AjobTitle%22%0A%20%20%7D%2C%0A%20%20%22%40id%22%3A%20%22http%3A%2F%2Fexample.com%2F%22%2C%0A%20%20%22%40type%22%3A%20%22schema%3ASportsTeam%22%2C%0A%20%20%22name%22%3A%20%22San%20Francisco%20Giants%22%2C%0A%20%20%22athletes%22%3A%20%7B%0A%20%20%20%20%22catcher%22%3A%20%7B%0A%20%20%20%20%20%20%22%40type%22%3A%20%22schema%3APerson%22%2C%0A%20%20%20%20%20%20%22name%22%3A%20%22Buster%20Posey%22%2C%0A%20%20%20%20%20%20%22position%22%3A%20%22Catcher%22%0A%20%20%20%20%7D%2C%0A%20%20%20%20%22pitcher%22%3A%20%7B%0A%20%20%20%20%20%20%22%40type%22%3A%20%22schema%3APerson%22%2C%0A%20%20%20%20%20%20%22name%22%3A%20%22Madison%20Bumgarner%22%2C%0A%20%20%20%20%20%20%22position%22%3A%20%22Starting%20Pitcher%22%0A%20%20%20%20%7D%2C%0A%20%20%20%20%22%40none%22%3A%20%7B%0A%20%20%20%20%20%20%22name%22%3A%20%22Lou%20Seal%22%2C%0A%20%20%20%20%20%20%22position%22%3A%20%22Mascot%22%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D">Open in playground</a>
    </div>
    <pre class="compacted input selected nohighlight">{
  "@context": {
     <span class="hl-bold">"@version": 1.1,</span>
    "schema": "http://schema.org/",
    "name": "schema:name",
    "body": "schema:articleBody",
    "athletes": {
      "@id": "schema:athlete",
      "@container": "@index"
    },
    "position": "schema:jobTitle"
  },
  "@id": "http://example.com/",
  "@type": "schema:SportsTeam",
  "name": "San Francisco Giants",
  "athletes": {
    "catcher": {
      "@type": "schema:Person",
      "name": "Buster Posey",
      "position": "Catcher"
    },
    "pitcher": {
      "@type": "schema:Person",
      "name": "Madison Bumgarner",
      "position": "Starting Pitcher"
    },
    <span class="hl-bold">"@none": {
      "name": "Lou Seal",
      "position": "Mascot"
    }</span><span class="comment">,
    ....</span>
  }
}</pre>
    <pre class="expanded result nohighlight" data-result-for="Indexing data using @none-compacted">[{
  "@id": "http://example.com/",
  "@type": ["http://schema.org/SportsTeam"],
  "http://schema.org/name": [{"@value": "San Francisco Giants"}],
  "http://schema.org/athlete": [{
    "@type": ["http://schema.org/Person"],
    "http://schema.org/name": [{"@value": "Buster Posey"}],
    "http://schema.org/jobTitle": [{"@value": "Catcher"}],
    "@index": "catcher"
  }, {
    "@type": ["http://schema.org/Person"],
    "http://schema.org/name": [{"@value": "Madison Bumgarner"}],
    "http://schema.org/jobTitle": [{"@value": "Starting Pitcher"}],
    "@index": "pitcher"
  }<span class="hl-bold">, {
    "http://schema.org/name": [{"@value": "Lou Seal"}],
    "http://schema.org/jobTitle": [{"@value": "Mascot"}]
  }</span><span class="comment">,
  ....</span>
  ]
}]</pre>
    <table class="statements" data-result-for="Indexing data using @none-expanded" data-to-rdf="">
    <thead><tr>
      <th>Subject</th>
      <th>Property</th>
      <th>Value</th>
      <th>Value Type</th>
    </tr></thead>
    <tbody>
      <tr><td>http://example.com/</td><td>rdf:type</td><td>schema:SportsTeam</td></tr>
      <tr><td>http://example.com/</td><td>schema:name</td><td>San Francisco Giants</td></tr>
      <tr><td>_:b0</td><td>rdf:type</td><td>schema:Person</td></tr>
      <tr><td>_:b0</td><td>schema:name</td><td>Buster Posey</td></tr>
      <tr><td>_:b0</td><td>schema:jobTitle</td><td>Catcher</td></tr>
      <tr><td>http://example.com/</td><td>schema:athlete</td><td>_:b0</td></tr>
      <tr><td>_:b1</td><td>rdf:type</td><td>schema:Person</td></tr>
      <tr><td>_:b1</td><td>schema:name</td><td>Madison Bumgarner</td></tr>
      <tr><td>_:b1</td><td>schema:jobTitle</td><td>Starting Pitcher</td></tr>
      <tr><td>http://example.com/</td><td>schema:athlete</td><td>_:b1</td></tr>
      <tr><td>_:b2</td><td>schema:name</td><td>Lou Seal</td></tr>
      <tr><td>_:b2</td><td>schema:jobTitle</td><td>Mascot</td></tr>
      <tr><td>http://example.com/</td><td>schema:athlete</td><td>_:b2</td></tr>
    </tbody>
    </table>
    <pre class="turtle nohighlight" data-content-type="text/turtle" data-result-for="Indexing data using @none-expanded" data-to-rdf="">@prefix schema: &lt;http://schema.org/&gt; .

&lt;http://example.com/&gt; a schema:SportsTeam;
  schema:name "San Francisco Giants";
  schema:athlete [
    a schema:Person;
    schema:jobTitle "Catcher";
    schema:name "Buster Posey"
  ], [
    a schema:Person;
    schema:jobTitle "Starting Pitcher";
    schema:name "Madison Bumgarner"
  ], <span class="hl-bold">[
    schema:jobTitle "Mascot";
    schema:name "Lou Seal"
  ]</span><span class="comment">,
  ....</span>
  .</pre>
  </aside>

  <section class="informative changed" id="property-based-data-indexing"><h5 id="x4-6-1-1-property-based-data-indexing"><bdi class="secno">4.6.1.1 </bdi>Property-based data indexing<a class="self-link" aria-label="§" href="#property-based-data-indexing"></a></h5><p><em>This section is non-normative.</em></p>
    <p>In its simplest form (as in the examples above),
      data indexing assigns no semantics to the keys of an <a href="#dfn-index-map" class="internalDFN" data-link-type="dfn">index map</a>.
      However, in some situations,
      the keys used to index objects are semantically linked to these objects,
      and should be preserved not only syntactically, but also semantically.
    </p>
    <p>Unless the <a href="#dfn-processing-mode" class="internalDFN" data-link-type="dfn">processing mode</a> is set to <code>json-ld-1.0</code>,
      <code>"@container": "@index"</code> in a term description can be accompanied with
      an <code>"@index"</code> key. The value of that key must map to an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>,
      which identifies the semantic property linking each object to its key.
    </p>
    <aside class="example ds-selector-tabs" id="example-99-property-based-data-indexing"><div class="marker">
      <a class="self-link" href="#example-99-property-based-data-indexing">Example<bdi> 99</bdi></a><span class="example-title">: Property-based data indexing</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="expanded">Expanded (Result)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="turtle">Turtle</button>
      <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%22%40version%22%3A%201.1%2C%0A%20%20%20%20%22schema%22%3A%20%22http%3A%2F%2Fschema.org%2F%22%2C%0A%20%20%20%20%22name%22%3A%20%22schema%3Aname%22%2C%0A%20%20%20%20%22body%22%3A%20%22schema%3AarticleBody%22%2C%0A%20%20%20%20%22athletes%22%3A%20%7B%0A%20%20%20%20%20%20%22%40id%22%3A%20%22schema%3Aathlete%22%2C%0A%20%20%20%20%20%20%22%40container%22%3A%20%22%40index%22%2C%0A%20%20%20%20%20%20%22%40index%22%3A%20%22schema%3AjobTitle%22%0A%20%20%20%20%7D%0A%20%20%7D%2C%0A%20%20%22%40id%22%3A%20%22http%3A%2F%2Fexample.com%2F%22%2C%0A%20%20%22%40type%22%3A%20%22schema%3ASportsTeam%22%2C%0A%20%20%22name%22%3A%20%22San%20Francisco%20Giants%22%2C%0A%20%20%22athletes%22%3A%20%7B%0A%20%20%20%20%22Catcher%22%3A%20%7B%0A%20%20%20%20%20%20%0A%20%20%20%20%20%20%22%40type%22%3A%20%22schema%3APerson%22%2C%0A%20%20%20%20%20%20%22name%22%3A%20%22Buster%20Posey%22%0A%20%20%20%20%7D%2C%0A%20%20%20%20%22Starting%20Pitcher%22%3A%20%7B%0A%20%20%20%20%20%20%22%40type%22%3A%20%22schema%3APerson%22%2C%0A%20%20%20%20%20%20%22name%22%3A%20%22Madison%20Bumgarner%22%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D">Open in playground</a>
    </div>
    <pre class="compacted input selected nohighlight">{
  "@context": {
    <span class="hl-bold">"@version": 1.1,</span>
    "schema": "http://schema.org/",
    "name": "schema:name",
    "body": "schema:articleBody",
    "athletes": {
      "@id": "schema:athlete",
      "@container": "@index",
      <span class="hl-bold">"@index": "schema:jobTitle"</span>
    }
  },
  "@id": "http://example.com/",
  "@type": "schema:SportsTeam",
  "name": "San Francisco Giants",
  <span class="hl-bold">"athletes": {
    "Catcher": {
      <span class="comment">↑ "Catcher" will add `"schema:jobTitle": "Catcher"` when expanded</span>
      "@type": "schema:Person",
      "name": "Buster Posey"
    },
    "Starting Pitcher": {
      "@type": "schema:Person",
      "name": "Madison Bumgarner"
    }</span><span class="comment">,
    ....</span>
  }
}</pre>
    <pre class="expanded result nohighlight" data-ignore="" data-result-for="Property-based data indexing-compacted">[{
  "@id": "http://example.com/",
  "@type": ["http://schema.org/SportsTeam"],
  "http://schema.org/name": [{"@value": "San Francisco Giants"}],
  <span class="hl-bold">"http://schema.org/athlete": [{
    "@type": ["http://schema.org/Person"],
    "http://schema.org/name": [{"@value": "Buster Posey"}],
    "http://schema.org/jobTitle": [{"@value": "Catcher"}]
  }, {
    "@type": ["http://schema.org/Person"],
    "http://schema.org/name": [{"@value": "Madison Bumgarner"}],
    "http://schema.org/jobTitle": [{"@value": "Starting Pitcher"}]
  }<span class="comment">,
  ....</span>
  ]</span>
}]</pre>
    <table class="statements" data-ignore="" data-result-for="Property-based data indexing-expanded" data-to-rdf="">
      <thead><tr>
        <th>Subject</th>
        <th>Property</th>
        <th>Value</th>
        <th>Value Type</th>
      </tr></thead>
      <tbody>
      <tr><td>http://example.com/</td><td>rdf:type</td><td>schema:SportsTeam</td></tr>
      <tr><td>http://example.com/</td><td>schema:name</td><td>San Francisco Giants</td></tr>
      <tr><td>_:b0</td><td>rdf:type</td><td>schema:Person</td></tr>
      <tr><td>_:b0</td><td>schema:name</td><td>Buster Posey</td></tr>
      <tr><td>_:b0</td><td>schema:jobTitle</td><td>Catcher</td></tr>
      <tr><td>http://example.com/</td><td>schema:athlete</td><td>_:b0</td></tr>
      <tr><td>_:b1</td><td>rdf:type</td><td>schema:Person</td></tr>
      <tr><td>_:b1</td><td>schema:name</td><td>Madison Bumgarner</td></tr>
      <tr><td>_:b1</td><td>schema:jobTitle</td><td>Starting Pitcher</td></tr>
      <tr><td>http://example.com/</td><td>schema:athlete</td><td>_:b1</td></tr>
      </tbody>
    </table>
    <pre class="turtle nohighlight" data-content-type="text/turtle" data-ignore="" data-result-for="Property-based data indexing-expanded" data-to-rdf="">@prefix schema: &lt;http://schema.org/&gt; .

&lt;http://example.com/&gt; a schema:SportsTeam;
  schema:name "San Francisco Giants";
  schema:athlete [
    a schema:Person;
    schema:jobTitle "Catcher";
    schema:name "Buster Posey"
  ], [
    a schema:Person;
    schema:jobTitle "Starting Pitcher";
    schema:name "Madison Bumgarner"
  ]<span class="comment">,
  ....</span>
  .</pre>
  </aside>

  <div class="note" role="note" id="issue-container-generatedID-36"><div role="heading" class="note-title marker" id="h-note-32" aria-level="6"><span>Note</span></div><p class="">When using property-based data indexing, <a href="#dfn-index-map" class="internalDFN" data-link-type="dfn">index maps</a> can only be used
    on <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a>, not <a href="#dfn-value-object" class="internalDFN" data-link-type="dfn">value objects</a> or <a href="#dfn-graph-object" class="internalDFN" data-link-type="dfn">graph objects</a>.
    <a href="#dfn-value-object" class="internalDFN" data-link-type="dfn">Value objects</a> are restricted to have only certain keys and do not support
    arbitrary properties.</p></div>
</section>

</section>
<section class="informative" id="language-indexing"><h4 id="x4-6-2-language-indexing"><bdi class="secno">4.6.2 </bdi>Language Indexing<a class="self-link" aria-label="§" href="#language-indexing"></a></h4><p><em>This section is non-normative.</em></p>

  <p>JSON which includes string values in multiple languages may be
    represented using a <a href="#dfn-language-map" class="internalDFN" data-link-type="dfn">language map</a> to allow for easily
    indexing property values by <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-language-tag">language tag</a>. This enables direct access to
    language values instead of having to scan an array in search of a specific item.
    In JSON-LD such data can be specified by associating the
    <code>@language</code> <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a> with a
    <code>@container</code> declaration in the context:</p>

  <aside class="example ds-selector-tabs" id="example-100-indexing-languaged-tagged-strings-in-json-ld"><div class="marker">
      <a class="self-link" href="#example-100-indexing-languaged-tagged-strings-in-json-ld">Example<bdi> 100</bdi></a><span class="example-title">: Indexing languaged-tagged strings in JSON-LD</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="expanded">Expanded (Result)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="turtle">Turtle</button>
      <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%22vocab%22%3A%20%22http%3A%2F%2Fexample.com%2Fvocab%2F%22%2C%0A%20%20%20%20%22label%22%3A%20%7B%0A%20%20%20%20%20%20%22%40id%22%3A%20%22vocab%3Alabel%22%2C%0A%20%20%20%20%20%20%22%40container%22%3A%20%22%40language%22%0A%20%20%20%20%7D%0A%20%20%7D%2C%0A%20%20%22%40id%22%3A%20%22http%3A%2F%2Fexample.com%2Fqueen%22%2C%0A%20%20%22label%22%3A%20%7B%0A%20%20%20%20%22en%22%3A%20%22The%20Queen%22%2C%0A%20%20%20%20%22de%22%3A%20%5B%20%22Die%20K%C3%B6nigin%22%2C%20%22Ihre%20Majest%C3%A4t%22%20%5D%0A%20%20%7D%0A%7D">Open in playground</a>
    </div>
    <pre class="compacted input selected" aria-busy="false"><code class="hljs">{
  "@context": {
    "vocab": "http://example.com/vocab/",
    "label": {
      "@id": "vocab:label",
      "@container": "@language"
    }
  },
  "@id": "http://example.com/queen",
  "label": {
    "en": "The Queen",
    "de": [ "Die Königin", "Ihre Majestät" ]
  }
}</code></pre>
    <pre class="expanded result nohighlight" data-result-for="Indexing languaged-tagged strings in JSON-LD-compacted">[{
  "@id": "http://example.com/queen",
  "http://example.com/vocab/label": [
    {"@value": "The Queen", "@language": "en"},
    {"@value": "Die Königin", "@language": "de"},
    {"@value": "Ihre Majestät", "@language": "de"}
  ]
}]</pre>
    <table class="statements" data-result-for="Indexing languaged-tagged strings in JSON-LD-expanded" data-to-rdf="">
      <thead><tr><th>Subject</th><th>Property</th><th>Value</th><th>Language</th></tr></thead>
      <tbody>
        <tr><td>http://example.com/queen</td><td>http://example.com/vocab/label</td><td>The Queen</td><td>en</td></tr>
        <tr><td>http://example.com/queen</td><td>http://example.com/vocab/label</td><td>Die Königin</td><td>de</td></tr>
        <tr><td>http://example.com/queen</td><td>http://example.com/vocab/label</td><td>Ihre Majestät</td><td>de</td></tr>
      </tbody>
    </table>
    <pre class="turtle" data-content-type="text/turtle" data-result-for="Indexing languaged-tagged strings in JSON-LD-expanded" data-to-rdf="" aria-busy="false"><code class="hljs">@prefix rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; .

&lt;http://example.com/queen&gt; &lt;http://example.com/vocab/label&gt;
     "Ihre Majestät"@de,
     "Die Königin"@de,
     "The Queen"@en .</code></pre>
  </aside>

  <p>In the example above, the <strong>label</strong> <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a> has
    been marked as a <a href="#dfn-language-map" class="internalDFN" data-link-type="dfn">language map</a>. The <strong>en</strong> and
    <strong>de</strong> keys are implicitly associated with their respective
    values by the <a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-api/#dfn-json-ld-processor">JSON-LD Processor</a>.  This allows a developer to
    access the German version of the <strong>label</strong> using the
    following code snippet: <code>obj.label.de</code>,
    which, again, is only appropriate when languages are limited to the
    primary language sub-tag and do not depend on other sub-tags, such as <code>"de-at"</code>.</p>

  <p>The value of <code>@container</code> can also
    be an array containing both <code>@language</code> and <code>@set</code>.
    When <em>compacting</em>, this ensures that a <a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-api/#dfn-json-ld-processor">JSON-LD Processor</a> will use
    the <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a> form for all values of language tags.</p>

  <aside class="example ds-selector-tabs changed" id="example-101-indexing-languaged-tagged-strings-in-json-ld-with-set-representation"><div class="marker">
      <a class="self-link" href="#example-101-indexing-languaged-tagged-strings-in-json-ld-with-set-representation">Example<bdi> 101</bdi></a><span class="example-title">: Indexing languaged-tagged strings in JSON-LD with @set representation</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="expanded">Expanded (Result)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="turtle">Turtle</button>
      <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%22%40version%22%3A%201.1%2C%0A%20%20%20%20%22vocab%22%3A%20%22http%3A%2F%2Fexample.com%2Fvocab%2F%22%2C%0A%20%20%20%20%22label%22%3A%20%7B%0A%20%20%20%20%20%20%22%40id%22%3A%20%22vocab%3Alabel%22%2C%0A%20%20%20%20%20%20%22%40container%22%3A%20%5B%22%40language%22%2C%20%22%40set%22%5D%0A%20%20%20%20%7D%0A%20%20%7D%2C%0A%20%20%22%40id%22%3A%20%22http%3A%2F%2Fexample.com%2Fqueen%22%2C%0A%20%20%22label%22%3A%20%7B%0A%20%20%20%20%22en%22%3A%20%5B%22The%20Queen%22%5D%2C%0A%20%20%20%20%22de%22%3A%20%5B%20%22Die%20K%C3%B6nigin%22%2C%20%22Ihre%20Majest%C3%A4t%22%20%5D%0A%20%20%7D%0A%7D">Open in playground</a>
    </div>
    <pre class="compacted input selected nohighlight">{
  "@context": {
    <span class="hl-bold">"@version": 1.1,</span>
    "vocab": "http://example.com/vocab/",
    "label": {
      "@id": "vocab:label",
      "@container": <span class="hl-bold">[</span>"@language", <span class="hl-bold">"@set"]</span>
    }
  },
  "@id": "http://example.com/queen",
  "label": {
    "en": <span class="hl-bold">[</span>"The Queen"<span class="hl-bold">]</span>,
    "de": [ "Die Königin", "Ihre Majestät" ]
  }
}</pre>
    <pre class="expanded result nohighlight" data-result-for="Indexing languaged-tagged strings in JSON-LD with @set representation-compacted">[{
  "@id": "http://example.com/queen",
  "http://example.com/vocab/label": [
    <span class="hl-bold">{"@value": "The Queen", "@language": "en"}</span>,
    {"@value": "Die Königin", "@language": "de"},
    {"@value": "Ihre Majestät", "@language": "de"}
  ]
}]</pre>
    <table class="statements" data-result-for="Indexing languaged-tagged strings in JSON-LD with @set representation-expanded" data-to-rdf="">
      <thead><tr><th>Subject</th><th>Property</th><th>Value</th><th>Language</th></tr></thead>
      <tbody>
        <tr><td>http://example.com/queen</td><td>http://example.com/vocab/label</td><td>The Queen</td><td>en</td></tr>
        <tr><td>http://example.com/queen</td><td>http://example.com/vocab/label</td><td lang="de">Die Königin</td><td>de</td></tr>
        <tr><td>http://example.com/queen</td><td>http://example.com/vocab/label</td><td lang="de">Ihre Majestät</td><td>de</td></tr>
      </tbody>
    </table>
    <pre class="turtle nohighlight" data-content-type="text/turtle" data-result-for="Indexing languaged-tagged strings in JSON-LD with @set representation-expanded" data-to-rdf="">@prefix rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; .

&lt;http://example.com/queen&gt; &lt;http://example.com/vocab/label&gt;
     "Ihre Majestät"@de,
     "Die Königin"@de,
     <span class="hl-bold">"The Queen"@en</span> .</pre>
  </aside>

  <p class="changed">Unless the <a href="#dfn-processing-mode" class="internalDFN" data-link-type="dfn">processing mode</a> is set to <code>json-ld-1.0</code>,
    the special index <code>@none</code> is used for indexing
    strings which do not have a language; this is useful to maintain
    a normalized representation for string values not having a datatype.</p>

  <aside class="example ds-selector-tabs changed" id="example-102-indexing-languaged-tagged-strings-using-none-for-no-language"><div class="marker">
      <a class="self-link" href="#example-102-indexing-languaged-tagged-strings-using-none-for-no-language">Example<bdi> 102</bdi></a><span class="example-title">: Indexing languaged-tagged strings using @none for no language</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="expanded">Expanded (Result)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="turtle">Turtle</button>
      <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%22vocab%22%3A%20%22http%3A%2F%2Fexample.com%2Fvocab%2F%22%2C%0A%20%20%20%20%22label%22%3A%20%7B%0A%20%20%20%20%20%20%22%40id%22%3A%20%22vocab%3Alabel%22%2C%0A%20%20%20%20%20%20%22%40container%22%3A%20%22%40language%22%0A%20%20%20%20%7D%0A%20%20%7D%2C%0A%20%20%22%40id%22%3A%20%22http%3A%2F%2Fexample.com%2Fqueen%22%2C%0A%20%20%22label%22%3A%20%7B%0A%20%20%20%20%22en%22%3A%20%22The%20Queen%22%2C%0A%20%20%20%20%22de%22%3A%20%5B%20%22Die%20K%C3%B6nigin%22%2C%20%22Ihre%20Majest%C3%A4t%22%20%5D%2C%0A%20%20%20%20%22%40none%22%3A%20%22The%20Queen%22%0A%20%20%7D%0A%7D">Open in playground</a>
    </div>
    <pre class="compacted input selected nohighlight">{
  "@context": {
    "vocab": "http://example.com/vocab/",
    "label": {
      "@id": "vocab:label",
      "@container": "@language"
    }
  },
  "@id": "http://example.com/queen",
  "label": {
    "en": "The Queen",
    "de": [ "Die Königin", "Ihre Majestät" ],
    <span class="hl-bold">"@none": "The Queen"</span>
  }
}</pre>
    <pre class="expanded result nohighlight" data-result-for="Indexing languaged-tagged strings using @none for no language-compacted">[{
  "@id": "http://example.com/queen",
  "http://example.com/vocab/label": [
    {"@value": "The Queen", "@language": "en"},
    {"@value": "Die Königin", "@language": "de"},
    {"@value": "Ihre Majestät", "@language": "de"},
    <span class="hl-bold">{"@value": "The Queen"}</span>
  ]
}]</pre>
    <table class="statements" data-result-for="Indexing languaged-tagged strings using @none for no language-expanded" data-to-rdf="">
      <thead><tr><th>Subject</th><th>Property</th><th>Value</th><th>Language</th></tr></thead>
      <tbody>
        <tr><td>http://example.com/queen</td><td>http://example.com/vocab/label</td><td>The Queen</td><td>en</td></tr>
        <tr><td>http://example.com/queen</td><td>http://example.com/vocab/label</td><td>Die Königin</td><td>de</td></tr>
        <tr><td>http://example.com/queen</td><td>http://example.com/vocab/label</td><td>Ihre Majestät</td><td>de</td></tr>
        <tr><td>http://example.com/queen</td><td>http://example.com/vocab/label</td><td>The Queen</td><td></td></tr>
      </tbody>
    </table>
    <pre class="turtle nohighlight" data-content-type="text/turtle" data-result-for="Indexing languaged-tagged strings using @none for no language-expanded" data-to-rdf="">@prefix rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; .

&lt;http://example.com/queen&gt; &lt;http://example.com/vocab/label&gt;
     "Ihre Majestät"@de,
     "Die Königin"@de,
     "The Queen"@en,
     <span class="hl-bold">"The Queen"</span> .</pre>
  </aside>
</section>
<section class="informative changed" id="node-identifier-indexing"><h4 id="x4-6-3-node-identifier-indexing"><bdi class="secno">4.6.3 </bdi>Node Identifier Indexing<a class="self-link" aria-label="§" href="#node-identifier-indexing"></a></h4><p><em>This section is non-normative.</em></p>

  <p>In addition to <a href="#dfn-index-map" class="internalDFN" data-link-type="dfn">index maps</a>, JSON-LD introduces the notion of <a href="#dfn-id-map" class="internalDFN" data-link-type="dfn">id maps</a>
    for structuring data. The id indexing feature allows an author to
    structure data using a simple key-value map where the keys map
    to <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">IRIs</a>. This enables direct access to associated <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a>
    instead of having to scan an array in search of a specific item.
    In JSON-LD such data can be specified by associating the
    <code>@id</code> <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a> with a
    <code>@container</code> declaration in the context:</p>

  <aside class="example ds-selector-tabs" id="example-103-indexing-data-in-json-ld-by-node-identifiers"><div class="marker">
      <a class="self-link" href="#example-103-indexing-data-in-json-ld-by-node-identifiers">Example<bdi> 103</bdi></a><span class="example-title">: Indexing data in JSON-LD by node identifiers</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="expanded">Expanded (Result)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="turtle">Turtle</button>
      <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%22%40version%22%3A%201.1%2C%0A%20%20%20%20%22schema%22%3A%20%22http%3A%2F%2Fschema.org%2F%22%2C%0A%20%20%20%20%22name%22%3A%20%22schema%3Aname%22%2C%0A%20%20%20%20%22body%22%3A%20%22schema%3AarticleBody%22%2C%0A%20%20%20%20%22words%22%3A%20%22schema%3AwordCount%22%2C%0A%20%20%20%20%22post%22%3A%20%7B%0A%20%20%20%20%20%20%22%40id%22%3A%20%22schema%3AblogPost%22%2C%0A%20%20%20%20%20%20%22%40container%22%3A%20%22%40id%22%2C%0A%20%20%20%20%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%20%20%20%20%22%40base%22%3A%20%22http%3A%2F%2Fexample.com%2Fposts%2F%22%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%7D%2C%0A%20%20%22%40id%22%3A%20%22http%3A%2F%2Fexample.com%2F%22%2C%0A%20%20%22%40type%22%3A%20%22schema%3ABlog%22%2C%0A%20%20%22name%22%3A%20%22World%20Financial%20News%22%2C%0A%20%20%22post%22%3A%20%7B%0A%20%20%20%20%221%2Fen%22%3A%20%7B%0A%20%20%20%20%20%20%22body%22%3A%20%22World%20commodities%20were%20up%20today%20with%20heavy%20trading%20of%20crude%20oil...%22%2C%0A%20%20%20%20%20%20%22words%22%3A%201539%0A%20%20%20%20%7D%2C%0A%20%20%20%20%221%2Fde%22%3A%20%7B%0A%20%20%20%20%20%20%22body%22%3A%20%22Die%20Werte%20an%20Warenb%C3%B6rsen%20stiegen%20im%20Sog%20eines%20starken%20Handels%20von%20Roh%C3%B6l...%22%2C%0A%20%20%20%20%20%20%22words%22%3A%201204%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D">Open in playground</a>
    </div>
    <pre class="compacted input selected nohighlight">{
  "@context": {
    <span class="hl-bold">"@version": 1.1</span>,
    "schema": "http://schema.org/",
    "name": "schema:name",
    "body": "schema:articleBody",
    "words": "schema:wordCount",
    "post": {
      "@id": "schema:blogPost",
      <span class="hl-bold">"@container": "@id",
      "@context": {
        "@base": "http://example.com/posts/"
      }</span>
    }
  },
  "@id": "http://example.com/",
  "@type": "schema:Blog",
  "name": "World Financial News",
  "post": {
    <span class="hl-bold">"1/en"</span>: {
      "body": "World commodities were up today with heavy trading of crude oil...",
      "words": 1539
    },
    <span class="hl-bold">"1/de"</span>: {
      "body": "Die Werte an Warenbörsen stiegen im Sog eines starken Handels von Rohöl...",
      "words": 1204
    }
  }
}</pre>
    <pre class="expanded result nohighlight" data-result-for="Indexing data in JSON-LD by node identifiers-compacted">[{
  "@id": "http://example.com/",
  "@type": ["http://schema.org/Blog"],
  "http://schema.org/name": [{"@value": "World Financial News"}],
  "http://schema.org/blogPost": [{
    <span class="hl-bold">"@id": "http://example.com/posts/1/en",</span>
    "http://schema.org/articleBody": [
      {"@value": "World commodities were up today with heavy trading of crude oil..."}
    ],
    "http://schema.org/wordCount": [{"@value": 1539}]
  }, {
    <span class="hl-bold">"@id": "http://example.com/posts/1/de",</span>
    "http://schema.org/articleBody": [
      {"@value": "Die Werte an Warenbörsen stiegen im Sog eines starken Handels von Rohöl..."}
    ],
    "http://schema.org/wordCount": [{"@value": 1204}]
  }]
}]</pre>
    <table class="statements" data-result-for="Indexing data in JSON-LD by node identifiers-expanded" data-to-rdf="">
      <thead><tr><th>Subject</th><th>Property</th><th>Value</th><th>Value Type</th></tr></thead>
      <tbody>
        <tr><td>http://example.com/</td><td>rdf:type</td><td>schema:Blog</td><td>&nbsp;</td></tr>
        <tr><td>http://example.com/</td><td>schema:name</td><td>World Financial News</td><td>&nbsp;</td></tr>
        <tr><td>http://example.com/</td><td>schema:blogPost</td><td>http://example.com/posts/1/de</td><td>&nbsp;</td></tr>
        <tr><td>http://example.com/</td><td>schema:blogPost</td><td>http://example.com/posts/1/en</td><td>&nbsp;</td></tr>
        <tr><td>http://example.com/posts/1/de</td><td>schema:articleBody</td><td>Die Werte an Warenbörsen stiegen im Sog eines starken Handels von Rohöl...</td><td>&nbsp;</td></tr>
        <tr><td>http://example.com/posts/1/de</td><td>schema:wordCount</td><td>1204</td><td>xsd:integer</td></tr>
        <tr><td>http://example.com/posts/1/en</td><td>schema:articleBody</td><td>World commodities were up today with heavy trading of crude oil...</td><td>&nbsp;</td></tr>
        <tr><td>http://example.com/posts/1/en</td><td>schema:wordCount</td><td>1539</td><td>xsd:integer</td></tr>
      </tbody>
    </table>
    <pre class="turtle nohighlight" data-content-type="text/turtle" data-result-for="Indexing data in JSON-LD by node identifiers-expanded" data-to-rdf="">@prefix rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; .
@prefix schema: &lt;http://schema.org/&gt; .
@prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt; .

&lt;http://example.com/&gt; a schema:Blog;
   schema:blogPost <span class="hl-bold">&lt;http://example.com/posts/1/en&gt;</span>,
     <span class="hl-bold">&lt;http://example.com/posts/1/de&gt;</span>;
   schema:name "World Financial News" .

<span class="hl-bold">&lt;http://example.com/posts/1/de&gt;</span> schema:articleBody
    "Die Werte an Warenbörsen stiegen im Sog eines starken Handels von Rohöl...";
   schema:wordCount 1204 .

<span class="hl-bold">&lt;http://example.com/posts/1/en&gt;</span> schema:articleBody
    "World commodities were up today with heavy trading of crude oil...";
   schema:wordCount 1539 .</pre>
  </aside>

  <p>In the example above, the <code>post</code> <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a> has
    been marked as an <a href="#dfn-id-map" class="internalDFN" data-link-type="dfn">id map</a>. The <code>http://example.com/posts/1/en</code> and
    <code>http://example.com/posts/1/de</code> keys will be interpreted
    as the <code>@id</code> property of the <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> value.</p>

  <p>The interpretation of the data above is exactly the same
    as that in <a class="sectionRef sec-ref" href="#data-indexing">§&nbsp;<bdi class="secno">4.6.1 </bdi>Data Indexing</a>
    using a <a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-api/#dfn-json-ld-processor">JSON-LD processor</a>.</p>

  <p>The value of <code>@container</code> can also
    be an array containing both <code>@id</code> and <code>@set</code>.
    When <em>compacting</em>, this ensures that a <a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-api/#dfn-json-ld-processor">JSON-LD processor</a> will use
    the <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a> form for all values of node identifiers.</p>

  <aside class="example ds-selector-tabs" id="example-104-indexing-data-in-json-ld-by-node-identifiers-with-set-representation"><div class="marker">
      <a class="self-link" href="#example-104-indexing-data-in-json-ld-by-node-identifiers-with-set-representation">Example<bdi> 104</bdi></a><span class="example-title">: Indexing data in JSON-LD by node identifiers with @set representation</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="expanded">Expanded (Result)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="turtle">Turtle</button>
      <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%22%40version%22%3A%201.1%2C%0A%20%20%20%20%22schema%22%3A%20%22http%3A%2F%2Fschema.org%2F%22%2C%0A%20%20%20%20%22name%22%3A%20%22schema%3Aname%22%2C%0A%20%20%20%20%22body%22%3A%20%22schema%3AarticleBody%22%2C%0A%20%20%20%20%22words%22%3A%20%22schema%3AwordCount%22%2C%0A%20%20%20%20%22post%22%3A%20%7B%0A%20%20%20%20%20%20%22%40id%22%3A%20%22schema%3AblogPost%22%2C%0A%20%20%20%20%20%20%22%40container%22%3A%20%5B%22%40id%22%2C%20%22%40set%22%5D%0A%20%20%20%20%7D%0A%20%20%7D%2C%0A%20%20%22%40id%22%3A%20%22http%3A%2F%2Fexample.com%2F%22%2C%0A%20%20%22%40type%22%3A%20%22schema%3ABlog%22%2C%0A%20%20%22name%22%3A%20%22World%20Financial%20News%22%2C%0A%20%20%22post%22%3A%20%7B%0A%20%20%20%20%22http%3A%2F%2Fexample.com%2Fposts%2F1%2Fen%22%3A%20%5B%7B%0A%20%20%20%20%20%20%22body%22%3A%20%22World%20commodities%20were%20up%20today%20with%20heavy%20trading%20of%20crude%20oil...%22%2C%0A%20%20%20%20%20%20%22words%22%3A%201539%0A%20%20%20%20%7D%5D%2C%0A%20%20%20%20%22http%3A%2F%2Fexample.com%2Fposts%2F1%2Fde%22%3A%20%5B%7B%0A%20%20%20%20%20%20%22body%22%3A%20%22Die%20Werte%20an%20Warenb%C3%B6rsen%20stiegen%20im%20Sog%20eines%20starken%20Handels%20von%20Roh%C3%B6l...%22%2C%0A%20%20%20%20%20%20%22words%22%3A%201204%0A%20%20%20%20%7D%5D%0A%20%20%7D%0A%7D">Open in playground</a>
    </div>
    <pre class="compacted input selected nohighlight">{
  "@context": {
    <span class="hl-bold">"@version": 1.1</span>,
    "schema": "http://schema.org/",
    "name": "schema:name",
    "body": "schema:articleBody",
    "words": "schema:wordCount",
    "post": {
      "@id": "schema:blogPost",
      "@container": <span class="hl-bold">[</span>"@id", <span class="hl-bold">"@set"]</span>
    }
  },
  "@id": "http://example.com/",
  "@type": "schema:Blog",
  "name": "World Financial News",
  "post": {
    "http://example.com/posts/1/en": <span class="hl-bold">[</span>{
      "body": "World commodities were up today with heavy trading of crude oil...",
      "words": 1539
    }<span class="hl-bold">]</span>,
    "http://example.com/posts/1/de": <span class="hl-bold">[</span>{
      "body": "Die Werte an Warenbörsen stiegen im Sog eines starken Handels von Rohöl...",
      "words": 1204
    }<span class="hl-bold">]</span>
  }
}</pre>
    <pre class="expanded result nohighlight" data-result-for="Indexing data in JSON-LD by node identifiers with @set representation-compacted">[{
  "@id": "http://example.com/",
  "@type": ["http://schema.org/Blog"],
  "http://schema.org/name": [{"@value": "World Financial News"}],
  "http://schema.org/blogPost": [{
    "@id": "http://example.com/posts/1/en",
    "http://schema.org/articleBody": [
      {"@value": "World commodities were up today with heavy trading of crude oil..."}
    ],
    "http://schema.org/wordCount": [{"@value": 1539}]
  }, {
    "@id": "http://example.com/posts/1/de",
    "http://schema.org/articleBody": [
      {"@value": "Die Werte an Warenbörsen stiegen im Sog eines starken Handels von Rohöl..."}
    ],
    "http://schema.org/wordCount": [{"@value": 1204}]
  }]
}]</pre>
    <table class="statements" data-result-for="Indexing data in JSON-LD by node identifiers with @set representation-expanded" data-to-rdf="">
      <thead><tr><th>Subject</th><th>Property</th><th>Value</th><th>Value Type</th></tr></thead>
      <tbody>
        <tr><td>http://example.com/</td><td>rdf:type</td><td>schema:Blog</td><td>&nbsp;</td></tr>
        <tr><td>http://example.com/</td><td>schema:name</td><td>World Financial News</td><td>&nbsp;</td></tr>
        <tr><td>http://example.com/</td><td>schema:blogPost</td><td>http://example.com/posts/1/de</td><td>&nbsp;</td></tr>
        <tr><td>http://example.com/</td><td>schema:blogPost</td><td>http://example.com/posts/1/en</td><td>&nbsp;</td></tr>
        <tr><td>http://example.com/posts/1/de</td><td>schema:articleBody</td><td>Die Werte an Warenbörsen stiegen im Sog eines starken Handels von Rohöl...</td><td>&nbsp;</td></tr>
        <tr><td>http://example.com/posts/1/de</td><td>schema:wordCount</td><td>1204</td><td>xsd:integer</td></tr>
        <tr><td>http://example.com/posts/1/en</td><td>schema:articleBody</td><td>World commodities were up today with heavy trading of crude oil...</td><td>&nbsp;</td></tr>
        <tr><td>http://example.com/posts/1/en</td><td>schema:wordCount</td><td>1539</td><td>xsd:integer</td></tr>
      </tbody>
    </table>
    <pre class="turtle" data-content-type="text/turtle" data-result-for="Indexing data in JSON-LD by node identifiers with @set representation-expanded" data-to-rdf="" aria-busy="false"><code class="hljs">@prefix rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; .
@prefix schema: &lt;http://schema.org/&gt; .
@prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt; .

&lt;http://example.com/&gt; a schema:Blog;
   schema:blogPost &lt;http://example.com/posts/1/en&gt;,
     &lt;http://example.com/posts/1/de&gt;;
   schema:name "World Financial News" .

&lt;http://example.com/posts/1/de&gt; schema:articleBody
    "Die Werte an Warenbörsen stiegen im Sog eines starken Handels von Rohöl...";
   schema:wordCount 1204 .

&lt;http://example.com/posts/1/en&gt; schema:articleBody
    "World commodities were up today with heavy trading of crude oil...";
   schema:wordCount 1539 .</code></pre>
  </aside>

  <p>The special index <code>@none</code> is used for indexing
    <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a> which do not have an <code>@id</code>, which is useful to maintain
    a normalized representation. The <code>@none</code> index may also be
    a term which expands to <code>@none</code>, such as the term <em>none</em>
    used in the example below.</p>

  <aside class="example ds-selector-tabs" id="example-105-indexing-data-in-json-ld-by-node-identifiers-using-none"><div class="marker">
      <a class="self-link" href="#example-105-indexing-data-in-json-ld-by-node-identifiers-using-none">Example<bdi> 105</bdi></a><span class="example-title">: Indexing data in JSON-LD by node identifiers using @none</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="expanded">Expanded (Result)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="turtle">Turtle</button>
      <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%22%40version%22%3A%201.1%2C%0A%20%20%20%20%22schema%22%3A%20%22http%3A%2F%2Fschema.org%2F%22%2C%0A%20%20%20%20%22name%22%3A%20%22schema%3Aname%22%2C%0A%20%20%20%20%22body%22%3A%20%22schema%3AarticleBody%22%2C%0A%20%20%20%20%22words%22%3A%20%22schema%3AwordCount%22%2C%0A%20%20%20%20%22post%22%3A%20%7B%0A%20%20%20%20%20%20%22%40id%22%3A%20%22schema%3AblogPost%22%2C%0A%20%20%20%20%20%20%22%40container%22%3A%20%22%40id%22%0A%20%20%20%20%7D%2C%0A%20%20%20%20%22none%22%3A%20%22%40none%22%0A%20%20%7D%2C%0A%20%20%22%40id%22%3A%20%22http%3A%2F%2Fexample.com%2F%22%2C%0A%20%20%22%40type%22%3A%20%22schema%3ABlog%22%2C%0A%20%20%22name%22%3A%20%22World%20Financial%20News%22%2C%0A%20%20%22post%22%3A%20%7B%0A%20%20%20%20%22http%3A%2F%2Fexample.com%2Fposts%2F1%2Fen%22%3A%20%7B%0A%20%20%20%20%20%20%22body%22%3A%20%22World%20commodities%20were%20up%20today%20with%20heavy%20trading%20of%20crude%20oil...%22%2C%0A%20%20%20%20%20%20%22words%22%3A%201539%0A%20%20%20%20%7D%2C%0A%20%20%20%20%22http%3A%2F%2Fexample.com%2Fposts%2F1%2Fde%22%3A%20%7B%0A%20%20%20%20%20%20%22body%22%3A%20%22Die%20Werte%20an%20Warenb%C3%B6rsen%20stiegen%20im%20Sog%20eines%20starken%20Handels%20von%20Roh%C3%B6l...%22%2C%0A%20%20%20%20%20%20%22words%22%3A%201204%0A%20%20%20%20%7D%2C%0A%20%20%20%20%22none%22%3A%20%7B%0A%20%20%20%20%20%20%22body%22%3A%20%22Description%20for%20object%20without%20an%20%40id%22%2C%0A%20%20%20%20%20%20%22words%22%3A%2020%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D">Open in playground</a>
    </div>
    <pre class="compacted input selected nohighlight">{
  "@context": {
    "@version": 1.1,
    "schema": "http://schema.org/",
    "name": "schema:name",
    "body": "schema:articleBody",
    "words": "schema:wordCount",
    "post": {
      "@id": "schema:blogPost",
      "@container": "@id"
    },
    <span class="hl-bold">"none": "@none"</span>
  },
  "@id": "http://example.com/",
  "@type": "schema:Blog",
  "name": "World Financial News",
  "post": {
    "http://example.com/posts/1/en": {
      "body": "World commodities were up today with heavy trading of crude oil...",
      "words": 1539
    },
    "http://example.com/posts/1/de": {
      "body": "Die Werte an Warenbörsen stiegen im Sog eines starken Handels von Rohöl...",
      "words": 1204
    },
    <span class="hl-bold">"none": {
      "body": "Description for object without an @id",
      "words": 20
    }</span>
  }
}</pre>
    <pre class="expanded result nohighlight" data-result-for="Indexing data in JSON-LD by node identifiers using @none-compacted">[{
  "@id": "http://example.com/",
  "@type": ["http://schema.org/Blog"],
  "http://schema.org/name": [{"@value": "World Financial News"}],
  "http://schema.org/blogPost": [{
    "@id": "http://example.com/posts/1/en",
    "http://schema.org/articleBody": [
      {"@value": "World commodities were up today with heavy trading of crude oil..."}
    ],
    "http://schema.org/wordCount": [{"@value": 1539}]
  }, {
    "@id": "http://example.com/posts/1/de",
    "http://schema.org/articleBody": [
      {"@value": "Die Werte an Warenbörsen stiegen im Sog eines starken Handels von Rohöl..."}
    ],
    "http://schema.org/wordCount": [{"@value": 1204}]
  }, {
    "http://schema.org/articleBody": [
      {"@value": "Description for object without an @id"}
    ],
    "http://schema.org/wordCount": [{"@value": 20}]
  }]
}]</pre>
    <table class="statements" data-result-for="Indexing data in JSON-LD by node identifiers using @none-expanded" data-to-rdf="">
      <thead><tr><th>Subject</th><th>Property</th><th>Value</th><th>Value Type</th></tr></thead>
      <tbody>
        <tr><td>http://example.com/</td><td>rdf:type</td><td>schema:Blog</td><td>&nbsp;</td></tr>
        <tr><td>http://example.com/</td><td>schema:name</td><td>World Financial News</td><td>&nbsp;</td></tr>
        <tr><td>http://example.com/</td><td>schema:blogPost</td><td>http://example.com/posts/1/de</td><td>&nbsp;</td></tr>
        <tr><td>http://example.com/</td><td>schema:blogPost</td><td>http://example.com/posts/1/en</td><td>&nbsp;</td></tr>
        <tr><td>http://example.com/</td><td>schema:blogPost</td><td>_:b0</td><td>&nbsp;</td></tr>
        <tr><td>http://example.com/posts/1/de</td><td>schema:articleBody</td><td>Die Werte an Warenbörsen stiegen im Sog eines starken Handels von Rohöl...</td><td>&nbsp;</td></tr>
        <tr><td>http://example.com/posts/1/de</td><td>schema:wordCount</td><td>1204</td><td>xsd:integer</td></tr>
        <tr><td>http://example.com/posts/1/en</td><td>schema:articleBody</td><td>World commodities were up today with heavy trading of crude oil...</td><td>&nbsp;</td></tr>
        <tr><td>http://example.com/posts/1/en</td><td>schema:wordCount</td><td>1539</td><td>xsd:integer</td></tr>
        <tr><td>_:b0</td><td>schema:articleBody</td><td>Description for object without an @id</td><td>&nbsp;</td></tr>
        <tr><td>_:b0</td><td>schema:wordCount</td><td>20</td><td>xsd:integer</td></tr>
      </tbody>
    </table>
    <pre class="turtle" data-content-type="text/turtle" data-result-for="Indexing data in JSON-LD by node identifiers using @none-expanded" data-to-rdf="" aria-busy="false"><code class="hljs">@prefix rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; .
@prefix schema: &lt;http://schema.org/&gt; .
@prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt; .

&lt;http://example.com/&gt; a schema:Blog;
   schema:blogPost &lt;http://example.com/posts/1/en&gt;,
     &lt;http://example.com/posts/1/de&gt;, [
        schema:articleBody "Description for object without an @id";
        schema:wordCount 20
     ];
   schema:name "World Financial News" .

&lt;http://example.com/posts/1/de&gt; schema:articleBody
    "Die Werte an Warenbörsen stiegen im Sog eines starken Handels von Rohöl...";
   schema:wordCount 1204 .

&lt;http://example.com/posts/1/en&gt; schema:articleBody
    "World commodities were up today with heavy trading of crude oil...";
   schema:wordCount 1539 .</code></pre>
  </aside>

  <div class="note" role="note" id="issue-container-generatedID-37"><div role="heading" class="note-title marker" id="h-note-33" aria-level="5"><span>Note</span></div><p class=""><a href="#dfn-id-map" class="internalDFN" data-link-type="dfn">Id maps</a> are a new feature in JSON-LD 1.1.</p></div>
</section>
<section class="informative changed" id="node-type-indexing"><h4 id="x4-6-4-node-type-indexing"><bdi class="secno">4.6.4 </bdi>Node Type Indexing<a class="self-link" aria-label="§" href="#node-type-indexing"></a></h4><p><em>This section is non-normative.</em></p>

  <p>In addition to <a data-lt="id map" href="#dfn-id-map" class="internalDFN" data-link-type="dfn">id</a> and <a href="#dfn-index-map" class="internalDFN" data-link-type="dfn">index maps</a>, JSON-LD introduces the notion of <a href="#dfn-type-map" class="internalDFN" data-link-type="dfn">type maps</a>
    for structuring data. The type indexing feature allows an author to
    structure data using a simple key-value map where the keys map
    to <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">IRIs</a>. This enables data to be structured based on the <code>@type</code>
    of specific <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a>.
    In JSON-LD such data can be specified by associating the
    <code>@type</code> <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a> with a
    <code>@container</code> declaration in the context:</p>

  <aside class="example ds-selector-tabs" id="example-106-indexing-data-in-json-ld-by-type"><div class="marker">
      <a class="self-link" href="#example-106-indexing-data-in-json-ld-by-type">Example<bdi> 106</bdi></a><span class="example-title">: Indexing data in JSON-LD by type</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="expanded">Expanded (Result)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="turtle">Turtle</button>
      <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%22%40version%22%3A%201.1%2C%0A%20%20%20%20%22schema%22%3A%20%22http%3A%2F%2Fschema.org%2F%22%2C%0A%20%20%20%20%22name%22%3A%20%22schema%3Aname%22%2C%0A%20%20%20%20%22affiliation%22%3A%20%7B%0A%20%20%20%20%20%20%22%40id%22%3A%20%22schema%3Aaffiliation%22%2C%0A%20%20%20%20%20%20%22%40container%22%3A%20%22%40type%22%0A%20%20%20%20%7D%0A%20%20%7D%2C%0A%20%20%22name%22%3A%20%22Manu%20Sporny%22%2C%0A%20%20%22affiliation%22%3A%20%7B%0A%20%20%20%20%22schema%3ACorporation%22%3A%20%7B%0A%20%20%20%20%20%20%22%40id%22%3A%20%22https%3A%2F%2Fdigitalbazaar.com%2F%22%2C%0A%20%20%20%20%20%20%22name%22%3A%20%22Digital%20Bazaar%22%0A%20%20%20%20%7D%2C%0A%20%20%20%20%22schema%3AProfessionalService%22%3A%20%7B%0A%20%20%20%20%20%20%22%40id%22%3A%20%22https%3A%2F%2Fspec-ops.io%22%2C%0A%20%20%20%20%20%20%22name%22%3A%20%22Spec-Ops%22%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D">Open in playground</a>
    </div>
    <pre class="compacted input selected nohighlight">{
  "@context": {
    <span class="hl-bold">"@version": 1.1</span>,
    "schema": "http://schema.org/",
    "name": "schema:name",
    "affiliation": {
      "@id": "schema:affiliation",
      <span class="hl-bold">"@container": "@type"</span>
    }
  },
  "name": "Manu Sporny",
  "affiliation": {
    <span class="hl-bold">"schema:Corporation"</span>: {
      "@id": "https://digitalbazaar.com/",
      "name": "Digital Bazaar"
    },
    <span class="hl-bold">"schema:ProfessionalService"</span>: {
      "@id": "https://spec-ops.io",
      "name": "Spec-Ops"
    }
  }
}</pre>
    <pre class="expanded result nohighlight" data-result-for="Indexing data in JSON-LD by type-compacted">[{
  "http://schema.org/name": [{"@value": "Manu Sporny"}],
  "http://schema.org/affiliation": [
    {
      "@id": "https://digitalbazaar.com/",
      "@type": ["http://schema.org/Corporation"],
      "http://schema.org/name": [{"@value": "Digital Bazaar"}]
    }, {
      "@id": "https://spec-ops.io",
      "@type": ["http://schema.org/ProfessionalService"],
      "http://schema.org/name": [{"@value": "Spec-Ops"}]
    }
  ]
}]</pre>
    <table class="statements" data-result-for="Indexing data in JSON-LD by type-expanded" data-to-rdf="">
      <thead><tr><th>Subject</th><th>Property</th><th>Value</th></tr></thead>
      <tbody>
        <tr><td>https://digitalbazaar.com/</td><td>rdf:type</td><td>schema:Corporation</td></tr>
        <tr><td>https://digitalbazaar.com/</td><td>schema:name</td><td>Digital Bazaar</td></tr>
        <tr><td>https://spec-ops.io</td><td>rdf:type</td><td>schema:ProfessionalService</td></tr>
        <tr><td>https://spec-ops.io</td><td>schema:name</td><td>Spec-Ops</td></tr>
        <tr><td>_:b0</td><td>schema:name</td><td>Manu Sporny</td></tr>
        <tr><td>_:b0</td><td>schema:affiliation</td><td>https://digitalbazaar.com/</td></tr>
        <tr><td>_:b0</td><td>schema:affiliation</td><td>https://spec-ops.io</td></tr>
      </tbody>
    </table>
    <pre class="turtle" data-content-type="text/turtle" data-result-for="Indexing data in JSON-LD by type-expanded" data-to-rdf="" aria-busy="false"><code class="hljs">@prefix rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; .
@prefix schema: &lt;http://schema.org/&gt; .
@prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt; .

&lt;https://digitalbazaar.com/&gt; a schema:Corporation;
   schema:name "Digital Bazaar" .

&lt;https://spec-ops.io&gt; a schema:ProfessionalService;
   schema:name "Spec-Ops" .

[
   schema:affiliation &lt;https://digitalbazaar.com/&gt;, &lt;https://spec-ops.io&gt;;
   schema:name "Manu Sporny"
] .</code></pre>
  </aside>

  <p>In the example above, the <code>affiliation</code> <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a> has
    been marked as a <a href="#dfn-type-map" class="internalDFN" data-link-type="dfn">type map</a>. The <code>schema:Corporation</code> and
    <code>schema:ProfessionalService</code> keys will be interpreted
    as the <code>@type</code> property of the <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> value.</p>

  <p>The value of <code>@container</code> can also
    be an array containing both <code>@type</code> and <code>@set</code>.
    When <em>compacting</em>, this ensures that a <a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-api/#dfn-json-ld-processor">JSON-LD processor</a> will use
    the <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a> form for all values of types.</p>

  <aside class="example ds-selector-tabs" id="example-107-indexing-data-in-json-ld-by-type-with-set-representation"><div class="marker">
      <a class="self-link" href="#example-107-indexing-data-in-json-ld-by-type-with-set-representation">Example<bdi> 107</bdi></a><span class="example-title">: Indexing data in JSON-LD by type with @set representation</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="expanded">Expanded (Result)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="turtle">Turtle</button>
      <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%22%40version%22%3A%201.1%2C%0A%20%20%20%20%22schema%22%3A%20%22http%3A%2F%2Fschema.org%2F%22%2C%0A%20%20%20%20%22name%22%3A%20%22schema%3Aname%22%2C%0A%20%20%20%20%22affiliation%22%3A%20%7B%0A%20%20%20%20%20%20%22%40id%22%3A%20%22schema%3Aaffiliation%22%2C%0A%20%20%20%20%20%20%22%40container%22%3A%20%5B%22%40type%22%2C%20%22%40set%22%5D%0A%20%20%20%20%7D%0A%20%20%7D%2C%0A%20%20%22name%22%3A%20%22Manu%20Sporny%22%2C%0A%20%20%22affiliation%22%3A%20%7B%0A%20%20%20%20%22schema%3ACorporation%22%3A%20%5B%7B%0A%20%20%20%20%20%20%22%40id%22%3A%20%22https%3A%2F%2Fdigitalbazaar.com%2F%22%2C%0A%20%20%20%20%20%20%22name%22%3A%20%22Digital%20Bazaar%22%0A%20%20%20%20%7D%5D%2C%0A%20%20%20%20%22schema%3AProfessionalService%22%3A%20%5B%7B%0A%20%20%20%20%20%20%22%40id%22%3A%20%22https%3A%2F%2Fspec-ops.io%22%2C%0A%20%20%20%20%20%20%22name%22%3A%20%22Spec-Ops%22%0A%20%20%20%20%7D%5D%0A%20%20%7D%0A%7D">Open in playground</a>
    </div>
    <pre class="compacted input selected nohighlight">{
  "@context": {
    <span class="hl-bold">"@version": 1.1</span>,
    "schema": "http://schema.org/",
    "name": "schema:name",
    "affiliation": {
      "@id": "schema:affiliation",
      "@container": <span class="hl-bold">[</span>"@type", <span class="hl-bold">"@set"]</span>
    }
  },
  "name": "Manu Sporny",
  "affiliation": {
    "schema:Corporation": <span class="hl-bold">[</span>{
      "@id": "https://digitalbazaar.com/",
      "name": "Digital Bazaar"
    }<span class="hl-bold">]</span>,
    "schema:ProfessionalService": <span class="hl-bold">[</span>{
      "@id": "https://spec-ops.io",
      "name": "Spec-Ops"
    }<span class="hl-bold">]</span>
  }
}</pre>
    <pre class="expanded result nohighlight" data-result-for="Indexing data in JSON-LD by type with @set representation-compacted">[{
  "http://schema.org/name": [{"@value": "Manu Sporny"}],
  "http://schema.org/affiliation": [
    {
      "@id": "https://digitalbazaar.com/",
      "@type": ["http://schema.org/Corporation"],
      "http://schema.org/name": [{"@value": "Digital Bazaar"}]
    }, {
      "@id": "https://spec-ops.io",
      "@type": ["http://schema.org/ProfessionalService"],
      "http://schema.org/name": [{"@value": "Spec-Ops"}]
    }
  ]
}]</pre>
    <table class="statements" data-result-for="Indexing data in JSON-LD by type with @set representation-expanded" data-to-rdf="">
      <thead><tr><th>Subject</th><th>Property</th><th>Value</th></tr></thead>
      <tbody>
        <tr><td>https://digitalbazaar.com/</td><td>rdf:type</td><td>schema:Corporation</td></tr>
        <tr><td>https://digitalbazaar.com/</td><td>schema:name</td><td>Digital Bazaar</td></tr>
        <tr><td>https://spec-ops.io</td><td>rdf:type</td><td>schema:ProfessionalService</td></tr>
        <tr><td>https://spec-ops.io</td><td>schema:name</td><td>Spec-Ops</td></tr>
        <tr><td>_:b0</td><td>schema:name</td><td>Manu Sporny</td></tr>
        <tr><td>_:b0</td><td>schema:affiliation</td><td>https://digitalbazaar.com/</td></tr>
        <tr><td>_:b0</td><td>schema:affiliation</td><td>https://spec-ops.io</td></tr>
      </tbody>
    </table>
    <pre class="turtle" data-content-type="text/turtle" data-result-for="Indexing data in JSON-LD by type with @set representation-expanded" data-to-rdf="" aria-busy="false"><code class="hljs">@prefix rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; .
@prefix schema: &lt;http://schema.org/&gt; .
@prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt; .

&lt;https://digitalbazaar.com/&gt; a schema:Corporation;
   schema:name "Digital Bazaar" .

&lt;https://spec-ops.io&gt; a schema:ProfessionalService;
   schema:name "Spec-Ops" .

[
   schema:affiliation &lt;https://digitalbazaar.com/&gt;, &lt;https://spec-ops.io&gt;;
   schema:name "Manu Sporny"
] .</code></pre>
  </aside>

  <p>The special index <code>@none</code> is used for indexing
    <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a> which do not have an <code>@type</code>, which is useful to maintain
    a normalized representation. The <code>@none</code> index may also be
    a term which expands to <code>@none</code>, such as the term <em>none</em>
    used in the example below.</p>

  <aside class="example ds-selector-tabs" id="example-108-indexing-data-in-json-ld-by-type-using-none"><div class="marker">
      <a class="self-link" href="#example-108-indexing-data-in-json-ld-by-type-using-none">Example<bdi> 108</bdi></a><span class="example-title">: Indexing data in JSON-LD by type using @none</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="expanded">Expanded (Result)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="turtle">Turtle</button>
      <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%22%40version%22%3A%201.1%2C%0A%20%20%20%20%22schema%22%3A%20%22http%3A%2F%2Fschema.org%2F%22%2C%0A%20%20%20%20%22name%22%3A%20%22schema%3Aname%22%2C%0A%20%20%20%20%22affiliation%22%3A%20%7B%0A%20%20%20%20%20%20%22%40id%22%3A%20%22schema%3Aaffiliation%22%2C%0A%20%20%20%20%20%20%22%40container%22%3A%20%22%40type%22%0A%20%20%20%20%7D%2C%0A%20%20%20%20%22none%22%3A%20%22%40none%22%0A%20%20%7D%2C%0A%20%20%22name%22%3A%20%22Manu%20Sporny%22%2C%0A%20%20%22affiliation%22%3A%20%7B%0A%20%20%20%20%22schema%3ACorporation%22%3A%20%7B%0A%20%20%20%20%20%20%22%40id%22%3A%20%22https%3A%2F%2Fdigitalbazaar.com%2F%22%2C%0A%20%20%20%20%20%20%22name%22%3A%20%22Digital%20Bazaar%22%0A%20%20%20%20%7D%2C%0A%20%20%20%20%22schema%3AProfessionalService%22%3A%20%7B%0A%20%20%20%20%20%20%22%40id%22%3A%20%22https%3A%2F%2Fspec-ops.io%22%2C%0A%20%20%20%20%20%20%22name%22%3A%20%22Spec-Ops%22%0A%20%20%20%20%7D%2C%0A%20%20%20%20%22none%22%3A%20%7B%0A%20%20%20%20%20%20%22%40id%22%3A%20%22https%3A%2F%2Fgreggkellogg.net%2F%22%2C%0A%20%20%20%20%20%20%22name%22%3A%20%22Gregg%20Kellogg%22%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D">Open in playground</a>
    </div>
    <pre class="compacted input selected nohighlight">{
  "@context": {
    "@version": 1.1,
    "schema": "http://schema.org/",
    "name": "schema:name",
    "affiliation": {
      "@id": "schema:affiliation",
      "@container": "@type"
    },
    <span class="hl-bold">"none": "@none"</span>
  },
  "name": "Manu Sporny",
  "affiliation": {
    "schema:Corporation": {
      "@id": "https://digitalbazaar.com/",
      "name": "Digital Bazaar"
    },
    "schema:ProfessionalService": {
      "@id": "https://spec-ops.io",
      "name": "Spec-Ops"
    },
    <span class="hl-bold">"none": {
      "@id": "https://greggkellogg.net/",
      "name": "Gregg Kellogg"
    }</span>
  }
}</pre>
    <pre class="expanded result nohighlight" data-result-for="Indexing data in JSON-LD by type using @none-compacted">[{
  "http://schema.org/name": [{"@value": "Manu Sporny"}],
  "http://schema.org/affiliation": [
    {
      "@id": "https://digitalbazaar.com/",
      "@type": ["http://schema.org/Corporation"],
      "http://schema.org/name": [{"@value": "Digital Bazaar"}]
    },
    {
      "@id": "https://spec-ops.io",
      "@type": ["http://schema.org/ProfessionalService"],
      "http://schema.org/name": [{"@value": "Spec-Ops"}]
    },
    <span class="hl-bold">{
      "@id": "https://greggkellogg.net/",
      "http://schema.org/name": [{"@value": "Gregg Kellogg"}]
    }</span>
  ]
}]</pre>
    <table class="statements" data-result-for="Indexing data in JSON-LD by type using @none-expanded" data-to-rdf="">
      <thead><tr><th>Subject</th><th>Property</th><th>Value</th></tr></thead>
      <tbody>
        <tr><td>https://digitalbazaar.com/</td><td>rdf:type</td><td>schema:Corporation</td></tr>
        <tr><td>https://digitalbazaar.com/</td><td>schema:name</td><td>Digital Bazaar</td></tr>
        <tr><td>https://spec-ops.io</td><td>rdf:type</td><td>schema:ProfessionalService</td></tr>
        <tr><td>https://spec-ops.io</td><td>schema:name</td><td>Spec-Ops</td></tr>
        <tr><td>https://greggkellogg.net/</td><td>schema:name</td><td>Gregg Kellogg</td></tr>
        <tr><td>_:b0</td><td>schema:name</td><td>Manu Sporny</td></tr>
        <tr><td>_:b0</td><td>schema:affiliation</td><td>https://digitalbazaar.com/</td></tr>
        <tr><td>_:b0</td><td>schema:affiliation</td><td>https://spec-ops.io</td></tr>
        <tr><td>_:b0</td><td>schema:affiliation</td><td>https://greggkellogg.net/</td></tr>
      </tbody>
    </table>
    <pre class="turtle nohighlight" data-content-type="text/turtle" data-result-for="Indexing data in JSON-LD by type using @none-expanded" data-to-rdf="">@prefix rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; .
@prefix schema: &lt;http://schema.org/&gt; .
@prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt; .

&lt;https://digitalbazaar.com/&gt; a schema:Corporation;
   schema:name "Digital Bazaar" .

&lt;https://spec-ops.io&gt; a schema:ProfessionalService;
   schema:name "Spec-Ops" .

<span class="hl-bold">&lt;https://greggkellogg.net/&gt; schema:name "Gregg Kellogg" .</span>

[
   schema:affiliation
      &lt;https://digitalbazaar.com/&gt;,
      &lt;https://spec-ops.io&gt;,
      <span class="hl-bold">&lt;https://greggkellogg.net/&gt;</span>;
   schema:name "Manu Sporny"
] .</pre>
  </aside>

  <p>As with <a href="#dfn-id-map" class="internalDFN" data-link-type="dfn">id maps</a>, when used with <code>@type</code>, a container may also
    include <code>@set</code> to ensure that key values are always contained in an array.</p>

  <div class="note" role="note" id="issue-container-generatedID-38"><div role="heading" class="note-title marker" id="h-note-34" aria-level="5"><span>Note</span></div><p class=""><a href="#dfn-type-map" class="internalDFN" data-link-type="dfn">Type maps</a> are a new feature in JSON-LD 1.1.</p></div>
</section>
</section>

<section class="informative changed" id="included-nodes"><h3 id="x4-7-included-nodes"><bdi class="secno">4.7 </bdi>Included Nodes<a class="self-link" aria-label="§" href="#included-nodes"></a></h3><p><em>This section is non-normative.</em></p>
  <p>Sometimes it is also useful to list node objects as part of another node object.
    For instance, to represent a set of resources which are used by some other
    resource. <a href="#dfn-included-block" class="internalDFN" data-link-type="dfn">Included blocks</a> may be also be used to collect such secondary <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a>
    which can be referenced from a primary <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a>.
    For an example, consider a node object containing a list of different items,
    some of which share some common elements:</p>

  <div class="example" id="included-blocks-to-be-flattened">
          <div class="marker">
      <a class="self-link" href="#included-blocks-to-be-flattened">Example<bdi> 109</bdi></a><span class="example-title">: Included Blocks</span>
    </div> <pre class="input" aria-busy="false"><code class="hljs">{
  "@context": {
    "@version": 1.1,
    "@vocab": "http://example.org/",
    "classification": {"@type": "@vocab"},
    "service": {"@type": "@vocab"}
  },
  "@id": "http://example.org/base/1",
  "@type": "Thing-with-Items",
  "items": [{
    "@id":"http://example.org/base/2",
    "classification": "enum#c6",
    "service": "enum#s2"
  }, {
    "@id": "http://example.org/base/3",
    "classification": "enum#c6"
  }],
  <span class="hl-bold">"@included": [{
    "@id": "http://example.org/enum#c6",
    "@type": "Type",
    "label": "Classification 6"
  }, {
    "@id": "http://example.org/enum#s2",
    "@type": "Service",
    "label": "Login Service"
  }]</span>
}</code></pre>
        </div>

  <p>When <a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-api/#dfn-flattened">flattened</a>, this will move the <code>enum:c6</code> and <code>enum:s2</code> elements
    from the <a href="#dfn-included-block" class="internalDFN" data-link-type="dfn">included block</a> into the outer <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a>.</p>

  <aside class="example ds-selector-tabs" id="example-110-flattened-form-for-included-blocks"><div class="marker">
      <a class="self-link" href="#example-110-flattened-form-for-included-blocks">Example<bdi> 110</bdi></a><span class="example-title">: Flattened form for included blocks</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="flattened">Flattened (Result)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="turtle">Turtle</button>
      <a class="playground" target="_blank" data-result-for="#included-blocks-to-be-flattened" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%22%40version%22%3A%201.1%2C%0A%20%20%20%20%22%40vocab%22%3A%20%22http%3A%2F%2Fexample.org%2F%22%2C%0A%20%20%20%20%22classification%22%3A%20%7B%22%40type%22%3A%20%22%40vocab%22%7D%2C%0A%20%20%20%20%22service%22%3A%20%7B%22%40type%22%3A%20%22%40vocab%22%7D%0A%20%20%7D%2C%0A%20%20%22%40id%22%3A%20%22http%3A%2F%2Fexample.org%2Fbase%2F1%22%2C%0A%20%20%22%40type%22%3A%20%22Thing-with-Items%22%2C%0A%20%20%22items%22%3A%20%5B%7B%0A%20%20%20%20%22%40id%22%3A%22http%3A%2F%2Fexample.org%2Fbase%2F2%22%2C%0A%20%20%20%20%22classification%22%3A%20%22enum%23c6%22%2C%0A%20%20%20%20%22service%22%3A%20%22enum%23s2%22%0A%20%20%7D%2C%20%7B%0A%20%20%20%20%22%40id%22%3A%20%22http%3A%2F%2Fexample.org%2Fbase%2F3%22%2C%0A%20%20%20%20%22classification%22%3A%20%22enum%23c6%22%0A%20%20%7D%5D%2C%0A%20%20%22%40included%22%3A%20%5B%7B%0A%20%20%20%20%22%40id%22%3A%20%22http%3A%2F%2Fexample.org%2Fenum%23c6%22%2C%0A%20%20%20%20%22%40type%22%3A%20%22Type%22%2C%0A%20%20%20%20%22label%22%3A%20%22Classification%206%22%0A%20%20%7D%2C%20%7B%0A%20%20%20%20%22%40id%22%3A%20%22http%3A%2F%2Fexample.org%2Fenum%23s2%22%2C%0A%20%20%20%20%22%40type%22%3A%20%22Service%22%2C%0A%20%20%20%20%22label%22%3A%20%22Login%20Service%22%0A%20%20%7D%5D%0A%7D">Open in playground</a>
    </div>
    <pre class="flattened result selected" data-flatten="" data-result-for="Included Blocks" aria-busy="false"><code class="hljs">  [{
    "@id": "http://example.org/base/1",
    "@type": ["http://example.org/Thing-with-Items"],
    "http://example.org/items": [
      {"@id": "http://example.org/base/2"},
      {"@id": "http://example.org/base/3"}
    ]
  }, {
    "@id": "http://example.org/enum#c6",
    "@type": ["http://example.org/Type"],
    "http://example.org/label": [{"@value": "Classification 6"}]
  }, {
    "@id": "http://example.org/enum#s2",
    "@type": ["http://example.org/Service"],
    "http://example.org/label": [{"@value": "Login Service"}]
  }, {
    "@id": "http://example.org/base/2",
    "http://example.org/classification": [
      {"@id": "http://example.org/enum#c6"}
    ],
    "http://example.org/service": [
      {"@id": "http://example.org/enum#s2"}
    ]
  }, {
    "@id": "http://example.org/base/3",
    "http://example.org/classification": [
      {"@id": "http://example.org/enum#c6"}
    ]
  }
]</code></pre>
    <table class="statements" data-result-for="Flattened form for included blocks-flattened" data-to-rdf="">
      <thead><tr><th>Subject</th><th>Property</th><th>Value</th></tr></thead>
      <tbody>
      <tr><td>http://example.org/base/1</td><td>rdf:type</td><td>http://example.org/Thing-with-Items</td></tr>
      <tr><td>http://example.org/base/1</td><td>http://example.org/items</td><td>http://example.org/base/2</td></tr>
      <tr><td>http://example.org/base/1</td><td>http://example.org/items</td><td>http://example.org/base/3</td></tr>
      <tr><td>http://example.org/base/2</td><td>http://example.org/classification</td><td>http://example.org/enum#c6</td></tr>
      <tr><td>http://example.org/base/2</td><td>http://example.org/service</td><td>http://example.org/enum#s2</td></tr>
      <tr><td>http://example.org/base/3</td><td>http://example.org/classification</td><td>http://example.org/enum#c6</td></tr>
      <tr><td>http://example.org/enum#c6</td><td>rdf:type</td><td>http://example.org/Type</td></tr>
      <tr><td>http://example.org/enum#c6</td><td>http://example.org/label</td><td>Classification 6</td></tr>
      <tr><td>http://example.org/enum#s2</td><td>rdf:type</td><td>http://example.org/Service</td></tr>
      <tr><td>http://example.org/enum#s2</td><td>http://example.org/label</td><td>Login Service</td></tr>
      </tbody>
    </table>
    <pre class="turtle" data-content-type="text/turtle" data-result-for="Flattened form for included blocks-flattened" data-to-rdf="" aria-busy="false"><code class="hljs">@prefix ex: &lt;http://example.org/&gt; .
@prefix enum: &lt;http://example.org/enum#&gt; .

&lt;http://example.org/base/1&gt; a ex:Thing-with-Items;
  ex:items &lt;http://example.org/base/2&gt;, &lt;http://example.org/base/3&gt; .

&lt;http://example.org/base/2&gt; ex:classification enum:c6;
  ex:service enum:s2 .

&lt;http://example.org/base/3&gt; ex:classification enum:c6 .

enum:c6 a ex:Type;
  ex:label "Classification 6" .

enum:s2 a ex:Service;
  ex:label "Login Service" .</code></pre>
  </aside>

  <p>Included resources are described in
    <a href="https://jsonapi.org/format/#fetching-includes">Inclusion of Related Resources</a> of <cite><a href="https://jsonapi.org/format/">JSON API</a></cite> [<cite><a class="bibref" data-link-type="biblio" href="#bib-json.api" title="JSON API">JSON.API</a></cite>]
    as a way to include related resources associated with some primary resource;
    <code>@included</code> provides an analogous possibility in JSON-LD.</p>

  <p>As a by product of the use of <code>@included</code> within <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a>, a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a> may contain
    only <code>@included</code>, to provide a feature similar to that described in <a href="#advanced-context-usage" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">4.1 </bdi>Advanced Context Usage</a>,
    where <code>@graph</code> is used to described disconnected <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-node">nodes</a>.</p>

  <aside class="example ds-selector-tabs changed" id="example-111-describing-disconnected-nodes-with-included"><div class="marker">
      <a class="self-link" href="#example-111-describing-disconnected-nodes-with-included">Example<bdi> 111</bdi></a><span class="example-title">: Describing disconnected nodes with @included</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="expanded">Expanded (Result)</button>
      <button data-selects="flattened">Flattened</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="turtle">Turtle</button>
      <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%22Person%22%3A%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2FPerson%22%2C%0A%20%20%20%20%22name%22%3A%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2Fname%22%2C%0A%20%20%20%20%22knows%22%3A%20%7B%22%40id%22%3A%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2Fknows%22%2C%20%22%40type%22%3A%20%22%40id%22%7D%0A%20%20%7D%2C%0A%20%20%22%40included%22%3A%20%5B%7B%0A%20%20%20%20%22%40id%22%3A%20%22http%3A%2F%2Fmanu.sporny.org%2Fabout%23manu%22%2C%0A%20%20%20%20%22%40type%22%3A%20%22Person%22%2C%0A%20%20%20%20%22name%22%3A%20%22Manu%20Sporny%22%2C%0A%20%20%20%20%22knows%22%3A%20%22https%3A%2F%2Fgreggkellogg.net%2Ffoaf%23me%22%0A%20%20%7D%2C%20%7B%0A%20%20%20%20%22%40id%22%3A%20%22https%3A%2F%2Fgreggkellogg.net%2Ffoaf%23me%22%2C%0A%20%20%20%20%22%40type%22%3A%20%22Person%22%2C%0A%20%20%20%20%22name%22%3A%20%22Gregg%20Kellogg%22%2C%0A%20%20%20%20%22knows%22%3A%20%22http%3A%2F%2Fmanu.sporny.org%2Fabout%23manu%22%0A%20%20%7D%5D%0A%7D">Open in playground</a>
    </div>
    <pre class="compacted input selected nohighlight">{
  "@context": {
    "Person": "http://xmlns.com/foaf/0.1/Person",
    "name": "http://xmlns.com/foaf/0.1/name",
    "knows": {"@id": "http://xmlns.com/foaf/0.1/knows", "@type": "@id"}
  },
  <span class="hl-bold">"@included": [{
    "@id": "http://manu.sporny.org/about#manu",
    "@type": "Person",
    "name": "Manu Sporny",
    "knows": "https://greggkellogg.net/foaf#me"
  }, {
    "@id": "https://greggkellogg.net/foaf#me",
    "@type": "Person",
    "name": "Gregg Kellogg",
    "knows": "http://manu.sporny.org/about#manu"
  }]</span>
}</pre>
    <pre class="expanded result nohighlight" data-result-for="Describing disconnected nodes with @included-compacted">[{
  <span class="hl-bold">"@included": [{
    "@id": "http://manu.sporny.org/about#manu",
    "@type": ["http://xmlns.com/foaf/0.1/Person"],
    "http://xmlns.com/foaf/0.1/name": [{"@value": "Manu Sporny"}],
    "http://xmlns.com/foaf/0.1/knows": [
      {"@id": "https://greggkellogg.net/foaf#me"}
    ]
  }, {
    "@id": "https://greggkellogg.net/foaf#me",
    "@type": ["http://xmlns.com/foaf/0.1/Person"],
    "http://xmlns.com/foaf/0.1/name": [{"@value": "Gregg Kellogg"}],
    "http://xmlns.com/foaf/0.1/knows": [
      {"@id": "http://manu.sporny.org/about#manu"}
    ]
  }]</span>
}]</pre>
    <pre class="flattened nohighlight" data-flatten="" data-result-for="Describing disconnected nodes with @included-expanded">[{
  "@id": "http://manu.sporny.org/about#manu",
  "@type": ["http://xmlns.com/foaf/0.1/Person"],
  "http://xmlns.com/foaf/0.1/name": [{"@value": "Manu Sporny"}],
  "http://xmlns.com/foaf/0.1/knows": [
    {"@id": "https://greggkellogg.net/foaf#me"}
  ]
}, {
  "@id": "https://greggkellogg.net/foaf#me",
  "@type": ["http://xmlns.com/foaf/0.1/Person"],
  "http://xmlns.com/foaf/0.1/name": [{"@value": "Gregg Kellogg"}],
  "http://xmlns.com/foaf/0.1/knows": [
    {"@id": "http://manu.sporny.org/about#manu"}
  ]
}]</pre>
    <table class="statements" data-result-for="Describing disconnected nodes with @included-expanded" data-to-rdf="">
      <thead><tr><th>Subject</th><th>Property</th><th>Value</th><th>Value Type</th></tr></thead>
      <tbody>
        <tr><td>http://manu.sporny.org/about#manu</td><td>rdf:type</td><td>foaf:Person</td><td>&nbsp;</td></tr>
        <tr><td>http://manu.sporny.org/about#manu</td><td>foaf:name</td><td>Manu Sporny</td><td>&nbsp;</td></tr>
        <tr><td>http://manu.sporny.org/about#manu</td><td>foaf:knows</td><td>https://greggkellogg.net/foaf#me</td><td>&nbsp;</td></tr>
        <tr><td>https://greggkellogg.net/foaf#me</td><td>rdf:type</td><td>foaf:Person</td><td>&nbsp;</td></tr>
        <tr><td>https://greggkellogg.net/foaf#me</td><td>foaf:name</td><td>Gregg Kellogg</td><td>&nbsp;</td></tr>
        <tr><td>https://greggkellogg.net/foaf#me</td><td>foaf:knows</td><td>http://manu.sporny.org/about#manu</td><td>&nbsp;</td></tr>
      </tbody>
    </table>
    <pre class="turtle nohighlight" data-content-type="text/turtle" data-result-for="Describing disconnected nodes with @included-expanded" data-to-rdf="">@prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt; .

&lt;http://manu.sporny.org/about#manu&gt; a foaf:Person;
  foaf:name "Manu Sporny";
  foaf:knows &lt;https://greggkellogg.net/foaf#me&gt; .

&lt;https://greggkellogg.net/foaf#me&gt; a foaf:Person;
  foaf:name "Gregg Kellogg";
  foaf:knows &lt;http://manu.sporny.org/about#manu&gt; .</pre>
  </aside>

  <p>However, in contrast to <code>@graph</code>, <code>@included</code> does not interact with other <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-property">properties</a>
    contained within the same <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a>, a feature discussed further in <a href="#named-graphs" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">4.9 </bdi>Named Graphs</a>.</p>
</section>

<section class="informative" id="reverse-properties"><h3 id="x4-8-reverse-properties"><bdi class="secno">4.8 </bdi>Reverse Properties<a class="self-link" aria-label="§" href="#reverse-properties"></a></h3><p><em>This section is non-normative.</em></p>

  <p>JSON-LD serializes directed <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-graph">graphs</a>. That means that
    every <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-property">property</a> points from a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-node">node</a> to another <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-node">node</a>
    or <a data-lt="JSON-LD value" href="#dfn-json-ld-value" class="internalDFN" data-link-type="dfn">value</a>. However, in some cases, it is desirable
    to serialize in the reverse direction. Consider for example the case where a person
    and its children should be described in a document. If the used vocabulary does not
    provide a <em>children</em> <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-property">property</a> but just a <em>parent</em>
    <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-property">property</a>, every <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-node">node</a> representing a child would have to
    be expressed with a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-property">property</a> pointing to the parent as in the following
    example.</p>

  <aside class="example ds-selector-tabs" id="example-112-a-document-with-children-linking-to-their-parent"><div class="marker">
      <a class="self-link" href="#example-112-a-document-with-children-linking-to-their-parent">Example<bdi> 112</bdi></a><span class="example-title">: A document with children linking to their parent</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="expanded">Expanded (Result)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="turtle">Turtle</button>
      <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%5B%0A%20%20%7B%0A%20%20%20%20%22%40id%22%3A%20%22%23homer%22%2C%0A%20%20%20%20%22http%3A%2F%2Fexample.com%2Fvocab%23name%22%3A%20%22Homer%22%0A%20%20%7D%2C%20%7B%0A%20%20%20%20%22%40id%22%3A%20%22%23bart%22%2C%0A%20%20%20%20%22http%3A%2F%2Fexample.com%2Fvocab%23name%22%3A%20%22Bart%22%2C%0A%20%20%20%20%22http%3A%2F%2Fexample.com%2Fvocab%23parent%22%3A%20%7B%20%22%40id%22%3A%20%22%23homer%22%20%7D%0A%20%20%7D%2C%20%7B%0A%20%20%20%20%22%40id%22%3A%20%22%23lisa%22%2C%0A%20%20%20%20%22http%3A%2F%2Fexample.com%2Fvocab%23name%22%3A%20%22Lisa%22%2C%0A%20%20%20%20%22http%3A%2F%2Fexample.com%2Fvocab%23parent%22%3A%20%7B%20%22%40id%22%3A%20%22%23homer%22%20%7D%0A%20%20%7D%0A%5D">Open in playground</a>
    </div>
    <pre class="compacted input selected nohighlight" data-base="http://example.org/">[
  {
    <span class="hl-bold">"@id": "#homer"</span>,
    "http://example.com/vocab#name": "Homer"
  }, {
    "@id": "#bart",
    "http://example.com/vocab#name": "Bart",
    <span class="hl-bold">"http://example.com/vocab#parent": { "@id": "#homer" }</span>
  }, {
    "@id": "#lisa",
    "http://example.com/vocab#name": "Lisa",
    <span class="hl-bold">"http://example.com/vocab#parent": { "@id": "#homer" }</span>
  }
]</pre>
    <pre class="expanded result nohighlight" data-base="http://example.org/" data-result-for="A document with children linking to their parent-compacted">[{
  "@id": "http://example.org/#homer",
  "http://example.com/vocab#name": [{"@value": "Homer"}]
}, {
  "@id": "http://example.org/#bart",
  "http://example.com/vocab#name": [{"@value": "Bart"}],
  "http://example.com/vocab#parent": [{"@id": "http://example.org/#homer"}]
}, {
  "@id": "http://example.org/#lisa",
  "http://example.com/vocab#name": [{"@value": "Lisa"}],
  "http://example.com/vocab#parent": [{"@id": "http://example.org/#homer"}
  ]
}]</pre>
    <table class="statements" data-result-for="A document with children linking to their parent-expanded" data-to-rdf="">
      <thead><tr><th>Subject</th><th>Property</th><th>Value</th></tr></thead>
      <tbody>
        <tr><td>http://example.org/#homer</td><td>http://example.com/vocab#name</td><td>Homer</td></tr>
        <tr><td>http://example.org/#bart</td><td>http://example.com/vocab#name</td><td>Bart</td></tr>
        <tr><td>http://example.org/#bart</td><td>http://example.com/vocab#parent</td><td>http://example.org/#homer</td></tr>
        <tr><td>http://example.org/#lisa</td><td>http://example.com/vocab#name</td><td>Lisa</td></tr>
        <tr><td>http://example.org/#lisa</td><td>http://example.com/vocab#parent</td><td>http://example.org/#homer</td></tr>
      </tbody>
    </table>
    <pre class="turtle" data-content-type="text/turtle" data-result-for="A document with children linking to their parent-expanded" data-base="http://example.org/" data-to-rdf="" aria-busy="false"><code class="hljs">@base &lt;http://example.org/&gt; .
&lt;#homer&gt; &lt;http://example.com/vocab#name&gt; "Homer" .

&lt;#bart&gt; &lt;http://example.com/vocab#name&gt; "Bart";
   &lt;http://example.com/vocab#parent&gt; &lt;#homer&gt; .

&lt;#lisa&gt; &lt;http://example.com/vocab#name&gt; "Lisa";
   &lt;http://example.com/vocab#parent&gt; &lt;#homer&gt; .</code></pre>
  </aside>

  <p>Expressing such data is much simpler by using JSON-LD's <code>@reverse</code>
    <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a>:</p>

  <aside class="example ds-selector-tabs" id="example-113-a-person-and-its-children-using-a-reverse-property"><div class="marker">
      <a class="self-link" href="#example-113-a-person-and-its-children-using-a-reverse-property">Example<bdi> 113</bdi></a><span class="example-title">: A person and its children using a reverse property</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="expanded">Expanded (Result)</button>
      <button data-selects="flattened">Flattened</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="turtle">Turtle</button>
      <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40id%22%3A%20%22%23homer%22%2C%0A%20%20%22http%3A%2F%2Fexample.com%2Fvocab%23name%22%3A%20%22Homer%22%2C%0A%20%20%22%40reverse%22%3A%20%7B%0A%20%20%20%20%22http%3A%2F%2Fexample.com%2Fvocab%23parent%22%3A%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22%40id%22%3A%20%22%23bart%22%2C%0A%20%20%20%20%20%20%20%20%22http%3A%2F%2Fexample.com%2Fvocab%23name%22%3A%20%22Bart%22%0A%20%20%20%20%20%20%7D%2C%20%7B%0A%20%20%20%20%20%20%20%20%22%40id%22%3A%20%22%23lisa%22%2C%0A%20%20%20%20%20%20%20%20%22http%3A%2F%2Fexample.com%2Fvocab%23name%22%3A%20%22Lisa%22%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%5D%0A%20%20%7D%0A%7D">Open in playground</a>
    </div>
    <pre class="compacted input selected nohighlight" data-base="http://example.org/">{
  "@id": "#homer",
  "http://example.com/vocab#name": "Homer",
  <span class="hl-bold">"@reverse"</span>: {
    <span class="hl-bold">"http://example.com/vocab#parent"</span>: [
      {
        "@id": "#bart",
        "http://example.com/vocab#name": "Bart"
      }, {
        "@id": "#lisa",
        "http://example.com/vocab#name": "Lisa"
      }
    ]
  }
}</pre>
    <pre class="expanded result nohighlight" data-base="http://example.org/" data-result-for="A person and its children using a reverse property-compacted">[{
  "@id": "http://example.org/#homer",
  "http://example.com/vocab#name": [{"@value": "Homer"}],
  <span class="hl-bold">"@reverse"</span>: {
    <span class="hl-bold">"http://example.com/vocab#parent"</span>: [{
      "@id": "http://example.org/#bart",
      "http://example.com/vocab#name": [{"@value": "Bart"}]
    }, {
      "@id": "http://example.org/#lisa",
      "http://example.com/vocab#name": [{"@value": "Lisa"}]
    }]
  }
}]</pre>
    <pre class="flattened nohighlight" data-base="http://example.org/" data-flatten="" data-result-for="A person and its children using a reverse property-expanded">[{
  "@id": "http://example.org/#homer",
  "http://example.com/vocab#name": [{"@value": "Homer"}]
}, {
  "@id": "http://example.org/#bart",
  "http://example.com/vocab#name": [{"@value": "Bart"}],
  "http://example.com/vocab#parent": [{"@id": "http://example.org/#homer"}]
}, {
  "@id": "http://example.org/#lisa",
  "http://example.com/vocab#name": [{"@value": "Lisa"}],
  "http://example.com/vocab#parent": [{"@id": "http://example.org/#homer"}
  ]
}]</pre>
    <table class="statements" data-result-for="A person and its children using a reverse property-expanded" data-to-rdf="">
      <thead><tr><th>Subject</th><th>Property</th><th>Value</th></tr></thead>
      <tbody>
        <tr><td>http://example.org/#homer</td><td>http://example.com/vocab#name</td><td>Homer</td></tr>
        <tr><td>http://example.org/#bart</td><td>http://example.com/vocab#name</td><td>Bart</td></tr>
        <tr><td>http://example.org/#bart</td><td>http://example.com/vocab#parent</td><td>http://example.org/#homer</td></tr>
        <tr><td>http://example.org/#lisa</td><td>http://example.com/vocab#name</td><td>Lisa</td></tr>
        <tr><td>http://example.org/#lisa</td><td>http://example.com/vocab#parent</td><td>http://example.org/#homer</td></tr>
      </tbody>
    </table>
    <pre class="turtle" data-content-type="text/turtle" data-result-for="A person and its children using a reverse property-expanded" data-base="http://example.org/" data-to-rdf="" aria-busy="false"><code class="hljs">@base &lt;http://example.org/&gt; .
&lt;#homer&gt; &lt;http://example.com/vocab#name&gt; "Homer" .

&lt;#bart&gt; &lt;http://example.com/vocab#name&gt; "Bart";
   &lt;http://example.com/vocab#parent&gt; &lt;#homer&gt; .

&lt;#lisa&gt; &lt;http://example.com/vocab#name&gt; "Lisa";
   &lt;http://example.com/vocab#parent&gt; &lt;#homer&gt; .</code></pre>
  </aside>

  <p>The <code>@reverse</code> <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a> can also be used in
    <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definitions</a>
    to create reverse properties as shown in the following example:</p>

  <aside class="example ds-selector-tabs" id="example-114-using-reverse-to-define-reverse-properties"><div class="marker">
      <a class="self-link" href="#example-114-using-reverse-to-define-reverse-properties">Example<bdi> 114</bdi></a><span class="example-title">: Using @reverse to define reverse properties</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="expanded">Expanded (Result)</button>
      <button data-selects="flattened">Flattened</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="turtle">Turtle</button>
      <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%20%22name%22%3A%20%22http%3A%2F%2Fexample.com%2Fvocab%23name%22%2C%0A%20%20%20%20%22children%22%3A%20%7B%20%22%40reverse%22%3A%20%22http%3A%2F%2Fexample.com%2Fvocab%23parent%22%20%7D%0A%20%20%7D%2C%0A%20%20%22%40id%22%3A%20%22%23homer%22%2C%0A%20%20%22name%22%3A%20%22Homer%22%2C%0A%20%20%22children%22%3A%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%22%40id%22%3A%20%22%23bart%22%2C%0A%20%20%20%20%20%20%22name%22%3A%20%22Bart%22%0A%20%20%20%20%7D%2C%20%7B%0A%20%20%20%20%20%20%22%40id%22%3A%20%22%23lisa%22%2C%0A%20%20%20%20%20%20%22name%22%3A%20%22Lisa%22%0A%20%20%20%20%7D%0A%20%20%5D%0A%7D">Open in playground</a>
    </div>
    <pre class="compacted input selected nohighlight" data-base="http://example.org/">{
  "@context": { "name": "http://example.com/vocab#name",
    <span class="hl-bold">"children": { "@reverse": "http://example.com/vocab#parent" }</span>
  },
  "@id": "#homer",
  "name": "Homer",
  <span class="hl-bold">"children"</span>: [
    {
      "@id": "#bart",
      "name": "Bart"
    }, {
      "@id": "#lisa",
      "name": "Lisa"
    }
  ]
}</pre>
    <pre class="expanded result nohighlight" data-base="http://example.org/" data-result-for="Using @reverse to define reverse properties-compacted">[{
  "@id": "http://example.org/#homer",
  "http://example.com/vocab#name": [{"@value": "Homer"}],
  <span class="hl-bold">"@reverse"</span>: {
    <span class="hl-bold">"http://example.com/vocab#parent"</span>: [{
      "@id": "http://example.org/#bart",
      "http://example.com/vocab#name": [{"@value": "Bart"}]
    }, {
      "@id": "http://example.org/#lisa",
      "http://example.com/vocab#name": [{"@value": "Lisa"}]
    }]
  }
}]</pre>
    <pre class="flattened nohighlight" data-base="http://example.org/" data-flatten="" data-result-for="Using @reverse to define reverse properties-expanded">[{
  "@id": "http://example.org/#homer",
  "http://example.com/vocab#name": [{"@value": "Homer"}]
}, {
  "@id": "http://example.org/#bart",
  "http://example.com/vocab#name": [{"@value": "Bart"}],
  "http://example.com/vocab#parent": [{"@id": "http://example.org/#homer"}]
}, {
  "@id": "http://example.org/#lisa",
  "http://example.com/vocab#name": [{"@value": "Lisa"}],
  "http://example.com/vocab#parent": [{"@id": "http://example.org/#homer"}
  ]
}]</pre>
    <table class="statements" data-result-for="Using @reverse to define reverse properties-expanded" data-to-rdf="">
      <thead><tr><th>Subject</th><th>Property</th><th>Value</th></tr></thead>
      <tbody>
        <tr><td>http://example.org/#homer</td><td>http://example.com/vocab#name</td><td>Homer</td></tr>
        <tr><td>http://example.org/#bart</td><td>http://example.com/vocab#name</td><td>Bart</td></tr>
        <tr><td>http://example.org/#bart</td><td>http://example.com/vocab#parent</td><td>http://example.org/#homer</td></tr>
        <tr><td>http://example.org/#lisa</td><td>http://example.com/vocab#name</td><td>Lisa</td></tr>
        <tr><td>http://example.org/#lisa</td><td>http://example.com/vocab#parent</td><td>http://example.org/#homer</td></tr>
      </tbody>
    </table>
    <pre class="turtle" data-content-type="text/turtle" data-result-for="Using @reverse to define reverse properties-expanded" data-base="http://example.org/" data-to-rdf="" aria-busy="false"><code class="hljs">@base &lt;http://example.org/&gt; .
&lt;#homer&gt; &lt;http://example.com/vocab#name&gt; "Homer" .

&lt;#bart&gt; &lt;http://example.com/vocab#name&gt; "Bart";
   &lt;http://example.com/vocab#parent&gt; &lt;#homer&gt; .

&lt;#lisa&gt; &lt;http://example.com/vocab#name&gt; "Lisa";
   &lt;http://example.com/vocab#parent&gt; &lt;#homer&gt; .</code></pre>
  </aside>
</section>

<section class="informative" id="named-graphs"><h3 id="x4-9-named-graphs"><bdi class="secno">4.9 </bdi>Named Graphs<a class="self-link" aria-label="§" href="#named-graphs"></a></h3><p><em>This section is non-normative.</em></p>

  <p>At times, it is necessary to make statements about a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-graph">graph</a>
    itself, rather than just a single <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-node">node</a>. This can be done by
    grouping a set of <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-node">nodes</a> using the <code>@graph</code>
    <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a>. A developer may also name data expressed using the
    <code>@graph</code> <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a> by pairing it with an
    <code>@id</code> <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a> as shown in the following example:</p>

  <aside class="example ds-selector-tabs changed" id="example-115-identifying-and-making-statements-about-a-graph"><div class="marker">
      <a class="self-link" href="#example-115-identifying-and-making-statements-about-a-graph">Example<bdi> 115</bdi></a><span class="example-title">: Identifying and making statements about a graph</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="expanded">Expanded (Result)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="trig">TriG</button>
      <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%22generatedAt%22%3A%20%7B%0A%20%20%20%20%20%20%22%40id%22%3A%20%22http%3A%2F%2Fwww.w3.org%2Fns%2Fprov%23generatedAtTime%22%2C%0A%20%20%20%20%20%20%22%40type%22%3A%20%22http%3A%2F%2Fwww.w3.org%2F2001%2FXMLSchema%23dateTime%22%0A%20%20%20%20%7D%2C%0A%20%20%20%20%22Person%22%3A%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2FPerson%22%2C%0A%20%20%20%20%22name%22%3A%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2Fname%22%2C%0A%20%20%20%20%22knows%22%3A%20%7B%22%40id%22%3A%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2Fknows%22%2C%20%22%40type%22%3A%20%22%40id%22%7D%0A%20%20%7D%2C%0A%20%20%22%40id%22%3A%20%22http%3A%2F%2Fexample.org%2Ffoaf-graph%22%2C%0A%20%20%22generatedAt%22%3A%20%222012-04-09T00%3A00%3A00%22%2C%0A%20%20%22%40graph%22%3A%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%22%40id%22%3A%20%22http%3A%2F%2Fmanu.sporny.org%2Fabout%23manu%22%2C%0A%20%20%20%20%20%20%22%40type%22%3A%20%22Person%22%2C%0A%20%20%20%20%20%20%22name%22%3A%20%22Manu%20Sporny%22%2C%0A%20%20%20%20%20%20%22knows%22%3A%20%22https%3A%2F%2Fgreggkellogg.net%2Ffoaf%23me%22%0A%20%20%20%20%7D%2C%20%7B%0A%20%20%20%20%20%20%22%40id%22%3A%20%22https%3A%2F%2Fgreggkellogg.net%2Ffoaf%23me%22%2C%0A%20%20%20%20%20%20%22%40type%22%3A%20%22Person%22%2C%0A%20%20%20%20%20%20%22name%22%3A%20%22Gregg%20Kellogg%22%2C%0A%20%20%20%20%20%20%22knows%22%3A%20%22http%3A%2F%2Fmanu.sporny.org%2Fabout%23manu%22%0A%20%20%20%20%7D%0A%20%20%5D%0A%7D">Open in playground</a>
    </div>
    <pre class="compacted input selected nohighlight">{
  "@context": {
    "generatedAt": {
      "@id": "http://www.w3.org/ns/prov#generatedAtTime",
      "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
    },
    "Person": "http://xmlns.com/foaf/0.1/Person",
    "name": "http://xmlns.com/foaf/0.1/name",
    "knows": {"@id": "http://xmlns.com/foaf/0.1/knows", "@type": "@id"}
  },
  <span class="hl-bold">"@id": "http://example.org/foaf-graph",
  "generatedAt": "2012-04-09T00:00:00",
  "@graph":</span> [
    {
      "@id": "http://manu.sporny.org/about#manu",
      "@type": "Person",
      "name": "Manu Sporny",
      "knows": "https://greggkellogg.net/foaf#me"
    }, {
      "@id": "https://greggkellogg.net/foaf#me",
      "@type": "Person",
      "name": "Gregg Kellogg",
      "knows": "http://manu.sporny.org/about#manu"
    }
  ]
}</pre>
    <pre class="expanded result nohighlight" data-result-for="Identifying and making statements about a graph-compacted">[{
  <span class="hl-bold">"@id": "http://example.org/foaf-graph",
  "http://www.w3.org/ns/prov#generatedAtTime": [{
    "@value": "2012-04-09T00:00:00",
    "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
  }]</span>,
  "@graph": [{
    "@id": "http://manu.sporny.org/about#manu",
    "@type": ["http://xmlns.com/foaf/0.1/Person"],
    "http://xmlns.com/foaf/0.1/name": [{"@value": "Manu Sporny"}],
    "http://xmlns.com/foaf/0.1/knows": [
      {"@id": "https://greggkellogg.net/foaf#me"}
    ]
  }, {
    "@id": "https://greggkellogg.net/foaf#me",
    "@type": ["http://xmlns.com/foaf/0.1/Person"],
    "http://xmlns.com/foaf/0.1/name": [{"@value": "Gregg Kellogg"}],
    "http://xmlns.com/foaf/0.1/knows": [
      {"@id": "http://manu.sporny.org/about#manu"}
    ]
  }]
}]</pre>
    <table class="statements" data-result-for="Identifying and making statements about a graph-expanded" data-to-rdf="">
      <thead><tr><th>Graph</th><th>Subject</th><th>Property</th><th>Value</th><th>Value Type</th></tr></thead>
      <tbody>
        <tr><td>&nbsp;</td><td>http://example.org/foaf-graph</td><td>prov:generatedAtTime</td><td>2012-04-09T00:00:00</td><td>xsd:dateTime</td></tr>
        <tr><td>http://example.org/foaf-graph</td><td>http://manu.sporny.org/about#manu</td><td>rdf:type</td><td>foaf:Person</td><td>&nbsp;</td></tr>
        <tr><td>http://example.org/foaf-graph</td><td>http://manu.sporny.org/about#manu</td><td>foaf:name</td><td>Manu Sporny</td><td>&nbsp;</td></tr>
        <tr><td>http://example.org/foaf-graph</td><td>http://manu.sporny.org/about#manu</td><td>foaf:knows</td><td>https://greggkellogg.net/foaf#me</td><td>&nbsp;</td></tr>
        <tr><td>http://example.org/foaf-graph</td><td>https://greggkellogg.net/foaf#me</td><td>rdf:type</td><td>foaf:Person</td><td>&nbsp;</td></tr>
        <tr><td>http://example.org/foaf-graph</td><td>https://greggkellogg.net/foaf#me</td><td>foaf:name</td><td>Gregg Kellogg</td><td>&nbsp;</td></tr>
        <tr><td>http://example.org/foaf-graph</td><td>https://greggkellogg.net/foaf#me</td><td>foaf:knows</td><td>http://manu.sporny.org/about#manu</td><td>&nbsp;</td></tr>
      </tbody>
    </table>
    <pre class="trig nohighlight" data-content-type="application/trig" data-result-for="Identifying and making statements about a graph-expanded" data-to-rdf="">@prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt; .
@prefix prov: &lt;http://www.w3.org/ns/prov#&gt; .
@prefix rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; .
@prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt; .

&lt;http://example.org/foaf-graph&gt; prov:generatedAtTime "2012-04-09T00:00:00"^^xsd:dateTime .

&lt;http://example.org/foaf-graph&gt; {
  &lt;http://manu.sporny.org/about#manu&gt; a foaf:Person;
     foaf:name "Manu Sporny";
     foaf:knows &lt;https://greggkellogg.net/foaf#me&gt; .

  &lt;https://greggkellogg.net/foaf#me&gt; a foaf:Person;
     foaf:name "Gregg Kellogg";
     foaf:knows &lt;http://manu.sporny.org/about#manu&gt; .
}</pre>
  </aside>

  <p>The example above expresses a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-named-graph">named graph</a> that is identified
    by the <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> <code>http://example.org/foaf-graph</code>. That
    graph is composed of the statements about Manu and Gregg. Metadata about
    the graph itself is expressed via the <code>generatedAt</code> property,
    which specifies when the graph was generated.</p>

  <p>When a JSON-LD document's top-level structure is a
    <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a> that contains no other
    keys than <code>@graph</code> and
    optionally <code>@context</code> (properties that are not mapped to an
    <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> or a <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a> are ignored),
    <code>@graph</code> is considered to express the otherwise implicit
    <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-default-graph">default graph</a>. This mechanism can be useful when a number
    of <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-node">nodes</a> exist at the document's top level that
    share the same <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a>, which is, e.g., the case when a
    document is <a href="#flattened-document-form">flattened</a>. The
    <code>@graph</code> keyword collects such nodes in an <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a>
    and allows the use of a shared context.</p>

  <aside class="example ds-selector-tabs changed" id="example-116-using-graph-to-explicitly-express-the-default-graph"><div class="marker">
      <a class="self-link" href="#example-116-using-graph-to-explicitly-express-the-default-graph">Example<bdi> 116</bdi></a><span class="example-title">: Using @graph to explicitly express the default graph</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="expanded">Expanded (Result)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="trig">TriG</button>
      <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%22%40vocab%22%3A%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2F%22%0A%20%20%7D%2C%0A%20%20%22%40graph%22%3A%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%22%40id%22%3A%20%22http%3A%2F%2Fmanu.sporny.org%2Fabout%23manu%22%2C%0A%20%20%20%20%20%20%22%40type%22%3A%20%22Person%22%2C%0A%20%20%20%20%20%20%22name%22%3A%20%22Manu%20Sporny%22%0A%20%20%20%20%7D%2C%20%7B%0A%20%20%20%20%20%20%22%40id%22%3A%20%22https%3A%2F%2Fgreggkellogg.net%2Ffoaf%23me%22%2C%0A%20%20%20%20%20%20%22%40type%22%3A%20%22Person%22%2C%0A%20%20%20%20%20%20%22name%22%3A%20%22Gregg%20Kellogg%22%0A%20%20%20%20%7D%0A%20%20%5D%0A%7D">Open in playground</a>
    </div>
    <pre class="compacted input selected nohighlight">{
  "@context": {
    "@vocab": "http://xmlns.com/foaf/0.1/"
  },
  "<span class="hl-bold">@graph</span>": [
    {
      "@id": "http://manu.sporny.org/about#manu",
      "@type": "Person",
      "name": "Manu Sporny"
    }, {
      "@id": "https://greggkellogg.net/foaf#me",
      "@type": "Person",
      "name": "Gregg Kellogg"
    }
  ]
}</pre>
    <pre class="expanded result nohighlight" data-result-for="Using @graph to explicitly express the default graph-compacted">[{
  "@id": "http://manu.sporny.org/about#manu",
  "@type": ["http://xmlns.com/foaf/0.1/Person"],
  "http://xmlns.com/foaf/0.1/name": [{"@value": "Manu Sporny"}]
},
{
  "@id": "https://greggkellogg.net/foaf#me",
  "@type": ["http://xmlns.com/foaf/0.1/Person"],
  "http://xmlns.com/foaf/0.1/name": [{"@value": "Gregg Kellogg"}]
}]</pre>
    <table class="statements" data-result-for="Using @graph to explicitly express the default graph-expanded" data-to-rdf="">
      <thead><tr><th>Subject</th><th>Property</th><th>Value</th></tr></thead>
      <tbody>
        <tr><td>http://manu.sporny.org/about#manu</td><td>rdf:type</td><td>foaf:Person</td></tr>
        <tr><td>http://manu.sporny.org/about#manu</td><td>foaf:name</td><td>Manu Sporny</td></tr>
        <tr><td>https://greggkellogg.net/foaf#me</td><td>rdf:type</td><td>foaf:Person</td></tr>
        <tr><td>https://greggkellogg.net/foaf#me</td><td>foaf:name</td><td>Gregg Kellogg</td></tr>
      </tbody>
    </table>
    <pre class="trig nohighlight" data-content-type="application/trig" data-result-for="Using @graph to explicitly express the default graph-expanded" data-to-rdf="">@prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt; .

&lt;https://greggkellogg.net/foaf#me&gt; a foaf:Person;
   foaf:name "Gregg Kellogg" .

&lt;http://manu.sporny.org/about#manu&gt; a foaf:Person;
   foaf:name "Manu Sporny" .</pre>
  </aside>

  <p>In this case, <a href="#dfn-embedding" class="internalDFN" data-link-type="dfn">embedding</a> can not be used as
    the graph contains unrelated nodes.
    This is equivalent to using multiple
    <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a> in array and defining
    the <code>@context</code> within each <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a>:</p>

  <aside class="example ds-selector-tabs changed" id="example-117-context-needs-to-be-duplicated-if-graph-is-not-used"><div class="marker">
      <a class="self-link" href="#example-117-context-needs-to-be-duplicated-if-graph-is-not-used">Example<bdi> 117</bdi></a><span class="example-title">: Context needs to be duplicated if @graph is not used</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="expanded">Expanded (Result)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="trig">TriG</button>
      <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%5B%0A%20%20%7B%0A%20%20%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%20%20%22%40vocab%22%3A%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2F%22%2C%0A%20%20%20%20%20%20%22knows%22%3A%20%7B%22%40type%22%3A%20%22%40id%22%7D%0A%20%20%20%20%7D%2C%0A%20%20%20%20%22%40id%22%3A%20%22http%3A%2F%2Fmanu.sporny.org%2Fabout%23manu%22%2C%0A%20%20%20%20%22%40type%22%3A%20%22Person%22%2C%0A%20%20%20%20%22name%22%3A%20%22Manu%20Sporny%22%2C%0A%20%20%20%20%22knows%22%3A%20%22https%3A%2F%2Fgreggkellogg.net%2Ffoaf%23me%22%0A%20%20%7D%2C%0A%20%20%7B%0A%20%20%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%20%20%22%40vocab%22%3A%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2F%22%2C%0A%20%20%20%20%20%20%22knows%22%3A%20%7B%22%40type%22%3A%20%22%40id%22%7D%0A%20%20%20%20%7D%2C%0A%20%20%20%20%22%40id%22%3A%20%22https%3A%2F%2Fgreggkellogg.net%2Ffoaf%23me%22%2C%0A%20%20%20%20%22%40type%22%3A%20%22Person%22%2C%0A%20%20%20%20%22name%22%3A%20%22Gregg%20Kellogg%22%2C%0A%20%20%20%20%22knows%22%3A%20%22http%3A%2F%2Fmanu.sporny.org%2Fabout%23manu%22%0A%20%20%7D%0A%5D">Open in playground</a>
    </div>
    <pre class="compacted input selected nohighlight">[
  {
    <span class="hl-bold">"@context": {
      "@vocab": "http://xmlns.com/foaf/0.1/",
      "knows": {"@type": "@id"}
    },</span>
    "@id": "http://manu.sporny.org/about#manu",
    "@type": "Person",
    "name": "Manu Sporny",
    "knows": "https://greggkellogg.net/foaf#me"
  },
  {
    <span class="hl-bold">"@context": {
      "@vocab": "http://xmlns.com/foaf/0.1/",
      "knows": {"@type": "@id"}
    },</span>
    "@id": "https://greggkellogg.net/foaf#me",
    "@type": "Person",
    "name": "Gregg Kellogg",
    "knows": "http://manu.sporny.org/about#manu"
  }
]</pre>
    <pre class="expanded result nohighlight" data-result-for="Context needs to be duplicated if @graph is not used-compacted">[{
  "@id": "http://manu.sporny.org/about#manu",
  "@type": ["http://xmlns.com/foaf/0.1/Person"],
  "http://xmlns.com/foaf/0.1/name": [{"@value": "Manu Sporny"}],
  "http://xmlns.com/foaf/0.1/knows": [
    {"@id": "https://greggkellogg.net/foaf#me"}
  ]
},
{
  "@id": "https://greggkellogg.net/foaf#me",
  "@type": ["http://xmlns.com/foaf/0.1/Person"],
  "http://xmlns.com/foaf/0.1/name": [{"@value": "Gregg Kellogg"}],
  "http://xmlns.com/foaf/0.1/knows": [
    {"@id": "http://manu.sporny.org/about#manu"}
  ]
}]</pre>
    <table class="statements" data-result-for="Context needs to be duplicated if @graph is not used-expanded" data-to-rdf="">
      <thead><tr><th>Subject</th><th>Property</th><th>Value</th></tr></thead>
      <tbody>
        <tr><td>http://manu.sporny.org/about#manu</td><td>rdf:type</td><td>foaf:Person</td></tr>
        <tr><td>http://manu.sporny.org/about#manu</td><td>foaf:name</td><td>Manu Sporny</td></tr>
        <tr><td>http://manu.sporny.org/about#manu</td><td>foaf:knows</td><td>https://greggkellogg.net/foaf#me</td></tr>
        <tr><td>https://greggkellogg.net/foaf#me</td><td>rdf:type</td><td>foaf:Person</td></tr>
        <tr><td>https://greggkellogg.net/foaf#me</td><td>foaf:name</td><td>Gregg Kellogg</td></tr>
        <tr><td>https://greggkellogg.net/foaf#me</td><td>foaf:knows</td><td>http://manu.sporny.org/about#manu</td></tr>
      </tbody>
    </table>
    <pre class="trig nohighlight" data-content-type="application/trig" data-result-for="Context needs to be duplicated if @graph is not used-expanded" data-to-rdf="">@prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt; .

&lt;https://greggkellogg.net/foaf#me&gt; a foaf:Person;
   foaf:knows &lt;http://manu.sporny.org/about#manu&gt;;
   foaf:name "Gregg Kellogg" .

&lt;http://manu.sporny.org/about#manu&gt; a foaf:Person;
   foaf:knows &lt;https://greggkellogg.net/foaf#me&gt;;
   foaf:name "Manu Sporny" .</pre>
  </aside>

  <section class="informative changed" id="graph-containers">
    <h4 id="x4-9-1-graph-containers"><bdi class="secno">4.9.1 </bdi>Graph Containers<a class="self-link" aria-label="§" href="#graph-containers"></a></h4><p><em>This section is non-normative.</em></p>
    <p>In some cases, it is useful to logically partition data into separate
      graphs, without making this explicit within the JSON expression. For
      example, a JSON document may contain data against which other metadata is
      asserted and it is useful to separate this data in the data model using
      the notion of <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-named-graph">named graphs</a>, without the syntactic overhead
      associated with the <code>@graph</code> keyword.</p>

    <p>An <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a> can use <code>@graph</code> as the
      value of <code>@container</code>. This indicates that values of this
      <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a> should be considered to be <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-named-graph">named graphs</a>, where the
      <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-graph-name">graph name</a> is an automatically assigned <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node-identifier">blank node identifier</a>
      creating an <a href="#dfn-implicitly-named-graph" class="internalDFN" data-link-type="dfn">implicitly named graph</a>. When expanded, these become
      <a href="#dfn-simple-graph-object" class="internalDFN" data-link-type="dfn">simple graph objects</a>.</p>

   <p>A different example uses an anonymously <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-named-graph">named graph</a> as follows:</p>

    <aside class="example ds-selector-tabs changed" id="example-118-implicitly-named-graph"><div class="marker">
      <a class="self-link" href="#example-118-implicitly-named-graph">Example<bdi> 118</bdi></a><span class="example-title">: Implicitly named graph</span>
    </div>
      <div class="selectors">
        <button class="selected" data-selects="compacted">Compacted (Input)</button>
        <button data-selects="expanded">Expanded (Result)</button>
        <button data-selects="statements">Statements</button>
        <button data-selects="trig">TriG</button>
        <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%22%40version%22%3A%201.1%2C%0A%20%20%20%20%22%40base%22%3A%20%22http%3A%2F%2Fdbpedia.org%2Fresource%2F%22%2C%0A%20%20%20%20%22said%22%3A%20%22http%3A%2F%2Fexample.com%2Fsaid%22%2C%0A%20%20%20%20%22wrote%22%3A%20%7B%22%40id%22%3A%20%22http%3A%2F%2Fexample.com%2Fwrote%22%2C%20%22%40container%22%3A%20%22%40graph%22%7D%0A%20%20%7D%2C%0A%20%20%22%40id%22%3A%20%22William_Shakespeare%22%2C%0A%20%20%22wrote%22%3A%20%7B%0A%20%20%20%20%22%40id%22%3A%20%22Richard_III_of_England%22%2C%0A%20%20%20%20%22said%22%3A%20%22My%20kingdom%20for%20a%20horse%22%0A%20%20%7D%0A%7D">Open in playground</a>
      </div>
      <pre class="compacted input selected nohighlight">{
  "@context": {
    "@version": 1.1,
    "@base": "http://dbpedia.org/resource/",
    "said": "http://example.com/said",
    <span class="hl-bold">"wrote": {"@id": "http://example.com/wrote", "@container": "@graph"}</span>
  },
  "@id": "William_Shakespeare",
  <span class="hl-bold">"wrote"</span>: {
    "@id": "Richard_III_of_England",
    "said": "My kingdom for a horse"
  }
}</pre>
      <pre class="expanded result nohighlight" data-result-for="Implicitly named graph-compacted">[{
  "@id": "http://dbpedia.org/resource/William_Shakespeare",
  <span class="hl-bold">"http://example.com/wrote"</span>: [{
    <span class="hl-bold">"@graph"</span>: [{
      "@id": "http://dbpedia.org/resource/Richard_III_of_England",
      "http://example.com/said": [{"@value": "My kingdom for a horse"}]
    }]
  }]
}]</pre>
      <table class="statements" data-result-for="Implicitly named graph-expanded" data-to-rdf="">
        <thead><tr><th>Graph</th><th>Subject</th><th>Property</th><th>Value</th></tr></thead>
        <tbody>
          <tr><td>_:b0</td><td>http://dbpedia.org/resource/Richard_III_of_England</td><td>http://example.com/said</td><td>My kingdom for a horse</td></tr>
          <tr><td>&nbsp;</td><td>http://dbpedia.org/resource/William_Shakespeare</td><td>http://example.com/wrote</td><td>_:b0</td></tr>
        </tbody>
      </table>
      <pre class="trig nohighlight" data-content-type="application/trig" data-result-for="Implicitly named graph-expanded" data-to-rdf="">@prefix dbp: &lt;http://dbpedia.org/resource/&gt; .
@prefix ex:  &lt;http://example.com/&gt; .

dbp:William_Shakespeare ex:wrote _:b0 .

_:b0 {
  dbp:Richard_III_of_England ex:said "My kingdom for a horse" .
}</pre>
    </aside>

    <p>The example above expresses an anonymously <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-named-graph">named graph</a>
      making a statement. The <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-default-graph">default graph</a> includes a statement
      saying that the <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-subject">subject</a> wrote that statement.
      This is an example of separating statements into a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-named-graph">named graph</a>, and then
      making assertions about the statements contained within that <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-named-graph">named graph</a>.</p>

    <div class="note" role="note" id="issue-container-generatedID-39"><div role="heading" class="note-title marker" id="h-note-35" aria-level="5"><span>Note</span></div><p class="">Strictly speaking, the value of such a <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a>
      is not a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-named-graph">named graph</a>, rather it is the <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-graph-name">graph name</a>
      associated with the <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-named-graph">named graph</a>, which exists separately within
      the <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-dataset">dataset</a>.</p></div>

    <div class="note" role="note" id="issue-container-generatedID-40"><div role="heading" class="note-title marker" id="h-note-36" aria-level="5"><span>Note</span></div><p class="">Graph Containers are a new feature in JSON-LD 1.1.</p></div>
  </section>

<section class="informative changed" id="named-graph-data-indexing"><h4 id="x4-9-2-named-graph-data-indexing"><bdi class="secno">4.9.2 </bdi>Named Graph Data Indexing<a class="self-link" aria-label="§" href="#named-graph-data-indexing"></a></h4><p><em>This section is non-normative.</em></p>

  <p>In addition to indexing <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a> by index, <a href="#dfn-graph-object" class="internalDFN" data-link-type="dfn">graph objects</a> may
    also be indexed by an index. By using the <code>@graph</code>
    container type, introduced in <a href="#graph-containers" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">4.9.1 </bdi>Graph Containers</a>
    in addition to <code>@index</code>, an object value of such a property is
    treated as a key-value map where the keys do not map to <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">IRIs</a>, but
    are taken from an <code>@index</code> property associated with <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-named-graph">named graphs</a>
    which are their values. When expanded, these must be <a href="#dfn-simple-graph-object" class="internalDFN" data-link-type="dfn">simple graph objects</a></p>

  <p>The following example describes a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-default-graph">default graph</a> referencing multiple named
    graphs using an <a href="#dfn-index-map" class="internalDFN" data-link-type="dfn">index map</a>.</p>

  <aside class="example ds-selector-tabs changed" id="example-119-indexing-graph-data-in-json-ld"><div class="marker">
      <a class="self-link" href="#example-119-indexing-graph-data-in-json-ld">Example<bdi> 119</bdi></a><span class="example-title">: Indexing graph data in JSON-LD</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="expanded">Expanded (Result)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="trig">TriG</button>
      <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%20%22%40version%22%3A%201.1%2C%0A%20%20%20%20%20%22schema%22%3A%20%22http%3A%2F%2Fschema.org%2F%22%2C%0A%20%20%20%20%20%22name%22%3A%20%22schema%3Aname%22%2C%0A%20%20%20%20%20%22body%22%3A%20%22schema%3AarticleBody%22%2C%0A%20%20%20%20%20%22words%22%3A%20%22schema%3AwordCount%22%2C%0A%20%20%20%20%20%22post%22%3A%20%7B%0A%20%20%20%20%20%20%20%22%40id%22%3A%20%22schema%3AblogPost%22%2C%0A%20%20%20%20%20%20%20%22%40container%22%3A%20%5B%22%40graph%22%2C%20%22%40index%22%5D%0A%20%20%20%20%20%7D%0A%20%20%7D%2C%0A%20%20%22%40id%22%3A%20%22http%3A%2F%2Fexample.com%2F%22%2C%0A%20%20%22%40type%22%3A%20%22schema%3ABlog%22%2C%0A%20%20%22name%22%3A%20%22World%20Financial%20News%22%2C%0A%20%20%22post%22%3A%20%7B%0A%20%20%20%20%20%22en%22%3A%20%7B%0A%20%20%20%20%20%20%20%22%40id%22%3A%20%22http%3A%2F%2Fexample.com%2Fposts%2F1%2Fen%22%2C%0A%20%20%20%20%20%20%20%22body%22%3A%20%22World%20commodities%20were%20up%20today%20with%20heavy%20trading%20of%20crude%20oil...%22%2C%0A%20%20%20%20%20%20%20%22words%22%3A%201539%0A%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%22de%22%3A%20%7B%0A%20%20%20%20%20%20%20%22%40id%22%3A%20%22http%3A%2F%2Fexample.com%2Fposts%2F1%2Fde%22%2C%0A%20%20%20%20%20%20%20%22body%22%3A%20%22Die%20Werte%20an%20Warenb%C3%B6rsen%20stiegen%20im%20Sog%20eines%20starken%20Handels%20von%20Roh%C3%B6l...%22%2C%0A%20%20%20%20%20%20%20%22words%22%3A%201204%0A%20%20%20%20%20%7D%0A%20%20%7D%0A%7D">Open in playground</a>
    </div>
    <pre class="compacted input selected nohighlight">{
  "@context": {
     <span class="hl-bold">"@version": 1.1</span>,
     "schema": "http://schema.org/",
     "name": "schema:name",
     "body": "schema:articleBody",
     "words": "schema:wordCount",
     "post": {
       "@id": "schema:blogPost",
       "@container": <span class="hl-bold">["@graph"</span>, "@index"<span class="hl-bold">]</span>
     }
  },
  "@id": "http://example.com/",
  "@type": "schema:Blog",
  "name": "World Financial News",
  <span class="hl-bold">"post": {
     "en": {
       "@id": "http://example.com/posts/1/en",
       "body": "World commodities were up today with heavy trading of crude oil...",
       "words": 1539
     },
     "de": {
       "@id": "http://example.com/posts/1/de",
       "body": "Die Werte an Warenbörsen stiegen im Sog eines starken Handels von Rohöl...",
       "words": 1204
     }</span>
  }
}</pre>
    <pre class="expanded result nohighlight" data-result-for="Indexing graph data in JSON-LD-compacted">[{
  "@id": "http://example.com/",
  "@type": ["http://schema.org/Blog"],
  "http://schema.org/name": [{"@value": "World Financial News"}],
  "http://schema.org/blogPost": [{
    <span class="hl-bold">"@graph"</span>: [{
      "@id": "http://example.com/posts/1/en",
      "http://schema.org/articleBody": [{
        "@value": "World commodities were up today with heavy trading of crude oil..."
      }],
      "http://schema.org/wordCount": [{"@value": 1539}]
    }],
    "@index": "en"
  }, {
    <span class="hl-bold">"@graph"</span>: [{
      "@id": "http://example.com/posts/1/de",
      "http://schema.org/articleBody": [{
        "@value": "Die Werte an Warenbörsen stiegen im Sog eines starken Handels von Rohöl..."
      }],
      "http://schema.org/wordCount": [{"@value": 1204}]
    }],
    "@index": "de"
  }]
}]</pre>
    <table class="statements" data-result-for="Indexing graph data in JSON-LD-expanded" data-to-rdf="">
      <thead><tr><th>Graph</th><th>Subject</th><th>Property</th><th>Value</th><th>Value Type</th></tr></thead>
      <tbody>
      <tr><td>&nbsp;</td><td>http://example.com/</td><td>rdf:type</td><td>schema:Blog</td><td></td></tr>
      <tr><td>&nbsp;</td><td>http://example.com/</td><td>schema:name</td><td>World Financial News</td><td></td></tr>
      <tr><td>&nbsp;</td><td>http://example.com/</td><td>schema:blogPost</td><td>_:b1</td><td></td></tr>
      <tr><td>&nbsp;</td><td>http://example.com/</td><td>schema:blogPost</td><td>_:b2</td><td></td></tr>
      <tr><td>_:b1</td><td>http://example.com/posts/1/de</td><td>schema:articleBody</td><td>Die Werte an Warenbörsen stiegen im Sog eines starken Handels von Rohöl...</td><td></td></tr>
      <tr><td>_:b1</td><td>http://example.com/posts/1/de</td><td>schema:wordCount</td><td>1204</td><td>xsd:integer</td></tr>
      <tr><td>_:b2</td><td>http://example.com/posts/1/en</td><td>schema:articleBody</td><td>World commodities were up today with heavy trading of crude oil...</td><td></td></tr>
      <tr><td>_:b2</td><td>http://example.com/posts/1/en</td><td>schema:wordCount</td><td>1539</td><td>xsd:integer</td></tr>
      </tbody>
    </table>
    <pre class="trig nohighlight" data-content-type="application/trig" data-result-for="Indexing graph data in JSON-LD-expanded" data-to-rdf="">@prefix rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; .
@prefix schema: &lt;http://schema.org/&gt; .
@prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt; .

&lt;http://example.com/&gt; a schema:Blog;
   schema:name "World Financial News";
   schema:blogPost _:b0,  _:b1 .

_:b0 {
  &lt;http://example.com/posts/1/en&gt;
     schema:articleBody
      "World commodities were up today with heavy trading of crude oil...";
     schema:wordCount 1539 .
}

_:b1 {
  &lt;http://example.com/posts/1/de&gt;
     schema:articleBody
      "Die Werte an Warenbörsen stiegen im Sog eines starken Handels von Rohöl...";
     schema:wordCount 1204 .
}</pre>
  </aside>

  <p>As with <a href="#dfn-index-map" class="internalDFN" data-link-type="dfn">index maps</a>, when used with <code>@graph</code>, a container may also
    include <code>@set</code> to ensure that key values are always contained in an array.</p>

  <p class="changed">The special index <code>@none</code> is used for indexing
    graphs which do not have an <code>@index</code> key, which is useful to maintain
    a normalized representation. <span class="note">Note, however, that
      compacting a document where multiple unidentified named graphs are
      compacted using the <code>@none</code> index will result in the content
      of those graphs being merged. To prevent this, give each graph a distinct
      <code>@index</code> key.</span></p>

  <aside class="example ds-selector-tabs changed" id="example-120-indexing-graphs-using-none-for-no-index"><div class="marker">
      <a class="self-link" href="#example-120-indexing-graphs-using-none-for-no-index">Example<bdi> 120</bdi></a><span class="example-title">: Indexing graphs using @none for no index</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="expanded">Expanded (Result)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="trig">TriG</button>
      <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%20%22%40version%22%3A%201.1%2C%0A%20%20%20%20%20%22schema%22%3A%20%22http%3A%2F%2Fschema.org%2F%22%2C%0A%20%20%20%20%20%22name%22%3A%20%22schema%3Aname%22%2C%0A%20%20%20%20%20%22body%22%3A%20%22schema%3AarticleBody%22%2C%0A%20%20%20%20%20%22words%22%3A%20%22schema%3AwordCount%22%2C%0A%20%20%20%20%20%22post%22%3A%20%7B%0A%20%20%20%20%20%20%20%22%40id%22%3A%20%22schema%3AblogPost%22%2C%0A%20%20%20%20%20%20%20%22%40container%22%3A%20%5B%22%40graph%22%2C%20%22%40index%22%5D%0A%20%20%20%20%20%7D%0A%20%20%7D%2C%0A%20%20%22%40id%22%3A%20%22http%3A%2F%2Fexample.com%2F%22%2C%0A%20%20%22%40type%22%3A%20%22schema%3ABlog%22%2C%0A%20%20%22name%22%3A%20%22World%20Financial%20News%22%2C%0A%20%20%22post%22%3A%20%7B%0A%20%20%20%20%20%22en%22%3A%20%7B%0A%20%20%20%20%20%20%20%22%40id%22%3A%20%22http%3A%2F%2Fexample.com%2Fposts%2F1%2Fen%22%2C%0A%20%20%20%20%20%20%20%22body%22%3A%20%22World%20commodities%20were%20up%20today%20with%20heavy%20trading%20of%20crude%20oil...%22%2C%0A%20%20%20%20%20%20%20%22words%22%3A%201539%0A%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%22%40none%22%3A%20%7B%0A%20%20%20%20%20%20%20%22%40id%22%3A%20%22http%3A%2F%2Fexample.com%2Fposts%2F1%2Fno-language%22%2C%0A%20%20%20%20%20%20%20%22body%22%3A%20%22Die%20Werte%20an%20Warenb%C3%B6rsen%20stiegen%20im%20Sog%20eines%20starken%20Handels%20von%20Roh%C3%B6l...%22%2C%0A%20%20%20%20%20%20%20%22words%22%3A%201204%0A%20%20%20%20%20%7D%0A%20%20%7D%0A%7D">Open in playground</a>
    </div>
    <pre class="compacted input selected nohighlight">{
  "@context": {
     "@version": 1.1,
     "schema": "http://schema.org/",
     "name": "schema:name",
     "body": "schema:articleBody",
     "words": "schema:wordCount",
     "post": {
       "@id": "schema:blogPost",
       "@container": ["@graph", "@index"]
     }
  },
  "@id": "http://example.com/",
  "@type": "schema:Blog",
  "name": "World Financial News",
  "post": {
     "en": {
       "@id": "http://example.com/posts/1/en",
       "body": "World commodities were up today with heavy trading of crude oil...",
       "words": 1539
     },
     "@none": {
       "@id": "http://example.com/posts/1/no-language",
       "body": "Die Werte an Warenbörsen stiegen im Sog eines starken Handels von Rohöl...",
       "words": 1204
     }
  }
}</pre>
    <pre class="expanded result nohighlight" data-result-for="Indexing graphs using @none for no index-compacted">[{
  "@id": "http://example.com/",
  "@type": ["http://schema.org/Blog"],
  "http://schema.org/name": [{"@value": "World Financial News"}],
  "http://schema.org/blogPost": [{
    "@graph": [{
      "@id": "http://example.com/posts/1/en",
      "http://schema.org/articleBody": [{
        "@value": "World commodities were up today with heavy trading of crude oil..."
      }],
      "http://schema.org/wordCount": [{"@value": 1539}]
    }],
    "@index": "en"
  }, {
    "@graph": [{
      "@id": "http://example.com/posts/1/no-language",
      "http://schema.org/articleBody": [{
        "@value": "Die Werte an Warenbörsen stiegen im Sog eines starken Handels von Rohöl..."
      }],
      "http://schema.org/wordCount": [{"@value": 1204}]
    }]
  }]
}]</pre>
    <table class="statements" data-result-for="Indexing graphs using @none for no index-expanded" data-to-rdf="">
      <thead><tr><th>Graph</th><th>Subject</th><th>Property</th><th>Value</th><th>Value Type</th></tr></thead>
      <tbody>
        <tr><td>&nbsp;</td><td>http://example.com/</td><td>rdf:type</td><td>schema:Blog</td><td>&nbsp;</td></tr>
        <tr><td>&nbsp;</td><td>http://example.com/</td><td>schema:name</td><td>World Financial News</td><td>&nbsp;</td></tr>
        <tr><td>&nbsp;</td><td>http://example.com/</td><td>schema:blogPost</td><td>_:b0</td><td>&nbsp;</td></tr>
        <tr><td>&nbsp;</td><td>http://example.com/</td><td>schema:blogPost</td><td>_:b1</td><td>&nbsp;</td></tr>
        <tr><td>_:b0</td><td>http://example.com/posts/1/en</td><td>schema:articleBody</td><td>World commodities were up today with heavy trading of crude oil...</td><td>&nbsp;</td></tr>
        <tr><td>_:b0</td><td>http://example.com/posts/1/en</td><td>schema:wordCount</td><td>1539</td><td>xsd:integer</td></tr>
        <tr><td>_:b1</td><td>http://example.com/posts/1/no-language</td><td>schema:articleBody</td><td>Die Werte an Warenbörsen stiegen im Sog eines starken Handels von Rohöl...</td><td>&nbsp;</td></tr>
        <tr><td>_:b1</td><td>http://example.com/posts/1/no-language</td><td>schema:wordCount</td><td>1204</td><td>xsd:integer</td></tr>
      </tbody>
    </table>
    <pre class="trig nohighlight" data-content-type="application/trig" data-result-for="Indexing graphs using @none for no index-expanded" data-to-rdf="">@prefix rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; .
@prefix schema: &lt;http://schema.org/&gt; .
@prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt; .

&lt;http://example.com/&gt; a schema:Blog;
   schema:blogPost _:b0,  _:b1;
   schema:name "World Financial News" .

_:b0 {
  &lt;http://example.com/posts/1/en&gt;
     schema:articleBody
       "World commodities were up today with heavy trading of crude oil...";
     schema:wordCount 1539 .
}

_:b1 {
  &lt;http://example.com/posts/1/no-language&gt;
     schema:articleBody
       "Die Werte an Warenbörsen stiegen im Sog eines starken Handels von Rohöl...";
     schema:wordCount 1204 .
}</pre>
  </aside>
  <div class="note" role="note" id="issue-container-generatedID-41"><div role="heading" class="note-title marker" id="h-note-37" aria-level="5"><span>Note</span></div><p class="">Named Graph Data Indexing is a new feature in JSON-LD 1.1.</p></div>
</section>

<section class="informative changed" id="named-graph-indexing"><h4 id="x4-9-3-named-graph-indexing"><bdi class="secno">4.9.3 </bdi>Named Graph Indexing<a class="self-link" aria-label="§" href="#named-graph-indexing"></a></h4><p><em>This section is non-normative.</em></p>

  <p>In addition to indexing <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a> by identifier, <a href="#dfn-graph-object" class="internalDFN" data-link-type="dfn">graph objects</a> may
    also be indexed by their <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-graph-name">graph name</a>. By using the <code>@graph</code>
    container type, introduced in <a href="#graph-containers" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">4.9.1 </bdi>Graph Containers</a>
    in addition to <code>@id</code>, an object value of such a property is
    treated as a key-value map where the keys represent the identifiers of <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-named-graph">named graphs</a>
    which are their values.</p>

  <p>The following example describes a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-default-graph">default graph</a> referencing multiple named
    graphs using an <a href="#dfn-id-map" class="internalDFN" data-link-type="dfn">id map</a>.</p>

  <aside class="example ds-selector-tabs changed" id="example-121-referencing-named-graphs-using-an-id-map"><div class="marker">
      <a class="self-link" href="#example-121-referencing-named-graphs-using-an-id-map">Example<bdi> 121</bdi></a><span class="example-title">: Referencing named graphs using an id map</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="expanded">Expanded (Result)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="trig">TriG</button>
      <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%22%40version%22%3A%201.1%2C%0A%20%20%20%20%22generatedAt%22%3A%20%7B%0A%20%20%20%20%20%20%22%40id%22%3A%20%22http%3A%2F%2Fwww.w3.org%2Fns%2Fprov%23generatedAtTime%22%2C%0A%20%20%20%20%20%20%22%40type%22%3A%20%22http%3A%2F%2Fwww.w3.org%2F2001%2FXMLSchema%23dateTime%22%0A%20%20%20%20%7D%2C%0A%20%20%20%20%22Person%22%3A%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2FPerson%22%2C%0A%20%20%20%20%22name%22%3A%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2Fname%22%2C%0A%20%20%20%20%22knows%22%3A%20%7B%0A%20%20%20%20%20%20%22%40id%22%3A%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2Fknows%22%2C%0A%20%20%20%20%20%20%22%40type%22%3A%20%22%40id%22%0A%20%20%20%20%7D%2C%0A%20%20%20%20%22graphMap%22%3A%20%7B%0A%20%20%20%20%20%20%22%40id%22%3A%20%22http%3A%2F%2Fexample.org%2FgraphMap%22%2C%0A%20%20%20%20%20%20%22%40container%22%3A%20%5B%22%40graph%22%2C%20%22%40id%22%5D%0A%20%20%20%20%7D%0A%20%20%7D%2C%0A%20%20%22%40id%22%3A%20%22http%3A%2F%2Fexample.org%2Ffoaf-graph%22%2C%0A%20%20%22generatedAt%22%3A%20%222012-04-09T00%3A00%3A00%22%2C%0A%20%20%22graphMap%22%3A%20%7B%0A%20%20%20%20%22http%3A%2F%2Fmanu.sporny.org%2Fabout%22%3A%20%7B%0A%20%20%20%20%20%20%22%40id%22%3A%20%22http%3A%2F%2Fmanu.sporny.org%2Fabout%23manu%22%2C%0A%20%20%20%20%20%20%22%40type%22%3A%20%22Person%22%2C%0A%20%20%20%20%20%20%22name%22%3A%20%22Manu%20Sporny%22%2C%0A%20%20%20%20%20%20%22knows%22%3A%20%22https%3A%2F%2Fgreggkellogg.net%2Ffoaf%23me%22%0A%20%20%20%20%7D%2C%0A%20%20%20%20%22https%3A%2F%2Fgreggkellogg.net%2Ffoaf%22%3A%20%7B%0A%20%20%20%20%20%20%22%40id%22%3A%20%22https%3A%2F%2Fgreggkellogg.net%2Ffoaf%23me%22%2C%0A%20%20%20%20%20%20%22%40type%22%3A%20%22Person%22%2C%0A%20%20%20%20%20%20%22name%22%3A%20%22Gregg%20Kellogg%22%2C%0A%20%20%20%20%20%20%22knows%22%3A%20%22http%3A%2F%2Fmanu.sporny.org%2Fabout%23manu%22%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D">Open in playground</a>
    </div>
    <pre class="compacted input selected nohighlight">{
  "@context": {
    <span class="hl-bold">"@version": 1.1</span>,
    "generatedAt": {
      "@id": "http://www.w3.org/ns/prov#generatedAtTime",
      "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
    },
    "Person": "http://xmlns.com/foaf/0.1/Person",
    "name": "http://xmlns.com/foaf/0.1/name",
    "knows": {
      "@id": "http://xmlns.com/foaf/0.1/knows",
      "@type": "@id"
    },
    <span class="hl-bold">"graphMap": {
      "@id": "http://example.org/graphMap",
      "@container": ["@graph", "@id"]
    }</span>
  },
  "@id": "http://example.org/foaf-graph",
  "generatedAt": "2012-04-09T00:00:00",
  <span class="hl-bold">"graphMap": {
    "http://manu.sporny.org/about":</span> {
      "@id": "http://manu.sporny.org/about#manu",
      "@type": "Person",
      "name": "Manu Sporny",
      "knows": "https://greggkellogg.net/foaf#me"
    },
    <span class="hl-bold">"https://greggkellogg.net/foaf"</span>: {
      "@id": "https://greggkellogg.net/foaf#me",
      "@type": "Person",
      "name": "Gregg Kellogg",
      "knows": "http://manu.sporny.org/about#manu"
    }
  }
}</pre>
    <pre class="expanded result nohighlight" data-result-for="Referencing named graphs using an id map-compacted">[{
  "@id": "http://example.org/foaf-graph",
  "http://www.w3.org/ns/prov#generatedAtTime": [{
    "@value": "2012-04-09T00:00:00",
    "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
  }],
  "http://example.org/graphMap": [{
    "@graph": [{
      "@id": "http://manu.sporny.org/about#manu",
      "@type": ["http://xmlns.com/foaf/0.1/Person"],
      "http://xmlns.com/foaf/0.1/knows": [
        {"@id": "https://greggkellogg.net/foaf#me"}
      ],
      "http://xmlns.com/foaf/0.1/name": [
        {"@value": "Manu Sporny"}
      ]
    }],
    "@id": "http://manu.sporny.org/about"
  }, {
    "@graph": [{
      "@id": "https://greggkellogg.net/foaf#me",
      "@type": ["http://xmlns.com/foaf/0.1/Person"],
      "http://xmlns.com/foaf/0.1/knows": [
        {"@id": "http://manu.sporny.org/about#manu"}
      ],
      "http://xmlns.com/foaf/0.1/name": [
        {"@value": "Gregg Kellogg"}
      ]
    }],
    "@id": "https://greggkellogg.net/foaf"
  }]
}]</pre>
    <table class="statements" data-result-for="Referencing named graphs using an id map-expanded" data-to-rdf="">
      <thead><tr><th>Graph</th><th>Subject</th><th>Property</th><th>Value</th><th>Value Type</th></tr></thead>
      <tbody>
        <tr><td>&nbsp;</td><td>http://example.org/foaf-graph</td><td>http://example.org/graphMap</td><td>https://greggkellogg.net/foaf</td><td>&nbsp;</td></tr>
        <tr><td>&nbsp;</td><td>http://example.org/foaf-graph</td><td>http://example.org/graphMap</td><td>http://manu.sporny.org/about</td><td>&nbsp;</td></tr>
        <tr><td>&nbsp;</td><td>http://example.org/foaf-graph</td><td>prov:generatedAtTime</td><td>2012-04-09T00:00:00</td><td>xsd:dateTime</td></tr>
        <tr><td>https://greggkellogg.net/foaf</td><td>https://greggkellogg.net/foaf#me</td><td>rdf:type</td><td>foaf:Person</td><td>&nbsp;</td></tr>
        <tr><td>https://greggkellogg.net/foaf</td><td>https://greggkellogg.net/foaf#me</td><td>foaf:name</td><td>Gregg Kellogg</td><td>&nbsp;</td></tr>
        <tr><td>https://greggkellogg.net/foaf</td><td>https://greggkellogg.net/foaf#me</td><td>foaf:knows</td><td>http://manu.sporny.org/about#manu</td><td>&nbsp;</td></tr>
        <tr><td>http://manu.sporny.org/about</td><td>http://manu.sporny.org/about#manu</td><td>rdf:type</td><td>foaf:Person</td><td>&nbsp;</td></tr>
        <tr><td>http://manu.sporny.org/about</td><td>http://manu.sporny.org/about#manu</td><td>foaf:name</td><td>Manu Sporny</td><td>&nbsp;</td></tr>
        <tr><td>http://manu.sporny.org/about</td><td>http://manu.sporny.org/about#manu</td><td>foaf:knows</td><td>https://greggkellogg.net/foaf#me</td><td>&nbsp;</td></tr>
      </tbody>
    </table>
    <pre class="trig nohighlight" data-content-type="application/trig" data-result-for="Referencing named graphs using an id map-expanded" data-to-rdf="">@prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt; .
@prefix prov: &lt;http://www.w3.org/ns/prov#&gt; .
@prefix rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; .
@prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt; .

&lt;http://example.org/foaf-graph&gt;
  &lt;http://example.org/graphMap&gt;
    &lt;http://manu.sporny.org/about&gt;,
    &lt;https://greggkellogg.net/foaf&gt;;
  prov:generatedAtTime "2012-04-09T00:00:00"^^xsd:dateTime .

&lt;https://greggkellogg.net/foaf&gt; {
  &lt;https://greggkellogg.net/foaf#me&gt; a foaf:Person;
     foaf:knows &lt;http://manu.sporny.org/about#manu&gt;;
     foaf:name "Gregg Kellogg" .
}

&lt;http://manu.sporny.org/about&gt; {
  &lt;http://manu.sporny.org/about#manu&gt; a foaf:Person;
     foaf:knows &lt;https://greggkellogg.net/foaf#me&gt;;
     foaf:name "Manu Sporny" .
}</pre>
  </aside>

  <p>As with <a href="#dfn-id-map" class="internalDFN" data-link-type="dfn">id maps</a>, when used with <code>@graph</code>, a container may also
    include <code>@set</code> to ensure that key values are always contained in an array.</p>

  <p>As with <a href="#dfn-id-map" class="internalDFN" data-link-type="dfn">id maps</a>, the special index <code>@none</code> is used for indexing
    <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-named-graph">named graphs</a> which do not have an <code>@id</code>, which is useful to maintain
    a normalized representation. The <code>@none</code> index may also be
    a term which expands to <code>@none</code>.
    <span class="note">Note, however, that if multiple graphs are represented without
      an <code>@id</code>, they will be merged on expansion. To prevent this,
      use <code>@none</code> judiciously, and consider giving graphs
      their own distinct identifier.</span></p>

  <aside class="example ds-selector-tabs changed" id="example-122-referencing-named-graphs-using-an-id-map-with-none"><div class="marker">
      <a class="self-link" href="#example-122-referencing-named-graphs-using-an-id-map-with-none">Example<bdi> 122</bdi></a><span class="example-title">: Referencing named graphs using an id map with @none</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="expanded">Expanded (Result)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="trig">TriG</button>
      <a class="playground" target="_blank" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%22%40version%22%3A%201.1%2C%0A%20%20%20%20%22generatedAt%22%3A%20%7B%0A%20%20%20%20%20%20%22%40id%22%3A%20%22http%3A%2F%2Fwww.w3.org%2Fns%2Fprov%23generatedAtTime%22%2C%0A%20%20%20%20%20%20%22%40type%22%3A%20%22http%3A%2F%2Fwww.w3.org%2F2001%2FXMLSchema%23dateTime%22%0A%20%20%20%20%7D%2C%0A%20%20%20%20%22Person%22%3A%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2FPerson%22%2C%0A%20%20%20%20%22name%22%3A%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2Fname%22%2C%0A%20%20%20%20%22knows%22%3A%20%7B%22%40id%22%3A%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2Fknows%22%2C%20%22%40type%22%3A%20%22%40id%22%7D%2C%0A%20%20%20%20%22graphMap%22%3A%20%7B%0A%20%20%20%20%20%20%22%40id%22%3A%20%22http%3A%2F%2Fexample.org%2FgraphMap%22%2C%0A%20%20%20%20%20%20%22%40container%22%3A%20%5B%22%40graph%22%2C%20%22%40id%22%5D%0A%20%20%20%20%7D%0A%20%20%7D%2C%0A%20%20%22%40id%22%3A%20%22http%3A%2F%2Fexample.org%2Ffoaf-graph%22%2C%0A%20%20%22generatedAt%22%3A%20%222012-04-09T00%3A00%3A00%22%2C%0A%20%20%22graphMap%22%3A%20%7B%0A%20%20%20%20%22%40none%22%3A%20%5B%7B%0A%20%20%20%20%20%20%22%40id%22%3A%20%22http%3A%2F%2Fmanu.sporny.org%2Fabout%23manu%22%2C%0A%20%20%20%20%20%20%22%40type%22%3A%20%22Person%22%2C%0A%20%20%20%20%20%20%22name%22%3A%20%22Manu%20Sporny%22%2C%0A%20%20%20%20%20%20%22knows%22%3A%20%22https%3A%2F%2Fgreggkellogg.net%2Ffoaf%23me%22%0A%20%20%20%20%7D%2C%20%7B%0A%20%20%20%20%20%20%22%40id%22%3A%20%22https%3A%2F%2Fgreggkellogg.net%2Ffoaf%23me%22%2C%0A%20%20%20%20%20%20%22%40type%22%3A%20%22Person%22%2C%0A%20%20%20%20%20%20%22name%22%3A%20%22Gregg%20Kellogg%22%2C%0A%20%20%20%20%20%20%22knows%22%3A%20%22http%3A%2F%2Fmanu.sporny.org%2Fabout%23manu%22%0A%20%20%20%20%7D%5D%0A%20%20%7D%0A%7D">Open in playground</a>
    </div>
    <pre class="compacted input selected nohighlight">{
  "@context": {
    "@version": 1.1,
    "generatedAt": {
      "@id": "http://www.w3.org/ns/prov#generatedAtTime",
      "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
    },
    "Person": "http://xmlns.com/foaf/0.1/Person",
    "name": "http://xmlns.com/foaf/0.1/name",
    "knows": {"@id": "http://xmlns.com/foaf/0.1/knows", "@type": "@id"},
    "graphMap": {
      "@id": "http://example.org/graphMap",
      "@container": ["@graph", "@id"]
    }
  },
  "@id": "http://example.org/foaf-graph",
  "generatedAt": "2012-04-09T00:00:00",
  "graphMap": {
    <span class="hl-bold">"@none"</span>: [{
      "@id": "http://manu.sporny.org/about#manu",
      "@type": "Person",
      "name": "Manu Sporny",
      "knows": "https://greggkellogg.net/foaf#me"
    }, {
      "@id": "https://greggkellogg.net/foaf#me",
      "@type": "Person",
      "name": "Gregg Kellogg",
      "knows": "http://manu.sporny.org/about#manu"
    }]
  }
}</pre>
    <pre class="expanded result nohighlight" data-result-for="Referencing named graphs using an id map with @none-compacted">[{
  "@id": "http://example.org/foaf-graph",
  "http://www.w3.org/ns/prov#generatedAtTime": [{
    "@value": "2012-04-09T00:00:00",
    "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
  }],
  "http://example.org/graphMap": [{
    "@graph": [{
      "@id": "http://manu.sporny.org/about#manu",
      "@type": ["http://xmlns.com/foaf/0.1/Person"],
      "http://xmlns.com/foaf/0.1/name": [{"@value": "Manu Sporny"}],
      "http://xmlns.com/foaf/0.1/knows": [
        {"@id": "https://greggkellogg.net/foaf#me"}
      ]
    }]
  },
  {
    "@graph": [{
      "@id": "https://greggkellogg.net/foaf#me",
      "@type": ["http://xmlns.com/foaf/0.1/Person"],
      "http://xmlns.com/foaf/0.1/name": [{"@value": "Gregg Kellogg"}],
      "http://xmlns.com/foaf/0.1/knows": [
        {"@id": "http://manu.sporny.org/about#manu"}
      ]
    }]
  }]
}]</pre>
    <table class="statements" data-result-for="Referencing named graphs using an id map with @none-expanded" data-to-rdf="">
      <thead><tr><th>Graph</th><th>Subject</th><th>Property</th><th>Value</th><th>Value Type</th></tr></thead>
      <tbody>
        <tr><td>&nbsp;</td><td>http://example.org/foaf-graph</td><td>prov:generatedAtTime</td><td>2012-04-09T00:00:00</td><td>xsd:dateTime</td></tr>
        <tr><td>&nbsp;</td><td>http://example.org/foaf-graph</td><td>http://example.org/graphMap</td><td>_:b0</td><td>&nbsp;</td></tr>
        <tr><td>&nbsp;</td><td>http://example.org/foaf-graph</td><td>http://example.org/graphMap</td><td>_:b1</td><td>&nbsp;</td></tr>
        <tr><td>_:b0</td><td>http://manu.sporny.org/about#manu</td><td>rdf:type</td><td>foaf:Person</td><td>&nbsp;</td></tr>
        <tr><td>_:b0</td><td>http://manu.sporny.org/about#manu</td><td>foaf:name</td><td>Manu Sporny</td><td>&nbsp;</td></tr>
        <tr><td>_:b0</td><td>http://manu.sporny.org/about#manu</td><td>foaf:knows</td><td>https://greggkellogg.net/foaf#me</td><td>&nbsp;</td></tr>
        <tr><td>_:b1</td><td>https://greggkellogg.net/foaf#me</td><td>rdf:type</td><td>foaf:Person</td><td>&nbsp;</td></tr>
        <tr><td>_:b1</td><td>https://greggkellogg.net/foaf#me</td><td>foaf:name</td><td>Gregg Kellogg</td><td>&nbsp;</td></tr>
        <tr><td>_:b1</td><td>https://greggkellogg.net/foaf#me</td><td>foaf:knows</td><td>http://manu.sporny.org/about#manu</td><td>&nbsp;</td></tr>
      </tbody>
    </table>
    <pre class="trig nohighlight" data-content-type="application/trig" data-result-for="Referencing named graphs using an id map with @none-expanded" data-to-rdf="">@prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt; .
@prefix prov: &lt;http://www.w3.org/ns/prov#&gt; .
@prefix rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; .
@prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt; .

&lt;http://example.org/foaf-graph&gt; &lt;http://example.org/graphMap&gt; _:b0,  _:b1;
   prov:generatedAtTime "2012-04-09T00:00:00"^^xsd:dateTime .

_:b0 {
  &lt;http://manu.sporny.org/about#manu&gt; a foaf:Person;
     foaf:name "Manu Sporny";
     foaf:knows &lt;https://greggkellogg.net/foaf#me&gt; .
}

_:b1 {
  &lt;https://greggkellogg.net/foaf#me&gt; a foaf:Person;
     foaf:name "Gregg Kellogg";
     foaf:knows &lt;http://manu.sporny.org/about#manu&gt; .
}</pre>
  </aside>

  <div class="note" role="note" id="issue-container-generatedID-42"><div role="heading" class="note-title marker" id="h-note-38" aria-level="5"><span>Note</span></div><p class="">Graph Containers are a new feature in JSON-LD 1.1.</p></div>
</section>
</section>

<section class="informative" id="loading-documents"><h3 id="x4-10-loading-documents"><bdi class="secno">4.10 </bdi>Loading Documents<a class="self-link" aria-label="§" href="#loading-documents"></a></h3><p><em>This section is non-normative.</em></p>
  <p>The JSON-LD 1.1 Processing Algorithms and API specification [<cite><a class="bibref" data-link-type="biblio" href="#bib-json-ld11-api" title="JSON-LD 1.1 Processing Algorithms and API">JSON-LD11-API</a></cite>]
    defines the interface to a <a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-api/#dfn-json-ld-processor">JSON-LD Processor</a> and includes
    a number of methods used for manipulating different forms
    of JSON-LD (see <a href="#forms-of-json-ld" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">5. </bdi>Forms of JSON-LD</a>).
    This includes a general mechanism for loading remote documents,
    including referenced JSON-LD documents and remote contexts,
    and potentially extracting embedded JSON-LD from other formats such as [<cite><a class="bibref" data-link-type="biblio" href="#bib-html" title="HTML Standard">HTML</a></cite>].
    This is more fully described in
    <a href="https://www.w3.org/TR/json-ld11-api/#remote-document-and-context-retrieval">Remote Document and Context Retrieval</a>
    in [<cite><a class="bibref" data-link-type="biblio" href="#bib-json-ld11-api" title="JSON-LD 1.1 Processing Algorithms and API">JSON-LD11-API</a></cite>].</p>

  <p>A <dfn data-dfn-type="dfn" id="dfn-documentloader" data-no-export=""><a href="https://www.w3.org/TR/json-ld11-api/#dom-jsonldoptions-documentloader">documentLoader</a></dfn>
    can be useful in a number of contexts where loading remote documents can be problematic:</p>
  <ul>
    <li>Remote context documents should be cached to prevent overloading the
      location of the remote context for each request.
      Normally, an HTTP caching infrastructure might be expected to handle this,
      but in some contexts this might not be feasible.
      A <a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-api/#dom-jsonldoptions-documentloader">documentLoader</a> implementation might provide separate logic for performing
      such caching.</li>
    <li>Non-standard URL schemes may not be widely implemented,
      or may have behavior specific to a given application domain.
      A <a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-api/#dom-jsonldoptions-documentloader">documentLoader</a> can be defined to implement document retrieval semantics.</li>
    <li>Certain well-known contexts may be statically cached within a <a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-api/#dom-jsonldoptions-documentloader">documentLoader</a> implementation.
      This might be particularly useful in embedded applications,
      where it is not feasible, or even possible, to access remote documents.</li>
    <li>For security purposes, the act of remotely retrieving a document may provide a signal of application behavior.
      The judicious use of a <a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-api/#dom-jsonldoptions-documentloader">documentLoader</a> can isolate the application and reduce its online fingerprint.</li>
  </ul>
</section>
</section>

<section class="informative" id="forms-of-json-ld"><h2 id="x5-forms-of-json-ld"><bdi class="secno">5. </bdi>Forms of JSON-LD<a class="self-link" aria-label="§" href="#forms-of-json-ld"></a></h2><p><em>This section is non-normative.</em></p>
<p>As with many data formats, there is no single correct way to describe data in JSON-LD.
  However, as JSON-LD is used for describing graphs, certain transformations can be used
  to change the shape of the data, without changing its meaning as Linked Data.</p>

<dl>
<dt>Expanded Document Form</dt>
<dd><a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-api/#dfn-expanded">Expansion</a> is the process of taking a JSON-LD document and applying a
    <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a> so that the <code>@context</code> is no longer necessary.
    This process is described further in <a href="#expanded-document-form" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">5.1 </bdi>Expanded Document Form</a>.</dd>
<dt>Compacted Document Form</dt>
<dd><a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-api/#dfn-compact">Compaction</a> is the process
  of applying a provided <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a> to an existing JSON-LD document. This process
  is described further in <a href="#compacted-document-form" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">5.2 </bdi>Compacted Document Form</a>.</dd>
<dt>Flattened Document Form</dt>
<dd><a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-api/#dfn-flattened">Flattening</a> is the process of extracting
  embedded nodes to the top level of the JSON tree, and replacing the embedded
  node with a reference, creating blank node identifiers as necessary. This
  process is described further in <a href="#flattened-document-form" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">5.3 </bdi>Flattened Document Form</a>.</dd>
<dt>Framed Document Form</dt>
<dd><a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-framing/#dfn-framing">Framing</a> is used to shape
  the data in a JSON-LD document, using an example <a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-framing/#dfn-frame">frame</a> document
  which is used to both match the <a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-api/#dfn-flattened">flattened</a> data and show an example
  of how the resulting data should be shaped. This
  process is described further in <a href="#framed-document-form" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">5.4 </bdi>Framed Document Form</a>.</dd>
</dl>

<section class="informative" id="expanded-document-form"><h3 id="x5-1-expanded-document-form"><bdi class="secno">5.1 </bdi>Expanded Document Form<a class="self-link" aria-label="§" href="#expanded-document-form"></a></h3><p><em>This section is non-normative.</em></p>

  <p>The JSON-LD 1.1 Processing Algorithms and API specification [<cite><a class="bibref" data-link-type="biblio" href="#bib-json-ld11-api" title="JSON-LD 1.1 Processing Algorithms and API">JSON-LD11-API</a></cite>]
    defines a method for <em>expanding</em> a JSON-LD document.
    <dfn data-dfn-type="dfn" id="dfn-expansion" data-no-export=""><a href="https://www.w3.org/TR/json-ld11-api/#dfn-expanded">Expansion</a></dfn> is the process of taking a JSON-LD document and applying a
    <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a> such that all IRIs, types, and values
    are expanded so that the <code>@context</code> is no longer necessary.</p>

  <p>For example, assume the following JSON-LD input document:</p>

  <div class="example" id="sample-json-ld-document-to-be-expanded">
          <div class="marker">
      <a class="self-link" href="#sample-json-ld-document-to-be-expanded">Example<bdi> 123</bdi></a><span class="example-title">: Sample JSON-LD document to be expanded</span>
    </div> <pre class="input" aria-busy="false"><code class="hljs">{
   "@context": {
      "name": "http://xmlns.com/foaf/0.1/name",
      "homepage": {
        "@id": "http://xmlns.com/foaf/0.1/homepage",
        "@type": "@id"
      }
   },
   "name": "Manu Sporny",
   "homepage": "http://manu.sporny.org/"
}</code></pre>
        </div>

  <p>Running the JSON-LD <a href="https://www.w3.org/TR/json-ld11-api/#expansion-algorithm">Expansion algorithm</a> against the JSON-LD input document
    provided above would result in the following output:</p>

  <aside class="example ds-selector-tabs changed" id="example-124-expanded-form-for-the-previous-example"><div class="marker">
      <a class="self-link" href="#example-124-expanded-form-for-the-previous-example">Example<bdi> 124</bdi></a><span class="example-title">: Expanded form for the previous example</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="expanded">Expanded (Result)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="turtle">Turtle</button>
      <a class="playground" target="_blank" data-result-for="#sample-json-ld-document-to-be-expanded" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-expand&amp;json-ld=%7B%0A%20%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%20%20%22name%22%3A%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2Fname%22%2C%0A%20%20%20%20%20%20%22homepage%22%3A%20%7B%0A%20%20%20%20%20%20%20%20%22%40id%22%3A%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2Fhomepage%22%2C%0A%20%20%20%20%20%20%20%20%22%40type%22%3A%20%22%40id%22%0A%20%20%20%20%20%20%7D%0A%20%20%20%7D%2C%0A%20%20%20%22name%22%3A%20%22Manu%20Sporny%22%2C%0A%20%20%20%22homepage%22%3A%20%22http%3A%2F%2Fmanu.sporny.org%2F%22%0A%7D">Open in playground</a>
    </div>
    <pre class="expanded result selected" data-result-for="Sample JSON-LD document to be expanded" aria-busy="false"><code class="hljs">[
  {
    "http://xmlns.com/foaf/0.1/name": [
      { "@value": "Manu Sporny" }
    ],
    "http://xmlns.com/foaf/0.1/homepage": [
      { "@id": "http://manu.sporny.org/" }
    ]
  }
]</code></pre>
    <table class="statements" data-result-for="Expanded form for the previous example-expanded" data-to-rdf="">
      <thead><tr><th>Subject</th><th>Property</th><th>Value</th></tr></thead>
      <tbody>
        <tr><td>_:b0</td><td>foaf:name</td><td>Manu Sporny</td></tr>
        <tr><td>_:b0</td><td>foaf:homepage</td><td>http://manu.sporny.org/</td></tr>
      </tbody>
    </table>
    <pre class="turtle" data-content-type="text/turtle" data-result-for="Expanded form for the previous example-expanded" data-to-rdf="" aria-busy="false"><code class="hljs">@prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt; .

[
  foaf:name "Manu Sporny";
  foaf:homepage &lt;http://manu.sporny.org/&gt;
] .</code></pre>
  </aside>

  <p><a href="#application-ld-json">JSON-LD's media type</a> defines a
    <code>profile</code> parameter which can be used to signal or request
    <dfn data-dfn-type="dfn" id="dfn-expanded-document-form">expanded document form</dfn>. The profile URI identifying
    <a href="#dfn-expanded-document-form" class="internalDFN" data-link-type="dfn">expanded document form</a> is <code>http://www.w3.org/ns/json-ld#expanded</code>.</p>
</section>

<section class="informative" id="compacted-document-form"><h3 id="x5-2-compacted-document-form"><bdi class="secno">5.2 </bdi>Compacted Document Form<a class="self-link" aria-label="§" href="#compacted-document-form"></a></h3><p><em>This section is non-normative.</em></p>

  <p>The JSON-LD 1.1 Processing Algorithms and API specification [<cite><a class="bibref" data-link-type="biblio" href="#bib-json-ld11-api" title="JSON-LD 1.1 Processing Algorithms and API">JSON-LD11-API</a></cite>] defines
    a method for <em>compacting</em> a JSON-LD document. <dfn data-dfn-type="dfn" id="dfn-compaction" data-no-export=""><a href="https://www.w3.org/TR/json-ld11-api/#dfn-compact">Compaction</a></dfn> is the process
    of applying a developer-supplied <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a> to shorten <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">IRIs</a>
    to <a href="#dfn-term" class="internalDFN" data-link-type="dfn">terms</a> or <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">compact IRIs</a>
    and JSON-LD values expressed in expanded form to simple values such as
    <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">strings</a> or <a data-link-type="dfn" href="https://tc39.es/ecma262/#sec-terms-and-definitions-number-value">numbers</a>.
    Often this makes it simpler to work with document as the data is expressed in
    application-specific terms. Compacted documents are also typically easier to read
    for humans.</p>

  <p>For example, assume the following JSON-LD input document:</p>

  <div class="example" id="sample-expanded-json-ld-document">
          <div class="marker">
      <a class="self-link" href="#sample-expanded-json-ld-document">Example<bdi> 125</bdi></a><span class="example-title">: Sample expanded JSON-LD document</span>
    </div> <pre class="input" aria-busy="false"><code class="hljs">[
  {
    "http://xmlns.com/foaf/0.1/name": [ "Manu Sporny" ],
    "http://xmlns.com/foaf/0.1/homepage": [
      {
       "@id": "http://manu.sporny.org/"
      }
    ]
  }
]</code></pre>
        </div>

  <p>Additionally, assume the following developer-supplied JSON-LD context:</p>

  <div class="example" id="sample-context">
          <div class="marker">
      <a class="self-link" href="#sample-context">Example<bdi> 126</bdi></a><span class="example-title">: Sample context</span>
    </div> <pre class="context" data-context-for="Sample expanded JSON-LD document" aria-busy="false"><code class="hljs">{
  "@context": {
    "name": "http://xmlns.com/foaf/0.1/name",
    "homepage": {
      "@id": "http://xmlns.com/foaf/0.1/homepage",
      "@type": "@id"
    }
  }
}</code></pre>
        </div>

  <p>Running the JSON-LD <a href="https://www.w3.org/TR/json-ld11-api/#compaction-algorithm">Compaction algorithm</a> given the <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a> supplied above
    against the JSON-LD input document provided above would result in the following
    output:</p>

  <aside class="example ds-selector-tabs" id="example-127-compact-form-of-the-sample-document-once-sample-context-has-been-applied"><div class="marker">
      <a class="self-link" href="#example-127-compact-form-of-the-sample-document-once-sample-context-has-been-applied">Example<bdi> 127</bdi></a><span class="example-title">: Compact form of the sample document once sample context has been applied</span>
    </div>
    <div class="selectors">
      
    </div>
    <pre class="selected original" data-result-for="Sample expanded JSON-LD document" data-compact="" data-context="Sample context" aria-busy="false"><code class="hljs">{
  "@context": {
    "name": "http://xmlns.com/foaf/0.1/name",
    "homepage": {
      "@id": "http://xmlns.com/foaf/0.1/homepage",
      "@type": "@id"
    }
  },
  "name": "Manu Sporny",
  "homepage": "http://manu.sporny.org/"
}</code></pre>
  </aside>

  <p><a href="#application-ld-json">JSON-LD's media type</a> defines a
    <code>profile</code> parameter which can be used to signal or request
    <dfn data-dfn-type="dfn" id="dfn-compacted-document-form">compacted document form</dfn>. The profile URI identifying
    <a href="#dfn-compacted-document-form" class="internalDFN" data-link-type="dfn">compacted document form</a> is <code>http://www.w3.org/ns/json-ld#compacted</code>.</p>

  <p>The details of Compaction are described in the
    <a href="https://www.w3.org/TR/json-ld11-api/#compaction-algorithm">Compaction algorithm</a> in [<cite><a class="bibref" data-link-type="biblio" href="#bib-json-ld11-api" title="JSON-LD 1.1 Processing Algorithms and API">JSON-LD11-API</a></cite>].
    This section provides a short description of how the algorithm operates as a guide
    to authors creating <a href="#dfn-context" class="internalDFN" data-link-type="dfn">contexts</a> to be used for <em>compacting</em> JSON-LD documents.</p>
  <p>The purpose of compaction is to apply the <a href="#dfn-term-definition" class="internalDFN" data-link-type="dfn">term definitions</a>, <a href="#dfn-vocabulary-mapping" class="internalDFN" data-link-type="dfn">vocabulary mapping</a>, <a href="#dfn-default-language" class="internalDFN" data-link-type="dfn">default language</a>,
    and <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-base-iri">base <abbr title="Internationalized Resource Identifier">IRI</abbr></a> to an existing JSON-LD document to cause it to be represented in a form
    that is tailored to the use of the JSON-LD document directly as JSON.
    This includes representing values as <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">strings</a>, rather than <a href="#dfn-value-object" class="internalDFN" data-link-type="dfn">value objects</a>, where possible,
    shortening the use of <a href="#dfn-list-object" class="internalDFN" data-link-type="dfn">list objects</a> into simple <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">arrays</a>, reversing the relationship
    between <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-node">nodes</a>, and using data maps to index into multiple values instead of
    representing them as an array of values.</p>

  <section class="informative" id="shortening-iris"><h4 id="x5-2-1-shortening-iris"><bdi class="secno">5.2.1 </bdi>Shortening IRIs<a class="self-link" aria-label="§" href="#shortening-iris"></a></h4><p><em>This section is non-normative.</em></p>
    <p>In an expanded JSON-LD document, <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">IRIs</a> are always represented as absolute <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">IRIs</a>.
      In many cases, it is preferable to use a shorter version, either a <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-6.5">relative <abbr title="Internationalized Resource Identifier">IRI</abbr> reference</a>,
      <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a>, or <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a>. Compaction uses a combination of elements
      in a context to create a shorter form of these IRIs. See
      <a href="#default-vocabulary" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">4.1.2 </bdi>Default Vocabulary</a>,
      <a href="#base-iri" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">4.1.3 </bdi>Base <abbr title="Internationalized Resource Identifier">IRI</abbr></a>,
      and <a href="#compact-iris" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">4.1.5 </bdi>Compact IRIs</a> for more details.</p>
    <p>The <a href="#dfn-vocabulary-mapping" class="internalDFN" data-link-type="dfn">vocabulary mapping</a> can be used to shorten IRIs that may be <em>vocabulary relative</em>
      by removing the <abbr title="Internationalized Resource Identifier">IRI</abbr> prefix that matches the <a href="#dfn-vocabulary-mapping" class="internalDFN" data-link-type="dfn">vocabulary mapping</a>.
      This is done whenever an <abbr title="Internationalized Resource Identifier">IRI</abbr> is determined to be vocabulary relative,
      i.e., used as a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-property">property</a>, or a value of <code>@type</code>,
      or as the value of a <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a> described as <code>"@type": "@vocab"</code>.</p>

    <aside class="example" id="example-128-compacting-using-a-default-vocabulary"><div class="marker">
      <a class="self-link" href="#example-128-compacting-using-a-default-vocabulary">Example<bdi> 128</bdi></a><span class="example-title">: Compacting using a default vocabulary</span>
    </div>
      <p>Given the following expanded document:</p>
      <pre id="compacting-default-expanded" class="expanded input" aria-busy="false"><code class="hljs">[{
  "@id": "http://example.org/places#BrewEats",
  "@type": ["http://example.org/Restaurant"],
  "http://example.org/name": [{"@value": "Brew Eats"}]
}]</code></pre>
      <p>And the following context:</p>
      <pre id="compacting-default-context" class="context nohighlight" data-context-for="Compacting using a default vocabulary-expanded">{
  "@context": {
    <span class="hl-bold">"@vocab": "http://example.org/"</span>
  }
}</pre>
      <p>The compaction algorithm will shorten all vocabulary-relative IRIs that begin with <code>http://xmlns.com/foaf/0.1/</code>:</p>
      <pre class="compacted result nohighlight" data-result-for="Compacting using a default vocabulary-expanded" data-context="Compacting using a default vocabulary-context" data-compact="">{
  "@context": {
    <span class="hl-bold">"@vocab": "http://example.org/"</span>
  },
  "@id": "http://example.org/places#BrewEats",
  "@type": <span class="hl-bold">"Restaurant"</span>,
  <span class="hl-bold">"name"</span>: "Brew Eats"
}</pre>

      <p>Note that two IRIs were shortened, unnecessary arrays are removed, and simple string
        values are replaced with the string.</p>

      <p>See <a href="#iana-security">Security Considerations</a> in <a href="#iana-considerations" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">C. </bdi>IANA Considerations</a>
        for a discussion on how string vocabulary-relative <abbr title="Internationalized Resource Identifier">IRI</abbr> resolution via concatenation.</p>
    </aside>

    <aside class="example" id="example-129-compacting-using-a-base-iri"><div class="marker">
      <a class="self-link" href="#example-129-compacting-using-a-base-iri">Example<bdi> 129</bdi></a><span class="example-title">: Compacting using a base IRI</span>
    </div>
      <p>Given the following expanded document:</p>
      <pre class="expanded input" aria-busy="false"><code class="hljs">[{
  "@id": "http://example.com/document.jsonld",
  "http://www.w3.org/2000/01/rdf-schema#label": [{"@value": "Just a simple document"}]
}]</code></pre>
      <p>And the following context:</p>
      <pre class="context nohighlight" data-context-for="Compacting using a base IRI-expanded">{
  "@context": {
    <span class="hl-bold">"@base": "http://example.com/"</span>,
    "label": "http://www.w3.org/2000/01/rdf-schema#label"
  }
}</pre>
      <p>The compaction algorithm will shorten all document-relative IRIs that begin with <code>http://example.com/</code>:</p>
      <pre class="compacted result nohighlight" data-result-for="Compacting using a base IRI-expanded" data-context="Compacting using a base IRI-context" data-compact="">{
  "@context": {
    <span class="hl-bold">"@base": "http://example.com/"</span>,
    "label": "http://www.w3.org/2000/01/rdf-schema#label"
  },
  "@id": <span class="hl-bold">"document.jsonld"</span>,
  "label": "Just a simple document"
}</pre>
    </aside>
  </section>

  <section class="informative" id="representing-values-as-strings"><h4 id="x5-2-2-representing-values-as-strings"><bdi class="secno">5.2.2 </bdi>Representing Values as Strings<a class="self-link" aria-label="§" href="#representing-values-as-strings"></a></h4><p><em>This section is non-normative.</em></p>
    <p>To be unambiguous, the <a href="#dfn-expanded-document-form" class="internalDFN" data-link-type="dfn">expanded document form</a> always represents <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-node">nodes</a>
      and values using <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a> and <a href="#dfn-value-object" class="internalDFN" data-link-type="dfn">value objects</a>.
      Moreover, property values are always contained within an array, even when there is only
      one value. Sometimes this is useful to maintain a uniformity of access,
      but most JSON data use the simplest possible representation, meaning that
      <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-property">properties</a> have single values, which are represented as <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">strings</a>
      or as structured values such as <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a>.
      By default, <a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-api/#dfn-compact">compaction</a> will represent values which are simple strings as <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">strings</a>,
      but sometimes a value is an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>, a date, or some other <a href="#dfn-typed-value" class="internalDFN" data-link-type="dfn">typed value</a> for which
      a simple string representation would loose information.
      By specifying this within a <a href="#dfn-term-definition" class="internalDFN" data-link-type="dfn">term definition</a>,
      the semantics of a string value can be inferred from the definition
      of the <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a> used as a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-property">property</a>.
      See <a href="#describing-values" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">4.2 </bdi>Describing Values</a> for more details.</p>

    <aside class="example" id="example-130-coercing-values-to-strings"><div class="marker">
      <a class="self-link" href="#example-130-coercing-values-to-strings">Example<bdi> 130</bdi></a><span class="example-title">: Coercing Values to Strings</span>
    </div>
      <p>Given the following expanded document:</p>
      <pre class="expanded input" aria-busy="false"><code class="hljs">[{
  "http://example.com/plain": [
    {"@value": "string"},
    {"@value": true},
    {"@value": 1}
  ],
  "http://example.com/date": [
    {
      "@value": "2018-02-16",
      "@type": "http://www.w3.org/2001/XMLSchema#date"
    }
  ],
  "http://example.com/en": [
    {"@value": "English", "@language": "en"}
  ],
  "http://example.com/iri": [
    {"@id": "http://example.com/some-location"}
  ]
}]</code></pre>
      <p>And the following context:</p>
      <pre class="context" data-context-for="Coercing Values to Strings-expanded" aria-busy="false"><code class="hljs">{
  "@context": {
    "@vocab": "http://example.com/",
    "date": {"@type": "http://www.w3.org/2001/XMLSchema#date"},
    "en":   {"@language": "en"},
    "iri": {"@type": "@id"}
  }
}</code></pre>
      <p>The compacted version will use string values for the defined terms
        when the values match the <a href="#dfn-term-definition" class="internalDFN" data-link-type="dfn">term definition</a>. Note that there is
        no term defined for "plain", that is created automatically using
        the <a href="#dfn-vocabulary-mapping" class="internalDFN" data-link-type="dfn">vocabulary mapping</a>.
        Also, the other native values,
        <code>1</code> and <code>true</code>,
        can be represented without defining a specific type mapping.</p>
      <pre class="compacted" data-result-for="Coercing Values to Strings-expanded" data-context="Coercing Values to Strings-context" data-compact="" aria-busy="false"><code class="hljs">{
  "@context": {
    "@vocab": "http://example.com/",
    "date": {"@type": "http://www.w3.org/2001/XMLSchema#date"},
    "en":   {"@language": "en"},
    "iri": {"@type": "@id"}
  },
  "plain": ["string", true, 1],
  "date": "2018-02-16",
  "en": "English",
  "iri": "http://example.com/some-location"
}</code></pre>
    </aside>
  </section>

  <section class="informative" id="representing-lists-as-arrays"><h4 id="x5-2-3-representing-lists-as-arrays"><bdi class="secno">5.2.3 </bdi>Representing Lists as Arrays<a class="self-link" aria-label="§" href="#representing-lists-as-arrays"></a></h4><p><em>This section is non-normative.</em></p>
    <p>As described in <a href="#lists" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">4.3.1 </bdi>Lists</a>,
      JSON-LD has an expanded syntax for representing ordered values,
      using the <code>@list</code> keyword.
      To simplify the representation in JSON-LD, a term can be defined with
      <code>"@container": "@list"</code> which causes all values of a
      property using such a term to be considered ordered.</p>

    <aside class="example" id="example-131-using-arrays-for-lists"><div class="marker">
      <a class="self-link" href="#example-131-using-arrays-for-lists">Example<bdi> 131</bdi></a><span class="example-title">: Using Arrays for Lists</span>
    </div>
      <p>Given the following expanded document:</p>
      <pre class="expanded input" aria-busy="false"><code class="hljs">[{
  "http://xmlns.com/foaf/0.1/nick": [{
    "@list": [
      {"@value": "joe"},
      {"@value": "bob"},
      {"@value": "jaybee"}
    ]
  }]
}]</code></pre>
      <p>And the following context:</p>
      <pre class="context nohighlight" data-context-for="Using Arrays for Lists-expanded">{
  "@context": {
    "nick": {
      "@id": "http://xmlns.com/foaf/0.1/nick",
      <span class="hl-bold">"@container": "@list"</span>
    }
  }
}</pre>
      <p>The compacted version eliminates the explicit <a href="#dfn-list-object" class="internalDFN" data-link-type="dfn">list object</a>.</p>
      <pre class="compacted" data-result-for="Using Arrays for Lists-expanded" data-context="Using Arrays for Lists-context" data-compact="" aria-busy="false"><code class="hljs">{
  "@context": {
    "nick": {
      "@id": "http://xmlns.com/foaf/0.1/nick",
      <span class="hl-bold">"@container": "@list"</span>
    }
  },
  "nick": <span class="hl-bold">[ "joe", "bob", "jaybee" ]</span>
}</code></pre>
    </aside>
  </section>

  <section class="informative" id="reversing-node-relationships"><h4 id="x5-2-4-reversing-node-relationships"><bdi class="secno">5.2.4 </bdi>Reversing Node Relationships<a class="self-link" aria-label="§" href="#reversing-node-relationships"></a></h4><p><em>This section is non-normative.</em></p>
    <p>In some cases, the property used to relate two nodes may
      be better expressed if the nodes have a reverse direction,
      for example, when describing a relationship between
      two people and a common parent.
      See <a href="#reverse-properties" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">4.8 </bdi>Reverse Properties</a> for more details.</p>

    <aside class="example" id="example-132-reversing-node-relationships"><div class="marker">
      <a class="self-link" href="#example-132-reversing-node-relationships">Example<bdi> 132</bdi></a><span class="example-title">: Reversing Node Relationships</span>
    </div>
      <p>Given the following expanded document:</p>
      <pre class="expanded input" aria-busy="false"><code class="hljs">[{
  "@id": "http://example.org/#homer",
  "http://example.com/vocab#name": [{"@value": "Homer"}],
  "@reverse": {
    "http://example.com/vocab#parent": [{
      "@id": "http://example.org/#bart",
      "http://example.com/vocab#name": [{"@value": "Bart"}]
    }, {
      "@id": "http://example.org/#lisa",
      "http://example.com/vocab#name": [{"@value": "Lisa"}]
    }]
  }
}]</code></pre>
      <p>And the following context:</p>
      <pre class="context" data-context-for="Reversing Node Relationships-expanded" aria-busy="false"><code class="hljs">{
  "@context": {
    "name": "http://example.com/vocab#name",
    "children": { <span class="hl-bold">"@reverse": "http://example.com/vocab#parent"</span> }
  }
}</code></pre>
      <p>The compacted version eliminates the <code>@reverse</code> property
        by describing "children" as the reverse of "parent".</p>
      <pre class="compacted" data-result-for="Reversing Node Relationships-expanded" data-context="Reversing Node Relationships-context" data-base="http://example.org/" data-compact="" aria-busy="false"><code class="hljs">{
  "@context": {
    "name": "http://example.com/vocab#name",
    "children": { <span class="hl-bold">"@reverse": "http://example.com/vocab#parent"</span> }
  },
  "@id": "#homer",
  "name": "Homer",
  "children": [
    { "@id": "#bart", "name": "Bart"},
    { "@id": "#lisa", "name": "Lisa"}
  ]
}</code></pre>
    </aside>

    <p>Reverse properties can be even more useful when combined with
      <a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-framing/#dfn-framing">framing</a>, which can actually make <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a> defined
      at the top-level of a document to become embedded nodes.
      JSON-LD provides a means to index such values, by defining
      an appropriate @container definition within a term definition.</p>
  </section>

  <section class="informative" id="indexing-values"><h4 id="x5-2-5-indexing-values"><bdi class="secno">5.2.5 </bdi>Indexing Values<a class="self-link" aria-label="§" href="#indexing-values"></a></h4><p><em>This section is non-normative.</em></p>
    <p>Properties with multiple values are typically represented using
      an unordered <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a>. This means that an application working
      on an internalized representation of that JSON would need to
      iterate through the values of the array to find a value matching
      a particular pattern, such as a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-language-tagged-string">language-tagged string</a>
      using the language <code>en</code>.</p>

    <aside class="example" id="example-133-indexing-language-tagged-strings"><div class="marker">
      <a class="self-link" href="#example-133-indexing-language-tagged-strings">Example<bdi> 133</bdi></a><span class="example-title">: Indexing language-tagged strings</span>
    </div>
      <p>Given the following expanded document:</p>
      <pre class="expanded input" aria-busy="false"><code class="hljs">[{
  "@id": "http://example.com/queen",
  "http://example.com/vocab/label": [
    {"@value": "The Queen", "@language": "en"},
    {"@value": "Die Königin", "@language": "de"},
    {"@value": "Ihre Majestät", "@language": "de"}
  ]
}]</code></pre>
      <p>And the following context:</p>
      <pre class="context" data-context-for="Indexing language-tagged strings-expanded" aria-busy="false"><code class="hljs">{
  "@context": {
    "vocab": "http://example.com/vocab/",
    "label": {
      "@id": "vocab:label",
      <span class="hl-bold">"@container": "@language"</span>
    }
  }
}</code></pre>
      <p>The compacted version uses a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a> value
        for "label", with the keys representing the <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-language-tag">language tag</a>
        and the values are the <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">strings</a> associated with the relevant <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-language-tag">language tag</a>.</p>
      <pre class="compacted" data-result-for="Indexing language-tagged strings-expanded" data-context="Indexing language-tagged strings-context" data-base="http://example.org/" data-compact="" aria-busy="false"><code class="hljs">{
  "@context": {
    "vocab": "http://example.com/vocab/",
    "label": {
      "@id": "vocab:label",
      <span class="hl-bold">"@container": "@language"</span>
    }
  },
  "@id": "http://example.com/queen",
  "label": {
    "en": "The Queen",
    "de": [ "Die Königin", "Ihre Majestät" ]
  }
}</code></pre>
    </aside>

    <p>Data can be indexed on a number of different keys, including
      @id, @type, @language, @index and more.
      See <a href="#indexed-values" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">4.6 </bdi>Indexed Values</a> and
      <a href="#named-graphs" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">4.9 </bdi>Named Graphs</a> for more details.</p>
  </section>

  <section class="informative" id="normalizing-values-as-objects"><h4 id="x5-2-6-normalizing-values-as-objects"><bdi class="secno">5.2.6 </bdi>Normalizing Values as Objects<a class="self-link" aria-label="§" href="#normalizing-values-as-objects"></a></h4><p><em>This section is non-normative.</em></p>
    <p>Sometimes it's useful to compact a document, but keep the
      node object and value object representations.
      For this, a term definition can set <code>"@type": "@none"</code>.
      This causes the <a href="https://www.w3.org/TR/json-ld11-api/#value-compaction">Value Compaction</a> algorithm to always use the object
      form of values, although components of that value may be compacted.</p>

    <aside class="example" id="example-134-forcing-object-values"><div class="marker">
      <a class="self-link" href="#example-134-forcing-object-values">Example<bdi> 134</bdi></a><span class="example-title">: Forcing Object Values</span>
    </div>
      <p>Given the following expanded document:</p>
      <pre class="expanded input" aria-busy="false"><code class="hljs">[{
  "http://example.com/notype": [
    {"@value": "string"},
    {"@value": true},
    {"@value": false},
    {"@value": 1},
    {"@value": 10.0},
    {"@value": "plain"},
    {"@value": "false", "@type": "http://www.w3.org/2001/XMLSchema#boolean"},
    {"@value": "english", "@language": "en"},
    {"@value": "2018-02-17", "@type": "http://www.w3.org/2001/XMLSchema#date"},
    {"@id": "http://example.com/iri"}
  ]
}]</code></pre>
      <p>And the following context:</p>
      <pre class="context" data-context-for="Forcing Object Values-expanded" aria-busy="false"><code class="hljs">{
  "@context": {
    "@version": 1.1,
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "notype": {"@id": "http://example.com/notype", "@type": "@none"}
  }
}</code></pre>
      <p>The compacted version will use string values for the defined terms
        when the values match the <a href="#dfn-term-definition" class="internalDFN" data-link-type="dfn">term definition</a>.
        Also, the other native values,
        <code>1</code> and <code>true</code>,
        can be represented without defining a specific type mapping.</p>
      <pre class="compacted" data-result-for="Forcing Object Values-expanded" data-context="Forcing Object Values-context" data-compact="" aria-busy="false"><code class="hljs">{
  "@context": {
    "@version": 1.1,
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "notype": {"@id": "http://example.com/notype", "@type": "@none"}
  },
  "notype": [
    {"@value": "string"},
    {"@value": true},
    {"@value": false},
    {"@value": 1},
    {"@value": 10.0},
    {"@value": "plain"},
    {"@value": "false", "@type": "xsd:boolean"},
    {"@value": "english", "@language": "en"},
    {"@value": "2018-02-17", "@type": "xsd:date"},
    {"@id": "http://example.com/iri"}
  ]
}</code></pre>
    </aside>
  </section>

  <section class="informative" id="representing-singular-values-as-arrays"><h4 id="x5-2-7-representing-singular-values-as-arrays"><bdi class="secno">5.2.7 </bdi>Representing Singular Values as Arrays<a class="self-link" aria-label="§" href="#representing-singular-values-as-arrays"></a></h4><p><em>This section is non-normative.</em></p>
    <p>Generally, when compacting, properties having only one value are
      represented as strings or <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">maps</a>, while properties having
      multiple values are represented as an array of strings or <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">maps</a>.
      This means that applications accessing such properties need to be prepared
      to accept either representation. To force all values to be represented
      using an array, a term definition can set <code>"@container": "@set"</code>.
      Moreover, <code>@set</code> can be used in combination with other container settings,
      for example looking at our language-map example from <a href="#indexing-values" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">5.2.5 </bdi>Indexing Values</a>:</p>

    <aside class="example" id="example-135-indexing-language-tagged-strings-and-set"><div class="marker">
      <a class="self-link" href="#example-135-indexing-language-tagged-strings-and-set">Example<bdi> 135</bdi></a><span class="example-title">: Indexing language-tagged strings and @set</span>
    </div>
      <p>Given the following expanded document:</p>
      <pre class="expanded input" aria-busy="false"><code class="hljs">[{
  "@id": "http://example.com/queen",
  "http://example.com/vocab/label": [
    {"@value": "The Queen", "@language": "en"},
    {"@value": "Die Königin", "@language": "de"},
    {"@value": "Ihre Majestät", "@language": "de"}
  ]
}]</code></pre>
      <p>And the following context:</p>
      <pre class="context" data-context-for="Indexing language-tagged strings and @set-expanded" aria-busy="false"><code class="hljs">{
  "@context": {
    "@version": 1.1,
    "@vocab": "http://example.com/vocab/",
    "label": {
      "@container": ["@language", <span class="hl-bold">"@set"</span>]
    }
  }
}</code></pre>
      <p>The compacted version uses a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a> value
        for "label" as before,
        and the values are the relevant <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">strings</a> but always represented using an <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a>.</p>
      <pre class="compacted result" data-result-for="Indexing language-tagged strings and @set-expanded" data-context="Indexing language-tagged strings and @set-context" data-base="http://example.org/" data-compact="" aria-busy="false"><code class="hljs">{
  "@context": {
    "@version": 1.1,
    "@vocab": "http://example.com/vocab/",
    "label": {
      "@container": ["@language", <span class="hl-bold">"@set"</span>]
    }
  },
  "@id": "http://example.com/queen",
  "label": {
    "en": <span class="hl-bold">[</span>"The Queen"<span class="hl-bold">]</span>,
    "de": [ "Die Königin", "Ihre Majestät" ]
  }
}</code></pre>
    </aside>
  </section>

  <section class="informative" id="term-selection"><h4 id="x5-2-8-term-selection"><bdi class="secno">5.2.8 </bdi>Term Selection<a class="self-link" aria-label="§" href="#term-selection"></a></h4><p><em>This section is non-normative.</em></p>
    <p>When compacting, the <a href="https://www.w3.org/TR/json-ld11-api/#compaction-algorithm">Compaction algorithm</a> will compact using a term
      for a property only when the values of that property match the
      <code>@container</code>, <code>@type</code>, and <code>@language</code> specifications for that <a href="#dfn-term-definition" class="internalDFN" data-link-type="dfn">term definition</a>.
      This can actually split values between different properties, all of which
      have the same <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>. In case there is no matching <a href="#dfn-term-definition" class="internalDFN" data-link-type="dfn">term definition</a>,
      the compaction algorithm will compact using the absolute <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> of the property.</p>

    <aside class="example" id="example-136-term-selection"><div class="marker">
      <a class="self-link" href="#example-136-term-selection">Example<bdi> 136</bdi></a><span class="example-title">: Term Selection</span>
    </div>
      <p>Given the following expanded document:</p>
      <pre class="expanded input" aria-busy="false"><code class="hljs">[{
  "http://example.com/vocab/property": [
    {"@value": "string"},
    {"@value": true},
    {"@value": 1},
    {"@value": "false", "@type": "http://www.w3.org/2001/XMLSchema#boolean"},
    {"@value": "10", "@type": "http://www.w3.org/2001/XMLSchema#integer"},
    {"@value": "english", "@language": "en"},
    {"@value": "2018-02-17", "@type": "http://www.w3.org/2001/XMLSchema#date"},
    {"@id": "http://example.com/some-location"}
  ]
}]</code></pre>
      <p>And the following context:</p>
      <pre class="context" data-context-for="Term Selection-expanded" aria-busy="false"><code class="hljs">{
  "@context": {
    "vocab":   "http://example.com/vocab/",
    "xsd":     "http://www.w3.org/2001/XMLSchema#",
    "integer": {"@id": "vocab:property", "@type": "xsd:integer"},
    "date":    {"@id": "vocab:property", "@type": "xsd:date"},
    "english": {"@id": "vocab:property", "@language": "en"},
    "list":    {"@id": "vocab:property", "@container": "@list"},
    "iri":     {"@id": "vocab:property", "@type": "@id"}
  }
}</code></pre>
      <p>Note that the values that match the "integer", "english", "date", and "iri"
        terms are properly matched, and that everything that does not explicitly
        match is added to a property created using a <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a>.</p>
      <pre class="compacted result" data-result-for="Term Selection-expanded" data-context="Term Selection-context" data-base="http://example.org/" data-compact="" aria-busy="false"><code class="hljs">{
  "@context": {
    "vocab":   "http://example.com/vocab/",
    "xsd":     "http://www.w3.org/2001/XMLSchema#",
    "integer": {"@id": "vocab:property", "@type": "xsd:integer"},
    "date":    {"@id": "vocab:property", "@type": "xsd:date"},
    "english": {"@id": "vocab:property", "@language": "en"},
    "list":    {"@id": "vocab:property", "@container": "@list"},
    "iri":     {"@id": "vocab:property", "@type": "@id"}
  },
  "vocab:property": [
    "string", true, 1,
    {"@value": "false", "@type": "xsd:boolean"}
  ],
  "integer": "10",
  "english": "english",
  "date": "2018-02-17",
  "iri": "http://example.com/some-location"
}</code></pre>
    </aside>
  </section>
</section>

<section class="informative" id="flattened-document-form"><h3 id="x5-3-flattened-document-form"><bdi class="secno">5.3 </bdi>Flattened Document Form<a class="self-link" aria-label="§" href="#flattened-document-form"></a></h3><p><em>This section is non-normative.</em></p>

  <p>The JSON-LD 1.1 Processing Algorithms and API specification [<cite><a class="bibref" data-link-type="biblio" href="#bib-json-ld11-api" title="JSON-LD 1.1 Processing Algorithms and API">JSON-LD11-API</a></cite>] defines
    a method for <em>flattening</em> a JSON-LD document.
    <dfn data-lt="flattened|Flattening" data-dfn-type="dfn" id="dfn-flattened" data-no-export=""><a href="https://www.w3.org/TR/json-ld11-api/#dfn-flattened">Flattening</a></dfn> collects all
    properties of a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-node">node</a> in a single <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a> and labels
    all <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node">blank nodes</a> with
    <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node-identifier">blank node identifiers</a>.
    This ensures a shape of the data and consequently may drastically simplify the code
    required to process JSON-LD in certain applications.</p>

  <p>For example, assume the following JSON-LD input document:</p>

  <div class="example" id="sample-expanded-json-ld-document-to-be-flattened">
          <div class="marker">
      <a class="self-link" href="#sample-expanded-json-ld-document-to-be-flattened">Example<bdi> 137</bdi></a><span class="example-title">: Sample JSON-LD document to be flattened</span>
    </div> <pre class="input" aria-busy="false"><code class="hljs">{
  "@context": {
    "name": "http://xmlns.com/foaf/0.1/name",
    "knows": "http://xmlns.com/foaf/0.1/knows"
  },
  "@id": "http://me.markus-lanthaler.com/",
  "name": "Markus Lanthaler",
  "knows": [
    {
      "@id": "http://manu.sporny.org/about#manu",
      "name": "Manu Sporny"
    }, {
      "name": "Dave Longley"
    }
  ]
}</code></pre>
        </div>

  <p>Running the JSON-LD <a href="https://www.w3.org/TR/json-ld11-api/#flattening-algorithm">Flattening algorithm</a> against the JSON-LD input document in
    the example above and using the same context would result in the following
    output:</p>

  <aside class="example ds-selector-tabs changed" id="example-138-flattened-and-compacted-form-for-the-previous-example"><div class="marker">
      <a class="self-link" href="#example-138-flattened-and-compacted-form-for-the-previous-example">Example<bdi> 138</bdi></a><span class="example-title">: Flattened and compacted form for the previous example</span>
    </div>
    <div class="selectors">
      <a class="playground" target="_blank" data-result-for="#sample-expanded-json-ld-document-to-be-flattened" data-context="#sample-expanded-json-ld-document-to-be-flattened" data-flatten="" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-flattened&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%22name%22%3A%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2Fname%22%2C%0A%20%20%20%20%22knows%22%3A%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2Fknows%22%0A%20%20%7D%2C%0A%20%20%22%40id%22%3A%20%22http%3A%2F%2Fme.markus-lanthaler.com%2F%22%2C%0A%20%20%22name%22%3A%20%22Markus%20Lanthaler%22%2C%0A%20%20%22knows%22%3A%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%22%40id%22%3A%20%22http%3A%2F%2Fmanu.sporny.org%2Fabout%23manu%22%2C%0A%20%20%20%20%20%20%22name%22%3A%20%22Manu%20Sporny%22%0A%20%20%20%20%7D%2C%20%7B%0A%20%20%20%20%20%20%22name%22%3A%20%22Dave%20Longley%22%0A%20%20%20%20%7D%0A%20%20%5D%0A%7D&amp;context=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%22name%22%3A%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2Fname%22%2C%0A%20%20%20%20%22knows%22%3A%20%22http%3A%2F%2Fxmlns.com%2Ffoaf%2F0.1%2Fknows%22%0A%20%20%7D%2C%0A%20%20%22%40id%22%3A%20%22http%3A%2F%2Fme.markus-lanthaler.com%2F%22%2C%0A%20%20%22name%22%3A%20%22Markus%20Lanthaler%22%2C%0A%20%20%22knows%22%3A%20%5B%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%22%40id%22%3A%20%22http%3A%2F%2Fmanu.sporny.org%2Fabout%23manu%22%2C%0A%20%20%20%20%20%20%22name%22%3A%20%22Manu%20Sporny%22%0A%20%20%20%20%7D%2C%20%7B%0A%20%20%20%20%20%20%22name%22%3A%20%22Dave%20Longley%22%0A%20%20%20%20%7D%0A%20%20%5D%0A%7D">Open in playground</a>
    </div>
    <pre class="selected original" data-flatten="" data-context="Sample JSON-LD document to be flattened" data-result-for="Sample JSON-LD document to be flattened" aria-busy="false"><code class="hljs">{
  "@context": {
    "name": "http://xmlns.com/foaf/0.1/name",
    "knows": "http://xmlns.com/foaf/0.1/knows"
  },
  "@graph": [{
    "@id": "http://me.markus-lanthaler.com/",
    "name": "Markus Lanthaler",
    "knows": [
      { "@id": "http://manu.sporny.org/about#manu" },
      { "@id": "_:b0" }
    ]
  }, {
    "@id": "http://manu.sporny.org/about#manu",
    "name": "Manu Sporny"
  }, {
    "@id": "_:b0",
    "name": "Dave Longley"
  }]
}</code></pre>
  </aside>

  <p><a href="#application-ld-json">JSON-LD's media type</a> defines a
    <code>profile</code> parameter which can be used to signal or request
    <dfn data-dfn-type="dfn" id="dfn-flattened-document-form">flattened document form</dfn>. The profile URI identifying
    <a href="#dfn-flattened-document-form" class="internalDFN" data-link-type="dfn">flattened document form</a> is <code>http://www.w3.org/ns/json-ld#flattened</code>.
    It can be combined with the profile URI identifying
    <a href="#dfn-expanded-document-form" class="internalDFN" data-link-type="dfn">expanded document form</a> or
    <a href="#dfn-compacted-document-form" class="internalDFN" data-link-type="dfn">compacted document form</a>.</p>
</section>

<section class="informative" id="framed-document-form"><h3 id="x5-4-framed-document-form"><bdi class="secno">5.4 </bdi>Framed Document Form<a class="self-link" aria-label="§" href="#framed-document-form"></a></h3><p><em>This section is non-normative.</em></p>

  <p>The JSON-LD 1.1 Framing specification [<cite><a class="bibref" data-link-type="biblio" href="#bib-json-ld11-framing" title="JSON-LD 1.1 Framing">JSON-LD11-FRAMING</a></cite>] defines
    a method for <em>framing</em> a JSON-LD document. <dfn data-dfn-type="dfn" id="dfn-framing" data-no-export=""><a href="https://www.w3.org/TR/json-ld11-framing/#dfn-framing">Framing</a></dfn> is used to shape
    the data in a JSON-LD document, using an example <a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-framing/#dfn-frame">frame</a> document
    which is used to both match the <a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-api/#dfn-flattened">flattened</a> data and show an example
    of how the resulting data should be shaped.</p>

  <p>For example, assume the following JSON-LD frame:</p>

  <div class="example" id="sample-library-frame">
          <div class="marker">
      <a class="self-link" href="#sample-library-frame">Example<bdi> 139</bdi></a><span class="example-title">: Sample library frame</span>
    </div> <pre class="frame" aria-busy="false"><code class="hljs">{
  "@context": {
    "@version": 1.1,
    "@vocab": "http://example.org/"
  },
  "@type": "Library",
  "contains": {
    "@type": "Book",
    "contains": {
      "@type": "Chapter"
    }
  }
}</code></pre>
        </div>

  <p>This <a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-framing/#dfn-frame">frame</a> document describes an embedding structure that would place
    objects with type <em>Library</em> at the top, with objects of
    type <em>Book</em> that were linked to the library object using
    the <em>contains</em> property embedded as property values. It also
    places objects of type <em>Chapter</em> within the referencing <em>Book</em> object
    as embedded values of the <em>Book</em> object.</p>

  <p>When using a flattened set of objects that match the frame components:</p>

  <div class="example" id="sample-flattened-library-objects">
          <div class="marker">
      <a class="self-link" href="#sample-flattened-library-objects">Example<bdi> 140</bdi></a><span class="example-title">: Flattened library objects</span>
    </div> <pre class="input" aria-busy="false"><code class="hljs">{
  "@context": {
    "@vocab": "http://example.org/",
    "contains": {"@type": "@id"}
  },
  "@graph": [{
    "@id": "http://example.org/library",
    "@type": "Library",
    "contains": "http://example.org/library/the-republic"
  }, {
    "@id": "http://example.org/library/the-republic",
    "@type": "Book",
    "creator": "Plato",
    "title": "The Republic",
    "contains": "http://example.org/library/the-republic#introduction"
  }, {
    "@id": "http://example.org/library/the-republic#introduction",
    "@type": "Chapter",
    "description": "An introductory chapter on The Republic.",
    "title": "The Introduction"
  }]
}</code></pre>
        </div>

  <p>The Frame Algorithm can create a new document which follows the structure
    of the frame:</p>

  <aside class="example ds-selector-tabs changed" id="example-141-framed-library-objects"><div class="marker">
      <a class="self-link" href="#example-141-framed-library-objects">Example<bdi> 141</bdi></a><span class="example-title">: Framed library objects</span>
    </div>
    <div class="selectors">
      <a class="playground" target="_blank" data-result-for="#sample-flattened-library-objects" data-frame="#sample-library-frame" data-flatten="" aria-label="playground link" href="https://json-ld.org/playground/#startTab=tab-framed&amp;json-ld=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%22%40vocab%22%3A%20%22http%3A%2F%2Fexample.org%2F%22%2C%0A%20%20%20%20%22contains%22%3A%20%7B%22%40type%22%3A%20%22%40id%22%7D%0A%20%20%7D%2C%0A%20%20%22%40graph%22%3A%20%5B%7B%0A%20%20%20%20%22%40id%22%3A%20%22http%3A%2F%2Fexample.org%2Flibrary%22%2C%0A%20%20%20%20%22%40type%22%3A%20%22Library%22%2C%0A%20%20%20%20%22contains%22%3A%20%22http%3A%2F%2Fexample.org%2Flibrary%2Fthe-republic%22%0A%20%20%7D%2C%20%7B%0A%20%20%20%20%22%40id%22%3A%20%22http%3A%2F%2Fexample.org%2Flibrary%2Fthe-republic%22%2C%0A%20%20%20%20%22%40type%22%3A%20%22Book%22%2C%0A%20%20%20%20%22creator%22%3A%20%22Plato%22%2C%0A%20%20%20%20%22title%22%3A%20%22The%20Republic%22%2C%0A%20%20%20%20%22contains%22%3A%20%22http%3A%2F%2Fexample.org%2Flibrary%2Fthe-republic%23introduction%22%0A%20%20%7D%2C%20%7B%0A%20%20%20%20%22%40id%22%3A%20%22http%3A%2F%2Fexample.org%2Flibrary%2Fthe-republic%23introduction%22%2C%0A%20%20%20%20%22%40type%22%3A%20%22Chapter%22%2C%0A%20%20%20%20%22description%22%3A%20%22An%20introductory%20chapter%20on%20The%20Republic.%22%2C%0A%20%20%20%20%22title%22%3A%20%22The%20Introduction%22%0A%20%20%7D%5D%0A%7D&amp;context=%7B%7D&amp;frame=%7B%0A%20%20%22%40context%22%3A%20%7B%0A%20%20%20%20%22%40version%22%3A%201.1%2C%0A%20%20%20%20%22%40vocab%22%3A%20%22http%3A%2F%2Fexample.org%2F%22%0A%20%20%7D%2C%0A%20%20%22%40type%22%3A%20%22Library%22%2C%0A%20%20%22contains%22%3A%20%7B%0A%20%20%20%20%22%40type%22%3A%20%22Book%22%2C%0A%20%20%20%20%22contains%22%3A%20%7B%0A%20%20%20%20%20%20%22%40type%22%3A%20%22Chapter%22%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D">Open in playground</a>
    </div>
    <pre class="selected original nohighlight" title="Framed library objects" data-frame="Sample library frame" data-result-for="Flattened library objects">{
  "@context": {
    "@version": 1.1,
    "@vocab": "http://example.org/"
  },
  "@id": "http://example.org/library",
  "@type": "Library",
  "contains": {
    "@id": "http://example.org/library/the-republic",
    "@type": "Book",
    "contains": {
      "@id": "http://example.org/library/the-republic#introduction",
      "@type": "Chapter",
      "description": "An introductory chapter on The Republic.",
      "title": "The Introduction"
    },
    "creator": "Plato",
    "title": "The Republic"
  }
}</pre>
  </aside>

  <p><a href="#application-ld-json">JSON-LD's media type</a> defines a
    <code>profile</code> parameter which can be used to signal or request
    <dfn data-dfn-type="dfn" id="dfn-framed-document-form">framed document form</dfn>. The profile URI identifying
    <a href="#dfn-framed-document-form" class="internalDFN" data-link-type="dfn">framed document form</a> is <code>http://www.w3.org/ns/json-ld#framed</code>.</p>

  <p><a href="#application-ld-json">JSON-LD's media type</a> also defines a
    <code>profile</code> parameter which can be used to identify a
    <a href="https://html.spec.whatwg.org/multipage/scripting.html#the-script-element">script element</a> in an HTML document containing a frame.
    The first <a href="https://html.spec.whatwg.org/multipage/scripting.html#the-script-element">script element</a>
    of type <code>application/ld+json;profile=http://www.w3.org/ns/json-ld#frame</code>
    will be used to find a <a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-framing/#dfn-frame">frame</a>..</p>
</section>
</section>

<section class="normative" id="modifying-behavior-with-link-relationships"><h2 id="x6-modifying-behavior-with-link-relationships"><bdi class="secno">6. </bdi>Modifying Behavior with Link Relationships<a class="self-link" aria-label="§" href="#modifying-behavior-with-link-relationships"></a></h2>
  <p>Certain aspects of JSON-LD processing can be modified using
    <dfn data-no-xref="" data-dfn-type="dfn" data-plurals="http link header" id="dfn-http-link-headers" data-no-export=""><a href="https://tools.ietf.org/html/rfc8288#section-3">HTTP Link Headers</a></dfn> [<cite><a class="bibref" data-link-type="biblio" href="#bib-rfc8288" title="Web Linking">RFC8288</a></cite>].
    These can be used when retrieving resources that are not, themselves, JSON-LD,
    but can be interpreted as JSON-LD by using information in a
    <a href="https://en.wikipedia.org/wiki/Link_relation" data-no-xref="">Link Relation</a>.</p>

  <p>When processing normal JSON documents, a link relation can be specified using
    the <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc8288#section-3">HTTP Link Header</a>
    returned when fetching a remote document, as described in <a href="#interpreting-json-as-json-ld" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">6.1 </bdi>Interpreting JSON as JSON-LD</a>.</p>

  <p class="changed">In other cases, a resource may be returned using a representation that cannot easily be interpreted
    as JSON-LD. Normally, <a href="https://en.wikipedia.org/wiki/Content_negotiation">HTTP content negotiation</a>
    would be used to allow a client to specify a preference for JSON-LD over another representation,
    but in certain situations, it is not possible or practical for a server to respond appropriately to such requests.
    For this, an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc8288#section-3">HTTP Link Header</a> can be used to provide an alternate location for a document
    to be used in place of the originally requested resource,
    as described in <a href="#alternate-document-location" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">6.2 </bdi>Alternate Document Location</a>.</p>

<section class="normative" id="interpreting-json-as-json-ld"><h3 id="x6-1-interpreting-json-as-json-ld"><bdi class="secno">6.1 </bdi>Interpreting JSON as JSON-LD<a class="self-link" aria-label="§" href="#interpreting-json-as-json-ld"></a></h3>

  <p>Ordinary JSON documents can be interpreted as JSON-LD
    by providing an explicit JSON-LD <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a> document. One way
    to provide this is by using referencing a JSON-LD
    <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a> document in an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc8288#section-3">HTTP Link Header</a>.
    Doing so allows JSON to be unambiguously machine-readable without requiring developers to drastically
    change their documents and provides an upgrade path for existing infrastructure
    without breaking existing clients that rely on the <code>application/json</code>
    media type or a media type with a <code>+json</code> suffix as defined in
    [<cite><a class="bibref" data-link-type="biblio" href="#bib-rfc6839" title="Additional Media Type Structured Syntax Suffixes">RFC6839</a></cite>].</p>

  <p>In order to use an external context with an ordinary JSON document,
    when retrieving an ordinary JSON document via HTTP, processors <em class="rfc2119" title="MUST">MUST</em>
    attempt to retrieve any <a href="#dfn-json-ld-document" class="internalDFN" data-link-type="dfn">JSON-LD document</a> referenced by a
    <a href="https://tools.ietf.org/html/rfc8288#section-3">Link Header</a> with:</p>

  <ul>
    <li><code>rel="http://www.w3.org/ns/json-ld#context"</code>, and</li>
    <li><code>type="application/ld+json"</code>.</li>
  </ul>

  <p>The referenced document <em class="rfc2119" title="MUST">MUST</em> have a top-level <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc8259#section-4">JSON object</a>.
    The <code>@context</code> <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">entry</a> within that object is added to the top-level
    <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc8259#section-4">JSON object</a> of the referencing document. If an <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a>
    is at the top-level of the referencing document and its items are
    <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc8259#section-4">JSON objects</a>, the <code>@context</code>
    subtree is added to all <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a> items. All extra information located outside
    of the <code>@context</code> subtree in the referenced document <em class="rfc2119" title="MUST">MUST</em> be
    discarded. Effectively this means that the <a href="#dfn-active-context" class="internalDFN" data-link-type="dfn">active context</a> is
    initialized with the referenced external <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a>. A response <em class="rfc2119" title="MUST NOT">MUST NOT</em>
    contain more than one <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc8288#section-3">HTTP Link Header</a> using the
    <code>http://www.w3.org/ns/json-ld#context</code> link relation.</p>

  <p>Other mechanisms for providing a JSON-LD Context <em class="rfc2119" title="MAY">MAY</em> be described for other
    URI schemes.</p>

  <p>The JSON-LD 1.1 Processing Algorithms and API specification [<cite><a class="bibref" data-link-type="biblio" href="#bib-json-ld11-api" title="JSON-LD 1.1 Processing Algorithms and API">JSON-LD11-API</a></cite>]
    provides for an <a href="https://www.w3.org/TR/json-ld11-api/#dom-jsonldoptions-expandcontext">expandContext</a> option for specifying
    a <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a> to use when expanding JSON documents programmatically.</p>

  <p>The following example demonstrates the use of an external context with an
    ordinary JSON document over HTTP:</p>

  <div class="example" id="example-142-referencing-a-json-ld-context-from-a-json-document-via-an-http-link-header">
          <div class="marker">
      <a class="self-link" href="#example-142-referencing-a-json-ld-context-from-a-json-document-via-an-http-link-header">Example<bdi> 142</bdi></a><span class="example-title">: Referencing a JSON-LD context from a JSON document via an HTTP Link Header</span>
    </div> <pre class="nohighlight" data-content-type="http" data-ignore="">GET /ordinary-json-document.json HTTP/1.1
Host: example.com
Accept: application/ld+json,application/json,*/*;q=0.1

====================================

HTTP/1.1 200 OK
<span class="comment">...</span>
Content-Type: <span class="hl-bold">application/json</span>
<span class="hl-bold">Link: &lt;https://json-ld.org/contexts/person.jsonld&gt;; rel="http://www.w3.org/ns/json-ld#context"; type="application/ld+json"</span>

{
  "name": "Markus Lanthaler",
  "homepage": "http://www.markus-lanthaler.com/",
  "image": "http://twitter.com/account/profile_image/markuslanthaler"
}</pre>
        </div>

  <p>Please note that <a href="#dfn-json-ld-document" class="internalDFN" data-link-type="dfn">JSON-LD documents</a>
    served with the <code>application/ld+json</code>
    media type <em class="rfc2119" title="MUST">MUST</em> have all context information, including references to external
    contexts, within the body of the document. Contexts linked via a
    <code>http://www.w3.org/ns/json-ld#context</code> <a href="https://tools.ietf.org/html/rfc8288#section-3">HTTP Link Header</a> <em class="rfc2119" title="MUST">MUST</em> be
    ignored for such documents.</p>
</section>

<section class="normative changed" id="alternate-document-location"><h3 id="x6-2-alternate-document-location"><bdi class="secno">6.2 </bdi>Alternate Document Location<a class="self-link" aria-label="§" href="#alternate-document-location"></a></h3>

  <p>Documents which can't be directly interpreted as JSON-LD can provide an alternate location containing JSON-LD.
    One way to provide this is by referencing a JSON-LD document in an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc8288#section-3">HTTP Link Header</a>.
    This might be useful, for example, when the URL associated with a namespace naturally
    contains an HTML document, but the JSON-LD context associated with that URL is located elsewhere.</p>

  <p>To specify an alternate location, a non-JSON resource
    (i.e., one using a media type other than <code>application/json</code> or a derivative)
    can return the alternate location using a <a href="https://tools.ietf.org/html/rfc8288#section-3">Link Header</a> with:</p>

  <ul>
    <li><code>rel="alternate"</code>, and</li>
    <li><code>type="application/ld+json"</code>.</li>
  </ul>

  <p>A response <em class="rfc2119" title="MUST NOT">MUST NOT</em> contain more than one <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc8288#section-3">HTTP Link Header</a> using the
    <code>alternate</code> link relation with <code>type="application/ld+json"</code> .</p>

  <p>Other mechanisms for providing an alternate location <em class="rfc2119" title="MAY">MAY</em> be described for other
    URI schemes.</p>

  <p>The following example demonstrates the use of an alternate location with an
    ordinary HTTP document over HTTP:</p>

  <div class="example" id="example-143-specifying-an-alternate-location-via-an-http-link-header">
          <div class="marker">
      <a class="self-link" href="#example-143-specifying-an-alternate-location-via-an-http-link-header">Example<bdi> 143</bdi></a><span class="example-title">: Specifying an alternate location via an HTTP Link Header</span>
    </div> <pre class="nohighlight" data-content-type="http" data-ignore="">GET /index.html HTTP/1.1
Host: example.com
Accept: application/ld+json,application/json,*/*;q=0.1

====================================

HTTP/1.1 200 OK
<span class="comment">...</span>
Content-Type: <span class="hl-bold">text/html</span>
<span class="hl-bold">Link: &lt;alternate.jsonld&gt;; rel="alternate"; type="application/ld+json"</span>

&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Primary Entrypoint&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;p&gt;This is the primary entrypoint for a vocabulary&lt;/p&gt;
  &lt;/body&gt;
&lt;/html&gt;</pre>
        </div>

  <p>A processor seeing a non-JSON result will note the presence of the link header
    and load that document instead.</p>
</section>
</section>

<section class="changed" id="embedding-json-ld-in-html-documents"><h2 id="x7-embedding-json-ld-in-html-documents"><bdi class="secno">7. </bdi>Embedding JSON-LD in HTML Documents<a class="self-link" aria-label="§" href="#embedding-json-ld-in-html-documents"></a></h2>

  <div class="note" role="note" id="issue-container-generatedID-43"><div role="heading" class="note-title marker" id="h-note-39" aria-level="3"><span>Note</span></div><p class="">This section describes features available
    with a <a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-api/#dom-jsonldoptions-documentloader">documentLoader</a> supporting <a href="https://www.w3.org/TR/json-ld11-api/#extract-script-content">HTML script extraction</a>.
    See <a href="https://www.w3.org/TR/json-ld11-api/#remote-document-and-context-retrieval">Remote Document and Context Retrieval</a>
    for more information.</p></div>

  <p>
    JSON-LD content can be easily embedded in HTML [<cite><a class="bibref" data-link-type="biblio" href="#bib-html" title="HTML Standard">HTML</a></cite>] by placing
    it in a <a href="https://html.spec.whatwg.org/multipage/scripting.html#the-script-element">script element</a> with the <code>type</code> attribute set to
    <code>application/ld+json</code>. Doing so creates a
    <a href="https://html.spec.whatwg.org/multipage/scripting.html#data-block">data block</a>.</p>

   <aside class="example ds-selector-tabs" id="example-144-embedding-json-ld-in-html"><div class="marker">
      <a class="self-link" href="#example-144-embedding-json-ld-in-html">Example<bdi> 144</bdi></a><span class="example-title">: Embedding JSON-LD in HTML</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="expanded">Expanded (Result)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="turtle">Turtle</button>
    </div>
    <pre class="compacted input selected nohighlight" data-content-type="text/html"><span class="hl-bold">&lt;script type="application/ld+json"&gt;</span>
{
  "@context": "https://json-ld.org/contexts/person.jsonld",
  "@id": "http://dbpedia.org/resource/John_Lennon",
  "name": "John Lennon",
  "born": "1940-10-09",
  "spouse": "http://dbpedia.org/resource/Cynthia_Lennon"
}
<span class="hl-bold">&lt;/script&gt;</span></pre>
    <pre class="expanded result" data-result-for="Embedding JSON-LD in HTML-compacted" aria-busy="false"><code class="hljs">[{
  "@id": "http://dbpedia.org/resource/John_Lennon",
  "http://xmlns.com/foaf/0.1/name": [{"@value": "John Lennon"}],
  "http://schema.org/birthDate": [
    {"@value": "1940-10-09", "@type": "http://www.w3.org/2001/XMLSchema#date"}
  ],
  "http://schema.org/spouse": [
    {"@id": "http://dbpedia.org/resource/Cynthia_Lennon"}
  ]
}]</code></pre>
    <table class="statements" data-result-for="Embedding JSON-LD in HTML-expanded" data-to-rdf="">
      <thead><tr><th>Subject</th><th>Property</th><th>Value</th><th>Value Type</th></tr></thead>
      <tbody>
        <tr><td>http://dbpedia.org/resource/John_Lennon</td><td>foaf:name</td><td>John Lennon</td><td>&nbsp;</td></tr>
        <tr><td>http://dbpedia.org/resource/John_Lennon</td><td>schema:birthDate</td><td>1940-10-09</td><td>xsd:date</td></tr>
        <tr><td>http://dbpedia.org/resource/John_Lennon</td><td>schema:spouse</td><td>http://dbpedia.org/resource/Cynthia_Lennon</td><td>&nbsp;</td></tr>
      </tbody>
    </table>
    <pre class="turtle" data-content-type="text/turtle" data-result-for="Embedding JSON-LD in HTML-expanded" data-to-rdf="" aria-busy="false"><code class="hljs">@prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt; .
@prefix schema: &lt;http://schema.org/&gt; .
@prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt; .

&lt;http://dbpedia.org/resource/John_Lennon&gt; foaf:name "John Lennon";
   schema:birthDate "1940-10-09"^^xsd:date;
   schema:spouse &lt;http://dbpedia.org/resource/Cynthia_Lennon&gt; .</code></pre>
  </aside>

  <p>Defining how such data may be used is beyond the scope of this specification.
    The embedded JSON-LD document might be extracted as is or, e.g., be
    interpreted as RDF.</p>

  <p>If JSON-LD content is extracted as RDF [<cite><a class="bibref" data-link-type="biblio" href="#bib-rdf11-concepts" title="RDF 1.1 Concepts and Abstract Syntax">RDF11-CONCEPTS</a></cite>], it <em class="rfc2119" title="MUST">MUST</em> be expanded into an
    <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-dataset">RDF Dataset</a> using the
    <a href="https://www.w3.org/TR/json-ld11-api/#deserialize-json-ld-to-rdf-algorithm">Deserialize JSON-LD to RDF Algorithm</a>
    [<cite><a class="bibref" data-link-type="biblio" href="#bib-json-ld11-api" title="JSON-LD 1.1 Processing Algorithms and API">JSON-LD11-API</a></cite>]. Unless a specific script is targeted
    (see <a href="#locating-a-specific-json-ld-script-element" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">7.3 </bdi>Locating a Specific JSON-LD Script Element</a>),
    all <a href="https://html.spec.whatwg.org/multipage/scripting.html#the-script-element">script elements</a>
    with <code>type</code> <code>application/ld+json</code> <em class="rfc2119" title="MUST">MUST</em> be processed and merged
    into a single <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-dataset">dataset</a> with equivalent <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node-identifier">blank node identifiers</a> contained in
    separate script elements treated as if they were in a single document (i.e.,
    blank nodes are shared between different JSON-LD script elements).</p>

   <aside class="example ds-selector-tabs" id="example-145-combining-multiple-json-ld-script-elements-into-a-single-dataset"><div class="marker">
      <a class="self-link" href="#example-145-combining-multiple-json-ld-script-elements-into-a-single-dataset">Example<bdi> 145</bdi></a><span class="example-title">: Combining multiple JSON-LD script elements into a single dataset</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">HTML Embedded (Input)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="turtle">Turtle (Result)</button>
    </div>
    <pre class="compacted input selected" data-content-type="text/html" aria-busy="false"><code class="hljs">&lt;p&gt;Data describing Dave&lt;/p&gt;
&lt;script type="application/ld+json"&gt;
{
  "@context": "http://schema.org/",
  "@id": "https://digitalbazaar.com/author/dlongley/",
  "@type": "Person",
  "name": "Dave Longley"
}
&lt;/script&gt;

&lt;p&gt;Data describing Gregg&lt;/p&gt;
&lt;script type="application/ld+json"&gt;
{
  "@context": "http://schema.org/",
  "@id": "https://greggkellogg.net/foaf#me",
  "@type": "Person",
  "name": "Gregg Kellogg"
}
&lt;/script&gt;</code></pre>
    <table class="statements" data-result-for="Combining multiple JSON-LD script elements into a single dataset-compacted" data-to-rdf="">
      <thead><tr><th>Subject</th><th>Property</th><th>Value</th></tr></thead>
      <tbody>
        <tr><td>https://digitalbazaar.com/author/dlongley/</td><td>rdf:type</td><td>schema:Person</td></tr>
        <tr><td>https://digitalbazaar.com/author/dlongley/</td><td>schema:name</td><td>Dave Longley</td></tr>
        <tr><td>https://greggkellogg.net/foaf#me</td><td>rdf:type</td><td>schema:Person</td></tr>
        <tr><td>https://greggkellogg.net/foaf#me</td><td>schema:name</td><td>Gregg Kellogg</td></tr>
      </tbody>
    </table>
    <pre class="turtle" data-content-type="text/turtle" data-result-for="Combining multiple JSON-LD script elements into a single dataset-compacted" data-to-rdf="" aria-busy="false"><code class="hljs">@prefix schema: &lt;http://schema.org/&gt; .

&lt;https://digitalbazaar.com/author/dlongley/&gt; a schema:Person;
   schema:name "Dave Longley" .

&lt;https://greggkellogg.net/foaf#me&gt; a schema:Person;
   schema:name "Gregg Kellogg" .</code></pre>
  </aside>

  <section id="inheriting-base-iri-from-html-s-base-element"><h3 id="x7-1-inheriting-base-iri-from-html-s-base-element"><bdi class="secno">7.1 </bdi>Inheriting base <abbr title="Internationalized Resource Identifier">IRI</abbr> from HTML's <code>base</code> element<a class="self-link" aria-label="§" href="#inheriting-base-iri-from-html-s-base-element"></a></h3>
    <p>When processing a JSON-LD
      <a href="https://html.spec.whatwg.org/multipage/scripting.html#the-script-element">script element</a>,
      the <a href="https://html.spec.whatwg.org/multipage/urls-and-fetching.html#document-base-url">Document Base URL</a>
      of the containing HTML document,
      as defined in [<cite><a class="bibref" data-link-type="biblio" href="#bib-html" title="HTML Standard">HTML</a></cite>],
      is used to establish the default <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-base-iri">base <abbr title="Internationalized Resource Identifier">IRI</abbr></a> of the enclosed
      JSON-LD content.</p>

     <aside class="example ds-selector-tabs" id="example-146-using-the-document-base-url-to-establish-the-default-base-iri"><div class="marker">
      <a class="self-link" href="#example-146-using-the-document-base-url-to-establish-the-default-base-iri">Example<bdi> 146</bdi></a><span class="example-title">: Using the document base URL to establish the default base IRI</span>
    </div>
      <div class="selectors">
        <button class="selected" data-selects="compacted">Compacted (Input)</button>
        <button data-selects="expanded">Expanded (Result)</button>
        <button data-selects="statements">Statements</button>
        <button data-selects="turtle">Turtle</button>
      </div>
      <pre class="compacted input selected" data-content-type="text/html" aria-busy="false"><code class="hljs"><span class="hl-bold">&lt;html&gt;
  &lt;head&gt;
    &lt;base href="http://dbpedia.org/resource/"/&gt;</span>
    &lt;script type="application/ld+json"&gt;
    {
      "@context": "https://json-ld.org/contexts/person.jsonld",
      "@id": <span class="hl-bold">"John_Lennon"</span>,
      "name": "John Lennon",
      "born": "1940-10-09",
      "spouse": <span class="hl-bold">"Cynthia_Lennon"</span>
    }
    &lt;/script&gt;
  <span class="hl-bold">&lt;/head&gt;
&lt;/html&gt;</span></code></pre>
      <pre class="expanded result" data-result-for="Using the document base URL to establish the default base IRI-compacted" aria-busy="false"><code class="hljs">[{
  "@id": "http://dbpedia.org/resource/John_Lennon",
  "http://xmlns.com/foaf/0.1/name": [{"@value": "John Lennon"}],
  "http://schema.org/birthDate": [
    {"@value": "1940-10-09", "@type": "http://www.w3.org/2001/XMLSchema#date"}
  ],
  "http://schema.org/spouse": [
    {"@id": "http://dbpedia.org/resource/Cynthia_Lennon"}
  ]
}]</code></pre>
      <table class="statements" data-result-for="Using the document base URL to establish the default base IRI-expanded" data-to-rdf="">
        <thead><tr><th>Subject</th><th>Property</th><th>Value</th><th>Value Type</th></tr></thead>
        <tbody>
          <tr><td>http://dbpedia.org/resource/John_Lennon</td><td>foaf:name</td><td>John Lennon</td><td>&nbsp;</td></tr>
          <tr><td>http://dbpedia.org/resource/John_Lennon</td><td>schema:birthDate</td><td>1940-10-09</td><td>xsd:date</td></tr>
          <tr><td>http://dbpedia.org/resource/John_Lennon</td><td>schema:spouse</td><td>http://dbpedia.org/resource/Cynthia_Lennon</td><td>&nbsp;</td></tr>
        </tbody>
      </table>
      <pre class="turtle" data-content-type="text/turtle" data-result-for="Using the document base URL to establish the default base IRI-expanded" data-to-rdf="" aria-busy="false"><code class="hljs">@base &lt;http://dbpedia.org/resource/&gt; .
@prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt; .
@prefix schema: &lt;http://schema.org/&gt; .
@prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt; .

&lt;John_Lennon&gt; foaf:name "John Lennon";
   schema:birthDate "1940-10-09"^^xsd:date;
   schema:spouse &lt;Cynthia_Lennon&gt; .</code></pre>
    </aside>

    <p>HTML allows for <a href="https://html.spec.whatwg.org/multipage/urls-and-fetching.html#dynamic-changes-to-base-urls">Dynamic changes to base URLs</a>.
      This specification does not require any specific behavior,
      and to ensure that all systems process the <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-base-iri">base <abbr title="Internationalized Resource Identifier">IRI</abbr></a> equivalently, authors <em class="rfc2119" title="SHOULD">SHOULD</em>
      either use <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">IRIs</a>, or explicitly as defined in <a href="#base-iri" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">4.1.3 </bdi>Base <abbr title="Internationalized Resource Identifier">IRI</abbr></a>.
      Implementations (particularly those natively operating in the [<cite><a class="bibref" data-link-type="biblio" href="#bib-dom" title="DOM Standard">DOM</a></cite>]) <em class="rfc2119" title="MAY">MAY</em> take into consideration
      <a href="https://html.spec.whatwg.org/multipage/urls-and-fetching.html#dynamic-changes-to-base-urls">Dynamic changes to base URLs</a>.</p>
  </section>

  <section class="informative" id="restrictions-for-contents-of-json-ld-script-elements"><h3 id="x7-2-restrictions-for-contents-of-json-ld-script-elements"><bdi class="secno">7.2 </bdi>Restrictions for contents of JSON-LD <code>script</code> elements<a class="self-link" aria-label="§" href="#restrictions-for-contents-of-json-ld-script-elements"></a></h3><p><em>This section is non-normative.</em></p>
    <p>Due to the HTML <a href="https://html.spec.whatwg.org/multipage/scripting.html#restrictions-for-contents-of-script-elements">Restrictions for contents of <code>&lt;script&gt;</code> elements</a>
      additional encoding restrictions are placed on JSON-LD data contained in
      <a href="https://html.spec.whatwg.org/multipage/scripting.html#the-script-element">script elements</a>.</p>
    <p>Authors should avoid using character sequences in scripts embedded in HTML
      which may be confused with a <em>comment-open</em>, <em>script-open</em>,
      <em>comment-close</em>, or <em>script-close</em>.</p>
    <div class="note" role="note" id="issue-container-generatedID-44"><div role="heading" class="note-title marker" id="h-note-40" aria-level="4"><span>Note</span></div><div class="">Such content should be escaped as indicated below, however
      the content will remain escaped after processing through the
      JSON-LD API [<cite><a class="bibref" data-link-type="biblio" href="#bib-json-ld11-api" title="JSON-LD 1.1 Processing Algorithms and API">JSON-LD11-API</a></cite>].
      <ul>
        <li><code>&amp;amp;</code>  → &amp; (<a href="https://en.wikipedia.org/wiki/Ampersand" title="Ampersand">ampersand</a>, U+0026)</li>
        <li><code>&amp;lt;</code>   → &lt; (less-than sign, U+003C)</li>
        <li><code>&amp;gt;</code>   → &gt; (greater-than sign, U+003E)</li>
        <li><code>&amp;quot;</code> → " (quotation mark, U+0022)</li>
        <li><code>&amp;apos;</code> → ' (apostrophe, U+0027)</li>
      </ul>
    </div></div>

     <aside class="example ds-selector-tabs" id="example-147-embedding-json-ld-containing-html-in-html"><div class="marker">
      <a class="self-link" href="#example-147-embedding-json-ld-containing-html-in-html">Example<bdi> 147</bdi></a><span class="example-title">: Embedding JSON-LD containing HTML in HTML</span>
    </div>
      <div class="selectors">
        <button class="selected" data-selects="compacted">Compacted (Input)</button>
        <button data-selects="expanded">Expanded (Result)</button>
        <button data-selects="turtle">Turtle</button>
      </div>
      <pre class="compacted input selected" data-content-type="text/html" aria-busy="false"><code class="hljs">&lt;script type="application/ld+json"&gt;
{
  "@context": "http://schema.org/",
  "@type": "WebPageElement",
  "name": "Encoding Issues",
  "description": "Issues list such as unescaped &amp;lt;/script&amp;gt; or --&amp;gt;"
}
&lt;/script&gt;</code></pre>
      <pre class="expanded result" data-result-for="Embedding JSON-LD containing HTML in HTML-compacted" aria-busy="false"><code class="hljs">[{
  "@type": ["http://schema.org/WebPageElement"],
  "http://schema.org/name": [{"@value": "Encoding Issues"}],
  "http://schema.org/description": [
    {"@value": "Issues list such as unescaped &amp;lt;/script&amp;gt; or --&amp;gt;"}
  ]
}]</code></pre>
      <pre class="turtle" data-content-type="text/turtle" data-result-for="Embedding JSON-LD containing HTML in HTML-expanded" data-to-rdf="" aria-busy="false"><code class="hljs">@prefix schema: &lt;http://schema.org/&gt; .

[ a schema:WebPageElement;
  schema:name "Encoding Issues";
  schema:description "Issues list such as unescaped &amp;lt;/script&amp;gt; or --&amp;gt;"
] .</code></pre>
    </aside>
  </section>

  <section id="locating-a-specific-json-ld-script-element"><h3 id="x7-3-locating-a-specific-json-ld-script-element"><bdi class="secno">7.3 </bdi>Locating a Specific JSON-LD Script Element<a class="self-link" aria-label="§" href="#locating-a-specific-json-ld-script-element"></a></h3>
    <p>A specific
      <a href="https://html.spec.whatwg.org/multipage/scripting.html#the-script-element">script element</a>
      within an HTML document may be located using
      a fragment identifier matching the <a href="https://dom.spec.whatwg.org/#concept-id">unique identifier</a>
      of the script element within the HTML document located by a URL (see [<cite><a class="bibref" data-link-type="biblio" href="#bib-dom" title="DOM Standard">DOM</a></cite>]).
      A <a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-api/#dfn-json-ld-processor">JSON-LD processor</a> <em class="rfc2119" title="MUST">MUST</em> extract only the specified data block's contents
      parsing it as a standalone <a href="#dfn-json-ld-document" class="internalDFN" data-link-type="dfn">JSON-LD document</a>
      and <em class="rfc2119" title="MUST NOT">MUST NOT</em> merge the result with any other markup from the same HTML document.</p>

    <p>For example, given an HTML document located at <code>http://example.com/document</code>,
      a script element identified by "dave" can be targeted using the URL
      <code>http://example.com/document#dave</code>.</p>

   <aside class="example ds-selector-tabs" id="example-148-targeting-a-specific-script-element-by-id"><div class="marker">
      <a class="self-link" href="#example-148-targeting-a-specific-script-element-by-id">Example<bdi> 148</bdi></a><span class="example-title">: Targeting a specific script element by id</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="turtle">Turtle</button>
    </div>
    <p>Targeting a script element with id "gregg"</p>
    <pre class="compacted input selected nohighlight" data-content-type="text/html">&lt;p&gt;Data describing Dave&lt;/p&gt;
&lt;script <span class="hl-bold">id="dave"</span> type="application/ld+json"&gt;
{
  "@context": "http://schema.org/",
  "@id": "https://digitalbazaar.com/author/dlongley/",
  "@type": "Person",
  "name": "Dave Longley"
}
&lt;/script&gt;

&lt;p&gt;Data describing Gregg&lt;/p&gt;
&lt;script <span class="hl-bold">id="gregg"</span> type="application/ld+json"&gt;
{
  "@context": "http://schema.org/",
  "@id": "https://greggkellogg.net/foaf#me",
  "@type": "Person",
  "name": "Gregg Kellogg"
}
&lt;/script&gt;</pre>
    <table class="statements" data-result-for="Targeting a specific script element by id-compacted" data-to-rdf="" data-target="#gregg">
      <thead><tr><th>Subject</th><th>Property</th><th>Value</th></tr></thead>
      <tbody>
        <tr><td>https://greggkellogg.net/foaf#me</td><td>rdf:type</td><td>schema:Person</td></tr>
        <tr><td>https://greggkellogg.net/foaf#me</td><td>schema:name</td><td>Gregg Kellogg</td></tr>
      </tbody>
    </table>
    <pre class="turtle" data-content-type="text/turtle" data-result-for="Targeting a specific script element by id-compacted" data-to-rdf="" data-target="#gregg" aria-busy="false"><code class="hljs">@prefix schema: &lt;http://schema.org/&gt; .

&lt;https://greggkellogg.net/foaf#me&gt; a schema:Person;
   schema:name "Gregg Kellogg" .</code></pre>
  </aside>
  </section>
</section>

<section class="normative" id="data-model">
  <h2 id="x8-data-model"><bdi class="secno">8. </bdi>Data Model<a class="self-link" aria-label="§" href="#data-model"></a></h2>

  <p>JSON-LD is a serialization format for Linked Data based on JSON.
    It is therefore important to distinguish between the syntax, which is
    defined by JSON in [<cite><a class="bibref" data-link-type="biblio" href="#bib-rfc8259" title="The JavaScript Object Notation (JSON) Data Interchange Format">RFC8259</a></cite>], and the <dfn data-dfn-type="dfn" id="dfn-data-model">data model</dfn> which is
    an extension of the <a href="https://www.w3.org/TR/rdf11-concepts/#data-model">RDF data model</a> [<cite><a class="bibref" data-link-type="biblio" href="#bib-rdf11-concepts" title="RDF 1.1 Concepts and Abstract Syntax">RDF11-CONCEPTS</a></cite>].
    The precise details of how JSON-LD relates to the RDF data model are given in
    <a class="sectionRef sec-ref" href="#relationship-to-rdf">§&nbsp;<bdi class="secno">10. </bdi>Relationship to RDF</a>.</p>

  <p>To ease understanding for developers unfamiliar with the RDF model, the
    following summary is provided:</p>

  <ul>
    <li>A <a href="#dfn-json-ld-document" class="internalDFN" data-link-type="dfn">JSON-LD document</a> serializes a
      <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-dataset">RDF Dataset</a>
      [<cite><a class="bibref" data-link-type="biblio" href="#bib-rdf11-concepts" title="RDF 1.1 Concepts and Abstract Syntax">RDF11-CONCEPTS</a></cite>], which is a collection of <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-graph">graphs</a>
      that comprises exactly one <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-default-graph">default graph</a>
      and zero or more <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-named-graph">named graphs</a>.
    </li>
    <li>The <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-default-graph">default graph</a> does not have a name and <em class="rfc2119" title="MAY">MAY</em> be empty.</li>
    <li>Each <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-named-graph">named graph</a> is a pair consisting of an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> or
      <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node-identifier">blank node identifier</a> (the
      <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-graph-name">graph name</a>)
      and a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-graph">graph</a>. Whenever practical, the <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-graph-name">graph name</a> <em class="rfc2119" title="SHOULD">SHOULD</em> be an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>.</li>
    <li>A <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-graph">graph</a>
      is a labeled directed graph, i.e., a set of <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-node">nodes</a>
      connected by directed-arcs.</li>
    <li>Every directed-arc is labeled with
      an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> or a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node-identifier">blank node identifier</a>. Within the JSON-LD syntax
      these arc labels are called <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-property">properties</a>.
      Whenever practical, a directed-arc <em class="rfc2119" title="SHOULD">SHOULD</em> be labeled with an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>.
      <div class="note" role="note" id="issue-container-generatedID-45"><div role="heading" class="note-title marker" id="h-note-41" aria-level="3"><span>Note</span></div><div class="">The use of <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node-identifier">blank node identifiers</a> to label properties is obsolete,
        and may be removed in a future version of JSON-LD.
        Consider using a document-relative <abbr title="Internationalized Resource Identifier">IRI</abbr>, instead, such as <code>#</code>.</div></div>
    </li>
    <li>Every <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-node">node</a>
      is an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>, a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node">blank node</a>, or a <a href="https://www.w3.org/TR/rdf11-concepts/#dfn-literal">literal</a>,
      although syntactically <a data-link-type="dfn" href="https://www.w3.org/TR/rdf-schema/#ch_collectionvocab">lists</a> and native JSON values may be represented directly.</li>
    <li>A <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-node">node</a> having an outgoing edge <em class="rfc2119" title="MUST">MUST</em> be an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> or a
      <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node">blank node</a>.</li>
    <li>A <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-graph">graph</a> <em class="rfc2119" title="MUST NOT">MUST NOT</em> contain unconnected <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-node">nodes</a>,
      i.e., nodes which are not connected by an <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-property">property</a> to any other <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-node">node</a>.
      <div class="example" id="example-149-illegal-unconnected-node">
          <div class="marker">
      <a class="self-link" href="#example-149-illegal-unconnected-node">Example<bdi> 149</bdi></a><span class="example-title">: Illegal Unconnected Node</span>
    </div> <pre data-ignore="" aria-busy="false"><code class="hljs json">{
  <span class="hljs-attr">"@id"</span>: <span class="hljs-string">"http://example.org/1"</span>
}</code></pre>
        </div>
      <div class="note" role="note" id="issue-container-generatedID-46"><div role="heading" class="note-title marker" id="h-note-42" aria-level="3"><span>Note</span></div><div class="">
        This effectively just prohibits unnested, empty <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a>
        and unnested <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a> that contain only an <code>@id</code>.
        A document may have <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-node">nodes</a> which are unrelated, as long as one or more
        properties are defined, or the <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-node">node</a> is referenced from another <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a>.
      </div></div>
    </li>
    <li>An <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> (Internationalized Resource Identifier) is a string that conforms to the syntax
      defined in [<cite><a class="bibref" data-link-type="biblio" href="#bib-rfc3987" title="Internationalized Resource Identifiers (IRIs)">RFC3987</a></cite>]. <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">IRIs</a> used within a
      <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-graph">graph</a> <em class="rfc2119" title="SHOULD">SHOULD</em> return a Linked Data document describing
      the resource denoted by that <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> when being dereferenced.</li>
    <li>A <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node">blank node</a> is a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-node">node</a> which is neither an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>,
      nor a <a href="#dfn-json-ld-value" class="internalDFN" data-link-type="dfn">JSON-LD value</a>, nor a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf-schema/#ch_collectionvocab">list</a>. A blank node is identified
      using a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node-identifier">blank node identifier</a>.</li>
    <li>A <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node-identifier">blank node identifier</a>
      is a string that can be used as an identifier for a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node">blank node</a> within
      the scope of a <a href="#dfn-json-ld-document" class="internalDFN" data-link-type="dfn">JSON-LD document</a>. Blank node identifiers begin with
      <code>_:</code>.</li>
    <li>A <a href="#dfn-json-ld-value" class="internalDFN" data-link-type="dfn">JSON-LD value</a> is a <a href="#dfn-typed-value" class="internalDFN" data-link-type="dfn">typed value</a>, a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">string</a> (which is interpreted
      as a <a href="#dfn-typed-value" class="internalDFN" data-link-type="dfn">typed value</a> with type <code>xsd:string</code>), a <a data-link-type="dfn" href="https://tc39.es/ecma262/#sec-terms-and-definitions-number-value">number</a>
      (<a data-link-type="dfn" href="https://tc39.es/ecma262/#sec-terms-and-definitions-number-value">numbers</a> with a non-zero fractional part, i.e., the result of a modulo‑1 operation,
      <span class="changed">or which are too large to represent as integers
        (see <a href="https://www.w3.org/TR/json-ld11-api/#data-round-tripping">Data Round Tripping</a>) in [<cite><a class="bibref" data-link-type="biblio" href="#bib-json-ld11-api" title="JSON-LD 1.1 Processing Algorithms and API">JSON-LD11-API</a></cite>]),</span>
      are interpreted as <a href="#dfn-typed-value" class="internalDFN" data-link-type="dfn">typed values</a> with type <code>xsd:double</code>, all other
      <a data-link-type="dfn" href="https://tc39.es/ecma262/#sec-terms-and-definitions-number-value">numbers</a> are interpreted as <a href="#dfn-typed-value" class="internalDFN" data-link-type="dfn">typed values</a>
      with type <code>xsd:integer</code>), <code>true</code> or <code>false</code> (which are interpreted as
      <a href="#dfn-typed-value" class="internalDFN" data-link-type="dfn">typed values</a> with type <code>xsd:boolean</code>),
      or a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-language-tagged-string">language-tagged string</a>.</li>
    <li>A <a href="#dfn-typed-value" class="internalDFN" data-link-type="dfn">typed value</a> consists of a value, which is a string, and a type, which is an
      <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>.</li>
    <li>A <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-language-tagged-string">language-tagged string</a>
      consists of a string and a non-empty <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-language-tag">language tag</a> as defined by [<cite><a class="bibref" data-link-type="biblio" href="#bib-bcp47" title="Tags for Identifying Languages">BCP47</a></cite>].
      The language tag <em class="rfc2119" title="MUST">MUST</em> be well-formed according to section
      <a href="https://tools.ietf.org/html/bcp47#section-2.2.9">2.2.9 Classes of Conformance</a>
      of [<cite><a class="bibref" data-link-type="biblio" href="#bib-bcp47" title="Tags for Identifying Languages">BCP47</a></cite>].
      <span class="changed note">Processors <em class="rfc2119" title="MAY">MAY</em> normalize <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-language-tag">language tags</a> to lowercase.</span>
      </li>
    <li class="changed">Either <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">strings</a>, or <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-language-tagged-string">language-tagged strings</a> may include
      a <a href="#dfn-base-direction" class="internalDFN" data-link-type="dfn">base direction</a>, which represents an extension to the underlying
      <a href="https://www.w3.org/TR/rdf11-concepts/#data-model">RDF data model</a>.</li>
    <li>A <a data-link-type="dfn" href="https://www.w3.org/TR/rdf-schema/#ch_collectionvocab">list</a> is a sequence of zero or more <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">IRIs</a>,
      <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node">blank nodes</a>, and <a href="#dfn-json-ld-value" class="internalDFN" data-link-type="dfn">JSON-LD values</a>.
      <a data-link-type="dfn" href="https://www.w3.org/TR/rdf-schema/#ch_collectionvocab">Lists</a> are interpreted as
      <dfn data-dfn-type="dfn" id="dfn-rdf-list-structures" data-no-export=""><a href="https://www.w3.org/TR/rdf11-mt/#rdf-collections">RDF list structures</a></dfn> [<cite><a class="bibref" data-link-type="biblio" href="#bib-rdf11-mt" title="RDF 1.1 Semantics">RDF11-MT</a></cite>].</li>
  </ul>

  <p><a href="#dfn-json-ld-document" class="internalDFN" data-link-type="dfn">JSON-LD documents</a> <em class="rfc2119" title="MAY">MAY</em> contain data
    that cannot be represented by the <a href="#dfn-data-model" class="internalDFN" data-link-type="dfn">data model</a>
    defined above. Unless otherwise specified, such data is ignored when a
    <a href="#dfn-json-ld-document" class="internalDFN" data-link-type="dfn">JSON-LD document</a> is being processed. One result of this rule
    is that properties which are not mapped to an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>,
    a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node">blank node</a>, or <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a> will be ignored.</p>

  <p class="changed">Additionally, the JSON serialization format is internally represented using
    the <a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-api/#dfn-internal-representation">JSON-LD internal representation</a>, which uses the generic
    concepts of <a data-link-type="dfn" href="https://www.w3.org/TR/rdf-schema/#ch_collectionvocab">lists</a>, <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">maps</a>,
    <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">strings</a>, <a data-link-type="dfn" href="https://tc39.es/ecma262/#sec-terms-and-definitions-number-value">numbers</a>, <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#boolean">booleans</a>, and <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#nulls">null</a> to describe
    the data represented by a JSON document.</p>

  <figure id="fig-linked-data-graph" style="text-align:center">
    
    <object data="linked-data-graph.svg" style="width: 75%" type="image/svg+xml" aria-describedby="fig-linked-data-graph-alt">
      <p id="fig-linked-data-graph-alt">The image depicts a linked data dataset with a default graph
        and two named graphs.</p>
    </object>
    <figcaption>Figure <bdi class="figno">1</bdi> <span class="fig-title">An illustration of a linked data dataset.<br>
      A <a href="#fig-linked-data-graph-descr">description of the linked data dataset
      diagram</a> is available in the Appendix. Image available in
      <a href="linked-data-graph.svg" title="SVG image of a linked data dataset">
        <abbr title="Scalable Vector Graphics">SVG</abbr>
      </a> and
      <a title="PNG image of a linked data dataset" href="linked-data-graph.png">
        <abbr title="Portable Network Graphics">PNG</abbr>
      </a>
      formats.</span></figcaption>
  </figure>

  <p>The dataset described in this figure can be represented as follows:</p>

  <aside class="example ds-selector-tabs" id="example-150-linked-data-dataset"><div class="marker">
      <a class="self-link" href="#example-150-linked-data-dataset">Example<bdi> 150</bdi></a><span class="example-title">: Linked Data Dataset</span>
    </div>
    <div class="selectors">
      <button class="selected" data-selects="compacted">Compacted (Input)</button>
      <button data-selects="expanded">Expanded (Result)</button>
      <button data-selects="statements">Statements</button>
      <button data-selects="trig">TriG</button>
    </div>
    <pre class="compacted input selected" aria-busy="false"><code class="hljs">{
  "@context": [
    "http://schema.org/",
    {"@base": "http://example.com/"}
  ],
  "@graph": [{
    "@id": "people/alice",
    "gender": [
      {"@value": "weiblich", "@language": "de"},
      {"@value": "female",   "@language": "en"}
    ],
    "knows": {"@id": "people/bob"},
    "name": "Alice"
  }, {
    "@id": "graphs/1",
    "@graph": {
      "@id": "people/alice",
      "parent": {
        "@id": "people/bob",
        "name": "Bob"
      }
    }
  }, {
    "@id": "graphs/2",
    "@graph": {
      "@id": "people/bob",
      "sibling": {
        "name": "Mary",
        "sibling": {"@id": "people/bob"}
      }
    }
  }]
}</code></pre>
    <pre class="expanded result" data-result-for="Linked Data Dataset-compacted" aria-busy="false"><code class="hljs">[{
  "@id": "http://example.com/people/alice",
  "http://schema.org/name": [{"@value": "Alice"}],
  "http://schema.org/gender": [
    {"@value": "weiblich","@language": "de"},
    {"@value": "female","@language": "en"}
  ],
  "http://schema.org/knows": [
    {"@id": "http://example.com/people/bob"}
  ]
}, {
  "@id": "http://example.com/graphs/1",
  "@graph": [{
    "@id": "http://example.com/people/alice",
    "http://schema.org/parent": [{
      "@id": "http://example.com/people/bob",
      "http://schema.org/name": [{"@value": "Bob"}]
    }]
  }]
}, {
  "@id": "http://example.com/graphs/2",
  "@graph": [{
    "@id": "http://example.com/people/bob",
    "http://schema.org/sibling": [{
      "http://schema.org/name": [{"@value": "Mary"}],
      "http://schema.org/sibling": [
        {"@id": "http://example.com/people/bob"}
      ]
    }]
  }]
}]</code></pre>
    <table class="statements" data-result-for="Linked Data Dataset-expanded" data-to-rdf="">
      <thead><tr><th>Graph</th><th>Subject</th><th>Property</th><th>Value</th><th>Language</th></tr></thead>
      <tbody>
        <tr><td>&nbsp;</td><td>http://example.com/people/alice</td><td>schema:name</td><td>Alice</td><td></td></tr>
        <tr><td>&nbsp;</td><td>http://example.com/people/alice</td><td>schema:gender</td><td>weiblich</td><td>de</td></tr>
        <tr><td>&nbsp;</td><td>http://example.com/people/alice</td><td>schema:gender</td><td>female</td><td>en</td></tr>
        <tr><td>&nbsp;</td><td>http://example.com/people/alice</td><td>schema:knows</td><td>http://example.com/people/bob</td><td></td></tr>
        <tr><td>http://example.com/graphs/1</td><td>http://example.com/people/bob</td><td>schema:name</td><td>Bob</td><td></td></tr>
        <tr><td>http://example.com/graphs/1</td><td>http://example.com/people/alice</td><td>schema:parent</td><td>http://example.com/people/bob</td><td></td></tr>
        <tr><td>http://example.com/graphs/2</td><td>http://example.com/people/bob</td><td>schema:sibling</td><td>_:b0</td><td></td></tr>
        <tr><td>http://example.com/graphs/2</td><td>_:b0</td><td>schema:name</td><td>Mary</td><td></td></tr>
        <tr><td>http://example.com/graphs/2</td><td>_:b0</td><td>schema:sibling</td><td>http://example.com/people/bob</td><td></td></tr>
      </tbody>
    </table>
    <pre class="trig" data-content-type="application/trig" data-result-for="Linked Data Dataset-expanded" data-to-rdf="" aria-busy="false"><code class="hljs">@prefix schema: &lt;http://schema.org/&gt; .

&lt;http://example.com/people/alice&gt; schema:knows &lt;http://example.com/people/bob&gt;;
  schema:name "Alice";
  schema:gender "weiblich"@de, "female"@en .

&lt;http://example.com/graphs/1&gt; {
  &lt;http://example.com/people/alice&gt; schema:parent &lt;http://example.com/people/bob&gt; .
  &lt;http://example.com/people/bob&gt; schema:name "Bob" .
}

&lt;http://example.com/graphs/2&gt; {
  &lt;http://example.com/people/bob&gt; schema:sibling [
    schema:name "Mary";
    schema:sibling &lt;http://example.com/people/bob&gt;
  ] .
}</code></pre>
  </aside>

  <div class="note" role="note" id="issue-container-generatedID-47"><div role="heading" class="note-title marker" id="h-note-43" aria-level="3"><span>Note</span></div><p class="">Note the use of <code>@graph</code> at the outer-most level to describe three top-level
    resources (two of them <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-named-graph">named graphs</a>). The named graphs use <code>@graph</code> in addition
    to <code>@id</code> to provide the name for each graph.</p></div>
</section>

<section class="normative" id="json-ld-grammar">
  <h2 id="x9-json-ld-grammar"><bdi class="secno">9. </bdi>JSON-LD Grammar<a class="self-link" aria-label="§" href="#json-ld-grammar"></a></h2>

  <p>This section restates the syntactic conventions described in the
    previous sections more formally.</p>

  <p>A <a href="#dfn-json-ld-document" class="internalDFN" data-link-type="dfn">JSON-LD document</a> <em class="rfc2119" title="MUST">MUST</em> be valid <a href="https://tools.ietf.org/html/rfc8259#section-2">JSON text</a> as described
    in [<cite><a class="bibref" data-link-type="biblio" href="#bib-rfc8259" title="The JavaScript Object Notation (JSON) Data Interchange Format">RFC8259</a></cite>], <span class="changed">or some format that can be represented
      in the <a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-api/#dfn-internal-representation">JSON-LD internal representation</a> that is equivalent to
      valid <a href="https://tools.ietf.org/html/rfc8259#section-2">JSON text</a></span>.</p>

  <p>A <a href="#dfn-json-ld-document" class="internalDFN" data-link-type="dfn">JSON-LD document</a> <em class="rfc2119" title="MUST">MUST</em> be a single <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a>,
    a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a> consisting of only
    the <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">entries</a> <code>@context</code> and/or <code>@graph</code>,
    or an <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a> of zero or more <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a>.</p>

  <p>In contrast to JSON, in JSON-LD the keys in <a data-lt="JSON object" data-link-type="dfn" href="https://tools.ietf.org/html/rfc8259#section-4">objects</a>
    <em class="rfc2119" title="MUST">MUST</em> be unique.</p>

  <p>Whenever a <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a> is discussed in this grammar,
    the statements also apply to an alias for that <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a>.</p>

  <div class="note" role="note" id="issue-container-generatedID-48"><div role="heading" class="note-title marker" id="h-note-44" aria-level="3"><span>Note</span></div><p class="">JSON-LD allows <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keywords</a> to be aliased
    (see <a class="sectionRef sec-ref" href="#aliasing-keywords">§&nbsp;<bdi class="secno">4.1.6 </bdi>Aliasing Keywords</a> for details). For example, if the <a href="#dfn-active-context" class="internalDFN" data-link-type="dfn">active context</a>
    defines the <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a> <code>id</code> as an alias for <code>@id</code>,
    that alias may be legitimately used as a substitution for <code>@id</code>.
    Note that <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a> aliases are not expanded during context
    processing.</p></div>

  <section id="terms" class="normative">
    <h3 id="x9-1-terms"><bdi class="secno">9.1 </bdi>Terms<a class="self-link" aria-label="§" href="#terms"></a></h3>

    <p>A <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a> is a short-hand <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">string</a> that expands
      to an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>, <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node-identifier">blank node identifier</a>, or <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a>.</p>

    <p>A <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a> <em class="rfc2119" title="MUST NOT">MUST NOT</em> equal any of the JSON-LD <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keywords</a>,
      <span class="changed">other than <code>@type</code></span>.</p>

    <p class="changed">When used as the <a href="#dfn-prefix" class="internalDFN" data-link-type="dfn">prefix</a> in a <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">Compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a>, to avoid
      the potential ambiguity of a <a href="#dfn-prefix" class="internalDFN" data-link-type="dfn">prefix</a> being confused with an <abbr title="Internationalized Resource Identifier">IRI</abbr>
      scheme, <a href="#dfn-term" class="internalDFN" data-link-type="dfn">terms</a> <em class="rfc2119" title="SHOULD NOT">SHOULD NOT</em> come from the list of URI schemes as defined in
      [<cite><a class="bibref" data-link-type="biblio" href="#bib-iana-uri-schemes" title="Uniform Resource Identifier (URI) Schemes">IANA-URI-SCHEMES</a></cite>]. Similarly, to avoid confusion between a
      <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">Compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a> and a <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a>, terms <em class="rfc2119" title="SHOULD NOT">SHOULD NOT</em> include a colon (<code>:</code>)
      and <em class="rfc2119" title="SHOULD">SHOULD</em> be restricted to the form of
      <code><a href="https://tools.ietf.org/html/rfc3987#section-2.2">isegment-nz-nc</a></code>
      as defined in [<cite><a class="bibref" data-link-type="biblio" href="#bib-rfc3987" title="Internationalized Resource Identifiers (IRIs)">RFC3987</a></cite>].</p>

    <p>To avoid forward-compatibility issues, a <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a> <em class="rfc2119" title="SHOULD NOT">SHOULD NOT</em> start
      with an <code>@</code> character
      <span class="changed">followed exclusively by one or more <em>ALPHA</em> characters (see [<cite><a class="bibref" data-link-type="biblio" href="#bib-rfc5234" title="Augmented BNF for Syntax Specifications: ABNF">RFC5234</a></cite>])</span>
      as future versions of JSON-LD may introduce
      additional <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keywords</a>. Furthermore, the term <em class="rfc2119" title="MUST NOT">MUST NOT</em>
      be an empty <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">string</a> (<code>""</code>) as not all programming languages
      are able to handle empty JSON keys.</p>

    <p>See <a class="sectionRef sec-ref" href="#the-context">§&nbsp;<bdi class="secno">3.1 </bdi>The Context</a> and
      <a class="sectionRef sec-ref" href="#iris">§&nbsp;<bdi class="secno">3.2 </bdi>IRIs</a> for further discussion
      on mapping <a href="#dfn-term" class="internalDFN" data-link-type="dfn">terms</a> to <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">IRIs</a>.</p>
  </section>

  <section class="normative" id="node-objects">
    <h3 id="x9-2-node-objects"><bdi class="secno">9.2 </bdi>Node Objects<a class="self-link" aria-label="§" href="#node-objects"></a></h3>

    <p>A <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> represents zero or more properties of a
      <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-node">node</a> in the <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-graph">graph</a> serialized by the
      <a href="#dfn-json-ld-document" class="internalDFN" data-link-type="dfn">JSON-LD document</a>. A <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a> is a
      <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> if it exists outside of a JSON-LD
      <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a> and:</p>

    <ul>
      <li>it is not the top-most <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a> in the JSON-LD document consisting
        of no other <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">entries</a> than <code>@graph</code> and <code>@context</code>,</li>
      <li>it does not contain the <code>@value</code>, <code>@list</code>,
        or <code>@set</code> keywords, and</li>
      <li class="changed">it is not a <a href="#dfn-graph-object" class="internalDFN" data-link-type="dfn">graph object</a>.</li>
    </ul>

    <p>The <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-property">properties</a> of a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-node">node</a> in
      a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-graph">graph</a> may be spread among different
      <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a> within a document. When
      that happens, the keys of the different
      <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a> need to be merged to create the
      properties of the resulting <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-node">node</a>.</p>

    <p>A <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> <em class="rfc2119" title="MUST">MUST</em> be a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a>. All keys
      which are not <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">IRIs</a>, <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">compact IRIs</a>, <a href="#dfn-term" class="internalDFN" data-link-type="dfn">terms</a> valid in the
      <a href="#dfn-active-context" class="internalDFN" data-link-type="dfn">active context</a>, or one of the following <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keywords</a>
      <span class="changed">(or alias of such a keyword)</span>
      <em class="rfc2119" title="MUST">MUST</em> be ignored when processed:</p>

    <ul>
      <li><code>@context</code>,</li>
      <li><code>@id</code>,</li>
      <li class="changed"><code>@included</code>,</li>
      <li><code>@graph</code>,</li>
      <li class="changed"><code>@nest</code>,</li>
      <li><code>@type</code>,</li>
      <li><code>@reverse</code>, or</li>
      <li><code>@index</code></li>
    </ul>

    <p>If the <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> contains the <code>@context</code>
      key, its value <em class="rfc2119" title="MUST">MUST</em> be <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#nulls">null</a>, an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-1.3"><abbr title="Internationalized Resource Identifier">IRI</abbr> reference</a>,
      a <a href="#dfn-context-definition" class="internalDFN" data-link-type="dfn">context definition</a>, or
      an <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a> composed of any of these.</p>

    <p>If the <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> contains the <code>@id</code> key,
      its value <em class="rfc2119" title="MUST">MUST</em> be an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-1.3"><abbr title="Internationalized Resource Identifier">IRI</abbr> reference</a>,
      or a <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a> (including
      <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node-identifier">blank node identifiers</a>).
      See <a class="sectionRef sec-ref" href="#node-identifiers">§&nbsp;<bdi class="secno">3.3 </bdi>Node Identifiers</a>,
      <a class="sectionRef sec-ref" href="#compact-iris">§&nbsp;<bdi class="secno">4.1.5 </bdi>Compact IRIs</a>, and
      <a class="sectionRef sec-ref" href="#identifying-blank-nodes">§&nbsp;<bdi class="secno">4.5.1 </bdi>Identifying Blank Nodes</a> for further discussion on
      <code>@id</code> values.</p>

    <p>If the <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> contains the <code>@graph</code>
      key, its value <em class="rfc2119" title="MUST">MUST</em> be
      a <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> or
      an <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a> of zero or more <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a>.
      If the <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> also contains an <code>@id</code> keyword,
      its value is used as the <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-graph-name">graph name</a> of a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-named-graph">named graph</a>.
      See <a class="sectionRef sec-ref" href="#named-graphs">§&nbsp;<bdi class="secno">4.9 </bdi>Named Graphs</a> for further discussion on
      <code>@graph</code> values. As a special case, if a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a>
      contains no keys other than <code>@graph</code> and <code>@context</code>, and the
      <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a> is the root of the JSON-LD document, the
      <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a> is not treated as a <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a>; this
      is used as a way of defining <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a>
      that may not form a connected graph. This allows a
      <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a> to be defined which is shared by all of the constituent
      <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a>.</p>

    <p>If the <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> contains the <code>@type</code>
      key, its value <em class="rfc2119" title="MUST">MUST</em> be either an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-1.3"><abbr title="Internationalized Resource Identifier">IRI</abbr> reference</a>, a <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a>
      (including <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node-identifier">blank node identifiers</a>),
      a <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a> defined in the <a href="#dfn-active-context" class="internalDFN" data-link-type="dfn">active context</a> expanding into an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>, or
      an <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a> of any of these.
      See <a class="sectionRef sec-ref" href="#specifying-the-type">§&nbsp;<bdi class="secno">3.5 </bdi>Specifying the Type</a> for further discussion on
      <code>@type</code> values.</p>

    <p>If the <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> contains the <code>@reverse</code> key,
      its value <em class="rfc2119" title="MUST">MUST</em> be a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a> containing <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">entries</a> representing reverse
      properties. Each value of such a reverse property <em class="rfc2119" title="MUST">MUST</em> be an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-1.3"><abbr title="Internationalized Resource Identifier">IRI</abbr> reference</a>,
      a <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a>, a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node-identifier">blank node identifier</a>,
      a <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> or an <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a> containing a combination of these.</p>

    <p class="changed">If the <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> contains the <code>@included</code> key,
      its value <em class="rfc2119" title="MUST">MUST</em> be an <a href="#dfn-included-block" class="internalDFN" data-link-type="dfn">included block</a>.
      See <a class="sectionRef sec-ref" href="#included-blocks">§&nbsp;<bdi class="secno">9.13 </bdi>Included Blocks</a> for further discussion
      on <a href="#dfn-included-block" class="internalDFN" data-link-type="dfn">included blocks</a>.</p>

    <p>If the <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> contains the <code>@index</code> key,
      its value <em class="rfc2119" title="MUST">MUST</em> be a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">string</a>. See
      <a class="sectionRef sec-ref" href="#data-indexing">§&nbsp;<bdi class="secno">4.6.1 </bdi>Data Indexing</a> for further discussion
      on <code>@index</code> values.</p>

    <p class="changed">If the <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> contains the <code>@nest</code> key,
      its value <em class="rfc2119" title="MUST">MUST</em> be a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a> or an <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a> of <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a>
      which <em class="rfc2119" title="MUST NOT">MUST NOT</em> include a <a href="#dfn-value-object" class="internalDFN" data-link-type="dfn">value object</a>. See
      <a class="sectionRef sec-ref" href="#property-nesting">§&nbsp;<bdi class="secno">9.14 </bdi>Property Nesting</a> for further discussion
      on <code>@nest</code> values.</p>

    <p>Keys in a <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> that are not
      <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keywords</a> <em class="rfc2119" title="MAY">MAY</em> expand to an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>
      using the <a href="#dfn-active-context" class="internalDFN" data-link-type="dfn">active context</a>. The values associated with keys that expand
      to an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> <em class="rfc2119" title="MUST">MUST</em> be one of the following:</p>

    <ul>
      <li><a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">string</a>,</li>
      <li><a data-link-type="dfn" href="https://tc39.es/ecma262/#sec-terms-and-definitions-number-value">number</a>,</li>
      <li><code>true</code>,</li>
      <li><code>false</code>,</li>
      <li><a data-link-type="dfn" href="https://infra.spec.whatwg.org/#nulls">null</a>,</li>
      <li><a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a>,</li>
      <li class="changed"><a href="#dfn-graph-object" class="internalDFN" data-link-type="dfn">graph object</a>,</li>
      <li><a href="#dfn-value-object" class="internalDFN" data-link-type="dfn">value object</a>,</li>
      <li><a href="#dfn-list-object" class="internalDFN" data-link-type="dfn">list object</a>,</li>
      <li><a href="#dfn-set-object" class="internalDFN" data-link-type="dfn">set object</a>,</li>
      <li>an <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a> of zero or more of any of the possibilities above,</li>
      <li>a <a href="#dfn-language-map" class="internalDFN" data-link-type="dfn">language map</a>,</li>
      <li>an <a href="#dfn-index-map" class="internalDFN" data-link-type="dfn">index map</a>,</li>
      <li class="changed">an <a href="#dfn-included-block" class="internalDFN" data-link-type="dfn">included block</a></li>
      <li class="changed">an <a href="#dfn-id-map" class="internalDFN" data-link-type="dfn">id map</a>, or</li>
      <li class="changed">a <a href="#dfn-type-map" class="internalDFN" data-link-type="dfn">type map</a></li>
    </ul>
  </section>

  <section class="normative" id="frame-objects"><h3 id="x9-3-frame-objects"><bdi class="secno">9.3 </bdi>Frame Objects<a class="self-link" aria-label="§" href="#frame-objects"></a></h3>
    <p>When <a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-framing/#dfn-framing">framing</a>, a <a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-framing/#dfn-frame-object">frame object</a> extends a <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> to allow
      <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">entries</a> used specifically for <a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-framing/#dfn-framing">framing</a>.</p>
    <ul>
      <li>A <a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-framing/#dfn-frame-object">frame object</a> <em class="rfc2119" title="MAY">MAY</em> include a <a href="#dfn-default-object" class="internalDFN" data-link-type="dfn">default object</a> as the value of any key
        which is not a <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a>.
        Values of <code>@default</code> <em class="rfc2119" title="MAY">MAY</em> include the value <code>@null</code>,
        or an <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a> containing only <code>@null</code>, in addition to other values
        allowed in the grammar for values of <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">entry</a> keys expanding to <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">IRIs</a>.</li>
      <li>The values of <code>@id</code> and <code>@type</code> <em class="rfc2119" title="MAY">MAY</em> additionally be
        an empty <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a> (<a href="https://www.w3.org/TR/json-ld11-framing/#dfn-wildcard">wildcard</a>),
        an <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a> containing only an empty <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a>,
        an empty <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a> (<a href="https://www.w3.org/TR/json-ld11-framing/#dfn-match-none">match none</a>)
        an <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a> of <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">IRIs</a>.</li>
      <li>A <a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-framing/#dfn-frame-object">frame object</a> <em class="rfc2119" title="MAY">MAY</em> include an <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">entry</a> with the key <code>@embed</code> with
        any value from <code>@always</code>, <code>@list</code>, and <code>@never</code>.</li>
      <li>A <a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-framing/#dfn-frame-object">frame object</a> <em class="rfc2119" title="MAY">MAY</em> include <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">entries</a> with the boolean valued
        keys <code>@explicit</code>, <code>@omitDefault</code>, or <code>@requireAll</code></li>
      <li>In addition to other property values, a property of a <a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-framing/#dfn-frame-object">frame object</a>
        <em class="rfc2119" title="MAY">MAY</em> include a <a href="https://www.w3.org/TR/json-ld11-framing/#dfn-value-pattern">value pattern</a>
        (See <a href="#value-patterns" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">9.6 </bdi>Value Patterns</a>).</li>
    </ul>
    <p>See [<cite><a class="bibref" data-link-type="biblio" href="#bib-json-ld11-framing" title="JSON-LD 1.1 Framing">JSON-LD11-FRAMING</a></cite>] for a description of how <a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-framing/#dfn-frame-object">frame objects</a> are used.</p>
  </section>

  <section class="normative" id="graph-objects">
    <h3 id="x9-4-graph-objects"><bdi class="secno">9.4 </bdi>Graph Objects<a class="self-link" aria-label="§" href="#graph-objects"></a></h3>

    <p>A <a href="#dfn-graph-object" class="internalDFN" data-link-type="dfn">graph object</a> represents a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-named-graph">named graph</a>, which <em class="rfc2119" title="MAY">MAY</em> include
      an explicit <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-graph-name">graph name</a>.
      A <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a> is a <a href="#dfn-graph-object" class="internalDFN" data-link-type="dfn">graph object</a> if
      it exists outside of a JSON-LD <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a>,
      it contains an <code>@graph</code> <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">entry</a> (or an alias of that <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a>),
      it is not the top-most <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a> in the JSON-LD document, and
      it consists of no <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">entries</a> other than <code>@graph</code>,
      <code>@index</code>, <code>@id</code>
      and <code>@context</code>, or an alias of one of these <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keywords</a>.</p>

    <p>If the <a href="#dfn-graph-object" class="internalDFN" data-link-type="dfn">graph object</a> contains the <code>@context</code>
      key, its value <em class="rfc2119" title="MUST">MUST</em> be <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#nulls">null</a>, an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-1.3"><abbr title="Internationalized Resource Identifier">IRI</abbr> reference</a>, a <a href="#dfn-context-definition" class="internalDFN" data-link-type="dfn">context definition</a>, or
      an <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a> composed of any of these.</p>

    <p>If the <a href="#dfn-graph-object" class="internalDFN" data-link-type="dfn">graph object</a> contains the <code>@id</code> key,
      its value is used as the identifier (<a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-graph-name">graph name</a>) of a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-named-graph">named graph</a>, and
      <em class="rfc2119" title="MUST">MUST</em> be an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-1.3"><abbr title="Internationalized Resource Identifier">IRI</abbr> reference</a>,
      or a <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a> (including
      <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node-identifier">blank node identifiers</a>).
      See <a class="sectionRef sec-ref" href="#node-identifiers">§&nbsp;<bdi class="secno">3.3 </bdi>Node Identifiers</a>,
      <a class="sectionRef sec-ref" href="#compact-iris">§&nbsp;<bdi class="secno">4.1.5 </bdi>Compact IRIs</a>, and
      <a class="sectionRef sec-ref" href="#identifying-blank-nodes">§&nbsp;<bdi class="secno">4.5.1 </bdi>Identifying Blank Nodes</a> for further discussion on
      <code>@id</code> values.</p>

    <p>A <a href="#dfn-graph-object" class="internalDFN" data-link-type="dfn">graph object</a> without an <code>@id</code> <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">entry</a> is also a
      <a href="#dfn-simple-graph-object" class="internalDFN" data-link-type="dfn">simple graph object</a> and represents a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-named-graph">named graph</a> without an
      explicit identifier, although in the data model it still has a
      <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-graph-name">graph name</a>, which is an implicitly allocated
      <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node-identifier">blank node identifier</a>.</p>

    <p>The value of the <code>@graph</code> key <em class="rfc2119" title="MUST">MUST</em> be
      a <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> or
      an <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a> of zero or more <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a>.
      See <a class="sectionRef sec-ref" href="#named-graphs">§&nbsp;<bdi class="secno">4.9 </bdi>Named Graphs</a> for further discussion on
      <code>@graph</code> values..</p>
  </section>

  <section class="normative" id="value-objects">
    <h3 id="x9-5-value-objects"><bdi class="secno">9.5 </bdi>Value Objects<a class="self-link" aria-label="§" href="#value-objects"></a></h3>

    <p>A <a href="#dfn-value-object" class="internalDFN" data-link-type="dfn">value object</a> is used to explicitly associate a type or a
      language with a value to create a <a href="#dfn-typed-value" class="internalDFN" data-link-type="dfn">typed value</a> or a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-language-tagged-string">language-tagged string</a>
      <span class="changed">and possibly associate a <a href="#dfn-base-direction" class="internalDFN" data-link-type="dfn">base direction</a></span>.</p>

    <p>A <a href="#dfn-value-object" class="internalDFN" data-link-type="dfn">value object</a> <em class="rfc2119" title="MUST">MUST</em> be a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a> containing the
      <code>@value</code> key. It <em class="rfc2119" title="MAY">MAY</em> also contain an <code>@type</code>,
      an <code>@language</code>,
      <span class="changed">an <code>@direction</code>,</span>
      an <code>@index</code>, or an <code>@context</code> key but <em class="rfc2119" title="MUST NOT">MUST NOT</em> contain
      both an <code>@type</code> and either <code>@language</code>
      <span class="changed">or <code>@direction</code></span>
      keys at the same time.
      A <a href="#dfn-value-object" class="internalDFN" data-link-type="dfn">value object</a> <em class="rfc2119" title="MUST NOT">MUST NOT</em> contain any other keys that expand to an
      <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> or <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a>.</p>

    <p>The value associated with the <code>@value</code> key <em class="rfc2119" title="MUST">MUST</em> be either a
      <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">string</a>, a <a data-link-type="dfn" href="https://tc39.es/ecma262/#sec-terms-and-definitions-number-value">number</a>, <code>true</code>,
      <code>false</code> or <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#nulls">null</a>.
      <span class="changed">If the value associated with the <code>@type</code> key</span>
      is <code>@json</code>, the value <em class="rfc2119" title="MAY">MAY</em> be either an <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a> or an <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-object">object</a>.</p>

    <p>The value associated with the <code>@type</code> key <em class="rfc2119" title="MUST">MUST</em> be a
      <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a>,
      an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>,
      a <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a>,
      a string which can be turned into an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> using the <a href="#dfn-vocabulary-mapping" class="internalDFN" data-link-type="dfn">vocabulary mapping</a>,
      <code class="changed">@json</code>,
      or <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#nulls">null</a>.</p>

    <p>The value associated with the <code>@language</code> key <em class="rfc2119" title="MUST">MUST</em> have the
      <a href="https://tools.ietf.org/html/bcp47#section-2.1.1">lexical form</a> described in [<cite><a class="bibref" data-link-type="biblio" href="#bib-bcp47" title="Tags for Identifying Languages">BCP47</a></cite>], or be <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#nulls">null</a>.</p>

    <p>The value associated with the <code>@direction</code> key <em class="rfc2119" title="MUST">MUST</em> be
      one of <code>"ltr"</code> or <code>"rtl"</code>, or be <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#nulls">null</a>.</p>

    <p>The value associated with the <code>@index</code> key <em class="rfc2119" title="MUST">MUST</em> be a
      <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">string</a>.</p>

    <p>See <a class="sectionRef sec-ref" href="#typed-values">§&nbsp;<bdi class="secno">4.2.1 </bdi>Typed Values</a> and
      <a class="sectionRef sec-ref" href="#string-internationalization">§&nbsp;<bdi class="secno">4.2.4 </bdi>String Internationalization</a>
      for more information on <a href="#dfn-value-object" class="internalDFN" data-link-type="dfn">value objects</a>.</p>
  </section>

  <section class="normative" id="value-patterns">
    <h3 id="x9-6-value-patterns"><bdi class="secno">9.6 </bdi>Value Patterns<a class="self-link" aria-label="§" href="#value-patterns"></a></h3>
    <p>When <a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-framing/#dfn-framing">framing</a>,
      a <a href="https://www.w3.org/TR/json-ld11-framing/#dfn-value-pattern">value pattern</a>
      extends a <a href="#dfn-value-object" class="internalDFN" data-link-type="dfn">value object</a> to allow
      <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">entries</a> used specifically for <a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-framing/#dfn-framing">framing</a>.</p>
    <ul>
      <li>The values of
        <code>@value</code>,
        <code>@language</code>,
        <code class="changed">@direction</code> and
        <code>@type</code>
        <em class="rfc2119" title="MAY">MAY</em> additionally be
        an empty <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a> (<a href="https://www.w3.org/TR/json-ld11-framing/#dfn-wildcard">wildcard</a>),
        an <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a> containing only an empty <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a>,
        an empty <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a> (<a href="https://www.w3.org/TR/json-ld11-framing/#dfn-match-none">match none</a>),
        an <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a> of <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">strings</a>.</li>
    </ul>
  </section>

  <section class="normative" id="lists-and-sets">
    <h3 id="x9-7-lists-and-sets"><bdi class="secno">9.7 </bdi>Lists and Sets<a class="self-link" aria-label="§" href="#lists-and-sets"></a></h3>

    <p>A <a data-link-type="dfn" href="https://www.w3.org/TR/rdf-schema/#ch_collectionvocab">list</a> represents an <em>ordered</em> set of values. A set
      represents an <em>unordered</em> set of values. Unless otherwise specified,
      <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">arrays</a> are unordered in JSON-LD. As such, the
      <code>@set</code> keyword, when used in the body of a JSON-LD document,
      represents just syntactic sugar which is optimized away when processing the document.
      However, it is very helpful when used within the context of a document. Values
      of terms associated with an <code>@set</code> or <code>@list</code> container
      will always be represented in the form of an <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a> when a document
      is processed—even if there is just a single value that would otherwise be optimized to
      a non-array form in <a href="#dfn-compacted-document-form" class="internalDFN" data-link-type="dfn">compacted document form</a>.
      This simplifies post-processing of the data as the data is always in a
      deterministic form.</p>

    <p>A <a href="#dfn-list-object" class="internalDFN" data-link-type="dfn">list object</a> <em class="rfc2119" title="MUST">MUST</em> be a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a> that contains no
      keys that expand to an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> or <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a> other
      than <code>@list</code> and <code>@index</code>.</p>

    <p>A <a href="#dfn-set-object" class="internalDFN" data-link-type="dfn">set object</a> <em class="rfc2119" title="MUST">MUST</em> be a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a> that contains no
      keys that expand to an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> or <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a> other
      than <code>@set</code> and <code>@index</code>.
      Please note that the <code>@index</code> key will be ignored when being processed.</p>

    <p>In both cases, the value associated with the keys <code>@list</code> and <code>@set</code>
      <em class="rfc2119" title="MUST">MUST</em> be one of the following types:</p>
    <ul>
      <li><a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">string</a>,</li>
      <li><a data-link-type="dfn" href="https://tc39.es/ecma262/#sec-terms-and-definitions-number-value">number</a>,</li>
      <li><code>true</code>,</li>
      <li><code>false</code>,</li>
      <li><a data-link-type="dfn" href="https://infra.spec.whatwg.org/#nulls">null</a>,</li>
      <li><a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a>,</li>
      <li><a href="#dfn-value-object" class="internalDFN" data-link-type="dfn">value object</a>, or</li>
      <li>an <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a> of zero or more of the above possibilities</li>
    </ul>

    <p>See <a class="sectionRef sec-ref" href="#sets-and-lists">§&nbsp;<bdi class="secno">4.3 </bdi>Value Ordering</a> for further discussion on sets and lists.</p>
  </section>

  <section class="normative" id="language-maps">
    <h3 id="x9-8-language-maps"><bdi class="secno">9.8 </bdi>Language Maps<a class="self-link" aria-label="§" href="#language-maps"></a></h3>

    <p>A <a href="#dfn-language-map" class="internalDFN" data-link-type="dfn">language map</a> is used to associate a language with a value in a
      way that allows easy programmatic access. A <a href="#dfn-language-map" class="internalDFN" data-link-type="dfn">language map</a> may be
      used as a term value within a <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> if the <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a> is defined
      with <code>@container</code> set to <code>@language</code>,
      <span class="changed">
        or an array containing both <code>@language</code> and <code>@set</code>
      </span>. The keys of a
      <a href="#dfn-language-map" class="internalDFN" data-link-type="dfn">language map</a> <em class="rfc2119" title="MUST">MUST</em> be <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">strings</a> representing
      [<cite><a class="bibref" data-link-type="biblio" href="#bib-bcp47" title="Tags for Identifying Languages">BCP47</a></cite>] language tags, the <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a> <code>@none</code>,
      or a <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a> which expands to <code>@none</code>,
      and the values <em class="rfc2119" title="MUST">MUST</em> be any of the following types:</p>

    <ul>
      <li><a data-link-type="dfn" href="https://infra.spec.whatwg.org/#nulls">null</a>,</li>
      <li><a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">string</a>, or</li>
      <li>an <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a> of zero or more of the <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">strings</a></li>
    </ul>

    <p>See <a class="sectionRef sec-ref" href="#string-internationalization">§&nbsp;<bdi class="secno">4.2.4 </bdi>String Internationalization</a> for further discussion
      on language maps.</p>
  </section>

  <section class="normative" id="index-maps">
    <h3 id="x9-9-index-maps"><bdi class="secno">9.9 </bdi>Index Maps<a class="self-link" aria-label="§" href="#index-maps"></a></h3>

    <p>An <a href="#dfn-index-map" class="internalDFN" data-link-type="dfn">index map</a> allows keys that have no semantic meaning,
      but should be preserved regardless, to be used in JSON-LD documents.
      An <a href="#dfn-index-map" class="internalDFN" data-link-type="dfn">index map</a> may
      be used as a <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a> value within a <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> if the
      term is defined with <code>@container</code> set to <code>@index</code>,
      <span class="changed">
        or an array containing both <code>@index</code> and <code>@set</code>
      </span>.
      The values of the <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">entries</a> of an <a href="#dfn-index-map" class="internalDFN" data-link-type="dfn">index map</a> <em class="rfc2119" title="MUST">MUST</em> be one
      of the following types:</p>

    <ul>
      <li><a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">string</a>,</li>
      <li><a data-link-type="dfn" href="https://tc39.es/ecma262/#sec-terms-and-definitions-number-value">number</a>,</li>
      <li><code>true</code>,</li>
      <li><code>false</code>,</li>
      <li><a data-link-type="dfn" href="https://infra.spec.whatwg.org/#nulls">null</a>,</li>
      <li><a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a>,</li>
      <li><a href="#dfn-value-object" class="internalDFN" data-link-type="dfn">value object</a>,</li>
      <li><a href="#dfn-list-object" class="internalDFN" data-link-type="dfn">list object</a>,</li>
      <li><a href="#dfn-set-object" class="internalDFN" data-link-type="dfn">set object</a>,</li>
      <li>an <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a> of zero or more of the above possibilities</li>
    </ul>

    <p>See <a class="sectionRef sec-ref" href="#data-indexing">§&nbsp;<bdi class="secno">4.6.1 </bdi>Data Indexing</a> for further information on this topic.</p>

    <p class="changed"><a href="#dfn-index-map" class="internalDFN" data-link-type="dfn">Index Maps</a> may also be used to map indexes to associated
      <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-named-graph">named graphs</a>, if the term is defined with <code>@container</code>
      set to an array containing both <code>@graph</code> and
      <code>@index</code>, and optionally including <code>@set</code>. The
      value consists of the <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a> contained within the <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-named-graph">named
      graph</a> which is indexed using the referencing key, which can be
      represented as a <a href="#dfn-simple-graph-object" class="internalDFN" data-link-type="dfn">simple graph object</a> if the value does
      not include <code>@id</code>, or a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-named-graph">named graph</a> if it includes <code>@id</code>.</p>
  </section>

  <section class="changed" id="property-based-index-maps">
    <h3 id="x9-10-property-based-index-maps"><bdi class="secno">9.10 </bdi>Property-based Index Maps<a class="self-link" aria-label="§" href="#property-based-index-maps"></a></h3>

    <p>A property-based <a href="#dfn-index-map" class="internalDFN" data-link-type="dfn">index map</a> is a variant of <a href="#dfn-index-map" class="internalDFN" data-link-type="dfn">index map</a>
      were indexes are semantically preserved in the graph as property values.
      A property-based <a href="#dfn-index-map" class="internalDFN" data-link-type="dfn">index map</a> may be used as a term value within a <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a>
      if the <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a> is defined with <code>@container</code> set to <code>@index</code>,
      or an array containing both <code>@index</code> and <code>@set</code>,
      and with <code>@index</code> set to a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">string</a>.
      The values of a property-based <a href="#dfn-index-map" class="internalDFN" data-link-type="dfn">index map</a> <em class="rfc2119" title="MUST">MUST</em> be <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a>
      or <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">strings</a> which expand to <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a>.</p>

    <p>When expanding,
      if the <a href="#dfn-active-context" class="internalDFN" data-link-type="dfn">active context</a> contains a <a href="#dfn-term-definition" class="internalDFN" data-link-type="dfn">term definition</a>
      for the value of <code>@index</code>,
      this <a href="#dfn-term-definition" class="internalDFN" data-link-type="dfn">term definition</a> will be used to expand the keys of the <a href="#dfn-index-map" class="internalDFN" data-link-type="dfn">index map</a>.
      Otherwise, the keys will be expanded as simple <a href="#dfn-value-object" class="internalDFN" data-link-type="dfn">value objects</a>.
      Each <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> in the expanded values of the <a href="#dfn-index-map" class="internalDFN" data-link-type="dfn">index map</a>
      will be added an additional property value,
      where the property is the expanded value of <code>@index</code>,
      and the value is the expanded referencing key.
    </p>

    <p>See <a class="sectionRef sec-ref" href="#property-based-data-indexing">§&nbsp;<bdi class="secno">4.6.1.1 </bdi>Property-based data indexing</a> for further information on this topic.</p>
  </section>

  <section class="changed" id="id-maps">
    <h3 id="x9-11-id-maps"><bdi class="secno">9.11 </bdi>Id Maps<a class="self-link" aria-label="§" href="#id-maps"></a></h3>

    <p>An <a href="#dfn-id-map" class="internalDFN" data-link-type="dfn">id map</a> is used to associate an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> with a value that allows easy
      programmatic access. An <a href="#dfn-id-map" class="internalDFN" data-link-type="dfn">id map</a> may be used as a term value within a <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> if the <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a>
      is defined with <code>@container</code> set to <code>@id</code>,
      or an array containing both <code>@id</code> and <code>@set</code>.
      The keys of an <a href="#dfn-id-map" class="internalDFN" data-link-type="dfn">id map</a> <em class="rfc2119" title="MUST">MUST</em> be <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">IRIs</a>
      (<a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-1.3"><abbr title="Internationalized Resource Identifier">IRI</abbr> references</a> or <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">compact IRIs</a> (including <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node-identifier">blank node identifiers</a>)),
      the <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a> <code>@none</code>,
      or a <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a> which expands to <code>@none</code>,
      and the values <em class="rfc2119" title="MUST">MUST</em> be <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a>.</p>

    <p>If the value contains a property expanding to <code>@id</code>, its value <em class="rfc2119" title="MUST">MUST</em>
      be equivalent to the referencing key. Otherwise, the property from the value is used as
      the <code>@id</code> of the <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> value when expanding.</p>

    <p><a href="#dfn-id-map" class="internalDFN" data-link-type="dfn">Id Maps</a> may also be used to map <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-graph-name">graph names</a> to their
      <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-named-graph">named graphs</a>, if the term is defined with <code>@container</code>
      set to an array containing both <code>@graph</code> and <code>@id</code>,
      and optionally including <code>@set</code>. The value consists of the
      <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a> contained within the <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-named-graph">named graph</a>
      which is named using the referencing key.</p>
  </section>

  <section class="changed" id="type-maps">
    <h3 id="x9-12-type-maps"><bdi class="secno">9.12 </bdi>Type Maps<a class="self-link" aria-label="§" href="#type-maps"></a></h3>

    <p>A <a href="#dfn-type-map" class="internalDFN" data-link-type="dfn">type map</a> is used to associate an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> with a value that allows easy
      programmatic access. A <a href="#dfn-type-map" class="internalDFN" data-link-type="dfn">type map</a> may be used as a term value within a <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> if the <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a>
      is defined with <code>@container</code> set to <code>@type</code>,
      or an array containing both <code>@type</code> and <code>@set</code>.
      The keys of a <a href="#dfn-type-map" class="internalDFN" data-link-type="dfn">type map</a> <em class="rfc2119" title="MUST">MUST</em> be <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">IRIs</a>
      (<a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-1.3"><abbr title="Internationalized Resource Identifier">IRI</abbr> references</a> or <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a> (including <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node-identifier">blank node identifiers</a>)),
      <a href="#dfn-term" class="internalDFN" data-link-type="dfn">terms</a>,
      or the <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a> <code>@none</code>,
      and the values <em class="rfc2119" title="MUST">MUST</em> be <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a>
      or <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">strings</a> which expand to <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a>.</p>

    <p>If the value contains a property expanding to <code>@type</code>, and its value
      is contains the referencing key after suitable expansion of both the referencing key
      and the value, then the <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> already contains the type. Otherwise, the property from the value is
      added as a <code>@type</code> of the <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> value when expanding.</p>
  </section>

  <section class="changed" id="included-blocks">
    <h3 id="x9-13-included-blocks"><bdi class="secno">9.13 </bdi>Included Blocks<a class="self-link" aria-label="§" href="#included-blocks"></a></h3>

    <p>An <a href="#dfn-included-block" class="internalDFN" data-link-type="dfn">included block</a> is used to provide a set of <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a>.
      An <a href="#dfn-included-block" class="internalDFN" data-link-type="dfn">included block</a> <em class="rfc2119" title="MAY">MAY</em> appear as the value of a member of a node object with either the key of <code>@included</code> or an alias of <code>@included</code>.
      An <a href="#dfn-included-block" class="internalDFN" data-link-type="dfn">included block</a> is either a <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> or an array of <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a>.</p>

    <p>When <a data-lt="expansion" data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-api/#dfn-expanded">expanding</a>, multiple <a href="#dfn-included-block" class="internalDFN" data-link-type="dfn">included blocks</a> will be coalesced into a single <a href="#dfn-included-block" class="internalDFN" data-link-type="dfn">included block</a>.</p>
  </section>

  <section class="changed" id="property-nesting">
    <h3 id="x9-14-property-nesting"><bdi class="secno">9.14 </bdi>Property Nesting<a class="self-link" aria-label="§" href="#property-nesting"></a></h3>

    <p>A <a href="#dfn-nested-property" class="internalDFN" data-link-type="dfn">nested property</a> is used to gather <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-property">properties</a> of a <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> in a separate
      <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a>, or <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a> of <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">maps</a> which are not
      <a href="#dfn-value-object" class="internalDFN" data-link-type="dfn">value objects</a>. It is semantically transparent and is removed
      during the process of <a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-api/#dfn-expanded">expansion</a>. Property nesting is recursive, and
      collections of nested properties may contain further nesting.</p>

    <p>Semantically, nesting is treated as if the properties and values were declared directly
      within the containing <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a>.</p>
  </section>

<section class="normative" id="context-definitions">
  <h3 id="x9-15-context-definitions"><bdi class="secno">9.15 </bdi>Context Definitions<a class="self-link" aria-label="§" href="#context-definitions"></a></h3>

  <p>A <dfn data-dfn-type="dfn" data-plurals="context definitions" id="dfn-context-definition">context definition</dfn> defines a <a href="#dfn-local-context" class="internalDFN" data-link-type="dfn">local context</a> in a
    <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a>.</p>

  <p>A <a href="#dfn-context-definition" class="internalDFN" data-link-type="dfn">context definition</a> <em class="rfc2119" title="MUST">MUST</em> be a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a> whose
    keys <em class="rfc2119" title="MUST">MUST</em> be either <a href="#dfn-term" class="internalDFN" data-link-type="dfn">terms</a>, <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">compact IRIs</a>, <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">IRIs</a>,
    or one of the <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keywords</a>
    <code>@base</code>,
    <code class="changed">@import</code>,
    <code>@language</code>,
    <code class="changed">@propagate</code>,
    <code class="changed">@protected</code>,
    <code class="changed">@type</code>,
    <code class="changed">@version</code>,
    or <code>@vocab</code>.
  </p>

  <p>If the <a href="#dfn-context-definition" class="internalDFN" data-link-type="dfn">context definition</a> has an <code>@base</code> key,
    its value <em class="rfc2119" title="MUST">MUST</em> be an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-1.3"><abbr title="Internationalized Resource Identifier">IRI</abbr> reference</a>,
    or <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#nulls">null</a>.</p>

  <p>If the <a href="#dfn-context-definition" class="internalDFN" data-link-type="dfn">context definition</a> has an <code>@direction</code> key,
    its value <em class="rfc2119" title="MUST">MUST</em> be one of <code>"ltr"</code> or <code>"rtl"</code>, or be <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#nulls">null</a>.</p>

  <p class="changed">If the <a href="#dfn-context-definition" class="internalDFN" data-link-type="dfn">context definition</a> contains the <code>@import</code>
  <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a>, its value <em class="rfc2119" title="MUST">MUST</em> be an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-1.3"><abbr title="Internationalized Resource Identifier">IRI</abbr> reference</a>.
  When used as a reference from an <code>@import</code>, the referenced <a href="#dfn-context-definition" class="internalDFN" data-link-type="dfn">context definition</a> <em class="rfc2119" title="MUST NOT">MUST NOT</em>
  include an <code>@import</code> key, itself.</p>

  <p>If the <a href="#dfn-context-definition" class="internalDFN" data-link-type="dfn">context definition</a> has an <code>@language</code> key,
    its value <em class="rfc2119" title="MUST">MUST</em> have the <a href="https://tools.ietf.org/html/bcp47#section-2.1.1">lexical form</a> described in [<cite><a class="bibref" data-link-type="biblio" href="#bib-bcp47" title="Tags for Identifying Languages">BCP47</a></cite>] or be <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#nulls">null</a>.</p>

  <p class="changed">If the <a href="#dfn-context-definition" class="internalDFN" data-link-type="dfn">context definition</a> has an <code>@propagate</code> key,
    its value <em class="rfc2119" title="MUST">MUST</em> be <code>true</code> or <code>false</code>.</p>

  <p class="changed">If the <a href="#dfn-context-definition" class="internalDFN" data-link-type="dfn">context definition</a> has an <code>@protected</code> key,
    its value <em class="rfc2119" title="MUST">MUST</em> be <code>true</code> or <code>false</code>.</p>

  <p class="changed">If the <a href="#dfn-context-definition" class="internalDFN" data-link-type="dfn">context definition</a> has an <code>@type</code> key,
    its value <em class="rfc2119" title="MUST">MUST</em> be a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a> with only the <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">entry</a> <code>@container</code> set to <code>@set</code>,
    and optionally an entry <code>@protected</code>.</p>

  <p class="changed">If the <a href="#dfn-context-definition" class="internalDFN" data-link-type="dfn">context definition</a> has an <code>@version</code> key,
    its value <em class="rfc2119" title="MUST">MUST</em> be a <a data-link-type="dfn" href="https://tc39.es/ecma262/#sec-terms-and-definitions-number-value">number</a> with the value <code>1.1</code>.</p>

  <p>If the <a href="#dfn-context-definition" class="internalDFN" data-link-type="dfn">context definition</a> has an <code>@vocab</code> key,
    its value <em class="rfc2119" title="MUST">MUST</em> be an <a class="changed" data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-1.3"><abbr title="Internationalized Resource Identifier">IRI</abbr> reference</a>, a <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a>,
    a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node-identifier">blank node identifier</a>,
    a <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a>, or <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#nulls">null</a>.</p>

  <p>The value of keys that are not <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keywords</a> <em class="rfc2119" title="MUST">MUST</em> be either an
    <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>, a <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a>, a <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a>,
    a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node-identifier">blank node identifier</a>, a <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a>, <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#nulls">null</a>,
    or an <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a>.</p>


  <section id="expanded-term-definition"><h4 id="x9-15-1-expanded-term-definition"><bdi class="secno">9.15.1 </bdi>Expanded term definition<a class="self-link" aria-label="§" href="#expanded-term-definition"></a></h4>
    <p>An <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a> is used to describe the mapping
    between a <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a> and its expanded identifier, as well as other
    properties of the value associated with the <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a> when it is
    used as key in a <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a>.</p>

    <p>An <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a> <em class="rfc2119" title="MUST">MUST</em> be a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a>
      composed of zero or more keys from
      <code>@id</code>,
      <code>@reverse</code>,
      <code>@type</code>,
      <code>@language</code>,
      <code>@container</code>,
      <code class="changed">@context</code>,
      <code class="changed">@prefix</code>,
      <code class="changed">@propagate</code>, or
      <code class="changed">@protected</code>.
      An <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a> <em class="rfc2119" title="SHOULD NOT">SHOULD NOT</em> contain any other keys.</p>

    <p class="changed">When the associated term is <code>@type</code>, the <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a>
      <em class="rfc2119" title="MUST NOT">MUST NOT</em> contain keys other than <code>@container</code> and <code>@protected</code>.
      The value of <code>@container</code> is limited to the single value <code>@set</code>.</p>

    <p>If the term being defined is not an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> or a <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a>
      and the <a href="#dfn-active-context" class="internalDFN" data-link-type="dfn">active context</a> does not have an
      <code>@vocab</code> mapping, the <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a> <em class="rfc2119" title="MUST">MUST</em>
      include the <code>@id</code> key.</p>

    <p class="changed"><a href="#dfn-term-definition" class="internalDFN" data-link-type="dfn">Term definitions</a> with keys which are of the form of an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> or a <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a> <em class="rfc2119" title="MUST NOT">MUST NOT</em>
      expand to an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> other than the expansion of the key itself.</p>

    <p>If the <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a> contains the <code>@id</code>
      <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a>, its value <em class="rfc2119" title="MUST">MUST</em> be <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#nulls">null</a>, an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>,
      a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node-identifier">blank node identifier</a>, a <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a>, a <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a>,
      or a <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a>.</p>

    <p>If an <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a> has an <code>@reverse</code> <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">entry</a>,
      it <em class="rfc2119" title="MUST NOT">MUST NOT</em> have <code>@id</code> or <code>@nest</code> <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">entries</a> at the same time,
      its value <em class="rfc2119" title="MUST">MUST</em> be an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>,
      a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node-identifier">blank node identifier</a>, a <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a>, or a <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a>. If an
      <code>@container</code> <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">entry</a> exists, its value <em class="rfc2119" title="MUST">MUST</em> be <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#nulls">null</a>,
      <code>@set</code>, or <code>@index</code>.</p>

    <p>If the <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a> contains the <code>@type</code>
      <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a>, its value <em class="rfc2119" title="MUST">MUST</em> be an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>, a
      <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a>, a <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a>, <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#nulls">null</a>, or one of the
      <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keywords</a> <code>@id</code>, <code class="changed">@json</code>, <code class="changed">@none</code>, or <code>@vocab</code>.</p>

    <p>If the <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a> contains the <code>@language</code> <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a>,
      its value <em class="rfc2119" title="MUST">MUST</em> have the <a href="https://tools.ietf.org/html/bcp47#section-2.1.1">lexical form</a> described in [<cite><a class="bibref" data-link-type="biblio" href="#bib-bcp47" title="Tags for Identifying Languages">BCP47</a></cite>] or be <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#nulls">null</a>.</p>

    <p class="changed">If the <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a> contains the <code>@index</code>
      <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a>, its value <em class="rfc2119" title="MUST">MUST</em> be an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>,
      a <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a>, or a <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a>.</p>

    <p>If the <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a> contains the <code>@container</code>
      <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a>, its value <em class="rfc2119" title="MUST">MUST</em> be either
      <code>@list</code>,
      <code>@set</code>,
      <code>@language</code>,
      <code>@index</code>,
      <span class="changed"><code>@id</code></span>,
      <span class="changed"><code>@graph</code></span>,
      <span class="changed"><code>@type</code></span>, or be
      <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#nulls">null</a>
      <span class="changed">
        or an <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a> containing exactly any one of those keywords, or a
        combination of <code>@set</code> and any of <code>@index</code>,
        <code>@id</code>, <code>@graph</code>, <code>@type</code>,
        <code>@language</code> in any order
      </span>.
      <span class="changed"><code>@container</code> may also be an array
        containing <code>@graph</code> along with either <code>@id</code> or
        <code>@index</code> and also optionally including <code>@set</code>.</span>
      If the value
      is <code>@language</code>, when the <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a> is used outside of the
      <code>@context</code>, the associated value <em class="rfc2119" title="MUST">MUST</em> be a <a href="#dfn-language-map" class="internalDFN" data-link-type="dfn">language map</a>.
      If the value is <code>@index</code>, when the <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a> is used outside of
      the <code>@context</code>, the associated value <em class="rfc2119" title="MUST">MUST</em> be an
      <a href="#dfn-index-map" class="internalDFN" data-link-type="dfn">index map</a>.</p>

    <p class="changed">If an <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a> has an <code>@context</code> <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">entry</a>,
      it <em class="rfc2119" title="MUST">MUST</em> be a valid <code>context definition</code>.</p>

    <p class="changed">If the <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a> contains the <code>@nest</code>
      <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a>, its value <em class="rfc2119" title="MUST">MUST</em> be either <code>@nest</code>, or a term
      which expands to <code>@nest</code>.</p>

    <p class="changed">If the <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a> contains the <code>@prefix</code>
      <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a>, its value <em class="rfc2119" title="MUST">MUST</em> be <code>true</code> or <code>false</code>.</p>

    <p class="changed">If the <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a> contains the <code>@propagate</code>
      <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a>, its value <em class="rfc2119" title="MUST">MUST</em> be <code>true</code> or <code>false</code>.</p>

    <p class="changed">If the <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a> contains the <code>@protected</code>
      <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a>, its value <em class="rfc2119" title="MUST">MUST</em> be <code>true</code> or <code>false</code>.</p>

    <p><a href="#dfn-term" class="internalDFN" data-link-type="dfn">Terms</a> <em class="rfc2119" title="MUST NOT">MUST NOT</em> be used in a circular manner. That is,
      the definition of a term cannot depend on the definition of another term if that other
      term also depends on the first term.</p>

  </section>

  <p>See <a class="sectionRef sec-ref" href="#the-context">§&nbsp;<bdi class="secno">3.1 </bdi>The Context</a> for further discussion on <a href="#dfn-context" class="internalDFN" data-link-type="dfn">contexts</a>.</p>
</section>

<section class="normative" id="keywords">
  <h3 id="x9-16-keywords"><bdi class="secno">9.16 </bdi>Keywords<a class="self-link" aria-label="§" href="#keywords"></a></h3>
  <p>JSON-LD <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keywords</a> are described in <a class="sectionRef sec-ref" href="#syntax-tokens-and-keywords">§&nbsp;<bdi class="secno">1.7 </bdi>Syntax Tokens and Keywords</a>,
    this section describes where each <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a> may appear within different JSON-LD structures.</p>

  <p>Within
    <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a>,
    <a href="#dfn-value-object" class="internalDFN" data-link-type="dfn">value objects</a>,
    <a href="#dfn-graph-object" class="internalDFN" data-link-type="dfn">graph objects</a>,
    <a href="#dfn-list-object" class="internalDFN" data-link-type="dfn">list objects</a>,
    <a href="#dfn-set-object" class="internalDFN" data-link-type="dfn">set objects</a>, and
    <a href="#dfn-nested-property" class="internalDFN" data-link-type="dfn">nested properties</a>
    <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a> aliases <em class="rfc2119" title="MAY">MAY</em> be used instead of the corresponding <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a>, except for <code>@context</code>.
    The <code>@context</code> <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a> <em class="rfc2119" title="MUST NOT">MUST NOT</em> bee aliased.
    Within <a href="#dfn-local-context" class="internalDFN" data-link-type="dfn">local contexts</a> and <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definitions</a>,
    <a href="#dfn-keyword" class="internalDFN" data-link-type="dfn">keyword</a> aliases <em class="rfc2119" title="MAY">MAY</em> NOT used.</p>

  <dl data-sort=""><dt><code>@base</code></dt><dd>
      The unaliased <code>@base</code> keyword <em class="rfc2119" title="MAY">MAY</em> be used as a key in a <a href="#dfn-context-definition" class="internalDFN" data-link-type="dfn">context definition</a>.
      Its value <em class="rfc2119" title="MUST">MUST</em> be an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-1.3"><abbr title="Internationalized Resource Identifier">IRI</abbr> reference</a>, or <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#nulls">null</a>.
    </dd>
    <dt><code>@container</code></dt><dd>
      The unaliased <code>@container</code> keyword <em class="rfc2119" title="MAY">MAY</em> be used as a key in an <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a>.
      Its value <em class="rfc2119" title="MUST">MUST</em> be either
      <code>@list</code>,
      <code>@set</code>,
      <code>@language</code>,
      <code>@index</code>,
      <code class="changed">@id</code>,
      <code class="changed">@graph</code>,
      <code class="changed">@type</code>, or be
      <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#nulls">null</a>,
      <span class="changed">or an <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a> containing exactly any one of those keywords, or a
        combination of <code>@set</code> and any of <code>@index</code>,
        <code>@id</code>, <code>@graph</code>, <code>@type</code>,
        <code>@language</code> in any order.
        The value may also be an array
        containing <code>@graph</code> along with either <code>@id</code> or
        <code>@index</code> and also optionally including <code>@set</code></span>.
    </dd>
    <dt><code>@context</code></dt><dd>
      The <code>@context</code> keyword <em class="rfc2119" title="MUST NOT">MUST NOT</em> be aliased, and <em class="rfc2119" title="MAY">MAY</em> be used as a key in the following objects:
      <ul data-sort="">
        <li><a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a> (see <a class="sectionRef sec-ref" href="#node-objects">§&nbsp;<bdi class="secno">9.2 </bdi>Node Objects</a>),</li>
        <li><a href="#dfn-value-object" class="internalDFN" data-link-type="dfn">value objects</a> (see <a class="sectionRef sec-ref" href="#value-objects">§&nbsp;<bdi class="secno">9.5 </bdi>Value Objects</a>),</li>
        <li><a href="#dfn-graph-object" class="internalDFN" data-link-type="dfn">graph objects</a> (see <a class="sectionRef sec-ref" href="#graph-objects">§&nbsp;<bdi class="secno">9.4 </bdi>Graph Objects</a>),</li>
        <li><a href="#dfn-list-object" class="internalDFN" data-link-type="dfn">list objects</a> (see <a class="sectionRef sec-ref" href="#lists-and-sets">§&nbsp;<bdi class="secno">9.7 </bdi>Lists and Sets</a>),</li>
        <li><a href="#dfn-set-object" class="internalDFN" data-link-type="dfn">set objects</a> (see <a class="sectionRef sec-ref" href="#lists-and-sets">§&nbsp;<bdi class="secno">9.7 </bdi>Lists and Sets</a>),</li>
        <li><a href="#dfn-nested-property" class="internalDFN" data-link-type="dfn">nested properties</a> (see <a class="sectionRef sec-ref" href="#property-nesting">§&nbsp;<bdi class="secno">9.14 </bdi>Property Nesting</a>), and</li>
        <li><a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definitions</a> (see <a class="sectionRef sec-ref" href="#context-definitions">§&nbsp;<bdi class="secno">9.15 </bdi>Context Definitions</a>).</li>
      </ul>
      The value of <code>@context</code> <em class="rfc2119" title="MUST">MUST</em> be
      <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#nulls">null</a>,
      an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-1.3"><abbr title="Internationalized Resource Identifier">IRI</abbr> reference</a>,
      a <a href="#dfn-context-definition" class="internalDFN" data-link-type="dfn">context definition</a>, or
      an <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a> composed of any of these.
    </dd>
    <dt><code>@direction</code></dt><dd>
      The <code>@direction</code> keyword <em class="rfc2119" title="MAY">MAY</em> be aliased and <em class="rfc2119" title="MAY">MAY</em> be used as a key in a <a href="#dfn-value-object" class="internalDFN" data-link-type="dfn">value object</a>.
      Its value <em class="rfc2119" title="MUST">MUST</em> be one of <code>"ltr"</code> or <code>"rtl"</code>, or be <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#nulls">null</a>.
      <p>The unaliased <code>@direction</code> <em class="rfc2119" title="MAY">MAY</em> be used as a key in a <a href="#dfn-context-definition" class="internalDFN" data-link-type="dfn">context definition</a>.</p>
      <p>See <a class="sectionRef sec-ref" href="#base-direction">§&nbsp;<bdi class="secno">4.2.4.1 </bdi>Base Direction</a> for a further discussion.</p>
    </dd>
    <dt><code>@graph</code></dt><dd>
      The <code>@graph</code> keyword <em class="rfc2119" title="MAY">MAY</em> be aliased and <em class="rfc2119" title="MAY">MAY</em> be used as a key in a <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> or a <a href="#dfn-graph-object" class="internalDFN" data-link-type="dfn">graph object</a>,
      where its value <em class="rfc2119" title="MUST">MUST</em> be a <a href="#dfn-value-object" class="internalDFN" data-link-type="dfn">value object</a>, <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a>, or an array of either <a href="#dfn-value-object" class="internalDFN" data-link-type="dfn">value objects</a> or <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a>.
      <p>The unaliased <code>@graph</code> <em class="rfc2119" title="MAY">MAY</em> be used as the value of the <code>@container</code> key within an <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a>.</p>
      <p>See <a class="sectionRef sec-ref" href="#named-graphs">§&nbsp;<bdi class="secno">4.9 </bdi>Named Graphs</a>.</p>
    </dd>
    <dt><code>@id</code></dt><dd>
      The <code>@id</code> keyword <em class="rfc2119" title="MAY">MAY</em> be aliased and <em class="rfc2119" title="MAY">MAY</em> be used as a key in a <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> or a <a href="#dfn-graph-object" class="internalDFN" data-link-type="dfn">graph object</a>.
      <p>The unaliased <code>@id</code> <em class="rfc2119" title="MAY">MAY</em> be used as a key in an <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a>,
        or as the value of the <code>@container</code> key within an <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a>.</p>
      <p>The value of the <code>@id</code> key <em class="rfc2119" title="MUST">MUST</em>  be an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-1.3"><abbr title="Internationalized Resource Identifier">IRI</abbr> reference</a>,
        or a <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a> (including <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node-identifier">blank node identifiers</a>).</p>
      <p>See <a class="sectionRef sec-ref" href="#node-identifiers">§&nbsp;<bdi class="secno">3.3 </bdi>Node Identifiers</a>,
        <a class="sectionRef sec-ref" href="#compact-iris">§&nbsp;<bdi class="secno">4.1.5 </bdi>Compact IRIs</a>, and
        <a class="sectionRef sec-ref" href="#identifying-blank-nodes">§&nbsp;<bdi class="secno">4.5.1 </bdi>Identifying Blank Nodes</a> for further discussion on
        <code>@id</code> values.</p>
    </dd>
    <dt class="changed"><code>@import</code></dt><dd class="changed">
      The unaliased <code>@import</code> keyword <em class="rfc2119" title="MAY">MAY</em> be used in a <a href="#dfn-context-definition" class="internalDFN" data-link-type="dfn">context definition</a>.
      Its value <em class="rfc2119" title="MUST">MUST</em> be an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-1.3"><abbr title="Internationalized Resource Identifier">IRI</abbr> reference</a>.
      See <a class="sectionRef sec-ref" href="#imported-contexts">§&nbsp;<bdi class="secno">4.1.10 </bdi>Imported Contexts</a> for a further discussion.
    </dd>
    <dt><code>@included</code></dt><dd>
      The <code>@included</code> keyword <em class="rfc2119" title="MAY">MAY</em> be aliased and
      its value <em class="rfc2119" title="MUST">MUST</em> be an <a href="#dfn-included-block" class="internalDFN" data-link-type="dfn">included block</a>.
      This keyword is described further in <a class="sectionRef sec-ref" href="#included-nodes">§&nbsp;<bdi class="secno">4.7 </bdi>Included Nodes</a>,
      and <a class="sectionRef sec-ref" href="#included-blocks">§&nbsp;<bdi class="secno">9.13 </bdi>Included Blocks</a>.
    </dd>
    <dt><code>@index</code></dt><dd>
      The <code>@index</code> keyword <em class="rfc2119" title="MAY">MAY</em> be aliased and <em class="rfc2119" title="MAY">MAY</em> be used as a key in a
      <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a>, <a href="#dfn-value-object" class="internalDFN" data-link-type="dfn">value object</a>, <a href="#dfn-graph-object" class="internalDFN" data-link-type="dfn">graph object</a>, <a href="#dfn-set-object" class="internalDFN" data-link-type="dfn">set object</a>, or <a href="#dfn-list-object" class="internalDFN" data-link-type="dfn">list object</a>.
      Its value <em class="rfc2119" title="MUST">MUST</em> be a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">string</a>.
      <p>The unaliased <code>@index</code> <em class="rfc2119" title="MAY">MAY</em> be used as the value of the <code>@container</code> key within an <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a>
        and as an entry in a <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a>, where the value an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>,
        a <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a>, or a <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a>.</p>
      <p>See <a class="sectionRef sec-ref" href="#index-maps">§&nbsp;<bdi class="secno">9.9 </bdi>Index Maps</a>, and
        <a class="sectionRef sec-ref" href="#property-based-data-indexing">§&nbsp;<bdi class="secno">4.6.1.1 </bdi>Property-based data indexing</a> for a further discussion.</p>
    </dd>
    <dt><code>@json</code></dt><dd>
      The <code>@json</code> keyword <em class="rfc2119" title="MAY">MAY</em> be aliased
      and <em class="rfc2119" title="MAY">MAY</em> be used as the value of the <code>@type</code> key within a <a href="#dfn-value-object" class="internalDFN" data-link-type="dfn">value object</a>
      or an <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a>.
      <p>See <a class="sectionRef sec-ref" href="#json-literals">§&nbsp;<bdi class="secno">4.2.2 </bdi>JSON Literals</a>.</p>
    </dd><dt><code>@language</code></dt><dd>
      The <code>@language</code> keyword <em class="rfc2119" title="MAY">MAY</em> be aliased and <em class="rfc2119" title="MAY">MAY</em> be used as a key in a <a href="#dfn-value-object" class="internalDFN" data-link-type="dfn">value object</a>.
      Its value <em class="rfc2119" title="MUST">MUST</em> be a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">string</a> with the <a href="https://tools.ietf.org/html/bcp47#section-2.1.1">lexical form</a> described in [<cite><a class="bibref" data-link-type="biblio" href="#bib-bcp47" title="Tags for Identifying Languages">BCP47</a></cite>] or be <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#nulls">null</a>.
      <p>The unaliased <code>@language</code> <em class="rfc2119" title="MAY">MAY</em> be used as a key in a <a href="#dfn-context-definition" class="internalDFN" data-link-type="dfn">context definition</a>,
        or as the value of the <code>@container</code> key within an <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a>.</p>
      <p>See <a class="sectionRef sec-ref" href="#string-internationalization">§&nbsp;<bdi class="secno">4.2.4 </bdi>String Internationalization</a>, <a class="sectionRef sec-ref" href="#language-maps">§&nbsp;<bdi class="secno">9.8 </bdi>Language Maps</a>.</p>
    </dd>
    <dt><code>@list</code></dt><dd>
      The <code>@list</code> keyword <em class="rfc2119" title="MAY">MAY</em> be aliased and <em class="rfc2119" title="MUST">MUST</em> be used as a key in a <a href="#dfn-list-object" class="internalDFN" data-link-type="dfn">list object</a>.
      The unaliased <code>@list</code> <em class="rfc2119" title="MAY">MAY</em> be used as the value of the <code>@container</code> key within an <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a>.
      Its value <em class="rfc2119" title="MUST">MUST</em> be one of the following:
      <ul>
        <li><a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">string</a>,</li>
        <li><a data-link-type="dfn" href="https://tc39.es/ecma262/#sec-terms-and-definitions-number-value">number</a>,</li>
        <li><code>true</code>,</li>
        <li><code>false</code>,</li>
        <li><a data-link-type="dfn" href="https://infra.spec.whatwg.org/#nulls">null</a>,</li>
        <li><a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a>,</li>
        <li><a href="#dfn-value-object" class="internalDFN" data-link-type="dfn">value object</a>, or</li>
        <li>an <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a> of zero or more of the above possibilities</li>
      </ul>

      <p>See <a class="sectionRef sec-ref" href="#sets-and-lists">§&nbsp;<bdi class="secno">4.3 </bdi>Value Ordering</a> for further discussion on sets and lists.</p>
    </dd>
    <dt class="changed"><code>@nest</code></dt><dd class="changed">
      The <code>@nest</code> keyword <em class="rfc2119" title="MAY">MAY</em> be aliased and <em class="rfc2119" title="MAY">MAY</em> be used as a key in a <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a>,
      where its value must be a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a>.
      <p>The unaliased <code>@nest</code> <em class="rfc2119" title="MAY">MAY</em> be used as the value of a <a href="#dfn-simple-term-definition" class="internalDFN" data-link-type="dfn">simple term definition</a>,
        or as a key in an <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a>,
        where its value <em class="rfc2119" title="MUST">MUST</em> be a string expanding to <code>@nest</code>.</p>
      <p>See <a class="sectionRef sec-ref" href="#property-nesting">§&nbsp;<bdi class="secno">9.14 </bdi>Property Nesting</a> for a further discussion.</p>
    </dd>
    <dt class="changed"><code>@none</code></dt><dd class="changed">
      The <code>@none</code> keyword <em class="rfc2119" title="MAY">MAY</em> be aliased and <em class="rfc2119" title="MAY">MAY</em> be used as a key in an
      <a href="#dfn-index-map" class="internalDFN" data-link-type="dfn">index map</a>, <a href="#dfn-id-map" class="internalDFN" data-link-type="dfn">id map</a>, <a href="#dfn-language-map" class="internalDFN" data-link-type="dfn">language map</a>, <a href="#dfn-type-map" class="internalDFN" data-link-type="dfn">type map</a>.
      See <a class="sectionRef sec-ref" href="#data-indexing">§&nbsp;<bdi class="secno">4.6.1 </bdi>Data Indexing</a>,
      <a class="sectionRef sec-ref" href="#language-indexing">§&nbsp;<bdi class="secno">4.6.2 </bdi>Language Indexing</a>,
      <a class="sectionRef sec-ref" href="#node-identifier-indexing">§&nbsp;<bdi class="secno">4.6.3 </bdi>Node Identifier Indexing</a>,
      <a class="sectionRef sec-ref" href="#node-type-indexing">§&nbsp;<bdi class="secno">4.6.4 </bdi>Node Type Indexing</a>,
      <a class="sectionRef sec-ref" href="#named-graph-indexing">§&nbsp;<bdi class="secno">4.9.3 </bdi>Named Graph Indexing</a>, or
      <a class="sectionRef sec-ref" href="#named-graph-data-indexing">§&nbsp;<bdi class="secno">4.9.2 </bdi>Named Graph Data Indexing</a>
      for a further discussion.</dd>
    <dt class="changed"><code>@prefix</code></dt><dd class="changed">
      The unaliased <code>@prefix</code> keyword <em class="rfc2119" title="MAY">MAY</em> be used as a key in an <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a>.
      Its value <em class="rfc2119" title="MUST">MUST</em> be <code>true</code> or <code>false</code>.
      See <a class="sectionRef sec-ref" href="#compact-iris">§&nbsp;<bdi class="secno">4.1.5 </bdi>Compact IRIs</a>
      and <a class="sectionRef sec-ref" href="#context-definitions">§&nbsp;<bdi class="secno">9.15 </bdi>Context Definitions</a>
      for a further discussion.
    </dd>
    <dt class="changed"><code>@propagate</code></dt><dd class="changed">
      The unaliased <code>@propagate</code> keyword <em class="rfc2119" title="MAY">MAY</em> be used in a <a href="#dfn-context-definition" class="internalDFN" data-link-type="dfn">context definition</a>.
      Its value <em class="rfc2119" title="MUST">MUST</em> be <code>true</code> or <code>false</code>.
      See <a class="sectionRef sec-ref" href="#context-propagation">§&nbsp;<bdi class="secno">4.1.9 </bdi>Context Propagation</a> for a further discussion.
    </dd>
    <dt class="changed"><code>@protected</code></dt><dd class="changed">
      The unaliased <code>@protected</code> keyword <em class="rfc2119" title="MAY">MAY</em> be used in a <a href="#dfn-context-definition" class="internalDFN" data-link-type="dfn">context definition</a>,
      or an <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a>.
      Its value <em class="rfc2119" title="MUST">MUST</em> be <code>true</code> or <code>false</code>.
      See <a class="sectionRef sec-ref" href="#protected-term-definitions">§&nbsp;<bdi class="secno">4.1.11 </bdi>Protected Term Definitions</a> for a further discussion.
    </dd>
    <dt><code>@reverse</code></dt><dd>
      The <code>@reverse</code> keyword <em class="rfc2119" title="MAY">MAY</em> be aliased and <em class="rfc2119" title="MAY">MAY</em> be used as a key in a <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a>.
      <p>The unaliased <code>@reverse</code> <em class="rfc2119" title="MAY">MAY</em> be used as a key in an <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a>.</p>
      <p>The value of the <code>@reverse</code> key <em class="rfc2119" title="MUST">MUST</em>  be an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-1.3"><abbr title="Internationalized Resource Identifier">IRI</abbr> reference</a>,
        or a <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a> (including <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node-identifier">blank node identifiers</a>).</p>
      <p>See <a class="sectionRef sec-ref" href="#reverse-properties">§&nbsp;<bdi class="secno">4.8 </bdi>Reverse Properties</a> and
        <a class="sectionRef sec-ref" href="#context-definitions">§&nbsp;<bdi class="secno">9.15 </bdi>Context Definitions</a> for further discussion.</p>
    </dd>
    <dt><code>@set</code></dt><dd>
      The <code>@set</code> keyword <em class="rfc2119" title="MAY">MAY</em> be aliased and <em class="rfc2119" title="MUST">MUST</em> be used as a key in a <a href="#dfn-set-object" class="internalDFN" data-link-type="dfn">set object</a>.
      Its value <em class="rfc2119" title="MUST">MUST</em> be one of the following:
      <ul>
        <li><a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">string</a>,</li>
        <li><a data-link-type="dfn" href="https://tc39.es/ecma262/#sec-terms-and-definitions-number-value">number</a>,</li>
        <li><code>true</code>,</li>
        <li><code>false</code>,</li>
        <li><a data-link-type="dfn" href="https://infra.spec.whatwg.org/#nulls">null</a>,</li>
        <li><a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a>,</li>
        <li><a href="#dfn-value-object" class="internalDFN" data-link-type="dfn">value object</a>, or</li>
        <li>an <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a> of zero or more of the above possibilities</li>
      </ul>

      <p>The unaliased <code>@set</code> <em class="rfc2119" title="MAY">MAY</em> be used as the value of the <code>@container</code> key within an <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a>.</p>

      <p>See <a class="sectionRef sec-ref" href="#sets-and-lists">§&nbsp;<bdi class="secno">4.3 </bdi>Value Ordering</a> for further discussion on sets and lists.</p>
    </dd>
    <dt><code>@type</code></dt><dd>
      The <code>@type</code> keyword <em class="rfc2119" title="MAY">MAY</em> be aliased and <em class="rfc2119" title="MAY">MAY</em> be used as a key in a <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> or a <a href="#dfn-value-object" class="internalDFN" data-link-type="dfn">value object</a>,
      where its value <em class="rfc2119" title="MUST">MUST</em> be a <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a>, <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-1.3"><abbr title="Internationalized Resource Identifier">IRI</abbr> reference</a>,
      or a <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a> (including <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node-identifier">blank node identifiers</a>).
      <p>The unaliased <code>@type</code> <em class="rfc2119" title="MAY">MAY</em> be used as a key in an <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a>,
        where its value may also be either <code>@id</code> or <code>@vocab</code>,
        or as the value of the <code>@container</code> key within an <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a>.</p>
      <p class="changed">Within a context, <code>@type</code> may be used as the key for an <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a>,
        whose entries are limited to <code>@container</code> and <code>@protected</code>.</p>
      <p>This keyword is described further in <a class="sectionRef sec-ref" href="#specifying-the-type">§&nbsp;<bdi class="secno">3.5 </bdi>Specifying the Type</a>
        and <a class="sectionRef sec-ref" href="#typed-values">§&nbsp;<bdi class="secno">4.2.1 </bdi>Typed Values</a>.</p>
    </dd>
    <dt><code>@value</code></dt><dd>
      The <code>@value</code> keyword <em class="rfc2119" title="MAY">MAY</em> be aliased and <em class="rfc2119" title="MUST">MUST</em> be used as a key in a <a href="#dfn-value-object" class="internalDFN" data-link-type="dfn">value object</a>.
      Its value key <em class="rfc2119" title="MUST">MUST</em> be either a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">string</a>, a <a data-link-type="dfn" href="https://tc39.es/ecma262/#sec-terms-and-definitions-number-value">number</a>, <code>true</code>, <code>false</code> or <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#nulls">null</a>.
      This keyword is described further in <a class="sectionRef sec-ref" href="#value-objects">§&nbsp;<bdi class="secno">9.5 </bdi>Value Objects</a>.
    </dd>
    <dt class="changed"><code>@version</code></dt><dd class="changed">
      The unaliased <code>@version</code> keyword <em class="rfc2119" title="MAY">MAY</em> be used as a key in a <a href="#dfn-context-definition" class="internalDFN" data-link-type="dfn">context definition</a>.
      Its value <em class="rfc2119" title="MUST">MUST</em> be a <a data-link-type="dfn" href="https://tc39.es/ecma262/#sec-terms-and-definitions-number-value">number</a> with the value <code>1.1</code>.
      This keyword is described further in <a class="sectionRef sec-ref" href="#context-definitions">§&nbsp;<bdi class="secno">9.15 </bdi>Context Definitions</a>.
    </dd>
    <dt><code>@vocab</code></dt><dd>
      The unaliased <code>@vocab</code> keyword <em class="rfc2119" title="MAY">MAY</em> be used as a key in a <a href="#dfn-context-definition" class="internalDFN" data-link-type="dfn">context definition</a>
      or as the value of <code>@type</code> in an <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a>.
      Its value <em class="rfc2119" title="MUST">MUST</em> be an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-1.3"><abbr title="Internationalized Resource Identifier">IRI</abbr> reference</a>, a <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a>, a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node-identifier">blank node identifier</a>, a <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a>, or <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#nulls">null</a>.
      This keyword is described further in <a class="sectionRef sec-ref" href="#context-definitions">§&nbsp;<bdi class="secno">9.15 </bdi>Context Definitions</a>,
      and <a class="sectionRef sec-ref" href="#default-vocabulary">§&nbsp;<bdi class="secno">4.1.2 </bdi>Default Vocabulary</a>.
    </dd>
    </dl>
</section>
</section>

<section class="normative" id="relationship-to-rdf">
  <h2 id="x10-relationship-to-rdf"><bdi class="secno">10. </bdi>Relationship to RDF<a class="self-link" aria-label="§" href="#relationship-to-rdf"></a></h2>

  <p>JSON-LD is a
    <dfn data-dfn-type="dfn" id="dfn-concrete-rdf-syntax" data-no-export=""><a href="https://www.w3.org/TR/rdf11-concepts/#dfn-concrete-rdf-syntax">concrete RDF syntax</a></dfn>
    as described in [<cite><a class="bibref" data-link-type="biblio" href="#bib-rdf11-concepts" title="RDF 1.1 Concepts and Abstract Syntax">RDF11-CONCEPTS</a></cite>]. Hence, a JSON-LD document is both an
    RDF document <em>and</em> a JSON document and correspondingly represents an
    instance of an <a href="https://www.w3.org/TR/rdf11-concepts/#data-model">RDF data model</a>. However, JSON-LD also extends the RDF data
    model to optionally allow JSON-LD to serialize
    <dfn data-lt="generalized rdf dataset|generalized RDF Datasets" data-dfn-type="dfn" id="dfn-generalized-rdf-dataset" data-no-export=""><a href="https://www.w3.org/TR/rdf11-concepts/#dfn-generalized-rdf-dataset">generalized RDF Datasets</a></dfn>.
    The JSON-LD extensions to the RDF data model are:</p>

  <ul>
    <li>In JSON-LD <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-property">properties</a> can be
      <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">IRIs</a> or <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node">blank nodes</a>
      whereas in RDF properties (<a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-predicate">predicates</a>) have to be <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">IRIs</a>. This
      means that JSON-LD serializes
      <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-generalized-rdf-dataset">generalized RDF Datasets</a>.</li>
    <li>In JSON-LD <a data-link-type="dfn" href="https://www.w3.org/TR/rdf-schema/#ch_collectionvocab">lists</a> use native JSON syntax, either contained in a
      list object, or described as such within a context. Consequently, developers
      using the JSON representation can access list elements directly rather than
      using the vocabulary for collections described in [<cite><a class="bibref" data-link-type="biblio" href="#bib-rdf-schema" title="RDF Schema 1.1">RDF-SCHEMA</a></cite>].</li>
    <li>RDF values are either typed <em>literals</em>
      (<a href="#dfn-typed-value" class="internalDFN" data-link-type="dfn">typed values</a>) or
      <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-language-tagged-string">language-tagged strings</a> whereas
      JSON-LD also supports JSON's native data types, i.e., <a data-link-type="dfn" href="https://tc39.es/ecma262/#sec-terms-and-definitions-number-value">number</a>,
      <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">strings</a>, and the boolean values <code>true</code>
      and <code>false</code>. The JSON-LD 1.1 Processing Algorithms and API specification [<cite><a class="bibref" data-link-type="biblio" href="#bib-json-ld11-api" title="JSON-LD 1.1 Processing Algorithms and API">JSON-LD11-API</a></cite>]
      defines the <a href="https://www.w3.org/TR/json-ld11-api/#data-round-tripping">conversion rules</a>
      between JSON's native data types and RDF's counterparts to allow round-tripping.</li>
    <li class="changed">As an extension to the <a href="https://www.w3.org/TR/rdf11-concepts/#data-model">RDF data model</a>,
      literals without an explicit datatype
      <em class="rfc2119" title="MAY">MAY</em> include a <a href="#dfn-base-direction" class="internalDFN" data-link-type="dfn">base direction</a>.
      As there is currently no standardized mechanism for representing the <a href="#dfn-base-direction" class="internalDFN" data-link-type="dfn">base direction</a>
      of <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-literal">RDF literals</a>, the JSON-LD to standard RDF transformation loses the base direction.
      However, the <a href="https://www.w3.org/TR/json-ld11-api/#deserialize-json-ld-to-rdf-algorithm">Deserialize JSON-LD to RDF Algorithm</a>
      provides a means of representing <a href="#dfn-base-direction" class="internalDFN" data-link-type="dfn">base direction</a>
      using mechanisms which will preserve round-tripping through non-standard RDF.</li>
  </ul>

  <div class="note" role="note" id="issue-container-generatedID-49"><div role="heading" class="note-title marker" id="h-note-45" aria-level="3"><span>Note</span></div><p class="">The use of <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node-identifier">blank node identifiers</a> to label properties is obsolete,
    and may be removed in a future version of JSON-LD, as is the support for <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-generalized-rdf-dataset">generalized RDF Datasets</a>.</p></div>

  <p>Summarized, these differences mean that JSON-LD is capable of serializing any RDF
    <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-graph">graph</a> or <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-dataset">dataset</a> and most, but not all, JSON-LD documents can be directly
    interpreted as RDF as described in RDF 1.1 Concepts [<cite><a class="bibref" data-link-type="biblio" href="#bib-rdf11-concepts" title="RDF 1.1 Concepts and Abstract Syntax">RDF11-CONCEPTS</a></cite>].</p>

  <p>Authors are strongly encouraged to avoid labeling properties using <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node-identifier">blank node identifiers</a>,
    instead, consider one of the following mechanisms:</p>
  <ul>
    <li>a <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-6.5">relative <abbr title="Internationalized Resource Identifier">IRI</abbr> reference</a>, either relative to the document or the vocabulary
      (see <a href="#document-relative-vocabulary-mapping" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">4.1.4 </bdi>Using the Document Base for the Default Vocabulary</a> for a discussion on using the document base as part of the <a href="#dfn-vocabulary-mapping" class="internalDFN" data-link-type="dfn">vocabulary mapping</a>),</li>
    <li>a URN such as <code>urn:example:1</code>, see [<cite><a class="bibref" data-link-type="biblio" href="#bib-urn" title="URN Syntax">URN</a></cite>], or</li>
    <li>a "Skolem <abbr title="Internationalized Resource Identifier">IRI</abbr>" as per
      <a href="https://www.w3.org/TR/rdf11-concepts/#section-skolemization">Replacing Blank Nodes with IRIs</a>
      of [<cite><a class="bibref" data-link-type="biblio" href="#bib-rdf11-concepts" title="RDF 1.1 Concepts and Abstract Syntax">RDF11-CONCEPTS</a></cite>].</li>
  </ul>

  <p>The normative algorithms for interpreting JSON-LD as RDF and serializing
    RDF as JSON-LD are specified in the JSON-LD 1.1 Processing Algorithms and API
    specification [<cite><a class="bibref" data-link-type="biblio" href="#bib-json-ld11-api" title="JSON-LD 1.1 Processing Algorithms and API">JSON-LD11-API</a></cite>].</p>

  <p>Even though JSON-LD serializes
    <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-dataset">RDF Datasets</a>, it can
    also be used as a <dfn data-dfn-type="dfn" id="dfn-graph-source" data-no-export=""><a href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-source">graph source</a></dfn>.
    In that case, a consumer <em class="rfc2119" title="MUST">MUST</em> only use the <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-default-graph">default graph</a> and ignore all <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-named-graph">named graphs</a>.
    This allows servers to expose data in languages such as Turtle and JSON-LD
    using <a href="https://en.wikipedia.org/wiki/Content_negotiation">HTTP content negotiation</a>.</p>

  <div class="note" role="note" id="issue-container-generatedID-50"><div role="heading" class="note-title marker" id="h-note-46" aria-level="3"><span>Note</span></div><p class="">Publishers supporting both <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-dataset">dataset</a> and <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-graph">graph</a> syntaxes have to ensure that
    the primary data is stored in the <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-default-graph">default graph</a> to enable consumers that do not support
    <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-dataset">datasets</a> to process the information.</p></div>

  <section class="informative" id="serializing-deserializing-rdf">
    <h3 id="x10-1-serializing-deserializing-rdf"><bdi class="secno">10.1 </bdi>Serializing/Deserializing RDF<a class="self-link" aria-label="§" href="#serializing-deserializing-rdf"></a></h3><p><em>This section is non-normative.</em></p>

    <p>The process of serializing RDF as JSON-LD and deserializing JSON-LD to RDF
      depends on executing the algorithms defined in
      <a href="https://www.w3.org/TR/json-ld11-api/#rdf-serialization-deserialization-algorithms">RDF Serialization-Deserialization Algorithms</a>
      in the JSON-LD 1.1 Processing Algorithms and API specification [<cite><a class="bibref" data-link-type="biblio" href="#bib-json-ld11-api" title="JSON-LD 1.1 Processing Algorithms and API">JSON-LD11-API</a></cite>].
      It is beyond the scope of this document to detail these algorithms any further,
      but a summary of the necessary operations is provided to illustrate the process.</p>

    <p>The procedure to deserialize a JSON-LD document to RDF involves the
      following steps:</p>

    <ol>
      <li>Expand the JSON-LD document, removing any context; this ensures
        that properties, types, and values are given their full representation
        as <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2">IRIs</a> and expanded values. <a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-api/#dfn-expanded">Expansion</a>
        is discussed further in <a class="sectionRef sec-ref" href="#expanded-document-form">§&nbsp;<bdi class="secno">5.1 </bdi>Expanded Document Form</a>.</li>
      <li>Flatten the document, which turns the document into an array of
        <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a>. Flattening is discussed
        further in <a class="sectionRef sec-ref" href="#flattened-document-form">§&nbsp;<bdi class="secno">5.3 </bdi>Flattened Document Form</a>.</li>
      <li>Turn each <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> into a series of <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-triple">triples</a>.</li>
    </ol>

    <p>For example, consider the following JSON-LD document in compact form:</p>

    <div class="example" id="example-151-sample-json-ld-document">
          <div class="marker">
      <a class="self-link" href="#example-151-sample-json-ld-document">Example<bdi> 151</bdi></a><span class="example-title">: Sample JSON-LD document</span>
    </div> <pre aria-busy="false"><code class="hljs json">{
  <span class="hljs-attr">"@context"</span>: {
    <span class="hljs-attr">"name"</span>: <span class="hljs-string">"http://xmlns.com/foaf/0.1/name"</span>,
    <span class="hljs-attr">"knows"</span>: <span class="hljs-string">"http://xmlns.com/foaf/0.1/knows"</span>
  },
  <span class="hljs-attr">"@id"</span>: <span class="hljs-string">"http://me.markus-lanthaler.com/"</span>,
  <span class="hljs-attr">"name"</span>: <span class="hljs-string">"Markus Lanthaler"</span>,
  <span class="hljs-attr">"knows"</span>: [
    {
      <span class="hljs-attr">"@id"</span>: <span class="hljs-string">"http://manu.sporny.org/about#manu"</span>,
      <span class="hljs-attr">"name"</span>: <span class="hljs-string">"Manu Sporny"</span>
    }, {
      <span class="hljs-attr">"name"</span>: <span class="hljs-string">"Dave Longley"</span>
    }
  ]
}</code></pre>
        </div>

    <p>Running the JSON-LD <a href="https://www.w3.org/TR/json-ld11-api/#expansion-algorithm">Expansion</a> and <a href="https://www.w3.org/TR/json-ld11-api/#flattening-algorithm">Flattening</a> algorithms against the
      JSON-LD input document in the example above would result in the
      following output:</p>

    <div class="example" id="example-152-flattened-and-expanded-form-for-the-previous-example">
          <div class="marker">
      <a class="self-link" href="#example-152-flattened-and-expanded-form-for-the-previous-example">Example<bdi> 152</bdi></a><span class="example-title">: Flattened and expanded form for the previous example</span>
    </div> <pre aria-busy="false"><code class="hljs json">[
  {
    <span class="hljs-attr">"@id"</span>: <span class="hljs-string">"_:b0"</span>,
    <span class="hljs-attr">"http://xmlns.com/foaf/0.1/name"</span>: <span class="hljs-string">"Dave Longley"</span>
  }, {
    <span class="hljs-attr">"@id"</span>: <span class="hljs-string">"http://manu.sporny.org/about#manu"</span>,
    <span class="hljs-attr">"http://xmlns.com/foaf/0.1/name"</span>: <span class="hljs-string">"Manu Sporny"</span>
  }, {
    <span class="hljs-attr">"@id"</span>: <span class="hljs-string">"http://me.markus-lanthaler.com/"</span>,
    <span class="hljs-attr">"http://xmlns.com/foaf/0.1/name"</span>: <span class="hljs-string">"Markus Lanthaler"</span>,
    <span class="hljs-attr">"http://xmlns.com/foaf/0.1/knows"</span>: [
      { <span class="hljs-attr">"@id"</span>: <span class="hljs-string">"http://manu.sporny.org/about#manu"</span> },
      { <span class="hljs-attr">"@id"</span>: <span class="hljs-string">"_:b0"</span> }
    ]
  }
]</code></pre>
        </div>

    <p>Deserializing this to RDF now is a straightforward process of turning
      each <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> into one or more <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-triple">triples</a>. This can be
      expressed in Turtle as follows:</p>

    <div class="example" id="example-153-turtle-representation-of-expanded-flattened-document">
          <div class="marker">
      <a class="self-link" href="#example-153-turtle-representation-of-expanded-flattened-document">Example<bdi> 153</bdi></a><span class="example-title">: Turtle representation of expanded/flattened document</span>
    </div> <pre data-content-type="text/turtle" data-result-for="Flattened and expanded form for the previous example" data-to-rdf="" aria-busy="false"><code class="hljs javascript">@prefix foaf: <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">http:</span>//<span class="hljs-attr">xmlns.com</span>/<span class="hljs-attr">foaf</span>/<span class="hljs-attr">0.1</span>/&gt;</span></span> .

_:b0 foaf:name <span class="hljs-string">"Dave Longley"</span> .

&lt;http:<span class="hljs-comment">//manu.sporny.org/about#manu&gt; foaf:name "Manu Sporny" .</span>

&lt;http:<span class="hljs-comment">//me.markus-lanthaler.com/&gt; foaf:name "Markus Lanthaler" ;</span>
    foaf:knows &lt;http:<span class="hljs-comment">//manu.sporny.org/about#manu&gt;, _:b0 .</span></code></pre>
        </div>

    <p>The process of serializing RDF as JSON-LD can be thought of as the
      inverse of this last step, creating an expanded JSON-LD document closely
      matching the triples from RDF, using a single <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a>
      for all triples having a common subject, and a single <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-property">property</a>
      for those triples also having a common <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-predicate">predicate</a>. The result may
      then be framed by using the
      <a href="https://www.w3.org/TR/json-ld11-framing/#framing-algorithm">Framing Algorithm</a>
      described in [<cite><a class="bibref" data-link-type="biblio" href="#bib-json-ld11-framing" title="JSON-LD 1.1 Framing">JSON-LD11-FRAMING</a></cite>] to create the desired object embedding.</p>
  </section>

  <section class="changed" id="the-rdf-json-datatype"><h3 id="x10-2-the-rdf-json-datatype"><bdi class="secno">10.2 </bdi>The <code>rdf:JSON</code> Datatype<a class="self-link" aria-label="§" href="#the-rdf-json-datatype"></a></h3>
    <p>RDF provides for JSON content as a possible <a data-lt="RDF literal" data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-literal">literal value</a>.
      This allows markup in literal values.
      Such content is indicated in a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-graph">graph</a> using a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-literal">literal</a> whose datatype is set to <code>rdf:JSON</code>.</p>

    <p>The <code>rdf:JSON</code> datatype is defined as follows:</p>

    <dl>
      <dt>The <abbr title="Internationalized Resource Identifier">IRI</abbr> denoting this datatype</dt>
      <dd>is <code>http://www.w3.org/1999/02/22-rdf-syntax-ns#JSON</code>.</dd>
      <dt>The lexical space</dt>
      <dd>is the set of UNICODE [<cite><a class="bibref" data-link-type="biblio" href="#bib-unicode" title="The Unicode Standard">UNICODE</a></cite>] strings which conform to the <a href="https://tools.ietf.org/html/rfc4627#section-2">JSON Grammar</a>
        as described in <a href="https://tools.ietf.org/html/rfc8259#section-2">Section 2 JSON Grammar</a> of [<cite><a class="bibref" data-link-type="biblio" href="#bib-rfc8259" title="The JavaScript Object Notation (JSON) Data Interchange Format">RFC8259</a></cite>].</dd>
      <dt>The value space</dt>
      <dd class="changed">is the set of UNICODE [<cite><a class="bibref" data-link-type="biblio" href="#bib-unicode" title="The Unicode Standard">UNICODE</a></cite>] strings which conform to the <a href="https://tools.ietf.org/html/rfc4627#section-2">JSON Grammar</a>
        as described in <a href="https://tools.ietf.org/html/rfc8259#section-2">Section 2 JSON Grammar</a> of [<cite><a class="bibref" data-link-type="biblio" href="#bib-rfc8259" title="The JavaScript Object Notation (JSON) Data Interchange Format">RFC8259</a></cite>],
        and furthermore comply with the following constraints:
        <ul>
          <li>It <em class="rfc2119" title="MUST NOT">MUST NOT</em> contain any unnecessary whitespace,</li>
          <li>Keys in objects <em class="rfc2119" title="MUST">MUST</em> be ordered lexicographically,</li>
          <li>Native Numeric values <em class="rfc2119" title="MUST">MUST</em> be serialized according to
            <a href="https://tc39.es/ecma262/#sec-tostring-applied-to-the-number-type">Section 7.1.12.1</a> of [<cite><a class="bibref" data-link-type="biblio" href="#bib-ecmascript" title="ECMAScript Language Specification">ECMASCRIPT</a></cite>],</li>
          <li>Strings <em class="rfc2119" title="MUST">MUST</em> be serialized with Unicode codepoints from <code>U+0000</code> through <code>U+001F</code>
            using lower case hexadecimal Unicode notation (<code>\uhhhh</code>) unless in the set
            of predefined JSON control characters <code>U+0008</code>, <code>U+0009</code>,
            <code>U+000A</code>, <code>U+000C</code> or <code>U+000D</code>
            which <em class="rfc2119" title="SHOULD">SHOULD</em> be serialized as <code>\b</code>, <code>\t</code>, <code>\n</code>, <code>\f</code> and <code>\r</code> respectively.
            All other Unicode characters <em class="rfc2119" title="SHOULD">SHOULD</em> be serialized "as is", other than
            <code>U+005C</code> (<code>\</code>) and <code>U+0022</code> (<code>"</code>)
            which <em class="rfc2119" title="SHOULD">SHOULD</em> be serialized as <code>\\</code> and <code>\"</code> respectively.</li>
        </ul>
        <div class="issue" id="issue-container-generatedID-51"><div role="heading" class="issue-title marker" id="h-issue" aria-level="4"><span>Issue</span></div><div class="changed">The JSON Canonicalization Scheme [<cite><a class="bibref" data-link-type="biblio" href="#bib-jcs" title="JSON Canonicalization Scheme (JCS)">JCS</a></cite>]
          is an emerging standard for JSON canonicalization
          not yet ready to be referenced.
          When a JSON canonicalization standard becomes available,
          this specification will likely be updated to require such a canonical representation.
          Users are cautioned from depending on the
          <a href="#dfn-json-literal" class="internalDFN" data-link-type="dfn">JSON literal</a> lexical representation as an <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-literal">RDF literal</a>,
          as the specifics of serialization may change in a future revision of this document.</div></div>
        Despite being defined as a set of strings,
        this value space is considered distinct from the value space of <code>xsd:string</code>,
        in order to avoid side effects with existing specifications.
      </dd>
      <dt>The lexical-to-value mapping</dt>
      <dd>maps any element of the lexical space to the result of
        <ol>
          <li>parsing it into
            an internal representation consistent with [<cite><a class="bibref" data-link-type="biblio" href="#bib-ecmascript" title="ECMAScript Language Specification">ECMASCRIPT</a></cite>] representation
            created by using the <code>JSON.parse</code> function as defined in
            <a href="https://tc39.es/ecma262/#sec-json-object">Section 24.5 The JSON Object</a> of [<cite><a class="bibref" data-link-type="biblio" href="#bib-ecmascript" title="ECMAScript Language Specification">ECMASCRIPT</a></cite>],</li>
          <li>then serializing it in the JSON format [<cite><a class="bibref" data-link-type="biblio" href="#bib-rfc8259" title="The JavaScript Object Notation (JSON) Data Interchange Format">RFC8259</a></cite>]
            in compliance with the constraints of the value space described above.
          </li>
        </ol>
      </dd>
      <dt>The canonical mapping</dt>
      <dd>maps any element of the value space to the identical string in the lexical space.</dd>
    </dl>
  </section>

  <section class="informative" id="the-i18n-namespace"><h3 id="x10-3-the-i18n-namespace"><bdi class="secno">10.3 </bdi>The <code>i18n</code> Namespace<a class="self-link" aria-label="§" href="#the-i18n-namespace"></a></h3><p><em>This section is non-normative.</em></p>
    <p>The <code>i18n</code> namespace is used for describing combinations of <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-language-tag">language tag</a> and <a href="#dfn-base-direction" class="internalDFN" data-link-type="dfn">base direction</a> in <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-literal">RDF literals</a>.
      It is used as an alternative mechanism for describing the [<cite><a class="bibref" data-link-type="biblio" href="#bib-bcp47" title="Tags for Identifying Languages">BCP47</a></cite>] <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-language-tag">language tag</a> and <a href="#dfn-base-direction" class="internalDFN" data-link-type="dfn">base direction</a>
      of <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-literal">RDF literals</a> that would otherwise use the <code>xsd:string</code> or <code>rdf:langString</code> datatypes.</p>
    <p>Datatypes based on this namespace allow round-tripping of JSON-LD documents using base direction,
      although the mechanism is not otherwise standardized.</p>
    <p>The <a href="https://www.w3.org/TR/json-ld11-api/#deserialize-json-ld-to-rdf-algorithm">Deserialize JSON-LD to RDF Algorithm</a>
      can be used with the <dfn data-dfn-type="dfn" id="dfn-rdfdirection" data-no-export=""><a href="https://www.w3.org/TR/json-ld11-api/#dom-jsonldoptions-rdfdirection">rdfDirection</a></dfn> option
      set to <code>i18n-datatype</code> to generate <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-literal">RDF literals</a> using the <code>i18n</code> base to create an <abbr title="Internationalized Resource Identifier">IRI</abbr>
      encoding the <a href="#dfn-base-direction" class="internalDFN" data-link-type="dfn">base direction</a> along with optional <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-language-tag">language tag</a> (normalized to lower case)
      from value objects containing <code>@direction</code> by appending to <code>https://www.w3.org/ns/i18n#</code>
      the value of <code>@language</code>, if any, followed by an underscore (<code>"_"</code>) followed
      by the value of <code>@direction</code>.</p>

    <p>For improved interoperability, the <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-language-tag">language tag</a> is normalized to
      lower case when creating the datatype <abbr title="Internationalized Resource Identifier">IRI</abbr>.</p>

    <div class="issue atrisk" id="issue-container-generatedID-52"><div role="heading" class="issue-title marker" id="h-issue-0" aria-level="4"><span>(Feature at Risk) Issue</span></div><p class="atrisk">This feature is experimental, as RDF does not have a
      standard way to represent base direction in <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-literal">RDF literals</a>.
      A future RDF Working Group may support base direction differently.
      The JSON-LD Working Group solicits feedback from the community on the
      usefulness of these transformations.</p></div>

    <p>The following example shows two statements with literal values of <code>i18n:ar-EG_rtl</code>,
      which encodes the language tag <code>ar-EG</code> and the base direction <code>rtl</code>.</p>
    <pre class="turtle-dt nohighlight" data-content-type="text/turtle" data-options="rdfDirection=i18n-datatype" data-to-rdf="">@prefix ex: &lt;http://example.org/&gt; .
@prefix i18n: &lt;https://www.w3.org/ns/i18n#&gt; .

# Note that this version preserves the base direction using a non-standard datatype.
[
  ex:title <span class="hl-bold">"HTML و CSS: تصميم و إنشاء مواقع الويب"^^i18n:ar-eg_rtl</span>;
  ex:publisher <span class="hl-bold">"مكتبة"^^i18n:ar-eg_rtl</span>
] .</pre>
    <p>See <a href="#base-direction" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">4.2.4.1 </bdi>Base Direction</a> for more details
      on using <a href="#dfn-base-direction" class="internalDFN" data-link-type="dfn">base direction</a> for strings.</p>
  </section>

  <section class="informative" id="the-rdf-compoundliteral-class-and-the-rdf-language-and-rdf-direction-properties"><h3 id="x10-4-the-rdf-compoundliteral-class-and-the-rdf-language-and-rdf-direction-properties"><bdi class="secno">10.4 </bdi>The <code>rdf:CompoundLiteral</code> class and the <code>rdf:language</code> and <code>rdf:direction</code> properties<a class="self-link" aria-label="§" href="#the-rdf-compoundliteral-class-and-the-rdf-language-and-rdf-direction-properties"></a></h3><p><em>This section is non-normative.</em></p>
    <p>This specification defines the <code>rdf:CompoundLiteral</code> class, which is in the domain
      of <code>rdf:language</code> and <code>rdf:direction</code> to be used for describing RDF literal values
      containing base direction and a possible language tag to be associated with the
      string value of <code>rdf:value</code> on the same subject.</p>

    <dl>
      <dt><code>rdf:CompoundLiteral</code></dt>
      <dd>A class representing a compound literal.</dd>
      <dt><code>rdf:language</code></dt>
      <dd>An RDF <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-property">property</a>.
        The range of the property is an <code>rdfs:Literal</code>, whose value <em class="rfc2119" title="MUST">MUST</em> be a well-formed [<cite><a class="bibref" data-link-type="biblio" href="#bib-bcp47" title="Tags for Identifying Languages">BCP47</a></cite>] <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-language-tag">language tag</a>.
        The domain of the property is <code>rdf:CompoundLiteral</code>.</dd>
      <dt><code>rdf:direction</code></dt>
      <dd>An RDF <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-property">property</a>.
        The range of the property is an <code>rdfs:Literal</code>, whose value <em class="rfc2119" title="MUST">MUST</em> be either <code>"ltr"</code> or <code>"rtl"</code>.
        The domain of the property is <code>rdf:CompoundLiteral</code>.</dd>
    </dl>

    <p>The <a href="https://www.w3.org/TR/json-ld11-api/#deserialize-json-ld-to-rdf-algorithm">Deserialize JSON-LD to RDF Algorithm</a>
      can be used with the <a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-api/#dom-jsonldoptions-rdfdirection">rdfDirection</a> option
      set to <code>compound-literal</code> to generate <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-literal">RDF literals</a> using these properties to
      describe the <a href="#dfn-base-direction" class="internalDFN" data-link-type="dfn">base direction</a> and optional <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-language-tag">language tag</a> (normalized to lower case)
      from value objects containing <code>@direction</code> and optionally <code>@language</code>.</p>

    <p>For improved interoperability, the <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-language-tag">language tag</a> is normalized to
      lower case when creating the datatype <abbr title="Internationalized Resource Identifier">IRI</abbr>.</p>

    <div class="issue atrisk" id="issue-container-generatedID-53"><div role="heading" class="issue-title marker" id="h-issue-1" aria-level="4"><span>(Feature at Risk) Issue</span></div><p class="atrisk">This feature is experimental, as RDF does not have a
      standard way to represent base direction in <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-literal">RDF literals</a>.
      A future RDF Working Group may support base direction differently.
      The JSON-LD Working Group solicits feedback from the community on the
      usefulness of these transformations.</p></div>

    <p>The following example shows two statements with compound literals
      representing strings with the <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-language-tag">language tag</a> <code>ar-EG</code> and <a href="#dfn-base-direction" class="internalDFN" data-link-type="dfn">base direction</a> <code>rtl</code>.</p>
    <pre class="turtle-dt nohighlight" data-content-type="text/turtle" data-options="rdfDirection=compound-literal" data-to-rdf="">@prefix ex: &lt;http://example.org/&gt; .

# Note that this version preserves the base direction using a bnode structure.
[
  ex:title <span class="hl-bold">[
    rdf:value "HTML و CSS: تصميم و إنشاء مواقع الويب",
    rdf:language "ar-eg",
    rdf:direction "rtl"
  ]</span>;
  ex:publisher <span class="hl-bold">[
    rdf:value "مكتبة",
    rdf:language "ar-eg",
    rdf:direction "rtl"
  ]</span>
] .</pre>
    <p>See <a href="#base-direction" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">4.2.4.1 </bdi>Base Direction</a> for more details
      on using <a href="#dfn-base-direction" class="internalDFN" data-link-type="dfn">base direction</a> for strings.</p>
  </section>
</section>

<section id="security">
  <h2 id="x11-security-considerations"><bdi class="secno">11. </bdi>Security Considerations<a class="self-link" aria-label="§" href="#security"></a></h2>
  <p>See, <a href="#iana-security">Security Considerations</a> in <a href="#iana-considerations" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">C. </bdi>IANA Considerations</a>.</p>

  <div class="note" role="note" id="issue-container-generatedID-54"><div role="heading" class="note-title marker" id="h-note-47" aria-level="3"><span>Note</span></div><p class="">Future versions of this specification
    may incorporate subresource integrity [<cite><a class="bibref" data-link-type="biblio" href="#bib-sri" title="Subresource Integrity">SRI</a></cite>] as a means of ensuring that cached and retrieved
    content matches data retrieved from remote servers; see <a href="https://github.com/w3c/json-ld-syntax/issues/86">issue 86</a>.</p></div>
</section>

<section id="privacy">
  <h2 id="x12-privacy-considerations"><bdi class="secno">12. </bdi>Privacy Considerations<a class="self-link" aria-label="§" href="#privacy"></a></h2>
  <p>The retrieval of external contexts can expose the operation of a JSON-LD processor,
    allow intermediate nodes to fingerprint the client application through introspection of retrieved resources
    (see [<cite><a class="bibref" data-link-type="biblio" href="#bib-fingerprinting-guidance" title="Mitigating Browser Fingerprinting in Web Specifications">fingerprinting-guidance</a></cite>]),
    and provide an opportunity for a man-in-the-middle attack.
    To protect against this, publishers should consider caching remote contexts for future use,
    or use the <a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-api/#dom-jsonldoptions-documentloader">documentLoader</a>
    to maintain a local version of such contexts.</p>
</section>

<section id="internationalization">
  <h2 id="x13-internationalization-considerations"><bdi class="secno">13. </bdi>Internationalization Considerations<a class="self-link" aria-label="§" href="#internationalization"></a></h2>
  <p>As JSON-LD uses the RDF data model, it is restricted by design in its ability to
    properly record <a href="#dfn-json-ld-value" class="internalDFN" data-link-type="dfn">JSON-LD Values</a> which are <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">strings</a> with left-to-right or right-to-left direction indicators.
    Both JSON-LD and RDF provide a mechanism for specifying the language associated with
    a string (<a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-language-tagged-string">language-tagged string</a>), but do not provide a means of indicating
    the <a href="#dfn-base-direction" class="internalDFN" data-link-type="dfn">base direction</a> of the string.</p>

  <p>Unicode provides a mechanism for signaling direction within a string
    (see <cite><a href="https://www.unicode.org/reports/tr9/tr9-41.html">Unicode Bidirectional Algorithm</a></cite> [<cite><a class="bibref" data-link-type="biblio" href="#bib-uax9" title="Unicode Bidirectional Algorithm">UAX9</a></cite>]),
    however, when a string has an overall <a href="#dfn-base-direction" class="internalDFN" data-link-type="dfn">base direction</a> which cannot be determined by the
    beginning of the string, an external indicator is required,
    such as the [<cite><a class="bibref" data-link-type="biblio" href="#bib-html" title="HTML Standard">HTML</a></cite>] <a href="https://html.spec.whatwg.org/multipage/dom.html#the-dir-attribute">dir attribute</a>,
    which currently has no counterpart for <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-literal">RDF literals</a>.</p>

  <p>The issue of properly representing <a href="#dfn-base-direction" class="internalDFN" data-link-type="dfn">base direction</a> in RDF is not something that
    this Working Group can handle, as it is a limitation or the core RDF data model.
    This Working Group expects that a future RDF Working Group will consider the matter
    and add the ability to specify the base direction of <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-language-tagged-string">language-tagged strings</a>.</p>

  <p>Until a more comprehensive solution can be addressed in a future version of this
    specification, publishers should consider this issue when representing strings
    where the <a href="#dfn-base-direction" class="internalDFN" data-link-type="dfn">base direction</a> of the string cannot otherwise be correctly inferred
    based on the content of the string.
    See [<cite><a class="bibref" data-link-type="biblio" href="#bib-string-meta" title="Strings on the Web: Language and Direction Metadata">string-meta</a></cite>] for a discussion best practices for
    identifying language and base direction for strings used on the Web.</p>
</section>

<section class="appendix informative" id="image-descriptions"><h2 id="a-image-descriptions"><bdi class="secno">A. </bdi>Image Descriptions<a class="self-link" aria-label="§" href="#image-descriptions"></a></h2><p><em>This section is non-normative.</em></p>
  <section id="fig-linked-data-graph-descr" class="informative"><h3 id="a-1-linked-data-dataset"><bdi class="secno">A.1 </bdi>Linked Data Dataset<a class="self-link" aria-label="§" href="#fig-linked-data-graph-descr"></a></h3><p><em>This section is non-normative.</em></p>
      <p>This section describes the <a href="#fig-linked-data-graph">Linked Data Dataset figure</a> in <a href="#data-model" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">8. </bdi>Data Model</a>.</p>
      <p>The image consists of three dashed boxes, each describing a different
        <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-rdf-graph">linked data graph</a>. Each box consists of shapes linked with arrows describing
        the linked data relationships.</p>
      <p>The first box is titled "default graph: &lt;no name&gt;" describes two
        resources: <code>http://example.com/people/alice</code> and <code>http://example.com/people/bob</code>
        (denoting "Alice" and "Bob" respectively), which are
        connected by an arrow labeled <code>schema:knows</code> which describes
        the knows relationship between the two resources. Additionally, the "Alice" resource is related
        to three different literals:</p>
      <dl>
        <dt>Alice</dt>
        <dd>an RDF literal with no datatype or language.</dd>
        <dt>weiblich | de</dt>
        <dd>an language-tagged string with the value "weiblich" and <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-language-tag">language tag</a> "de".</dd>
        <dt>female | en</dt>
        <dd>an language-tagged string with the value "female" and <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-language-tag">language tag</a> "en".</dd>
      </dl>

      <p>The second and third boxes describe two <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-named-graph">named graphs</a>, with the graph names
        "http://example.com/graphs/1" and "http://example.com/graphs/1", respectively.</p>
      <p>The second box consists of two resources:
        <code>http://example.com/people/alice</code> and <code>http://example.com/people/bob</code>
        related by the <code>schema:parent</code> relationship, and names the
        <code>http://example.com/people/bob</code> "Bob".</p>
      <p>The third box consists of two resources, one
        named <code>http://example.com/people/bob</code> and the other unnamed.
        The two resources related to each other using <code>schema:sibling</code> relationship
        with the second named "Mary".</p>
  </section>
</section>

<section class="appendix informative" id="relationship-to-other-linked-data-formats">
  <h2 id="b-relationship-to-other-linked-data-formats"><bdi class="secno">B. </bdi>Relationship to Other Linked Data Formats<a class="self-link" aria-label="§" href="#relationship-to-other-linked-data-formats"></a></h2><p><em>This section is non-normative.</em></p>

  <p>The JSON-LD examples below demonstrate how JSON-LD can be used to
    express semantic data marked up in other linked data formats such as Turtle,
    RDFa, and Microdata. These sections are merely provided as
    evidence that JSON-LD is very flexible in what it can express across different
    Linked Data approaches.</p>

  <section class="informative" id="turtle">
    <h3 id="b-1-turtle"><bdi class="secno">B.1 </bdi>Turtle<a class="self-link" aria-label="§" href="#turtle"></a></h3><p><em>This section is non-normative.</em></p>

    <p>The following are examples of transforming RDF expressed in [<cite><a class="bibref" data-link-type="biblio" href="#bib-turtle" title="RDF 1.1 Turtle">Turtle</a></cite>]
      into JSON-LD.</p>

    <section id="prefix-definitions">
      <h4 id="b-1-1-prefix-definitions"><bdi class="secno">B.1.1 </bdi>Prefix definitions<a class="self-link" aria-label="§" href="#prefix-definitions"></a></h4>

      <p>The JSON-LD context has direct equivalents for the Turtle
        <code>@prefix</code> declaration:</p>

      <div class="example" id="example-154-a-set-of-statements-serialized-in-turtle">
          <div class="marker">
      <a class="self-link" href="#example-154-a-set-of-statements-serialized-in-turtle">Example<bdi> 154</bdi></a><span class="example-title">: A set of statements serialized in Turtle</span>
    </div> <pre data-content-type="text/turtle" data-result-for="The same set of statements serialized in JSON-LD" data-to-rdf="" aria-busy="false"><code class="hljs javascript">@prefix foaf: <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">http:</span>//<span class="hljs-attr">xmlns.com</span>/<span class="hljs-attr">foaf</span>/<span class="hljs-attr">0.1</span>/&gt;</span></span> .

&lt;http:<span class="hljs-comment">//manu.sporny.org/about#manu&gt; a foaf:Person;</span>
  foaf:name <span class="hljs-string">"Manu Sporny"</span>;
  foaf:homepage &lt;http:<span class="hljs-comment">//manu.sporny.org/&gt; .</span></code></pre>
        </div>

      <div class="example" id="example-155-the-same-set-of-statements-serialized-in-json-ld">
          <div class="marker">
      <a class="self-link" href="#example-155-the-same-set-of-statements-serialized-in-json-ld">Example<bdi> 155</bdi></a><span class="example-title">: The same set of statements serialized in JSON-LD</span>
    </div> <pre aria-busy="false"><code class="hljs json">{
  <span class="hljs-attr">"@context"</span>: {
    <span class="hljs-attr">"foaf"</span>: <span class="hljs-string">"http://xmlns.com/foaf/0.1/"</span>
  },
  <span class="hljs-attr">"@id"</span>: <span class="hljs-string">"http://manu.sporny.org/about#manu"</span>,
  <span class="hljs-attr">"@type"</span>: <span class="hljs-string">"foaf:Person"</span>,
  <span class="hljs-attr">"foaf:name"</span>: <span class="hljs-string">"Manu Sporny"</span>,
  <span class="hljs-attr">"foaf:homepage"</span>: { <span class="hljs-attr">"@id"</span>: <span class="hljs-string">"http://manu.sporny.org/"</span> }
}</code></pre>
        </div>
    </section>

    <section id="embedding-0">
      <h4 id="b-1-2-embedding"><bdi class="secno">B.1.2 </bdi>Embedding<a class="self-link" aria-label="§" href="#embedding-0"></a></h4>

      <p>Both [<cite><a class="bibref" data-link-type="biblio" href="#bib-turtle" title="RDF 1.1 Turtle">Turtle</a></cite>] and JSON-LD allow embedding, although [<cite><a class="bibref" data-link-type="biblio" href="#bib-turtle" title="RDF 1.1 Turtle">Turtle</a></cite>] only allows embedding of
        <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node">blank nodes</a>.</p>

      <div class="example" id="example-156-embedding-in-turtle">
          <div class="marker">
      <a class="self-link" href="#example-156-embedding-in-turtle">Example<bdi> 156</bdi></a><span class="example-title">: Embedding in Turtle</span>
    </div> <pre data-content-type="text/turtle" data-to-rdf="" data-result-for="Same embedding example in JSON-LD" aria-busy="false"><code class="hljs css">@<span class="hljs-keyword">prefix</span> foaf: &lt;http://xmlns.com/foaf/<span class="hljs-number">0.1</span>/&gt; .

&lt;http://manu.sporny.org/about#manu&gt;
  a foaf:Person;
  <span class="hljs-selector-tag">foaf</span><span class="hljs-selector-pseudo">:name</span> "<span class="hljs-selector-tag">Manu</span> <span class="hljs-selector-tag">Sporny</span>";
  <span class="hljs-selector-tag">foaf</span><span class="hljs-selector-pseudo">:knows</span> <span class="hljs-selector-attr">[ a foaf:Person; foaf:name "Gregg Kellogg" ]</span> .</code></pre>
        </div>

      <div class="example" id="example-157-same-embedding-example-in-json-ld">
          <div class="marker">
      <a class="self-link" href="#example-157-same-embedding-example-in-json-ld">Example<bdi> 157</bdi></a><span class="example-title">: Same embedding example in JSON-LD</span>
    </div> <pre aria-busy="false"><code class="hljs json">{
  <span class="hljs-attr">"@context"</span>: {
    <span class="hljs-attr">"foaf"</span>: <span class="hljs-string">"http://xmlns.com/foaf/0.1/"</span>
  },
  <span class="hljs-attr">"@id"</span>: <span class="hljs-string">"http://manu.sporny.org/about#manu"</span>,
  <span class="hljs-attr">"@type"</span>: <span class="hljs-string">"foaf:Person"</span>,
  <span class="hljs-attr">"foaf:name"</span>: <span class="hljs-string">"Manu Sporny"</span>,
  <span class="hljs-attr">"foaf:knows"</span>: {
    <span class="hljs-attr">"@type"</span>: <span class="hljs-string">"foaf:Person"</span>,
    <span class="hljs-attr">"foaf:name"</span>: <span class="hljs-string">"Gregg Kellogg"</span>
  }
}</code></pre>
        </div>
    </section>

    <section id="conversion-of-native-data-types">
      <h4 id="b-1-3-conversion-of-native-data-types"><bdi class="secno">B.1.3 </bdi>Conversion of native data types<a class="self-link" aria-label="§" href="#conversion-of-native-data-types"></a></h4>

      <p>In JSON-LD numbers and boolean values are native data types. While [<cite><a class="bibref" data-link-type="biblio" href="#bib-turtle" title="RDF 1.1 Turtle">Turtle</a></cite>]
        has a shorthand syntax to express such values, RDF's abstract syntax requires
        that numbers and boolean values are represented as typed literals. Thus,
        to allow full round-tripping, the JSON-LD 1.1 Processing Algorithms and API specification [<cite><a class="bibref" data-link-type="biblio" href="#bib-json-ld11-api" title="JSON-LD 1.1 Processing Algorithms and API">JSON-LD11-API</a></cite>]
        defines conversion rules between JSON-LD's native data types and RDF's
        counterparts. <a data-link-type="dfn" href="https://tc39.es/ecma262/#sec-terms-and-definitions-number-value">Numbers</a> without fractions are
        converted to <code>xsd:integer</code>-typed literals, numbers with fractions
        to <code>xsd:double</code>-typed literals and the two boolean values
        <code>true</code> and <code>false</code> to a <code>xsd:boolean</code>-typed
        literal. All typed literals are in canonical lexical form.</p>

      <div class="example" id="example-158-json-ld-using-native-data-types-for-numbers-and-boolean-values">
          <div class="marker">
      <a class="self-link" href="#example-158-json-ld-using-native-data-types-for-numbers-and-boolean-values">Example<bdi> 158</bdi></a><span class="example-title">: JSON-LD using native data types for numbers and boolean values</span>
    </div> <pre aria-busy="false"><code class="hljs json">{
  <span class="hljs-attr">"@context"</span>: {
    <span class="hljs-attr">"ex"</span>: <span class="hljs-string">"http://example.com/vocab#"</span>
  },
  <span class="hljs-attr">"@id"</span>: <span class="hljs-string">"http://example.com/"</span>,
  <span class="hljs-attr">"ex:numbers"</span>: [ <span class="hljs-number">14</span>, <span class="hljs-number">2.78</span> ],
  <span class="hljs-attr">"ex:booleans"</span>: [ <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span> ]
}</code></pre>
        </div>

      <div class="example" id="example-159-same-example-in-turtle-using-typed-literals">
          <div class="marker">
      <a class="self-link" href="#example-159-same-example-in-turtle-using-typed-literals">Example<bdi> 159</bdi></a><span class="example-title">: Same example in Turtle using typed literals</span>
    </div> <pre data-content-type="text/turtle" data-result-for="JSON-LD using native data types for numbers and boolean values" data-to-rdf="" aria-busy="false"><code class="hljs css">@<span class="hljs-keyword">prefix</span> ex: &lt;http://example.com/vocab#&gt; .
@prefix xsd: &lt;http://www.w3.org/<span class="hljs-number">2001</span>/XMLSchema#&gt; .

&lt;http://example.com/&gt;
  ex:numbers <span class="hljs-string">"14"</span>^^xsd:integer, <span class="hljs-string">"2.78E0"</span>^^xsd:double ;
  <span class="hljs-selector-tag">ex</span><span class="hljs-selector-pseudo">:booleans</span> "<span class="hljs-selector-tag">true</span>"^^<span class="hljs-selector-tag">xsd</span><span class="hljs-selector-pseudo">:boolean</span>, "<span class="hljs-selector-tag">false</span>"^^<span class="hljs-selector-tag">xsd</span><span class="hljs-selector-pseudo">:boolean</span> .</code></pre>
        </div>

      <div class="note" role="note" id="issue318"><div role="heading" class="note-title marker" id="h-note-48" aria-level="5"><span>Note</span></div><div class="changed">Note that this interpretation differs from [<cite><a class="bibref" data-link-type="biblio" href="#bib-turtle" title="RDF 1.1 Turtle">Turtle</a></cite>],
        in which the literal <code>2.78</code> translates to an <code>xsd:decimal</code>.
        The rationale is that most JSON tools parse numbers with fractions as
        <em>floating point numbers</em>,
        so <code>xsd:double</code> is the most appropriate datatype to render them back in RDF.
      </div></div>

    </section>

    <section id="lists-0">
      <h4 id="b-1-4-lists"><bdi class="secno">B.1.4 </bdi>Lists<a class="self-link" aria-label="§" href="#lists-0"></a></h4>
      <p>Both JSON-LD and [<cite><a class="bibref" data-link-type="biblio" href="#bib-turtle" title="RDF 1.1 Turtle">Turtle</a></cite>] can represent sequential lists of values.</p>

      <div class="example" id="example-160-a-list-of-values-in-turtle">
          <div class="marker">
      <a class="self-link" href="#example-160-a-list-of-values-in-turtle">Example<bdi> 160</bdi></a><span class="example-title">: A list of values in Turtle</span>
    </div> <pre data-content-type="text/turtle" data-to-rdf="" data-result-for="Same example with a list of values in JSON-LD" aria-busy="false"><code class="hljs javascript">@prefix foaf: <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">http:</span>//<span class="hljs-attr">xmlns.com</span>/<span class="hljs-attr">foaf</span>/<span class="hljs-attr">0.1</span>/&gt;</span></span> .

&lt;http:<span class="hljs-comment">//example.org/people#joebob&gt; a foaf:Person;</span>
  foaf:name <span class="hljs-string">"Joe Bob"</span>;
  foaf:nick ( <span class="hljs-string">"joe"</span> <span class="hljs-string">"bob"</span> <span class="hljs-string">"jaybee"</span> ) .</code></pre>
        </div>

      <div class="example" id="example-161-same-example-with-a-list-of-values-in-json-ld">
          <div class="marker">
      <a class="self-link" href="#example-161-same-example-with-a-list-of-values-in-json-ld">Example<bdi> 161</bdi></a><span class="example-title">: Same example with a list of values in JSON-LD</span>
    </div> <pre aria-busy="false"><code class="hljs json">{
  <span class="hljs-attr">"@context"</span>: {
    <span class="hljs-attr">"foaf"</span>: <span class="hljs-string">"http://xmlns.com/foaf/0.1/"</span>
  },
  <span class="hljs-attr">"@id"</span>: <span class="hljs-string">"http://example.org/people#joebob"</span>,
  <span class="hljs-attr">"@type"</span>: <span class="hljs-string">"foaf:Person"</span>,
  <span class="hljs-attr">"foaf:name"</span>: <span class="hljs-string">"Joe Bob"</span>,
  <span class="hljs-attr">"foaf:nick"</span>: {
    <span class="hljs-attr">"@list"</span>: [ <span class="hljs-string">"joe"</span>, <span class="hljs-string">"bob"</span>, <span class="hljs-string">"jaybee"</span> ]
  }
}</code></pre>
        </div>
    </section>
  </section>

  <section class="informative" id="rdfa">
    <h3 id="b-2-rdfa"><bdi class="secno">B.2 </bdi>RDFa<a class="self-link" aria-label="§" href="#rdfa"></a></h3><p><em>This section is non-normative.</em></p>

    <p>The following example describes three people with their respective names and
      homepages in RDFa [<cite><a class="bibref" data-link-type="biblio" href="#bib-rdfa-core" title="RDFa Core 1.1 - Third Edition">RDFA-CORE</a></cite>].</p>

    <div class="example" id="example-162-rdfa-fragment-that-describes-three-people">
          <div class="marker">
      <a class="self-link" href="#example-162-rdfa-fragment-that-describes-three-people">Example<bdi> 162</bdi></a><span class="example-title">: RDFa fragment that describes three people</span>
    </div> <pre class="nohighlight" data-content-type="text/html" data-to-rdf="" data-result-for="Same description in JSON-LD (context shared among node objects)">&lt;div <span class="hl-bold">prefix="foaf: http://xmlns.com/foaf/0.1/"</span>&gt;
   &lt;ul&gt;
      &lt;li <span class="hl-bold">typeof="foaf:Person"</span>&gt;
        &lt;a <span class="hl-bold">property="foaf:homepage" href="http://example.com/bob/"&gt;
          &lt;span property="foaf:name"</span>&gt;Bob&lt;/span&gt;
        &lt;/a&gt;
      &lt;/li&gt;
      &lt;li <span class="hl-bold">typeof="foaf:Person"</span>&gt;
        &lt;a <span class="hl-bold">property="foaf:homepage" href="http://example.com/eve/"&gt;
         &lt;span property="foaf:name"</span>&gt;Eve&lt;/span&gt;
        &lt;/a&gt;
      &lt;/li&gt;
      &lt;li <span class="hl-bold">typeof="foaf:Person"</span>&gt;
        &lt;a <span class="hl-bold">property="foaf:homepage" href="http://example.com/manu/"&gt;
          &lt;span property="foaf:name"</span>&gt;Manu&lt;/span&gt;
        &lt;/a&gt;
      &lt;/li&gt;
   &lt;/ul&gt;
&lt;/div&gt;</pre>
        </div>

    <p>An example JSON-LD implementation using a single <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a> is
      described below.</p>

    <div class="example" id="example-163-same-description-in-json-ld-context-shared-among-node-objects">
          <div class="marker">
      <a class="self-link" href="#example-163-same-description-in-json-ld-context-shared-among-node-objects">Example<bdi> 163</bdi></a><span class="example-title">: Same description in JSON-LD (context shared among node objects)</span>
    </div> <pre aria-busy="false"><code class="hljs json">{
  <span class="hljs-attr">"@context"</span>: {
    <span class="hljs-attr">"foaf"</span>: <span class="hljs-string">"http://xmlns.com/foaf/0.1/"</span>,
    <span class="hljs-attr">"foaf:homepage"</span>: {<span class="hljs-attr">"@type"</span>: <span class="hljs-string">"@id"</span>}
  },
  <span class="hljs-attr">"@graph"</span>: [
    {
      <span class="hljs-attr">"@type"</span>: <span class="hljs-string">"foaf:Person"</span>,
      <span class="hljs-attr">"foaf:homepage"</span>: <span class="hljs-string">"http://example.com/bob/"</span>,
      <span class="hljs-attr">"foaf:name"</span>: <span class="hljs-string">"Bob"</span>
    }, {
      <span class="hljs-attr">"@type"</span>: <span class="hljs-string">"foaf:Person"</span>,
      <span class="hljs-attr">"foaf:homepage"</span>: <span class="hljs-string">"http://example.com/eve/"</span>,
      <span class="hljs-attr">"foaf:name"</span>: <span class="hljs-string">"Eve"</span>
    }, {
      <span class="hljs-attr">"@type"</span>: <span class="hljs-string">"foaf:Person"</span>,
      <span class="hljs-attr">"foaf:homepage"</span>: <span class="hljs-string">"http://example.com/manu/"</span>,
      <span class="hljs-attr">"foaf:name"</span>: <span class="hljs-string">"Manu"</span>
    }
  ]
}</code></pre>
        </div>
  </section>

  <section class="informative" id="microdata">
    <h3 id="b-3-microdata"><bdi class="secno">B.3 </bdi>Microdata<a class="self-link" aria-label="§" href="#microdata"></a></h3><p><em>This section is non-normative.</em></p>

    <p>The HTML Microdata [<cite><a class="bibref" data-link-type="biblio" href="#bib-microdata" title="HTML Microdata">MICRODATA</a></cite>] example below expresses book information as
      a Microdata Work item.</p>

    <div class="example" id="example-164-html-that-describes-a-book-using-microdata">
          <div class="marker">
      <a class="self-link" href="#example-164-html-that-describes-a-book-using-microdata">Example<bdi> 164</bdi></a><span class="example-title">: HTML that describes a book using microdata</span>
    </div> <pre data-content-type="text/html" data-result-for="Same book description in JSON-LD (avoiding contexts)" data-to-rdf="" aria-busy="false"><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dl</span> <span class="hljs-attr">itemscope</span>
    <span class="hljs-attr">itemtype</span>=<span class="hljs-string">"http://purl.org/vocab/frbr/core#Work"</span>
    <span class="hljs-attr">itemid</span>=<span class="hljs-string">"http://purl.oreilly.com/works/45U8QJGZSQKDH8N"</span>&gt;</span>
 <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span>
 <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">cite</span> <span class="hljs-attr">itemprop</span>=<span class="hljs-string">"http://purl.org/dc/elements/1.1/title"</span>&gt;</span>Just a Geek<span class="hljs-tag">&lt;/<span class="hljs-name">cite</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span>
 <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>By<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span>
 <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">itemprop</span>=<span class="hljs-string">"http://purl.org/dc/elements/1.1/creator"</span>&gt;</span>Wil Wheaton<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span>
 <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>Format<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span>
 <span class="hljs-tag">&lt;<span class="hljs-name">dd</span> <span class="hljs-attr">itemprop</span>=<span class="hljs-string">"http://purl.org/vocab/frbr/core#realization"</span>
     <span class="hljs-attr">itemscope</span>
     <span class="hljs-attr">itemtype</span>=<span class="hljs-string">"http://purl.org/vocab/frbr/core#Expression"</span>
     <span class="hljs-attr">itemid</span>=<span class="hljs-string">"http://purl.oreilly.com/products/9780596007683.BOOK"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">itemprop</span>=<span class="hljs-string">"http://purl.org/dc/elements/1.1/type"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"http://purl.oreilly.com/product-types/BOOK"</span>&gt;</span>
  Print
 <span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span>
 <span class="hljs-tag">&lt;<span class="hljs-name">dd</span> <span class="hljs-attr">itemprop</span>=<span class="hljs-string">"http://purl.org/vocab/frbr/core#realization"</span>
     <span class="hljs-attr">itemscope</span>
     <span class="hljs-attr">itemtype</span>=<span class="hljs-string">"http://purl.org/vocab/frbr/core#Expression"</span>
     <span class="hljs-attr">itemid</span>=<span class="hljs-string">"http://purl.oreilly.com/products/9780596802189.EBOOK"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">itemprop</span>=<span class="hljs-string">"http://purl.org/dc/elements/1.1/type"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"http://purl.oreilly.com/product-types/EBOOK"</span>&gt;</span>
  Ebook
 <span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span></code></pre>
        </div>

    <p>Note that the JSON-LD representation of the Microdata information stays
      true to the desires of the Microdata community to avoid contexts and
      instead refer to items by their full <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>.</p>

    <div class="example" id="example-165-same-book-description-in-json-ld-avoiding-contexts">
          <div class="marker">
      <a class="self-link" href="#example-165-same-book-description-in-json-ld-avoiding-contexts">Example<bdi> 165</bdi></a><span class="example-title">: Same book description in JSON-LD (avoiding contexts)</span>
    </div> <pre aria-busy="false"><code class="hljs json">[
  {
    <span class="hljs-attr">"@id"</span>: <span class="hljs-string">"http://purl.oreilly.com/works/45U8QJGZSQKDH8N"</span>,
    <span class="hljs-attr">"@type"</span>: <span class="hljs-string">"http://purl.org/vocab/frbr/core#Work"</span>,
    <span class="hljs-attr">"http://purl.org/dc/elements/1.1/title"</span>: <span class="hljs-string">"Just a Geek"</span>,
    <span class="hljs-attr">"http://purl.org/dc/elements/1.1/creator"</span>: <span class="hljs-string">"Wil Wheaton"</span>,
    <span class="hljs-attr">"http://purl.org/vocab/frbr/core#realization"</span>:
    [
      {<span class="hljs-attr">"@id"</span>: <span class="hljs-string">"http://purl.oreilly.com/products/9780596007683.BOOK"</span>},
      {<span class="hljs-attr">"@id"</span>: <span class="hljs-string">"http://purl.oreilly.com/products/9780596802189.EBOOK"</span>}
    ]
  }, {
    <span class="hljs-attr">"@id"</span>: <span class="hljs-string">"http://purl.oreilly.com/products/9780596007683.BOOK"</span>,
    <span class="hljs-attr">"@type"</span>: <span class="hljs-string">"http://purl.org/vocab/frbr/core#Expression"</span>,
    <span class="hljs-attr">"http://purl.org/dc/elements/1.1/type"</span>: {<span class="hljs-attr">"@id"</span>: <span class="hljs-string">"http://purl.oreilly.com/product-types/BOOK"</span>}
  }, {
    <span class="hljs-attr">"@id"</span>: <span class="hljs-string">"http://purl.oreilly.com/products/9780596802189.EBOOK"</span>,
    <span class="hljs-attr">"@type"</span>: <span class="hljs-string">"http://purl.org/vocab/frbr/core#Expression"</span>,
    <span class="hljs-attr">"http://purl.org/dc/elements/1.1/type"</span>: {<span class="hljs-attr">"@id"</span>: <span class="hljs-string">"http://purl.oreilly.com/product-types/EBOOK"</span>}
  }
]</code></pre>
        </div>
  </section>
</section>

<section class="appendix normative" id="iana-considerations">
  <h2 id="c-iana-considerations"><bdi class="secno">C. </bdi>IANA Considerations<a class="self-link" aria-label="§" href="#iana-considerations"></a></h2>

  <p>This section has been submitted to the Internet Engineering Steering
    Group (IESG) for review, approval, and registration with IANA.</p>

  <h3 id="application-ld-json">application/ld+json<a class="self-link" aria-label="§" href="#iana-considerations"></a></h3>
  <dl>
    <dt>Type name:</dt>
    <dd>application</dd>
    <dt>Subtype name:</dt>
    <dd>ld+json</dd>
    <dt>Required parameters:</dt>
    <dd>N/A</dd>
    <dt>Optional parameters:</dt>
    <dd>
      <dl>
        <dt><code>profile</code></dt>
        <dd>
          <p>A non-empty list of space-separated URIs identifying specific
            constraints or conventions that apply to a JSON-LD document according to [<cite><a class="bibref" data-link-type="biblio" href="#bib-rfc6906" title="The 'profile' Link Relation Type">RFC6906</a></cite>].
            A profile does not change the semantics of the resource representation
            when processed without profile knowledge, so that clients both with
            and without knowledge of a profiled resource can safely use the same
            representation. The <code>profile</code> parameter <em class="rfc2119" title="MAY">MAY</em> be used by
            clients to express their preferences in the content negotiation process.
            If the profile parameter is given, a server <em class="rfc2119" title="SHOULD">SHOULD</em> return a document that
            honors the profiles in the list which it recognizes,
            and <em class="rfc2119" title="MUST">MUST</em> ignore the profiles in the list which it does not recognize.
            It is <em class="rfc2119" title="RECOMMENDED">RECOMMENDED</em> that profile URIs are dereferenceable and provide
            useful documentation at that URI. For more information and background
            please refer to [<cite><a class="bibref" data-link-type="biblio" href="#bib-rfc6906" title="The 'profile' Link Relation Type">RFC6906</a></cite>].</p>
          <p>This specification defines six values for the <code>profile</code> parameter.</p>
          <dl>
            <dt><code>http://www.w3.org/ns/json-ld#expanded</code></dt>
            <dd>To request or specify <a data-lt="expanded document form" href="#dfn-expanded-document-form" class="internalDFN" data-link-type="dfn">expanded JSON-LD document form</a>.</dd>
            <dt><code>http://www.w3.org/ns/json-ld#compacted</code></dt>
            <dd>To request or specify <a data-lt="compacted document form" href="#dfn-compacted-document-form" class="internalDFN" data-link-type="dfn">compacted JSON-LD document form</a>.</dd>
            <dt><code>http://www.w3.org/ns/json-ld#context</code></dt>
            <dd>To request or specify a <a data-lt="context document" href="#dfn-context-document" class="internalDFN" data-link-type="dfn">JSON-LD context document</a>.</dd>
            <dt><code>http://www.w3.org/ns/json-ld#flattened</code></dt>
            <dd>To request or specify <a data-lt="flattened document form" href="#dfn-flattened-document-form" class="internalDFN" data-link-type="dfn">flattened JSON-LD document form</a>.</dd>
            <dt><code>http://www.w3.org/ns/json-ld#frame</code></dt>
            <dd>To request or specify a <a data-lt="frame" data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-framing/#dfn-frame">JSON-LD frame document</a>.</dd>
            <dt><code>http://www.w3.org/ns/json-ld#framed</code></dt>
            <dd>To request or specify <a data-lt="framed document form" href="#dfn-framed-document-form" class="internalDFN" data-link-type="dfn">framed JSON-LD document form</a>.</dd>
          </dl>
          <p>All other URIs starting with <code>http://www.w3.org/ns/json-ld</code>
            are reserved for future use by JSON-LD specifications.</p>
          
          <p>Other specifications may publish additional <code>profile</code> parameter
            URIs with their own defined semantics.
            This includes the ability to associate a file extension with a <code>profile</code> parameter.</p>
          <p>
            When used as a <a href="https://tools.ietf.org/html/rfc4288#section-4.3">media type parameter</a> [<cite><a class="bibref" data-link-type="biblio" href="#bib-rfc4288" title="Media Type Specifications and Registration Procedures">RFC4288</a></cite>]
            in an <a href="https://httpwg.org/specs/rfc7231.html#rfc.section.5.3.2">HTTP Accept header</a> [<cite><a class="bibref" data-link-type="biblio" href="#bib-rfc7231" title="Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content">RFC7231</a></cite>],
            the value of the <code>profile</code> parameter <em class="rfc2119" title="MUST">MUST</em> be enclosed in quotes (<code>"</code>) if it contains
            special characters such as whitespace, which is required when multiple profile URIs are combined.</p>
          <p>When processing the "profile" media type parameter, it is important to
            note that its value contains one or more URIs and not IRIs. In some cases
            it might therefore be necessary to convert between IRIs and URIs as specified in
            <a href="https://tools.ietf.org/html/rfc3986#section-5.1">section 3 Relationship between IRIs and URIs</a>
            of [<cite><a class="bibref" data-link-type="biblio" href="#bib-rfc3987" title="Internationalized Resource Identifiers (IRIs)">RFC3987</a></cite>].</p>
        </dd>
      </dl>
    </dd>
    <dt>Encoding considerations:</dt>
    <dd>See <a href="https://tools.ietf.org/html/rfc8259#section-11">RFC&nbsp;8259, section 11</a>.</dd>
    <dt id="iana-security">Security considerations:</dt>
    <dd>See <a href="https://tools.ietf.org/html/rfc8259#section-12">RFC&nbsp;8259, section 12</a> [<cite><a class="bibref" data-link-type="biblio" href="#bib-rfc8259" title="The JavaScript Object Notation (JSON) Data Interchange Format">RFC8259</a></cite>]
      <p>Since JSON-LD is intended to be a pure data exchange format for
        directed graphs, the serialization <em class="rfc2119" title="SHOULD NOT">SHOULD NOT</em> be passed through a
        code execution mechanism such as JavaScript's <code>eval()</code>
        function to be parsed. An (invalid) document may contain code that,
        when executed, could lead to unexpected side effects compromising
        the security of a system.</p>
      <p>When processing JSON-LD documents, links to remote contexts and frames are
        typically followed automatically, resulting in the transfer of files
        without the explicit request of the user for each one. If remote
        contexts are served by third parties, it may allow them to gather
        usage patterns or similar information leading to privacy concerns.
        Specific implementations, such as the API defined in the
        JSON-LD 1.1 Processing Algorithms and API specification [<cite><a class="bibref" data-link-type="biblio" href="#bib-json-ld11-api" title="JSON-LD 1.1 Processing Algorithms and API">JSON-LD11-API</a></cite>],
        may provide fine-grained mechanisms to control this behavior.</p>
      <p>JSON-LD contexts that are loaded from the Web over non-secure connections,
        such as HTTP, run the risk of being altered by an attacker such that
        they may modify the JSON-LD <a href="#dfn-active-context" class="internalDFN" data-link-type="dfn">active context</a> in a way that
        could compromise security. It is advised that any application that
        depends on a remote context for mission critical purposes vet and
        cache the remote context before allowing the system to use it.</p>
      <p>Given that JSON-LD allows the substitution of long IRIs with short terms,
        JSON-LD documents may expand considerably when processed and, in the worst case,
        the resulting data might consume all of the recipient's resources. Applications
        should treat any data with due skepticism.</p>
      <p>As JSON-LD places no limits on the <abbr title="Internationalized Resource Identifier">IRI</abbr> schemes that may be used,
        and vocabulary-relative IRIs use string concatenation rather than
        <abbr title="Internationalized Resource Identifier">IRI</abbr> resolution, it is possible to construct IRIs that may be
        used maliciously, if dereferenced.</p>
    </dd>
    <dt>Interoperability considerations:</dt>
    <dd>Not Applicable</dd>
    <dt>Published specification:</dt>
    <dd>http://www.w3.org/TR/json-ld</dd>
    <dt>Applications that use this media type:</dt>
    <dd>Any programming environment that requires the exchange of
      directed graphs. Implementations of JSON-LD have been created for
      JavaScript, Python, Ruby, PHP, and C++.
    </dd>
    <dt>Additional information:</dt>
    <dd>
      <dl>
        <dt>Magic number(s):</dt>
        <dd>Not Applicable</dd>
        <dt>File extension(s):</dt>
        <dd>.jsonld</dd>
        <dt>Macintosh file type code(s):</dt>
        <dd>TEXT</dd>
      </dl>
    </dd>
    <dt>Person &amp; email address to contact for further information:</dt>
    <dd>Ivan Herman &lt;ivan@w3.org&gt;</dd>
    <dt>Intended usage:</dt>
    <dd>Common</dd>
    <dt>Restrictions on usage:</dt>
    <dd>N/A</dd>
    <dt>Author(s):</dt>
    <dd>Manu Sporny, Dave Longley, Gregg Kellogg, Markus Lanthaler, Niklas Lindström</dd>
    <dt>Change controller:</dt>
    <dd><abbr title="World Wide Web Consortium">W3C</abbr></dd>
  </dl>

  <p>Fragment identifiers used with <a href="#application-ld-json">application/ld+json</a>
    are treated as in RDF syntaxes, as per
    <a href="https://www.w3.org/TR/rdf11-concepts/#section-fragID">RDF 1.1 Concepts and Abstract Syntax</a>
    [<cite><a class="bibref" data-link-type="biblio" href="#bib-rdf11-concepts" title="RDF 1.1 Concepts and Abstract Syntax">RDF11-CONCEPTS</a></cite>].</p>

  <p>This registration is an update to the original definition
    for <a href="https://www.w3.org/TR/2014/REC-json-ld-20140116/#application-ld-json">application/ld+json</a>
    in [<cite><a class="bibref" data-link-type="biblio" href="#bib-json-ld10" title="JSON-LD 1.0">JSON-LD10</a></cite>].</p>

  <section id="iana-examples" class="informative">
    <h3 id="c-1-examples"><bdi class="secno">C.1 </bdi>Examples<a class="self-link" aria-label="§" href="#iana-examples"></a></h3><p><em>This section is non-normative.</em></p>
    <p>The following examples illustrate different ways in which the profile parameter may be used
      to describe different acceptable responses.</p>

    <div class="example" id="example-166-http-request-with-profile-requesting-an-expanded-document">
          <div class="marker">
      <a class="self-link" href="#example-166-http-request-with-profile-requesting-an-expanded-document">Example<bdi> 166</bdi></a><span class="example-title">: HTTP Request with profile requesting an expanded document</span>
    </div> <pre data-content-type="http" data-ignore="" aria-busy="false"><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/ordinary-json-document.json</span> HTTP/1.1
<span class="hljs-attribute">Host</span>: example.com
<span class="hljs-attribute">Accept</span>: application/ld+json;<span class="hl-bold">profile=http://www.w3.org/ns/json-ld#expanded</span></code></pre>
        </div>
    <p>Requests the server to return the requested resource as JSON-LD
      in <a href="#dfn-expanded-document-form" class="internalDFN" data-link-type="dfn">expanded document form</a>.</p>

    <div class="example" id="example-167-http-request-with-profile-requesting-a-compacted-document">
          <div class="marker">
      <a class="self-link" href="#example-167-http-request-with-profile-requesting-a-compacted-document">Example<bdi> 167</bdi></a><span class="example-title">: HTTP Request with profile requesting a compacted document</span>
    </div> <pre data-content-type="http" data-ignore="" aria-busy="false"><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/ordinary-json-document.json</span> HTTP/1.1
<span class="hljs-attribute">Host</span>: example.com
<span class="hljs-attribute">Accept</span>: application/ld+json;<span class="hl-bold">profile=http://www.w3.org/ns/json-ld#compacted</span></code></pre>
        </div>
    <p>Requests the server to return the requested resource as JSON-LD
      in <a href="#dfn-compacted-document-form" class="internalDFN" data-link-type="dfn">compacted document form</a>.
      As no explicit context resource is specified, the server compacts
      using an application-specific default context.</p>

    <div class="example" id="example-168-http-request-with-profile-requesting-a-compacted-document-with-a-reference-to-a-compaction-context">
          <div class="marker">
      <a class="self-link" href="#example-168-http-request-with-profile-requesting-a-compacted-document-with-a-reference-to-a-compaction-context">Example<bdi> 168</bdi></a><span class="example-title">: HTTP Request with profile requesting a compacted document with a reference to a compaction context</span>
    </div> <pre data-content-type="http" data-ignore="" aria-busy="false"><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/ordinary-json-document.json</span> HTTP/1.1
<span class="hljs-attribute">Host</span>: example.com
<span class="hljs-attribute">Accept</span>: application/ld+json;<span class="hl-bold">profile="http://www.w3.org/ns/json-ld#flattened http://www.w3.org/ns/json-ld#compacted"</span></code></pre>
        </div>
    <p>Requests the server to return the requested resource as JSON-LD
      in both <a href="#dfn-compacted-document-form" class="internalDFN" data-link-type="dfn">compacted document form</a>
      and <a href="#dfn-flattened-document-form" class="internalDFN" data-link-type="dfn">flattened document form</a>.
      Note that as whitespace is used to separate the two URIs, they
      are enclosed in double quotes (<code>"</code>).</p>
  </section>
</section>

<section class="appendix informative preserve" id="open-issues">
  <h2 id="d-open-issues"><bdi class="secno">D. </bdi>Open Issues<a class="self-link" aria-label="§" href="#open-issues"></a></h2><p><em>This section is non-normative.</em></p>
  <p>The following is a list of issues open at the time of publication.</p>
  <div class="issue" id="issue-container-number-108"><div role="heading" class="issue-title marker" id="h-issue-2" aria-level="3"><a href="https://github.com/w3c/json-ld-syntax/issues/108"><span class="issue-number">Issue 108</span></a><span class="issue-label" aria-label="This issue is labelled as defer-future-version, privacy-tracker, and security-tracker.">: Consider context by reference with metadata <a class="respec-gh-label" href="https://github.com/w3c/json-ld-syntax/issues/?q=is%3Aissue+is%3Aopen+label%3A%22defer-future-version%22" style="background-color: rgb(0, 0, 0); color: rgb(255, 255, 255);">defer-future-version</a><a class="respec-gh-label" href="https://github.com/w3c/json-ld-syntax/issues/?q=is%3Aissue+is%3Aopen+label%3A%22privacy-tracker%22" style="background-color: rgb(212, 175, 55); color: rgb(0, 0, 0);">privacy-tracker</a><a class="respec-gh-label" href="https://github.com/w3c/json-ld-syntax/issues/?q=is%3Aissue+is%3Aopen+label%3A%22security-tracker%22" style="background-color: rgb(255, 255, 0); color: rgb(0, 0, 0);">security-tracker</a></span></div><p class="">Consider context by reference with metadata.</p></div>
  <div class="issue" id="issue-container-number-191"><div role="heading" class="issue-title marker" id="h-issue-3" aria-level="3"><a href="https://github.com/w3c/json-ld-syntax/issues/191"><span class="issue-number">Issue 191</span></a><span class="issue-label" aria-label="This issue is labelled as defer-future-version and spec:enhancement.">: Compact IRI expansion support for non-trivial prefix term definitions <a class="respec-gh-label" href="https://github.com/w3c/json-ld-syntax/issues/?q=is%3Aissue+is%3Aopen+label%3A%22defer-future-version%22" style="background-color: rgb(0, 0, 0); color: rgb(255, 255, 255);">defer-future-version</a><a class="respec-gh-label" href="https://github.com/w3c/json-ld-syntax/issues/?q=is%3Aissue+is%3Aopen+label%3A%22spec%3Aenhancement%22" style="background-color: rgb(193, 21, 55); color: rgb(0, 0, 0);">spec:enhancement</a></span></div><p class="">Compact <abbr title="Internationalized Resource Identifier">IRI</abbr> expansion support for non-trivial prefix term definitions.</p></div>
  <div class="issue" id="issue-container-number-280"><div role="heading" class="issue-title marker" id="h-issue-4" aria-level="3"><a href="https://github.com/w3c/json-ld-syntax/issues/280"><span class="issue-number">Issue 280</span></a><span class="issue-label" aria-label="This issue is labelled as defer-future-version.">: language-maps don't allow separate base direction <a class="respec-gh-label" href="https://github.com/w3c/json-ld-syntax/issues/?q=is%3Aissue+is%3Aopen+label%3A%22defer-future-version%22" style="background-color: rgb(0, 0, 0); color: rgb(255, 255, 255);">defer-future-version</a></span></div><p class="">Language-maps don't allow separate base direction.</p></div>
</section>

<section class="appendix informative" id="changes-from-10">
  <h2 id="e-changes-since-1-0-recommendation-of-16-january-2014"><bdi class="secno">E. </bdi>Changes since 1.0 Recommendation of 16 January 2014<a class="self-link" aria-label="§" href="#changes-from-10"></a></h2><p><em>This section is non-normative.</em></p>
  <ul>
    <li>A context may contain a <code>@version</code> <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">entry</a> which is used to set the <a href="#dfn-processing-mode" class="internalDFN" data-link-type="dfn">processing mode</a>.</li>
    <li>An <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a> can now have an
      <code>@context</code> property, which defines a <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a> used for values of
      a <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-property">property</a> identified with such a <a href="#dfn-term" class="internalDFN" data-link-type="dfn">term</a>.</li>
    <li><code>@container</code> values within an <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a> may now
      include <code>@id</code>, <code>@graph</code> and <code>@type</code>, corresponding to <a href="#dfn-id-map" class="internalDFN" data-link-type="dfn">id maps</a> and <a href="#dfn-type-map" class="internalDFN" data-link-type="dfn">type maps</a>.</li>
    <li>An <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a> can now have an
      <code>@nest</code> property, which identifies a term expanding to
      <code>@nest</code> which is used for containing properties using the same
      <code>@nest</code> mapping. When expanding, the values of a property
      expanding to <code>@nest</code> are treated as if they were contained
      within the enclosing <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> directly.</li>
    <li>The JSON syntax has been abstracted into an <a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-api/#dfn-internal-representation">internal representation</a>
      to allow for other serializations that are functionally equivalent
      to JSON.</li>
    <li>Added <a href="#node-identifier-indexing" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">4.6.3 </bdi>Node Identifier Indexing</a> and <a href="#node-type-indexing" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">4.6.4 </bdi>Node Type Indexing</a>.</li>
    <li>Both <a href="#dfn-language-map" class="internalDFN" data-link-type="dfn">language maps</a> and <a href="#dfn-index-map" class="internalDFN" data-link-type="dfn">index maps</a> may legitimately have an <code>@none</code> key, but
      <cite><a href="https://www.w3.org/TR/2014/REC-json-ld-20140116/">JSON-LD 1.0</a></cite> only allowed <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#javascript-string">string</a> keys. This has been updated
      to allow <code>@none</code> keys.</li>
    <li>The value for <code>@container</code> in an <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a>
      can also be an <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a> containing any appropriate container
      keyword along with <code>@set</code> (other than <code>@list</code>).
      This allows a way to ensure that such property values will always
      be expressed in <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a> form.</li>
    <li>In JSON-LD 1.1, terms will be chosen as <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a> prefixes
      when compacting only if
      a <a href="#dfn-simple-term-definition" class="internalDFN" data-link-type="dfn">simple term definition</a> is used where the value ends with a URI <a href="https://tools.ietf.org/html/rfc3986#section-2.2">gen-delim</a> character,
      or if their <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a> contains
      a <code>@prefix</code> <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">entry</a> with the value <code>true</code>. The 1.0 algorithm has
      been updated to only consider terms that map to a value that ends with a URI
      <a href="https://tools.ietf.org/html/rfc3986#section-2.2">gen-delim</a> character.</li>
    <li>Values of properties where the associated <a href="#dfn-term-definition" class="internalDFN" data-link-type="dfn">term definition</a>
      has <code>@container</code> set to <code>@graph</code> are interpreted as
      <a href="#dfn-implicitly-named-graph" class="internalDFN" data-link-type="dfn">implicitly named graphs</a>, where the associated graph name is
      assigned from a new <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node-identifier">blank node identifier</a>. Other combinations
      include <code>["@container", "@id"]</code>, <code>["@container", "@index"]</code> each also
      may include <code>"@set"</code>, which create maps from the
      graph identifier or index value similar to <a href="#dfn-index-map" class="internalDFN" data-link-type="dfn">index maps</a>
      and <a href="#dfn-id-map" class="internalDFN" data-link-type="dfn">id maps</a>.</li>
  </ul>
  <p>Additionally, see <a href="#changes-from-cg" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">F. </bdi>Changes since JSON-LD Community Group Final Report</a>.</p>
</section>

<section class="appendix informative" id="changes-from-cg">
  <h2 id="f-changes-since-json-ld-community-group-final-report"><bdi class="secno">F. </bdi>Changes since JSON-LD Community Group Final Report<a class="self-link" aria-label="§" href="#changes-from-cg"></a></h2><p><em>This section is non-normative.</em></p>
  <ul>
    <li><a data-link-type="dfn" href="https://www.w3.org/TR/rdf-schema/#ch_collectionvocab">Lists</a> may now have items which are themselves <a data-link-type="dfn" href="https://www.w3.org/TR/rdf-schema/#ch_collectionvocab">lists</a>.</li>
    <li>Values of <code>@type</code>, or an alias of <code>@type</code>, may now have their <code>@container</code> set to <code>@set</code>
      to ensure that <code>@type</code> <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">entries</a> are always represented as an array. This
      also allows a term to be defined for <code>@type</code>, where the value <em class="rfc2119" title="MUST">MUST</em> be a <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#ordered-map">map</a>
      with <code>@container</code> set to <code>@set</code>.</li>
    <li>The use of <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-blank-node-identifier">blank node identifiers</a> to label properties is obsolete,
      and may be removed in a future version of JSON-LD, as is the support for <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-generalized-rdf-dataset">generalized RDF Datasets</a>.</li>
    <li>The <a href="#dfn-vocabulary-mapping" class="internalDFN" data-link-type="dfn">vocabulary mapping</a> can be a <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-6.5">relative <abbr title="Internationalized Resource Identifier">IRI</abbr> reference</a>, which is evaluated
      either against an existing default vocabulary, or against the document base.
      This allows vocabulary-relative IRIs, such as the
      keys of <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a>, are expanded or compacted relative
      to the document base.
      (See <a href="#iana-security">Security Considerations</a> in <a href="#iana-considerations" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">C. </bdi>IANA Considerations</a>
        for a discussion on how string vocabulary-relative <abbr title="Internationalized Resource Identifier">IRI</abbr> resolution via concatenation.
      )</li>
    <li>Added support for <code>"@type": "@none"</code> in a <a href="#dfn-term-definition" class="internalDFN" data-link-type="dfn">term definition</a> to prevent value compaction.
      Define the <code>rdf:JSON</code> datatype.</li>
    <li><a href="#dfn-term-definition" class="internalDFN" data-link-type="dfn">Term definitions</a> with keys which are of the form of an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-1.3"><abbr title="Internationalized Resource Identifier">IRI</abbr> reference</a> or a <a href="#dfn-compact-iri" class="internalDFN" data-link-type="dfn">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a> <em class="rfc2119" title="MUST NOT">MUST NOT</em>
      expand to an <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> other than the expansion of the key itself.</li>
    <li>A <a data-link-type="dfn" href="https://www.w3.org/TR/json-ld11-framing/#dfn-frame">frame</a> may also be located within an HTML document, identified
      using type <code>application/ld+json;profile=http://www.w3.org/ns/json-ld#frame</code>.</li>
    <li>Term definitions can now be <a href="#protected-term-definitions">protected</a>,
      to limit the ability of other contexts to override them.</li>
    <li>A <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a> defined in an <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a> may also be used for values
      of <code>@type</code>, which defines a <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a> to use for <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a> including the associated type.</li>
    <li>By default, all contexts are propagated when traversing <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a>, other than
      <a href="#dfn-type-scoped-context" class="internalDFN" data-link-type="dfn">type-scoped contexts</a>. This can be controlled using the <code>@propagate</code>
      <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">entry</a> in a <a href="#dfn-local-context" class="internalDFN" data-link-type="dfn">local context</a>.</li>
    <li>A context may contain an <code>@import</code> <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#map-entry">entry</a> used to reference a remote context
      within a context, allowing <code>JSON-LD 1.1</code> features to be added to contexts originally
      authored for <code>JSON-LD 1.0</code>.</li>
    <li>A <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> may include an <a href="#dfn-included-block" class="internalDFN" data-link-type="dfn">included block</a>,
      which is used to contain a set of <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a> which are treated
      exactly as if they were <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a> defined in an <a data-link-type="dfn" href="https://infra.spec.whatwg.org/#list">array</a> including the containing
      <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a>.
      This allows the use of the object form of a JSON-LD document when there is more
      than one <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a> being defined, and where those <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node objects</a>
      are not embedded as values of the containing <a href="#dfn-node-object" class="internalDFN" data-link-type="dfn">node object</a>.</li>
    <li>The <code>alternate</code> link relation can be used to supply an alternate location for
      retrieving a JSON-LD document when the returned document is not JSON.</li>
    <li><a href="#dfn-value-object" class="internalDFN" data-link-type="dfn">Value objects</a>, and associated <a href="#dfn-context" class="internalDFN" data-link-type="dfn">context</a> and <a href="#dfn-term-definition" class="internalDFN" data-link-type="dfn">term definitions</a> have been updated to 
      support <code>@direction</code> for setting the <a href="#dfn-base-direction" class="internalDFN" data-link-type="dfn">base direction</a> of strings.</li>
    <li>The <a href="#dfn-processing-mode" class="internalDFN" data-link-type="dfn">processing mode</a> is now implicitly <code>json-ld-1.1</code>, unless set
      explicitly to <code>json-ld-1.0</code>.</li>
    <li>Improve notation using <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-2"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>, <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-1.3"><abbr title="Internationalized Resource Identifier">IRI</abbr> reference</a>, and <a data-link-type="dfn" href="https://tools.ietf.org/html/rfc3987#section-6.5">relative <abbr title="Internationalized Resource Identifier">IRI</abbr> reference</a>.</li>
    
    <li>Warn about forward-compatibility issues for terms of the form (<code>"@"1*ALPHA</code>).</li>
    <li>When creating an <code>i18n</code> datatype or <code>rdf:CompoundLiteral</code>, <a data-link-type="dfn" href="https://www.w3.org/TR/rdf11-concepts/#dfn-language-tag">language tags</a> are
      normalized to lower case to improve interoperability between implementations.</li>
  </ul>
</section>
<section class="appendix informative" id="changes-from-cr">
  <h2 id="g-changes-since-candidate-release-of-12-december-2019"><bdi class="secno">G. </bdi>Changes since Candidate Release of 12 December 2019<a class="self-link" aria-label="§" href="#changes-from-cr"></a></h2><p><em>This section is non-normative.</em></p>
  <ul>
    <li>Changed normative definition of the <code>rdf:JSON</code> datatype in <a href="#the-rdf-json-datatype" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">10.2 </bdi>The <code>rdf:JSON</code> Datatype</a>
      to describe a normative canonicalization.
      This is in response to <a href="https://github.com/w3c/json-ld-syntax/issues/323">Issue 323</a>.</li>
    <li>Adding a missing normative definition of the <code>@index</code> keyword used within
      an <a href="#dfn-expanded-term-definition" class="internalDFN" data-link-type="dfn">expanded term definition</a> to <a href="#expanded-term-definition" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">9.15.1 </bdi>Expanded term definition</a>.</li>
    <li>Updated the non-normative definitions of the <code>i18n</code> based datatype in <a href="#the-i18n-namespace" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">10.3 </bdi>The <code>i18n</code> Namespace</a>
      and <code>rdf:CompoundLiteral</code> class in <a href="#the-rdf-compoundliteral-class-and-the-rdf-language-and-rdf-direction-properties" class="sectionRef sec-ref">§&nbsp;<bdi class="secno">10.4 </bdi>The <code>rdf:CompoundLiteral</code> class and the <code>rdf:language</code> and <code>rdf:direction</code> properties</a>
      to normalize language tags to lowercase when generating RDF.</li>
  </ul>
</section>

<section id="ack" class="appendix informative">
    <h2 id="h-acknowledgements"><bdi class="secno">H. </bdi>Acknowledgements<a class="self-link" aria-label="§" href="#ack"></a></h2><p><em>This section is non-normative.</em></p>
    <p>
        The editors would like to specially thank the following individuals for making significant
        contributions to the authoring and editing of this specification:
    </p>

    <ul class="ack">
                <li>Timothy Cole (University of Illinois at Urbana-Champaign)</li>
        <li>Gregory Todd Williams (J. Paul Getty Trust)</li>
        <li>Ivan Herman (<abbr title="World Wide Web Consortium">W3C</abbr> Staff)</li>
        <li>Jeff Mixter (OCLC (Online Computer Library Center, Inc.))</li>
        <li>David Lehn (Digital Bazaar)</li>
        <li>David Newbury (J. Paul Getty Trust)</li>
        <li>Robert Sanderson (J. Paul Getty Trust, chair)</li>
        <li>Harold Solbrig (Johns Hopkins Institute for Clinical and Translational Research)</li>
        <li>Simon Steyskal (WU (Wirschaftsuniversität Wien) - Vienna University of Economics and Business)</li>
        <li>A Soroka (Apache Software Foundation)</li>
        <li>Ruben Taelman (Imec vzw)</li>
        <li>Benjamin Young (Wiley, chair)</li>
    </ul>

    <p>Additionally, the following people were members of the Working Group at the time of publication:</p>

    <ul class="ack">
                <li>Steve Blackmon (Apache Software Foundation)</li>
        <li>Dan Brickley (Google, Inc.)</li>
        <li>Newton Calegari (NIC.br - Brazilian Network Information Center)</li>
        <li>Victor Charpenay (Siemens AG)</li>
        <li>Sebastian Käbisch (Siemens AG)</li>
        <li>Axel Polleres (WU (Wirschaftsuniversität Wien) - Vienna University of Economics and Business)</li>
        <li>Leonard Rosenthol (Adobe)</li>
        <li>Jean-Yves ROSSI (CANTON CONSULTING)</li>
        <li>Antoine Roulin (CANTON CONSULTING)</li>
        <li>Manu Sporny (Digital Bazaar)</li>
        <li>Clément Warnier de Wailly (CANTON CONSULTING)</li>
    </ul>

    <p>
        A large amount of thanks goes out to the <a href="https://www.w3.org/community/json-ld/">JSON-LD Community Group</a> participants who worked through many of the technical issues on the mailing list and the weekly telecons: Chris Webber, David Wood, Drummond Reed, Eleanor Joslin, Fabien Gandon, Herm Fisher, Jamie Pitts, Kim Hamilton Duffy, Niklas Lindström, Paolo Ciccarese, Paul Frazze, Paul Warren, Reto Gmür, Rob Trainer, Ted Thibodeau Jr., and Victor Charpenay.
    </p>

</section>




<section id="references" class="appendix"><h2 id="i-references"><bdi class="secno">I. </bdi>References<a class="self-link" aria-label="§" href="#references"></a></h2><section id="normative-references">
        <h3 id="i-1-normative-references"><bdi class="secno">I.1 </bdi>Normative references<a class="self-link" aria-label="§" href="#normative-references"></a></h3>
      <dl class="bibliography">
        <dt id="bib-bcp47">[BCP47]</dt><dd><a href="https://tools.ietf.org/html/bcp47"><cite>Tags for Identifying Languages</cite></a>. A. Phillips; M. Davis.  IETF. September 2009. IETF Best Current Practice. URL: <a href="https://tools.ietf.org/html/bcp47">https://tools.ietf.org/html/bcp47</a></dd><dt id="bib-dom">[DOM]</dt><dd><a href="https://dom.spec.whatwg.org/"><cite>DOM Standard</cite></a>. Anne van Kesteren.  WHATWG. Living Standard. URL: <a href="https://dom.spec.whatwg.org/">https://dom.spec.whatwg.org/</a></dd><dt id="bib-ecmascript">[ECMASCRIPT]</dt><dd><a href="https://tc39.es/ecma262/"><cite>ECMAScript Language Specification</cite></a>.  Ecma International. URL: <a href="https://tc39.es/ecma262/">https://tc39.es/ecma262/</a></dd><dt id="bib-html">[HTML]</dt><dd><a href="https://html.spec.whatwg.org/multipage/"><cite>HTML Standard</cite></a>. Anne van Kesteren; Domenic Denicola; Ian Hickson; Philip Jägenstedt; Simon Pieters.  WHATWG. Living Standard. URL: <a href="https://html.spec.whatwg.org/multipage/">https://html.spec.whatwg.org/multipage/</a></dd><dt id="bib-iana-uri-schemes">[IANA-URI-SCHEMES]</dt><dd><a href="https://www.iana.org/assignments/uri-schemes/uri-schemes.xhtml"><cite>Uniform Resource Identifier (URI) Schemes</cite></a>.  IANA. URL: <a href="https://www.iana.org/assignments/uri-schemes/uri-schemes.xhtml">https://www.iana.org/assignments/uri-schemes/uri-schemes.xhtml</a></dd><dt id="bib-json">[JSON]</dt><dd><a href="https://tools.ietf.org/html/rfc4627"><cite>The application/json Media Type for JavaScript Object Notation (JSON)</cite></a>. D. Crockford.  IETF. July 2006. Informational. URL: <a href="https://tools.ietf.org/html/rfc4627">https://tools.ietf.org/html/rfc4627</a></dd><dt id="bib-json-ld10">[JSON-LD10]</dt><dd><a href="https://www.w3.org/TR/2014/REC-json-ld-20140116/"><cite>JSON-LD 1.0</cite></a>. Manu Sporny; Gregg Kellogg; Marcus Langhaler.  W3C. 16 January 2014. W3C Recommendation. URL: <a href="https://www.w3.org/TR/2014/REC-json-ld-20140116/">https://www.w3.org/TR/2014/REC-json-ld-20140116/</a></dd><dt id="bib-json-ld11-api">[JSON-LD11-API]</dt><dd><a href="https://www.w3.org/TR/json-ld11-api/"><cite>JSON-LD 1.1 Processing Algorithms and API</cite></a>. Gregg Kellogg; Dave Longley; Pierre-Antoine Champin.  W3C. 5 March 2020. W3C Candidate Recommendation. URL: <a href="https://www.w3.org/TR/json-ld11-api/">https://www.w3.org/TR/json-ld11-api/</a></dd><dt id="bib-json-ld11-framing">[JSON-LD11-FRAMING]</dt><dd><a href="https://www.w3.org/TR/json-ld11-framing/"><cite>JSON-LD 1.1 Framing</cite></a>. Dave Longley; Gregg Kellogg; Pierre-Antoine Champin.  W3C. 5 March 2020. W3C Candidate Recommendation. URL: <a href="https://www.w3.org/TR/json-ld11-framing/">https://www.w3.org/TR/json-ld11-framing/</a></dd><dt id="bib-rdf-schema">[RDF-SCHEMA]</dt><dd><a href="https://www.w3.org/TR/rdf-schema/"><cite>RDF Schema 1.1</cite></a>. Dan Brickley; Ramanathan Guha.  W3C. 25 February 2014. W3C Recommendation. URL: <a href="https://www.w3.org/TR/rdf-schema/">https://www.w3.org/TR/rdf-schema/</a></dd><dt id="bib-rdf11-concepts">[RDF11-CONCEPTS]</dt><dd><a href="https://www.w3.org/TR/rdf11-concepts/"><cite>RDF 1.1 Concepts and Abstract Syntax</cite></a>. Richard Cyganiak; David Wood; Markus Lanthaler.  W3C. 25 February 2014. W3C Recommendation. URL: <a href="https://www.w3.org/TR/rdf11-concepts/">https://www.w3.org/TR/rdf11-concepts/</a></dd><dt id="bib-rdf11-mt">[RDF11-MT]</dt><dd><a href="https://www.w3.org/TR/rdf11-mt/"><cite>RDF 1.1 Semantics</cite></a>. Patrick Hayes; Peter Patel-Schneider.  W3C. 25 February 2014. W3C Recommendation. URL: <a href="https://www.w3.org/TR/rdf11-mt/">https://www.w3.org/TR/rdf11-mt/</a></dd><dt id="bib-rfc2119">[RFC2119]</dt><dd><a href="https://tools.ietf.org/html/rfc2119"><cite>Key words for use in RFCs to Indicate Requirement Levels</cite></a>. S. Bradner.  IETF. March 1997. Best Current Practice. URL: <a href="https://tools.ietf.org/html/rfc2119">https://tools.ietf.org/html/rfc2119</a></dd><dt id="bib-rfc3986">[RFC3986]</dt><dd><a href="https://tools.ietf.org/html/rfc3986"><cite>Uniform Resource Identifier (URI): Generic Syntax</cite></a>. T. Berners-Lee; R. Fielding; L. Masinter.  IETF. January 2005. Internet Standard. URL: <a href="https://tools.ietf.org/html/rfc3986">https://tools.ietf.org/html/rfc3986</a></dd><dt id="bib-rfc3987">[RFC3987]</dt><dd><a href="https://tools.ietf.org/html/rfc3987"><cite>Internationalized Resource Identifiers (IRIs)</cite></a>. M. Duerst; M. Suignard.  IETF. January 2005. Proposed Standard. URL: <a href="https://tools.ietf.org/html/rfc3987">https://tools.ietf.org/html/rfc3987</a></dd><dt id="bib-rfc4288">[RFC4288]</dt><dd><a href="https://tools.ietf.org/html/rfc4288"><cite>Media Type Specifications and Registration Procedures</cite></a>. N. Freed; J. Klensin.  IETF. December 2005. Best Current Practice. URL: <a href="https://tools.ietf.org/html/rfc4288">https://tools.ietf.org/html/rfc4288</a></dd><dt id="bib-rfc5234">[RFC5234]</dt><dd><a href="https://tools.ietf.org/html/rfc5234"><cite>Augmented BNF for Syntax Specifications: ABNF</cite></a>. D. Crocker, Ed.; P. Overell.  IETF. January 2008. Internet Standard. URL: <a href="https://tools.ietf.org/html/rfc5234">https://tools.ietf.org/html/rfc5234</a></dd><dt id="bib-rfc6839">[RFC6839]</dt><dd><a href="https://tools.ietf.org/html/rfc6839"><cite>Additional Media Type Structured Syntax Suffixes</cite></a>. T. Hansen; A. Melnikov.  IETF. January 2013. Informational. URL: <a href="https://tools.ietf.org/html/rfc6839">https://tools.ietf.org/html/rfc6839</a></dd><dt id="bib-rfc6906">[RFC6906]</dt><dd><a href="https://tools.ietf.org/html/rfc6906"><cite>The 'profile' Link Relation Type</cite></a>. E. Wilde.  IETF. March 2013. Informational. URL: <a href="https://tools.ietf.org/html/rfc6906">https://tools.ietf.org/html/rfc6906</a></dd><dt id="bib-rfc7231">[RFC7231]</dt><dd><a href="https://tools.ietf.org/html/rfc7231"><cite>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</cite></a>. R. Fielding, Ed.; J. Reschke, Ed. June 2014. Proposed Standard. URL: <a href="https://tools.ietf.org/html/rfc7231">https://tools.ietf.org/html/rfc7231</a></dd><dt id="bib-rfc8174">[RFC8174]</dt><dd><a href="https://tools.ietf.org/html/rfc8174"><cite>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</cite></a>. B. Leiba.  IETF. May 2017. Best Current Practice. URL: <a href="https://tools.ietf.org/html/rfc8174">https://tools.ietf.org/html/rfc8174</a></dd><dt id="bib-rfc8259">[RFC8259]</dt><dd><a href="https://tools.ietf.org/html/rfc8259"><cite>The JavaScript Object Notation (JSON) Data Interchange Format</cite></a>. T. Bray, Ed..  IETF. December 2017. Internet Standard. URL: <a href="https://tools.ietf.org/html/rfc8259">https://tools.ietf.org/html/rfc8259</a></dd><dt id="bib-rfc8288">[RFC8288]</dt><dd><a href="https://tools.ietf.org/html/rfc8288"><cite>Web Linking</cite></a>. M. Nottingham. October 2017. Proposed Standard. URL: <a href="https://tools.ietf.org/html/rfc8288">https://tools.ietf.org/html/rfc8288</a></dd><dt id="bib-uax9">[UAX9]</dt><dd><a href="https://www.unicode.org/reports/tr9/tr9-41.html"><cite>Unicode Bidirectional Algorithm</cite></a>. Mark Davis; Aharon Lanin; Andrew Glass.  Unicode Consortium. 4 February 2019. Unicode Standard Annex #9. URL: <a href="https://www.unicode.org/reports/tr9/tr9-41.html">https://www.unicode.org/reports/tr9/tr9-41.html</a></dd><dt id="bib-unicode">[UNICODE]</dt><dd><a href="https://www.unicode.org/versions/latest/"><cite>The Unicode Standard</cite></a>.  Unicode Consortium. URL: <a href="https://www.unicode.org/versions/latest/">https://www.unicode.org/versions/latest/</a></dd>
      </dl></section><section id="informative-references">
        <h3 id="i-2-informative-references"><bdi class="secno">I.2 </bdi>Informative references<a class="self-link" aria-label="§" href="#informative-references"></a></h3>
      <dl class="bibliography">
        <dt id="bib-fingerprinting-guidance">[fingerprinting-guidance]</dt><dd><a href="https://www.w3.org/TR/fingerprinting-guidance/"><cite>Mitigating Browser Fingerprinting in Web Specifications</cite></a>. Nick Doty.  W3C. 28 March 2019. W3C Note. URL: <a href="https://www.w3.org/TR/fingerprinting-guidance/">https://www.w3.org/TR/fingerprinting-guidance/</a></dd><dt id="bib-infra">[INFRA]</dt><dd><a href="https://infra.spec.whatwg.org/"><cite>Infra Standard</cite></a>. Anne van Kesteren; Domenic Denicola.  WHATWG. Living Standard. URL: <a href="https://infra.spec.whatwg.org/">https://infra.spec.whatwg.org/</a></dd><dt id="bib-jcs">[JCS]</dt><dd><a href="https://tools.ietf.org/html/draft-rundgren-json-canonicalization-scheme-17"><cite>JSON Canonicalization Scheme (JCS)</cite></a>. A. Rundgren; B. Jordan; S. Erdtman.  Network Working Group. 20 January 2020. Internet-Draft. URL: <a href="https://tools.ietf.org/html/draft-rundgren-json-canonicalization-scheme-17">https://tools.ietf.org/html/draft-rundgren-json-canonicalization-scheme-17</a></dd><dt id="bib-json.api">[JSON.API]</dt><dd><a href="https://jsonapi.org/format/"><cite>JSON API</cite></a>. Steve Klabnik; Yehuda Katz; Dan Gebhardt; Tyler Kellen; Ethan Resnick. 29 May 2015. unofficial. URL: <a href="https://jsonapi.org/format/">https://jsonapi.org/format/</a></dd><dt id="bib-ld-glossary">[ld-glossary]</dt><dd><a href="https://www.w3.org/TR/ld-glossary/"><cite>Linked Data Glossary</cite></a>. Bernadette Hyland; Ghislain Auguste Atemezing; Michael Pendleton; Biplav Srivastava.  W3C. 27 June 2013. W3C Note. URL: <a href="https://www.w3.org/TR/ld-glossary/">https://www.w3.org/TR/ld-glossary/</a></dd><dt id="bib-linked-data">[LINKED-DATA]</dt><dd><a href="https://www.w3.org/DesignIssues/LinkedData.html"><cite>Linked Data Design Issues</cite></a>. Tim Berners-Lee.  W3C. 27 July 2006. W3C-Internal Document. URL: <a href="https://www.w3.org/DesignIssues/LinkedData.html">https://www.w3.org/DesignIssues/LinkedData.html</a></dd><dt id="bib-microdata">[MICRODATA]</dt><dd><a href="https://www.w3.org/TR/microdata/"><cite>HTML Microdata</cite></a>. Charles 'chaals' (McCathie) Nevile; Dan Brickley; Ian Hickson.  W3C. 26 April 2018. W3C Working Draft. URL: <a href="https://www.w3.org/TR/microdata/">https://www.w3.org/TR/microdata/</a></dd><dt id="bib-rdfa-core">[RDFA-CORE]</dt><dd><a href="https://www.w3.org/TR/rdfa-core/"><cite>RDFa Core 1.1 - Third Edition</cite></a>. Ben Adida; Mark Birbeck; Shane McCarron; Ivan Herman et al.  W3C. 17 March 2015. W3C Recommendation. URL: <a href="https://www.w3.org/TR/rdfa-core/">https://www.w3.org/TR/rdfa-core/</a></dd><dt id="bib-rfc4122">[rfc4122]</dt><dd><a href="https://tools.ietf.org/html/rfc4122"><cite>A Universally Unique IDentifier (UUID) URN Namespace</cite></a>. P. Leach; M. Mealling; R. Salz.  IETF. July 2005. Proposed Standard. URL: <a href="https://tools.ietf.org/html/rfc4122">https://tools.ietf.org/html/rfc4122</a></dd><dt id="bib-rfc7049">[RFC7049]</dt><dd><a href="https://tools.ietf.org/html/rfc7049"><cite>Concise Binary Object Representation (CBOR)</cite></a>. C. Bormann; P. Hoffman.  IETF. October 2013. Proposed Standard. URL: <a href="https://tools.ietf.org/html/rfc7049">https://tools.ietf.org/html/rfc7049</a></dd><dt id="bib-rfc7946">[RFC7946]</dt><dd><a href="https://tools.ietf.org/html/rfc7946"><cite>The GeoJSON Format</cite></a>. H. Butler; M. Daly; A. Doyle; S. Gillies; S. Hagen; T. Schaub.  IETF. August 2016. Proposed Standard. URL: <a href="https://tools.ietf.org/html/rfc7946">https://tools.ietf.org/html/rfc7946</a></dd><dt id="bib-sparql11-overview">[SPARQL11-OVERVIEW]</dt><dd><a href="https://www.w3.org/TR/sparql11-overview/"><cite>SPARQL 1.1 Overview</cite></a>. The W3C SPARQL Working Group.  W3C. 21 March 2013. W3C Recommendation. URL: <a href="https://www.w3.org/TR/sparql11-overview/">https://www.w3.org/TR/sparql11-overview/</a></dd><dt id="bib-sri">[SRI]</dt><dd><a href="https://www.w3.org/TR/SRI/"><cite>Subresource Integrity</cite></a>. Devdatta Akhawe; Frederik Braun; Francois Marier; Joel Weinberger.  W3C. 23 June 2016. W3C Recommendation. URL: <a href="https://www.w3.org/TR/SRI/">https://www.w3.org/TR/SRI/</a></dd><dt id="bib-string-meta">[string-meta]</dt><dd><a href="https://www.w3.org/TR/string-meta/"><cite>Strings on the Web: Language and Direction Metadata</cite></a>. Addison Phillips; Richard Ishida.  W3C. 11 June 2019. W3C Working Draft. URL: <a href="https://www.w3.org/TR/string-meta/">https://www.w3.org/TR/string-meta/</a></dd><dt id="bib-trig">[TriG]</dt><dd><a href="https://www.w3.org/TR/trig/"><cite>RDF 1.1 TriG</cite></a>. Gavin Carothers; Andy Seaborne.  W3C. 25 February 2014. W3C Recommendation. URL: <a href="https://www.w3.org/TR/trig/">https://www.w3.org/TR/trig/</a></dd><dt id="bib-turtle">[Turtle]</dt><dd><a href="https://www.w3.org/TR/turtle/"><cite>RDF 1.1 Turtle</cite></a>. Eric Prud'hommeaux; Gavin Carothers.  W3C. 25 February 2014. W3C Recommendation. URL: <a href="https://www.w3.org/TR/turtle/">https://www.w3.org/TR/turtle/</a></dd><dt id="bib-urn">[URN]</dt><dd><a href="https://tools.ietf.org/html/rfc2141"><cite>URN Syntax</cite></a>. R. Moats.  IETF. May 1997. Proposed Standard. URL: <a href="https://tools.ietf.org/html/rfc2141">https://tools.ietf.org/html/rfc2141</a></dd><dt id="bib-webidl">[WEBIDL]</dt><dd><a href="https://heycam.github.io/webidl/"><cite>Web IDL</cite></a>. Boris Zbarsky.  W3C. 15 December 2016. W3C Editor's Draft. URL: <a href="https://heycam.github.io/webidl/">https://heycam.github.io/webidl/</a></dd><dt id="bib-yaml">[YAML]</dt><dd><a href="http://yaml.org/spec/1.2/spec.html"><cite>YAML Ain’t Markup Language (YAML™) Version 1.2</cite></a>. Oren Ben-Kiki; Clark Evans; Ingy döt Net. 1 October 2009. URL: <a href="http://yaml.org/spec/1.2/spec.html">http://yaml.org/spec/1.2/spec.html</a></dd>
      </dl></section></section><p role="navigation" id="back-to-top"><a href="#title"><abbr title="Back to Top">↑</abbr></a></p><script src="https://www.w3.org/scripts/TR/2016/fixup.js"></script></body></html>
    http_version: 
  recorded_at: Tue, 07 Apr 2020 12:11:25 GMT
- request:
    method: get
    uri: https://www.w3.org/TR/2014/REC-json-ld-20140116/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.w3.org
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Tue, 07 Apr 2020 12:11:25 GMT
      Content-Location:
      - Overview.html
      Last-Modified:
      - Mon, 02 Oct 2017 10:49:22 GMT
      Etag:
      - '"3c7e6-55a8e20945080-gzip"'
      Accept-Ranges:
      - bytes
      Cache-Control:
      - max-age=31536000
      Expires:
      - Wed, 07 Apr 2021 12:11:25 GMT
      Vary:
      - Accept-Encoding
      Link:
      - <https://www.w3.org/TR/json-ld/>;rel="canonical", <https://timetravel.mementoweb.org/w3c/timegate/https://www.w3.org/TR/json-ld/>;rel="timegate",
        <https://www.w3.org/TR/json-ld/>;rel="original"
      Access-Control-Allow-Origin:
      - "*"
      Content-Length:
      - '46607'
      Content-Type:
      - text/html; charset=utf-8
      Memento-Datetime:
      - Mon, 02 Oct 2017 10:49:22 GMT
      Strict-Transport-Security:
      - max-age=15552000; includeSubdomains; preload
      Content-Security-Policy:
      - upgrade-insecure-requests
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>
<html lang="en" dir="ltr" typeof="bibo:Document w3p:REC" about="" property="dcterms:language" content="en">
<head>
<title>JSON-LD 1.0</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<style type="text/css">
  .highlight { font-weight: bold; color: #0a3; }
  .comment { color: #999; }
  table, thead, tr, td { padding: 5px; border-width: 1px; border-spacing: 0px; border-style: solid; border-collapse: collapse; }
</style>
<style>
/* --- INLINES --- */
em.rfc2119 {
    text-transform:     lowercase;
    font-variant:       small-caps;
    font-style:         normal;
    color:              #900;
}

h1 acronym, h2 acronym, h3 acronym, h4 acronym, h5 acronym, h6 acronym, a acronym,
h1 abbr, h2 abbr, h3 abbr, h4 abbr, h5 abbr, h6 abbr, a abbr {
    border: none;
}

dfn {
    font-weight:    bold;
}

a.internalDFN {
    color:  inherit;
    border-bottom:  1px solid #99c;
    text-decoration:    none;
}

a.externalDFN {
    color:  inherit;
    border-bottom:  1px dotted #ccc;
    text-decoration:    none;
}

a.bibref {
    text-decoration:    none;
}

cite .bibref {
    font-style: normal;
}

code {
    color:  #ff4500;
}

/* --- TOC --- */
.toc a, .tof a {
    text-decoration:    none;
}

a .secno, a .figno {
    color:  #000;
}

ul.tof, ol.tof {
    list-style: none outside none;
}

.caption {
    margin-top: 0.5em;
    font-style:   italic;
}

/* --- TABLE --- */
table.simple {
    border-spacing: 0;
    border-collapse:    collapse;
    border-bottom:  3px solid #005a9c;
}

.simple th {
    background: #005a9c;
    color:  #fff;
    padding:    3px 5px;
    text-align: left;
}

.simple th[scope="row"] {
    background: inherit;
    color:  inherit;
    border-top: 1px solid #ddd;
}

.simple td {
    padding:    3px 10px;
    border-top: 1px solid #ddd;
}

.simple tr:nth-child(even) {
    background: #f0f6ff;
}

/* --- DL --- */
.section dd > p:first-child {
    margin-top: 0;
}

.section dd > p:last-child {
    margin-bottom: 0;
}

.section dd {
    margin-bottom:  1em;
}

.section dl.attrs dd, .section dl.eldef dd {
    margin-bottom:  0;
}
</style><style>/* --- EXAMPLES --- */
div.example-title {
    min-width: 7.5em;
    color: #b9ab2d;
}
div.example-title span {
    text-transform: uppercase;
}
aside.example, div.example, div.illegal-example {
    padding: 0.5em;
    margin: 1em 0;
    position: relative;
    clear: both;
}
div.illegal-example { color: red }
div.illegal-example p { color: black }
aside.example, div.example {
    padding: .5em;
    border-left-width: .5em;
    border-left-style: solid;
    border-color: #e0cb52;
    background: #fcfaee;
}

aside.example div.example {
    border-left-width: .1em;
    border-color: #999;
    background: #fff;
}
aside.example div.example div.example-title {
    color: #999;
}
</style><style>/* --- ISSUES/NOTES --- */
div.issue-title, div.note-title {
    padding-right:  1em;
    min-width: 7.5em;
    color: #b9ab2d;
}
div.issue-title { color: #e05252; }
div.note-title { color: #2b2; }
div.issue-title span, div.note-title span {
    text-transform: uppercase;
}
div.note, div.issue {
    margin-top: 1em;
    margin-bottom: 1em;
}
.note > p:first-child, .issue > p:first-child { margin-top: 0 }
.issue, .note {
    padding: .5em;
    border-left-width: .5em;
    border-left-style: solid;
}
div.issue, div.note {
    padding: 1em 1.2em 0.5em;
    margin: 1em 0;
    position: relative;
    clear: both;
}
span.note, span.issue { padding: .1em .5em .15em; }

.issue {
    border-color: #e05252;
    background: #fbe9e9;
}
.note {
    border-color: #52e052;
    background: #e9fbe9;
}


</style><link rel="stylesheet" href="https://www.w3.org/StyleSheets/TR/W3C-REC"><!--[if lt IE 9]><script src='https://www.w3.org/2008/site/js/html5shiv.js'></script><![endif]--><!--[if lt IE 9]><script src='https://www.w3.org/2008/site/js/html5shiv.js'></script><![endif]--></head>

<body class="h-entry" role="document" id="respecDocument"><div class="head" role="contentinfo" id="respecHeader">
  <p>

      <a href="http://www.w3.org/"><img width="72" height="48" src="https://www.w3.org/Icons/w3c_home" alt="W3C"></a>

  </p>
  <h1 class="title p-name" id="title" property="dcterms:title">JSON-LD 1.0</h1>

    <h2 property="bibo:subtitle" id="subtitle">A JSON-based Serialization for Linked Data</h2>

  <h2 property="dcterms:issued" datatype="xsd:dateTime" content="2014-01-15T23:00:00.000Z" id="w3c-recommendation-16-january-2014"><abbr title="World Wide Web Consortium">W3C</abbr> Recommendation <time class="dt-published" datetime="2014-01-16">16 January 2014</time></h2>
  <dl>

      <dt>This version:</dt>
      <dd><a class="u-url" href="http://www.w3.org/TR/2014/REC-json-ld-20140116/">http://www.w3.org/TR/2014/REC-json-ld-20140116/</a></dd>
      <dt>Latest published version:</dt>
      <dd><a href="http://www.w3.org/TR/json-ld/">http://www.w3.org/TR/json-ld/</a></dd>






      <dt>Previous version:</dt>
      <dd><a rel="dcterms:replaces" href="http://www.w3.org/TR/2013/PR-json-ld-20131105/">http://www.w3.org/TR/2013/PR-json-ld-20131105/</a></dd>


    <dt>Editors:</dt>
    <dd class="p-author h-card vcard" rel="bibo:editor" inlist=""><span typeof="foaf:Person"><a class="u-url url p-name fn" rel="foaf:homepage" property="foaf:name" content="Manu Sporny" href="http://manu.sporny.org/">Manu Sporny</a>, <a rel="foaf:workplaceHomepage" class="p-org org h-org h-card" href="http://digitalbazaar.com/">Digital Bazaar</a></span>
</dd>
<dd class="p-author h-card vcard" rel="bibo:editor" inlist=""><span typeof="foaf:Person"><a class="u-url url p-name fn" rel="foaf:homepage" property="foaf:name" content="Gregg Kellogg" href="http://greggkellogg.net/">Gregg Kellogg</a>, <a rel="foaf:workplaceHomepage" class="p-org org h-org h-card" href="http://kellogg-assoc.com/">Kellogg Associates</a></span>
</dd>
<dd class="p-author h-card vcard" rel="bibo:editor" inlist=""><span typeof="foaf:Person"><a class="u-url url p-name fn" rel="foaf:homepage" property="foaf:name" content="Markus Lanthaler" href="http://www.markus-lanthaler.com/">Markus Lanthaler</a>, <a rel="foaf:workplaceHomepage" class="p-org org h-org h-card" href="http://www.tugraz.at/">Graz University of Technology</a></span>
</dd>


      <dt>Authors:</dt>
      <dd class="p-author h-card vcard" rel="dcterms:contributor"><span typeof="foaf:Person"><a class="u-url url p-name fn" rel="foaf:homepage" property="foaf:name" content="Manu Sporny" href="http://digitalbazaar.com/">Manu Sporny</a>, <a rel="foaf:workplaceHomepage" class="p-org org h-org h-card" href="http://digitalbazaar.com/">Digital Bazaar</a></span>
</dd>
<dd class="p-author h-card vcard" rel="dcterms:contributor"><span typeof="foaf:Person"><a class="u-url url p-name fn" rel="foaf:homepage" property="foaf:name" content="Dave Longley" href="http://digitalbazaar.com/">Dave Longley</a>, <a rel="foaf:workplaceHomepage" class="p-org org h-org h-card" href="http://digitalbazaar.com/">Digital Bazaar</a></span>
</dd>
<dd class="p-author h-card vcard" rel="dcterms:contributor"><span typeof="foaf:Person"><a class="u-url url p-name fn" rel="foaf:homepage" property="foaf:name" content="Gregg Kellogg" href="http://greggkellogg.net/">Gregg Kellogg</a>, <a rel="foaf:workplaceHomepage" class="p-org org h-org h-card" href="http://kellogg-assoc.com/">Kellogg Associates</a></span>
</dd>
<dd class="p-author h-card vcard" rel="dcterms:contributor"><span typeof="foaf:Person"><a class="u-url url p-name fn" rel="foaf:homepage" property="foaf:name" content="Markus Lanthaler" href="http://www.markus-lanthaler.com/">Markus Lanthaler</a>, <a rel="foaf:workplaceHomepage" class="p-org org h-org h-card" href="http://www.tugraz.at/">Graz University of Technology</a></span>
</dd>
<dd class="p-author h-card vcard" rel="dcterms:contributor"><span typeof="foaf:Person"><a class="u-url url p-name fn" rel="foaf:homepage" property="foaf:name" content="Niklas Lindström" href="http://neverspace.net/">Niklas Lindström</a></span>
</dd>



  </dl>

    <p>
      Please refer to the <a href="http://www.w3.org/2014/json-ld-errata"><strong>errata</strong></a> for this document, which may include some normative corrections.
    </p>


    <p>

        This document is also available in this non-normative format:

      <a rel="alternate" href="diff-20131105.html">diff to previous version</a>
    </p>


    <p>
      The English version of this specification is the only normative version. Non-normative
      <a href="http://www.w3.org/Consortium/Translation/">translations</a> may also be available.
    </p>



      <p class="copyright">
        <a href="http://www.w3.org/Consortium/Legal/ipr-notice#Copyright">Copyright</a> ©
        2010-2014

        <a href="http://www.w3.org/"><abbr title="World Wide Web Consortium">W3C</abbr></a><sup>®</sup>
        (<a href="http://www.csail.mit.edu/"><abbr title="Massachusetts Institute of Technology">MIT</abbr></a>,
        <a href="http://www.ercim.eu/"><abbr title="European Research Consortium for Informatics and Mathematics">ERCIM</abbr></a>,
        <a href="http://www.keio.ac.jp/">Keio</a>, <a href="http://ev.buaa.edu.cn/">Beihang</a>), All Rights Reserved.
        <abbr title="World Wide Web Consortium">W3C</abbr> <a href="http://www.w3.org/Consortium/Legal/ipr-notice#Legal_Disclaimer">liability</a>,
        <a href="http://www.w3.org/Consortium/Legal/ipr-notice#W3C_Trademarks">trademark</a> and
        <a href="http://www.w3.org/Consortium/Legal/copyright-documents">document use</a> rules apply.
      </p>


  <hr>
</div>
<section id="abstract" class="introductory" property="dcterms:abstract" datatype="" typeof="bibo:Chapter" resource="#abstract" rel="bibo:chapter"><h2 aria-level="1" role="heading" id="h2_abstract">Abstract</h2>
  <p>JSON is a useful data serialization and messaging format.
    This specification defines JSON-LD, a JSON-based format to serialize
    Linked Data. The syntax is designed to easily integrate into deployed
    systems that already use JSON, and provides a smooth upgrade path from
    JSON to JSON-LD.
    It is primarily intended to be a way to use Linked Data in Web-based
    programming environments, to build interoperable Web services, and to
    store Linked Data in JSON-based storage engines.</p>
</section><section id="sotd" class="introductory" typeof="bibo:Chapter" resource="#sotd" rel="bibo:chapter"><h2 aria-level="1" role="heading" id="h2_sotd">Status of This Document</h2>



        <p>
          <em>This section describes the status of this document at the time of its publication. Other
          documents may supersede this document. A list of current <abbr title="World Wide Web Consortium">W3C</abbr> publications and the latest revision
          of this technical report can be found in the <a href="http://www.w3.org/TR/"><abbr title="World Wide Web Consortium">W3C</abbr> technical reports
          index</a> at http://www.w3.org/TR/.</em>
        </p>

  <p>This document has been reviewed by <abbr title="World Wide Web Consortium">W3C</abbr> Members, by software developers,
    and by other <abbr title="World Wide Web Consortium">W3C</abbr> groups and interested parties, and is endorsed by the
    Director as a <abbr title="World Wide Web Consortium">W3C</abbr> Recommendation. It is a stable document and may be
    used as reference material or cited from another document. <abbr title="World Wide Web Consortium">W3C</abbr>'s role in
    making the Recommendation is to draw attention to the specification and
    to promote its widespread deployment. This enhances the functionality
    and interoperability of the Web.</p>

  <p>This specification has been developed by the JSON for Linking Data Community Group
    before it has been transferred to the RDF Working Group for review,
    improvement, and publication along the Recommendation track.
    The document contains small editorial changes arising from comments received
    during the Proposed Recommendation review; see the
    <a href="diff-20131105.html">diff-marked version</a> for details.</p>

  <p>There are several independent interoperable implementations of this specification. An
    <a href="https://dvcs.w3.org/hg/json-ld/raw-file/default/test-suite/reports/cr-20131022.html">implementation report</a>
    as of October&nbsp;2013 is available.</p>

        <p>
          This document was published by the <a href="http://www.w3.org/2011/rdf-wg/">RDF Working Group</a> as a Recommendation.


          If you wish to make comments regarding this document, please send them to
          <a href="mailto:public-rdf-comments@w3.org">public-rdf-comments@w3.org</a>
          (<a href="mailto:public-rdf-comments-request@w3.org?subject=subscribe">subscribe</a>,
          <a href="http://lists.w3.org/Archives/Public/public-rdf-comments/">archives</a>).




            All comments are welcome.</p>



        <p>

            This document was produced by a group operating under the

                <a id="sotd_patent" about="" rel="w3p:patentRules" href="http://www.w3.org/Consortium/Patent-Policy-20040205/">5 February 2004 <abbr title="World Wide Web Consortium">W3C</abbr> Patent Policy</a>.





              <abbr title="World Wide Web Consortium">W3C</abbr> maintains a <a href="http://www.w3.org/2004/01/pp-impl/46168/status" rel="disclosure">public list of any patent disclosures</a>

            made in connection with the deliverables of the group; that page also includes instructions for
            disclosing a patent. An individual who has actual knowledge of a patent which the individual believes contains
            <a href="http://www.w3.org/Consortium/Patent-Policy-20040205/#def-essential">Essential Claim(s)</a> must disclose the
            information in accordance with <a href="http://www.w3.org/Consortium/Patent-Policy-20040205/#sec-Disclosure">section
            6 of the <abbr title="World Wide Web Consortium">W3C</abbr> Patent Policy</a>.


        </p>




</section><section id="toc"><h2 class="introductory" aria-level="1" role="heading" id="h2_toc">Table of Contents</h2><ul class="toc" role="directory" id="respecContents"><li class="tocline"><a href="#introduction" class="tocxref"><span class="secno">1. </span>Introduction</a><ul class="toc"><li class="tocline"><a href="#how-to-read-this-document" class="tocxref"><span class="secno">1.1 </span>How to Read this Document</a></li></ul></li><li class="tocline"><a href="#design-goals-and-rationale" class="tocxref"><span class="secno">2. </span>Design Goals and Rationale</a></li><li class="tocline"><a href="#terminology" class="tocxref"><span class="secno">3. </span>Terminology</a><ul class="toc"><li class="tocline"><a href="#general-terminology" class="tocxref"><span class="secno">3.1 </span>General Terminology</a></li><li class="tocline"><a href="#data-model-overview" class="tocxref"><span class="secno">3.2 </span>Data Model Overview</a></li><li class="tocline"><a href="#syntax-tokens-and-keywords" class="tocxref"><span class="secno">3.3 </span>Syntax Tokens and Keywords</a></li></ul></li><li class="tocline"><a href="#conformance" class="tocxref"><span class="secno">4. </span>Conformance</a></li><li class="tocline"><a href="#basic-concepts" class="tocxref"><span class="secno">5. </span>Basic Concepts</a><ul class="toc"><li class="tocline"><a href="#the-context" class="tocxref"><span class="secno">5.1 </span>The Context</a></li><li class="tocline"><a href="#iris" class="tocxref"><span class="secno">5.2 </span>IRIs</a></li><li class="tocline"><a href="#node-identifiers" class="tocxref"><span class="secno">5.3 </span>Node Identifiers</a></li><li class="tocline"><a href="#specifying-the-type" class="tocxref"><span class="secno">5.4 </span>Specifying the Type</a></li></ul></li><li class="tocline"><a href="#advanced-concepts" class="tocxref"><span class="secno">6. </span>Advanced Concepts</a><ul class="toc"><li class="tocline"><a href="#base-iri" class="tocxref"><span class="secno">6.1 </span>Base <abbr title="Internationalized Resource Identifier">IRI</abbr></a></li><li class="tocline"><a href="#default-vocabulary" class="tocxref"><span class="secno">6.2 </span>Default Vocabulary</a></li><li class="tocline"><a href="#compact-iris" class="tocxref"><span class="secno">6.3 </span>Compact IRIs</a></li><li class="tocline"><a href="#typed-values" class="tocxref"><span class="secno">6.4 </span>Typed Values</a></li><li class="tocline"><a href="#type-coercion" class="tocxref"><span class="secno">6.5 </span>Type Coercion</a></li><li class="tocline"><a href="#embedding" class="tocxref"><span class="secno">6.6 </span>Embedding</a></li><li class="tocline"><a href="#advanced-context-usage" class="tocxref"><span class="secno">6.7 </span>Advanced Context Usage</a></li><li class="tocline"><a href="#interpreting-json-as-json-ld" class="tocxref"><span class="secno">6.8 </span>Interpreting JSON as JSON-LD</a></li><li class="tocline"><a href="#string-internationalization" class="tocxref"><span class="secno">6.9 </span>String Internationalization</a></li><li class="tocline"><a href="#iri-expansion-within-a-context" class="tocxref"><span class="secno">6.10 </span><abbr title="Internationalized Resource Identifier">IRI</abbr> Expansion within a Context</a></li><li class="tocline"><a href="#sets-and-lists" class="tocxref"><span class="secno">6.11 </span>Sets and Lists</a></li><li class="tocline"><a href="#reverse-properties" class="tocxref"><span class="secno">6.12 </span>Reverse Properties</a></li><li class="tocline"><a href="#named-graphs" class="tocxref"><span class="secno">6.13 </span>Named Graphs</a></li><li class="tocline"><a href="#identifying-blank-nodes" class="tocxref"><span class="secno">6.14 </span>Identifying Blank Nodes</a></li><li class="tocline"><a href="#aliasing-keywords" class="tocxref"><span class="secno">6.15 </span>Aliasing Keywords</a></li><li class="tocline"><a href="#data-indexing" class="tocxref"><span class="secno">6.16 </span>Data Indexing</a></li><li class="tocline"><a href="#expanded-document-form" class="tocxref"><span class="secno">6.17 </span>Expanded Document Form</a></li><li class="tocline"><a href="#compacted-document-form" class="tocxref"><span class="secno">6.18 </span>Compacted Document Form</a></li><li class="tocline"><a href="#flattened-document-form" class="tocxref"><span class="secno">6.19 </span>Flattened Document Form</a></li><li class="tocline"><a href="#embedding-json-ld-in-html-documents" class="tocxref"><span class="secno">6.20 </span>Embedding JSON-LD in HTML Documents</a></li></ul></li><li class="tocline"><a href="#data-model" class="tocxref"><span class="secno">7. </span>Data Model</a></li><li class="tocline"><a href="#json-ld-grammar" class="tocxref"><span class="secno">8. </span>JSON-LD Grammar</a><ul class="toc"><li class="tocline"><a href="#terms" class="tocxref"><span class="secno">8.1 </span>Terms</a></li><li class="tocline"><a href="#node-objects" class="tocxref"><span class="secno">8.2 </span>Node Objects</a></li><li class="tocline"><a href="#value-objects" class="tocxref"><span class="secno">8.3 </span>Value Objects</a></li><li class="tocline"><a href="#lists-and-sets" class="tocxref"><span class="secno">8.4 </span>Lists and Sets</a></li><li class="tocline"><a href="#language-maps" class="tocxref"><span class="secno">8.5 </span>Language Maps</a></li><li class="tocline"><a href="#index-maps" class="tocxref"><span class="secno">8.6 </span>Index Maps</a></li><li class="tocline"><a href="#context-definitions" class="tocxref"><span class="secno">8.7 </span>Context Definitions</a></li></ul></li><li class="tocline"><a href="#relationship-to-rdf" class="tocxref"><span class="secno">9. </span>Relationship to RDF</a><ul class="toc"><li class="tocline"><a href="#serializing-deserializing-rdf" class="tocxref"><span class="secno">9.1 </span>Serializing/Deserializing RDF</a></li></ul></li><li class="tocline"><a href="#relationship-to-other-linked-data-formats" class="tocxref"><span class="secno">A. </span>Relationship to Other Linked Data Formats</a><ul class="toc"><li class="tocline"><a href="#turtle" class="tocxref"><span class="secno">A.1 </span>Turtle</a></li><li class="tocline"><a href="#rdfa" class="tocxref"><span class="secno">A.2 </span>RDFa</a></li><li class="tocline"><a href="#microformats" class="tocxref"><span class="secno">A.3 </span>Microformats</a></li><li class="tocline"><a href="#microdata" class="tocxref"><span class="secno">A.4 </span>Microdata</a></li></ul></li><li class="tocline"><a href="#iana-considerations" class="tocxref"><span class="secno">B. </span>IANA Considerations</a></li><li class="tocline"><a href="#acknowledgements" class="tocxref"><span class="secno">C. </span>Acknowledgements</a></li><li class="tocline"><a href="#references" class="tocxref"><span class="secno">D. </span>References</a><ul class="toc"><li class="tocline"><a href="#normative-references" class="tocxref"><span class="secno">D.1 </span>Normative references</a></li><li class="tocline"><a href="#informative-references" class="tocxref"><span class="secno">D.2 </span>Informative references</a></li></ul></li></ul></section>



<section class="informative" id="introduction">
  <!--OddPage--><h2 aria-level="1" role="heading" id="h2_introduction"><span class="secno">1. </span>Introduction</h2><p><em>This section is non-normative.</em></p>

  <p>Linked Data [<cite><a class="bibref" href="#bib-LINKED-DATA">LINKED-DATA</a></cite>] is a way to create a network of
   standards-based machine interpretable data across different documents and
   Web sites. It allows an application to start at one piece of Linked Data,
   and follow embedded links to other pieces of Linked Data that are hosted on
   different sites across the Web.</p>

  <p>JSON-LD is a lightweight syntax to serialize Linked Data in
    JSON [<cite><a class="bibref" href="#bib-RFC4627">RFC4627</a></cite>]. Its design allows existing JSON to be interpreted as
    Linked Data with minimal changes. JSON-LD is primarily intended to be a
    way to use Linked Data in Web-based programming environments, to build
    interoperable Web services, and to store Linked Data in JSON-based storage engines. Since
    JSON-LD is 100% compatible with JSON, the large number of JSON parsers and libraries
    available today can be reused. In addition to all the features JSON provides,
    JSON-LD introduces:</p>

  <ul>
    <li>a universal identifier mechanism for <a class="tref internalDFN" title="json-object" href="#dfn-json-object">JSON objects</a>
      via the use of <a class="tref internalDFN" title="iri" href="#dfn-iri">IRIs</a>,</li>
    <li>a way to disambiguate keys shared among different JSON documents by mapping
      them to <a class="tref internalDFN" title="iri" href="#dfn-iri">IRIs</a> via a <a class="tref internalDFN" title="context" href="#dfn-context">context</a>,</li>
    <li>a mechanism in which a value in a <a class="tref internalDFN" title="json-object" href="#dfn-json-object">JSON object</a> may refer
      to a <a class="tref internalDFN" title="json-object" href="#dfn-json-object">JSON object</a> on a different site on the Web,</li>
    <li>the ability to annotate <a class="tref internalDFN" title="string" href="#dfn-string">strings</a> with their language,</li>
    <li>a way to associate datatypes with values such as dates and times,</li>
    <li>and a facility to express one or more directed graphs, such as a social
      network, in a single document.</li>
  </ul>

  <p>
   JSON-LD is designed to be usable directly as JSON, with no knowledge of RDF
   [<cite><a class="bibref" href="#bib-RDF11-CONCEPTS">RDF11-CONCEPTS</a></cite>]. It is also designed to be usable as RDF, if desired, for
   use with other Linked Data technologies like SPARQL. Developers who
   require any of the facilities listed above or need to serialize an RDF Graph
   or RDF Dataset in a JSON-based syntax will find JSON-LD of interest. People
   intending to use JSON-LD with RDF tools will find it can be used as another
   RDF syntax, like Turtle [<cite><a class="bibref" href="#bib-TURTLE">TURTLE</a></cite>]. Complete details of how JSON-LD relates
   to RDF are in section <a href="#relationship-to-rdf" class="sec-ref"><span class="secno">9.</span> <span class="sec-title">Relationship to RDF</span></a>.
  </p>

  <p>
    The syntax is designed to not disturb already
   deployed systems running on JSON, but provide a smooth upgrade path from
   JSON to JSON-LD. Since the shape of such data varies wildly, JSON-LD
   features mechanisms to reshape documents into a deterministic structure
   which simplifies their processing.</p>

  <section class="informative" id="how-to-read-this-document">
    <h3 aria-level="2" role="heading" id="h3_how-to-read-this-document"><span class="secno">1.1 </span>How to Read this Document</h3><p><em>This section is non-normative.</em></p>

    <p>This document is a detailed specification for a serialization of Linked
      Data in JSON. The document is primarily intended for the following audiences:</p>

    <ul>
      <li>Software developers who want to encode Linked Data in a variety of
        programming languages that can use JSON</li>
      <li>Software developers who want to convert existing JSON to JSON-LD</li>
      <li>Software developers who want to understand the design decisions and
        language syntax for JSON-LD</li>
      <li>Software developers who want to implement processors and APIs for
        JSON-LD</li>
      <li>Software developers who want to generate or consume Linked Data,
        an RDF graph, or an RDF Dataset in a JSON syntax</li>
    </ul>

    <p>A companion document, the JSON-LD Processing Algorithms and API specification
      [<cite><a class="bibref" href="#bib-JSON-LD-API">JSON-LD-API</a></cite>], specifies how to work with JSON-LD at a higher level by
      providing a standard library interface for common JSON-LD operations.</p>

    <p>To understand the basics in this specification you must first be familiar with
      JSON, which is detailed in [<cite><a class="bibref" href="#bib-RFC4627">RFC4627</a></cite>].</p>

    <p>This document almost exclusively uses the term <abbr title="Internationalized Resource Identifier">IRI</abbr>
    (<a href="http://www.w3.org/TR/ld-glossary/#internationalized-resource-identifier">Internationalized Resource Indicator</a>)
    when discussing hyperlinks. Many Web developers are more familiar with the
    URL (<a href="http://www.w3.org/TR/ld-glossary/#uniform-resource-locator">Uniform Resource Locator</a>)
    terminology. The document also uses, albeit rarely, the URI
    (<a href="http://www.w3.org/TR/ld-glossary/#uniform-resource-identifier">Uniform Resource Indicator</a>)
    terminology. While these terms are often used interchangeably among
    technical communities, they do have important distinctions from one
    another and the specification goes to great lengths to try and use the
    proper terminology at all times.
    </p>
  </section>
</section>

<section class="informative" id="design-goals-and-rationale">
  <!--OddPage--><h2 aria-level="1" role="heading" id="h2_design-goals-and-rationale"><span class="secno">2. </span>Design Goals and Rationale</h2><p><em>This section is non-normative.</em></p>

  <p>JSON-LD satisfies the following design goals:</p>

  <dl>
   <dt>Simplicity</dt>
   <dd>No extra processors or software libraries are necessary to use JSON-LD
     in its most basic form. The language provides developers with a very easy
     learning curve. Developers only need to know JSON and two
     <a class="tref internalDFN" title="keyword" href="#dfn-keyword">keywords</a> (<code>@context</code>
     and <code>@id</code>) to use the basic functionality in JSON-LD.</dd>
   <dt>Compatibility</dt>
   <dd>A JSON-LD document is always a valid JSON document. This ensures that
    all of the standard JSON libraries work seamlessly with JSON-LD documents.</dd>
   <dt>Expressiveness</dt>
   <dd>The syntax serializes directed graphs. This ensures that almost
    every real world data model can be expressed.</dd>
   <dt>Terseness</dt>
   <dd>The JSON-LD syntax is very terse and human readable, requiring as
    little effort as possible from the developer.</dd>
   <dt>Zero Edits, most of the time</dt>
   <dd>JSON-LD ensures a smooth and simple transition from existing
     JSON-based systems. In many cases,
     zero edits to the JSON document and the addition of one line to the HTTP response
     should suffice (see <a class="sectionRef sec-ref" href="#interpreting-json-as-json-ld">section 6.8 Interpreting JSON as JSON-LD</a>).
     This allows organizations that have
     already deployed large JSON-based infrastructure to use JSON-LD's features
     in a way that is not disruptive to their day-to-day operations and is
     transparent to their current customers. However, there are times where
     mapping JSON to a graph representation is a complex undertaking.
     In these instances, rather than extending JSON-LD to support
     esoteric use cases, we chose not to support the use case. While Zero
     Edits is a design goal, it is not always possible without adding
     great complexity to the language. JSON-LD focuses on simplicity when
     possible.</dd>
    <dt>Usable as RDF</dt>
    <dd>JSON-LD is usable by developers as
      idiomatic JSON, with no need to understand RDF [<cite><a class="bibref" href="#bib-RDF11-CONCEPTS">RDF11-CONCEPTS</a></cite>].
      JSON-LD is also usable as RDF, so people intending to use JSON-LD
      with RDF tools will find it can be used like any other RDF syntax.
      Complete details of how JSON-LD relates to RDF are in section
      <a href="#relationship-to-rdf" class="sec-ref"><span class="secno">9.</span> <span class="sec-title">Relationship to RDF</span></a>.</dd>
  </dl>
</section>

<section class="normative" id="terminology">
  <!--OddPage--><h2 aria-level="1" role="heading" id="h2_terminology"><span class="secno">3. </span>Terminology</h2>

  <section class="normative" id="general-terminology">
    <h3 aria-level="2" role="heading" id="h3_general-terminology"><span class="secno">3.1 </span>General Terminology</h3>

    <p>This document uses the following terms as defined in JSON [<cite><a class="bibref" href="#bib-RFC4627">RFC4627</a></cite>]. Refer
      to the <em>JSON Grammar</em> section in [<cite><a class="bibref" href="#bib-RFC4627">RFC4627</a></cite>] for formal definitions.</p>

    <dl>
      <dt><dfn title="json-object" id="dfn-json-object">JSON object</dfn></dt><dd>
        An object structure is represented as a pair of curly brackets surrounding
        zero or more key-value pairs. A key is a <a class="tref internalDFN" title="string" href="#dfn-string">string</a>.
        A single colon comes after each key, separating the key from the value.
        A single comma separates a value from a following key. In contrast to JSON,
        in JSON-LD the keys in an object must be unique.</dd>
      <dt><dfn title="array" id="dfn-array">array</dfn></dt>
      <dd>An array structure is represented as square brackets surrounding zero
        or more values. Values are separated by commas.
        In JSON, an array is an <em>ordered</em> sequence of zero or more values.
        While JSON-LD uses the same array representation as JSON,
        the collection is <em>unordered</em> by default. While order is
        preserved in regular JSON arrays, it is not in regular JSON-LD arrays
        unless specifically defined (see <a class="sectionRef sec-ref" href="#sets-and-lists">section 6.11 Sets and Lists</a>).</dd>
      <dt><dfn title="string" id="dfn-string">string</dfn></dt><dd>
        A string is a sequence of zero or more Unicode characters,
        wrapped in double quotes, using backslash escapes (if necessary).</dd>
      <dt><dfn title="number" id="dfn-number">number</dfn></dt>
      <dd>A number is similar to that used in most programming languages, except
        that the octal and hexadecimal formats are not used and leading zeros
        are not allowed.</dd>
      <dt><dfn title="true" id="dfn-true">true</dfn> and <dfn title="false" id="dfn-false">false</dfn></dt><dd>
        Values that are used to express one of two possible boolean states.</dd>
      <dt><dfn title="null" id="dfn-null">null</dfn></dt>
      <dd>The <a class="tref internalDFN" title="null" href="#dfn-null">null</a> value, which is typically used to clear or forget
        data. For example, a key-value pair in the
        <code>@context</code> where the value is <a class="tref internalDFN" title="null" href="#dfn-null">null</a> explicitly
        decouples a <a class="tref internalDFN" title="term" href="#dfn-term">term</a>'s association with an <a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>.
        A key-value pair in the body of a JSON-LD document whose
        value is <a class="tref internalDFN" title="null" href="#dfn-null">null</a> has the same meaning as if the key-value pair
        was not defined. If <code>@value</code>, <code>@list</code>, or
        <code>@set</code> is set to <a class="tref internalDFN" title="null" href="#dfn-null">null</a> in expanded form, then
        the entire <a class="tref internalDFN" title="json-object" href="#dfn-json-object">JSON object</a> is ignored.</dd>
    </dl>
  </section>

  <section class="informative" id="data-model-overview">
    <h3 aria-level="2" role="heading" id="h3_data-model-overview"><span class="secno">3.2 </span>Data Model Overview</h3><p><em>This section is non-normative.</em></p>

    <p>Generally speaking, the data model used for JSON-LD is a labeled,
      directed <a class="tref internalDFN" title="graph" href="#dfn-graph">graph</a>. The graph contains
      <a class="tref internalDFN" title="node" href="#dfn-node">nodes</a>, which are connected by
      <a class="tref internalDFN" title="edge" href="#dfn-edge">edges</a>. A <a class="tref internalDFN" title="node" href="#dfn-node">node</a> is typically data
      such as a <a class="tref internalDFN" title="string" href="#dfn-string">string</a>, <a class="tref internalDFN" title="number" href="#dfn-number">number</a>,
      <a class="tref internalDFN" title="typed-value" href="#dfn-typed-value">typed values</a> (like dates and times)
      or an <a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>.
      There is also a special class of <a class="tref internalDFN" title="node" href="#dfn-node">node</a> called a
      <a class="tref internalDFN" title="blank-node" href="#dfn-blank-node">blank node</a>, which is typically used to express data that does
      not have a global identifier like an <a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>.
      <a class="tref internalDFN" title="blank-node" href="#dfn-blank-node">Blank nodes</a> are identified using a
      <a class="tref internalDFN" title="blank-node-identifier" href="#dfn-blank-node-identifier">blank node identifier</a>. This simple data model is incredibly
      flexible and powerful, capable of modeling almost any kind of
      data. For a deeper explanation of the data model, see
      section <a href="#data-model" class="sec-ref"><span class="secno">7.</span> <span class="sec-title">Data Model</span></a>.
    </p>

    <p>Developers who are familiar with Linked Data technologies will
    recognize the data model as the RDF Data Model. To dive deeper into how
    JSON-LD and RDF are related, see
    section <a href="#relationship-to-rdf" class="sec-ref"><span class="secno">9.</span> <span class="sec-title">Relationship to RDF</span></a>.
    </p>
  </section>

  <section class="normative" id="syntax-tokens-and-keywords">
    <h3 aria-level="2" role="heading" id="h3_syntax-tokens-and-keywords"><span class="secno">3.3 </span>Syntax Tokens and Keywords</h3>

    <p>JSON-LD specifies a number of syntax tokens and <dfn title="keyword" id="dfn-keyword">keywords</dfn>
    that are a core part of the language:</p>

    <dl>
      <dt><code>@context</code></dt>
      <dd>Used to define the short-hand names that are used throughout a JSON-LD
        document. These short-hand names are called <a class="tref internalDFN" title="term" href="#dfn-term">terms</a> and help
        developers to express specific identifiers in a compact manner. The
        <code>@context</code> keyword is described in detail in
        <a class="sectionRef sec-ref" href="#the-context">section 5.1 The Context</a>.</dd>
      <dt><code>@id</code></dt>
      <dd>Used to uniquely identify <em>things</em> that are being described in the document
        with <a class="tref internalDFN" title="iri" href="#dfn-iri">IRIs</a> or
        <a class="tref internalDFN" title="blank-node-identifier" href="#dfn-blank-node-identifier">blank node identifiers</a>. This keyword
        is described in <a class="sectionRef sec-ref" href="#node-identifiers">section 5.3 Node Identifiers</a>.</dd>
      <dt><code>@value</code></dt>
      <dd>Used to specify the data that is associated with a particular
        <a class="tref internalDFN" title="property" href="#dfn-property">property</a> in the graph. This keyword is described in
        <a class="sectionRef sec-ref" href="#string-internationalization">section 6.9 String Internationalization</a> and
        <a class="sectionRef sec-ref" href="#typed-values">section 6.4 Typed Values</a>.</dd>
      <dt><code>@language</code></dt>
      <dd>Used to specify the language for a particular string value or the default
        language of a JSON-LD document. This keyword is described in
        <a class="sectionRef sec-ref" href="#string-internationalization">section 6.9 String Internationalization</a>.</dd>
      <dt><code>@type</code></dt>
      <dd>Used to set the data type of a <a class="tref internalDFN" title="node" href="#dfn-node">node</a> or
        <a class="tref internalDFN" title="typed-value" href="#dfn-typed-value">typed value</a>. This keyword is described in
        <a class="sectionRef sec-ref" href="#typed-values">section 6.4 Typed Values</a>.</dd>
      <dt><code>@container</code></dt>
      <dd>Used to set the default container type for a <a class="tref internalDFN" title="term" href="#dfn-term">term</a>.
        This keyword is described in <a class="sectionRef sec-ref" href="#sets-and-lists">section 6.11 Sets and Lists</a>.</dd>
      <dt><code>@list</code></dt>
      <dd>Used to express an ordered set of data.
        This keyword is described in <a class="sectionRef sec-ref" href="#sets-and-lists">section 6.11 Sets and Lists</a>.</dd>
      <dt><code>@set</code></dt>
      <dd>Used to express an unordered set of data and to ensure that values are always
         represented as arrays. This keyword is described in
         <a class="sectionRef sec-ref" href="#sets-and-lists">section 6.11 Sets and Lists</a>.</dd>
      <dt><code>@reverse</code></dt>
      <dd>Used to express reverse properties. This keyword is described in
        <a class="sectionRef sec-ref" href="#reverse-properties">section 6.12 Reverse Properties</a>.</dd>
      <dt><code>@index</code></dt>
      <dd>Used to specify that a container is used to index information and
        that processing should continue deeper into a JSON data structure.
        This keyword is described in <a class="sectionRef sec-ref" href="#data-indexing">section 6.16 Data Indexing</a>.</dd>
      <dt><code>@base</code></dt>
      <dd>Used to set the base <abbr title="Internationalized Resource Identifier">IRI</abbr> against which <a class="tref internalDFN" title="relative-iri" href="#dfn-relative-iri">relative IRIs</a>
        are resolved. This keyword is described in <a class="sectionRef sec-ref" href="#base-iri">section 6.1 Base IRI</a>.</dd>
      <dt><code>@vocab</code></dt>
      <dd>Used to expand properties and values in <code>@type</code> with a common prefix
        <a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>. This keyword is described in <a class="sectionRef sec-ref" href="#default-vocabulary">section 6.2 Default Vocabulary</a>.</dd>
      <dt><code>@graph</code></dt><dd>Used to express a <a class="tref internalDFN" title="graph" href="#dfn-graph">graph</a>.
        This keyword is described in <a class="sectionRef sec-ref" href="#named-graphs">section 6.13 Named Graphs</a>.</dd>
      <dt><code>:</code></dt>
      <dd>The separator for JSON keys and values that use
        <a class="tref internalDFN" title="compact-iri" href="#dfn-compact-iri">compact IRIs</a>.</dd>
    </dl>

    <p>All keys, <a class="tref internalDFN" title="keyword" href="#dfn-keyword">keywords</a>, and values in JSON-LD are case-sensitive.</p>
  </section>
</section>

<section class="normative" id="conformance">
  <!--OddPage--><h2 aria-level="1" role="heading" id="h2_conformance"><span class="secno">4. </span>Conformance</h2>

  <p>This specification describes the conformance criteria for JSON-LD documents.
    This criteria is relevant to authors and authoring tool implementers. As well
    as sections marked as non-normative, all authoring guidelines, diagrams, examples,
    and notes in this specification are non-normative. Everything else in this
    specification is normative.</p>

  <p>A <a class="tref internalDFN" title="json-ld-document" href="#dfn-json-ld-document">JSON-LD document</a> complies with this specification if it follows
    the normative statements in appendix <a href="#json-ld-grammar" class="sec-ref"><span class="secno">8.</span> <span class="sec-title">JSON-LD Grammar</span></a>. JSON documents
    can be interpreted as JSON-LD by following the normative statements in
    <a class="sectionRef sec-ref" href="#interpreting-json-as-json-ld">section 6.8 Interpreting JSON as JSON-LD</a>. For convenience, normative
    statements for documents are often phrased as statements on the properties of the document.</p>

  <p>The key words <em class="rfc2119" title="MUST">MUST</em>, <em class="rfc2119" title="MUST NOT">MUST NOT</em>, <em class="rfc2119" title="REQUIRED">REQUIRED</em>, <em class="rfc2119" title="SHALL">SHALL</em>, <em class="rfc2119" title="SHALL NOT">SHALL NOT</em>, <em class="rfc2119" title="SHOULD">SHOULD</em>, <em class="rfc2119" title="SHOULD NOT">SHOULD NOT</em>,
    <em class="rfc2119" title="RECOMMENDED">RECOMMENDED</em>, <em class="rfc2119" title="NOT RECOMMENDED">NOT RECOMMENDED</em>, <em class="rfc2119" title="MAY">MAY</em>, and <em class="rfc2119" title="OPTIONAL">OPTIONAL</em> in this specification have the
    meaning defined in [<cite><a class="bibref" href="#bib-RFC2119">RFC2119</a></cite>].</p>
</section>

<section class="informative" id="basic-concepts">
  <!--OddPage--><h2 aria-level="1" role="heading" id="h2_basic-concepts"><span class="secno">5. </span>Basic Concepts</h2><p><em>This section is non-normative.</em></p>

  <p>JSON [<cite><a class="bibref" href="#bib-RFC4627">RFC4627</a></cite>] is a lightweight, language-independent data interchange format.
    It is easy to parse and easy to generate. However, it is difficult to integrate JSON
    from different sources as the data may contain keys that conflict with other
    data sources. Furthermore, JSON has no
    built-in support for hyperlinks, which are a fundamental building block on
    the Web. Let's start by looking at an example that we will be using for the
    rest of this section:</p>

  <div class="example"><div class="example-title"><span>Example 1</span>: Sample JSON document</div><pre class="example">{
  "name": "Manu Sporny",
  "homepage": "http://manu.sporny.org/",
  "image": "http://manu.sporny.org/images/manu.png"
}</pre></div>

  <p>It's obvious to humans that the data is about a person whose
    <code>name</code> is "Manu Sporny"
    and that the <code>homepage</code> property contains the URL of that person's homepage.
    A machine doesn't have such an intuitive understanding and sometimes,
    even for humans, it is difficult to resolve ambiguities in such representations. This problem
    can be solved by using unambiguous identifiers to denote the different concepts instead of
    tokens such as "name", "homepage", etc.</p>

  <p>Linked Data, and the Web in general, uses <a class="tref internalDFN" title="iri" href="#dfn-iri">IRIs</a>
    (Internationalized Resource Identifiers as described in [<cite><a class="bibref" href="#bib-RFC3987">RFC3987</a></cite>]) for unambiguous
    identification. The idea is to use <a class="tref internalDFN" title="iri" href="#dfn-iri">IRIs</a>
    to assign unambiguous identifiers to data that may be of use to other developers.
    It is useful for <a class="tref internalDFN" title="term" href="#dfn-term">terms</a>,
    like <code>name</code> and <code>homepage</code>, to expand to <a class="tref internalDFN" title="iri" href="#dfn-iri">IRIs</a>
    so that developers don't accidentally step on each other's terms. Furthermore, developers and
    machines are able to use this <a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> (by using a web browser, for instance) to go to
    the term and get a definition of what the term means. This process is known as <a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>
    dereferencing.</p>

  <p>Leveraging the popular <a href="http://schema.org/">schema.org vocabulary</a>,
    the example above could be unambiguously expressed as follows:</p>

  <div class="example"><div class="example-title"><span>Example 2</span>: Sample JSON-LD document using full IRIs instead of terms</div><pre class="example">{
  "<span class="highlight">http://schema.org/name</span>": "Manu Sporny",
  "<span class="highlight">http://schema.org/url</span>": <span class="highlight">{ "@id": </span>"http://manu.sporny.org/" <span class="highlight">}</span>,  <span class="comment">← The '@id' keyword means 'This value is an identifier that is an IRI'</span>
  "<span class="highlight">http://schema.org/image</span>": <span class="highlight">{ "@id": </span>"http://manu.sporny.org/images/manu.png" <span class="highlight">}</span>
}</pre></div>

  <p>In the example above, every property is unambiguously identified by an <a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> and all values
    representing <a class="tref internalDFN" title="iri" href="#dfn-iri">IRIs</a> are explicitly marked as such by the
    <code>@id</code> <a class="tref internalDFN" title="keyword" href="#dfn-keyword">keyword</a>. While this is a valid JSON-LD
    document that is very specific about its data, the document is also overly verbose and difficult
    to work with for human developers. To address this issue, JSON-LD introduces the notion
    of a <a class="tref internalDFN" title="context" href="#dfn-context">context</a> as described in the next section.</p>

  <section class="informative" id="the-context">
    <h3 aria-level="2" role="heading" id="h3_the-context"><span class="secno">5.1 </span>The Context</h3><p><em>This section is non-normative.</em></p>

    <p>When two people communicate with one another, the conversation takes
    place in a shared environment, typically called
    "the context of the conversation". This shared context allows the
    individuals to use shortcut terms, like the first name of a mutual friend,
    to communicate more quickly but without losing accuracy. A context in
    JSON-LD works in the same way. It allows two applications to use shortcut
    terms to communicate with one another more efficiently, but without
    losing accuracy.</p>

    <p>Simply speaking, a <dfn title="context" id="dfn-context">context</dfn> is used to map <a class="tref internalDFN" title="term" href="#dfn-term">terms</a> to
      <a class="tref internalDFN" title="iri" href="#dfn-iri">IRIs</a>. <a class="tref internalDFN" title="term" href="#dfn-term">Terms</a> are case sensitive
      and any valid <a class="tref internalDFN" title="string" href="#dfn-string">string</a> that is not a reserved JSON-LD <a class="tref internalDFN" title="keyword" href="#dfn-keyword">keyword</a>
      can be used as a <a class="tref internalDFN" title="term" href="#dfn-term">term</a>.</p>

    <p>For the sample document in the previous section, a <a class="tref internalDFN" title="context" href="#dfn-context">context</a> would
      look something like this:</p>

    <div class="example"><div class="example-title"><span>Example 3</span>: Context for the sample document in the previous section</div><pre class="example">{
  <span class="highlight">"@context":
  {
    "name": "http://schema.org/name",</span>  <span class="comment">← This means that 'name' is shorthand for 'http://schema.org/name'</span> <span class="highlight">
    "image": {
      "@id": "http://schema.org/image",</span>  <span class="comment">← This means that 'image' is shorthand for 'http://schema.org/image'</span> <span class="highlight">
      "@type": "@id"</span>  <span class="comment">← This means that a string value associated with 'image' should be interpreted as an identifier that is an IRI</span> <span class="highlight">
    },
    "homepage": {
      "@id": "http://schema.org/url",</span>  <span class="comment">← This means that 'homepage' is shorthand for 'http://schema.org/url'</span> <span class="highlight">
      "@type": "@id"</span>  <span class="comment">← This means that a string value associated with 'homepage' should be interpreted as an identifier that is an IRI</span> <span class="highlight">
    }
  }</span>
}</pre></div>

    <p>As the <a class="tref internalDFN" title="context" href="#dfn-context">context</a> above shows, the value of a <dfn title="term-definition" id="dfn-term-definition">term definition</dfn> can
      either be a simple string, mapping the <a class="tref internalDFN" title="term" href="#dfn-term">term</a> to an <a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>,
      or a <a class="tref internalDFN" title="json-object" href="#dfn-json-object">JSON object</a>.</p>

    <p>When a <a class="tref internalDFN" title="json-object" href="#dfn-json-object">JSON object</a> is associated with a term, it is called
      an <dfn title="expanded-term-definition" id="dfn-expanded-term-definition">expanded term definition</dfn>. The example above specifies that
      the values of <code>image</code> and <code>homepage</code>, if they are
      strings, are to be interpreted as
      <a class="tref internalDFN" title="iri" href="#dfn-iri">IRIs</a>. <a class="tref internalDFN" title="expanded-term-definition" href="#dfn-expanded-term-definition">Expanded term definitions</a>
      also allow terms to be used for <a href="#data-indexing">index maps</a>
      and to specify whether <a class="tref internalDFN" title="array" href="#dfn-array">array</a> values are to be
      interpreted as <a href="#sets-and-lists">sets or lists</a>.
      <a class="tref internalDFN" title="expanded-term-definition" href="#dfn-expanded-term-definition">Expanded term definitions</a> may
      be defined using <a class="tref internalDFN" title="absolute-iri" href="#dfn-absolute-iri">absolute</a> or
      <a class="tref internalDFN" title="compact-iri" href="#dfn-compact-iri">compact IRIs</a> as keys, which is
      mainly used to associate type or language information with an
      <a class="tref internalDFN" title="absolute-iri" href="#dfn-absolute-iri">absolute</a> or <a class="tref internalDFN" title="compact-iri" href="#dfn-compact-iri">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a>.</p>

    <p><a class="tref internalDFN" title="context" href="#dfn-context">Contexts</a> can either be directly embedded
      into the document or be referenced. Assuming the context document in the previous
      example can be retrieved at <code>http://json-ld.org/contexts/person.jsonld</code>,
      it can be referenced by adding a single line and allows a JSON-LD document to
      be expressed much more concisely as shown in the example below:</p>

    <div class="example"><div class="example-title"><span>Example 4</span>: Referencing a JSON-LD context</div><pre class="example">{
  <span class="highlight">"@context": "http://json-ld.org/contexts/person.jsonld",</span>
  "name": "Manu Sporny",
  "homepage": "http://manu.sporny.org/",
  "image": "http://manu.sporny.org/images/manu.png"
}</pre></div>

    <p>The referenced context not only specifies how the terms map to
      <a class="tref internalDFN" title="iri" href="#dfn-iri">IRIs</a> in the Schema.org vocabulary but also
      specifies that string values associated with
      the <code>homepage</code> and <code>image</code> property
      can be interpreted as an <a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> (<code>"@type": "@id"</code>,
      see <a class="sectionRef sec-ref" href="#iris">section 5.2 IRIs</a> for more details). This information allows developers
      to re-use each other's data without having to agree to how their data will interoperate
      on a site-by-site basis. External JSON-LD context documents may contain extra
      information located outside of the <code>@context</code> key, such as
      documentation about the <a class="tref internalDFN" title="term" href="#dfn-term">terms</a> declared in the
      document. Information contained outside of the <code>@context</code> value
      is ignored when the document is used as an external JSON-LD context document.</p>

    <p>JSON documents can be interpreted as JSON-LD without having to be modified by
      referencing a <a class="tref internalDFN" title="context" href="#dfn-context">context</a> via an HTTP Link Header
      as described in <a class="sectionRef sec-ref" href="#interpreting-json-as-json-ld">section 6.8 Interpreting JSON as JSON-LD</a>. It is also
      possible to apply a custom context using the JSON-LD API [<cite><a class="bibref" href="#bib-JSON-LD-API">JSON-LD-API</a></cite>].</p>

    <p>In <a class="tref internalDFN" title="json-ld-document" href="#dfn-json-ld-document">JSON-LD documents</a>,
      <a class="tref internalDFN" title="context" href="#dfn-context">contexts</a> may also be specified inline.
      This has the advantage that documents can be processed even in the
      absence of a connection to the Web. Ultimately, this is a modeling decision
      and different use cases may require different handling.</p>

    <div class="example"><div class="example-title"><span>Example 5</span>: In-line context definition</div><pre class="example">{
  <span class="highlight">"@context":
  {
    "name": "http://schema.org/name",
    "image": {
      "@id": "http://schema.org/image",
      "@type": "@id"
    },
    "homepage": {
      "@id": "http://schema.org/url",
      "@type": "@id"
    }
  },</span>
  "name": "Manu Sporny",
  "homepage": "http://manu.sporny.org/",
  "image": "http://manu.sporny.org/images/manu.png"
}</pre></div>

    <p>This section only covers the most basic features of the JSON-LD
    Context. More advanced features related to the JSON-LD Context are covered
    in section <a href="#advanced-concepts" class="sec-ref"><span class="secno">6.</span> <span class="sec-title">Advanced Concepts</span></a>.
    </p>
  </section>

<section class="informative" id="iris">
  <h3 aria-level="2" role="heading" id="h3_iris"><span class="secno">5.2 </span>IRIs</h3><p><em>This section is non-normative.</em></p>

  <p><a class="tref internalDFN" title="iri" href="#dfn-iri">IRIs</a> (Internationalized Resource Identifiers
    [<cite><a class="bibref" href="#bib-RFC3987">RFC3987</a></cite>]) are fundamental to Linked Data as that is how most
    <a class="tref internalDFN" title="node" href="#dfn-node">nodes</a> and <a class="tref internalDFN" title="property" href="#dfn-property">properties</a>
    are identified. In JSON-LD, IRIs may be represented as an
    <a class="tref internalDFN" title="absolute-iri" href="#dfn-absolute-iri">absolute <abbr title="Internationalized Resource Identifier">IRI</abbr></a> or a <a class="tref internalDFN" title="relative-iri" href="#dfn-relative-iri">relative <abbr title="Internationalized Resource Identifier">IRI</abbr></a>. An
    <dfn title="absolute-iri" id="dfn-absolute-iri">absolute <abbr title="Internationalized Resource Identifier">IRI</abbr></dfn> is defined in [<cite><a class="bibref" href="#bib-RFC3987">RFC3987</a></cite>] as containing a
    <em>scheme</em> along with <em>path</em> and optional <em>query</em> and
    <em>fragment</em> segments. A <dfn title="relative-iri" id="dfn-relative-iri">relative <abbr title="Internationalized Resource Identifier">IRI</abbr></dfn> is an <abbr title="Internationalized Resource Identifier">IRI</abbr>
    that is relative to some other <a class="tref internalDFN" title="absolute-iri" href="#dfn-absolute-iri">absolute <abbr title="Internationalized Resource Identifier">IRI</abbr></a>.
    In JSON-LD all <a class="tref internalDFN" title="relative-iri" href="#dfn-relative-iri">relative IRIs</a> are resolved
    relative to the <dfn title="base-iri" id="dfn-base-iri">base <abbr title="Internationalized Resource Identifier">IRI</abbr></dfn>.</p>

  <p>A <a class="tref internalDFN" title="string" href="#dfn-string">string</a> is interpreted as an <a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> when it is the
    value of an <code>@id</code> member:</p>

  <div class="example"><div class="example-title"><span>Example 6</span>: Values of @id are interpreted as IRI</div><pre class="example">{
...
  "homepage": { "<span class="highlight">@id</span>": "http://example.com/" }
...
}</pre></div>

  <p>Values that are interpreted as <a class="tref internalDFN" title="iri" href="#dfn-iri">IRIs</a>, can also be
    expressed as <a class="tref internalDFN" title="relative-iri" href="#dfn-relative-iri">relative IRIs</a>. For example,
    assuming that the following document is located at
    <code>http://example.com/about/</code>, the <a class="tref internalDFN" title="relative-iri" href="#dfn-relative-iri">relative <abbr title="Internationalized Resource Identifier">IRI</abbr></a>
    <code>../</code> would expand to <code>http://example.com/</code> (for more
    information on where  <a class="tref internalDFN" title="relative-iri" href="#dfn-relative-iri">relative IRIs</a> can be
    used, please refer to section <a href="#json-ld-grammar" class="sec-ref"><span class="secno">8.</span> <span class="sec-title">JSON-LD Grammar</span></a>).</p>

  <div class="example"><div class="example-title"><span>Example 7</span>: IRIs can be relative</div><pre class="example">{
...
  "homepage": { "<span class="highlight">@id</span>": "../" }
...
}</pre></div>

  <p><a class="tref internalDFN" title="absolute-iri" href="#dfn-absolute-iri">Absolute IRIs</a> can be expressed directly
    in the key position like so:</p>

  <div class="example"><div class="example-title"><span>Example 8</span>: IRI as a key</div><pre class="example">{
...
  "<span class="highlight">http://schema.org/name</span>": "Manu Sporny",
...
}</pre></div>

  <p>In the example above, the key <code>http://schema.org/name</code>
    is interpreted as an <a class="tref internalDFN" title="absolute-iri" href="#dfn-absolute-iri">absolute <abbr title="Internationalized Resource Identifier">IRI</abbr></a>.</p>

  <p>Term-to-<abbr title="Internationalized Resource Identifier">IRI</abbr> expansion occurs if the key matches a <a class="tref internalDFN" title="term" href="#dfn-term">term</a> defined
    within the <a class="tref internalDFN" title="active-context" href="#dfn-active-context">active context</a>:</p>

  <div class="example"><div class="example-title"><span>Example 9</span>: Term expansion from context definition</div><pre class="example">{
  "<span class="highlight">@context</span>":
  {
    "<span class="highlight">name</span>": "<span class="highlight">http://schema.org/name</span>"
  },
  "<span class="highlight">name</span>": "Manu Sporny",
  "status": "trollin'"
}</pre></div>

  <p>JSON keys that do not expand to an <a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>, such as <code>status</code>
    in the example above, are not Linked Data and thus ignored when processed.</p>

  <p>If type <a class="tref internalDFN" title="coercion" href="#dfn-coercion">coercion</a> rules are specified in the <code>@context</code> for
    a particular <a class="tref internalDFN" title="term" href="#dfn-term">term</a> or property <abbr title="Internationalized Resource Identifier">IRI</abbr>, an <abbr title="Internationalized Resource Identifier">IRI</abbr> is generated:</p>

  <div class="example"><div class="example-title"><span>Example 10</span>: Type coercion</div><pre class="example">{<span class="highlight">
  "@context":
  {
    ...
    "homepage":
    {
      "@id": "http://schema.org/url",
      "@type": "@id"
    }
    ...
  }</span>
...
  "homepage": "http://manu.sporny.org/",
...
}</pre></div>

  <p>In the example above, since the value <code>http://manu.sporny.org/</code>
    is expressed as a JSON <a class="tref internalDFN" title="string" href="#dfn-string">string</a>, the type <a class="tref internalDFN" title="coercion" href="#dfn-coercion">coercion</a>
    rules will transform the value into an <abbr title="Internationalized Resource Identifier">IRI</abbr> when processing the data.
    See <a class="sectionRef sec-ref" href="#type-coercion">section 6.5 Type Coercion</a> for more
    details about this feature.</p>

  <p>In summary, <a class="tref internalDFN" title="iri" href="#dfn-iri">IRIs</a> can be expressed in a variety of
    different ways in JSON-LD:</p>

  <ol>
    <li><a class="tref internalDFN" title="json-object" href="#dfn-json-object">JSON object</a> keys that have a <a class="tref internalDFN" title="term" href="#dfn-term">term</a> mapping in
      the <a class="tref internalDFN" title="active-context" href="#dfn-active-context">active context</a> expand to an <a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>
      (only applies outside of the <a class="tref internalDFN" title="context-definition" href="#dfn-context-definition">context definition</a>).</li>
    <li>An <a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> is generated for the <a class="tref internalDFN" title="string" href="#dfn-string">string</a> value specified using
      <code>@id</code> or <code>@type</code>.</li>
    <li>An <a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> is generated for the <a class="tref internalDFN" title="string" href="#dfn-string">string</a> value of any key for which there
      are <a class="tref internalDFN" title="coercion" href="#dfn-coercion">coercion</a> rules that contain an <code>@type</code> key that is
      set to a value of <code>@id</code> or <code>@vocab</code>.</li>
  </ol>

  <p>This section only covers the most basic features associated with IRIs
  in JSON-LD. More advanced features related to IRIs are covered in
  section <a href="#advanced-concepts" class="sec-ref"><span class="secno">6.</span> <span class="sec-title">Advanced Concepts</span></a>.
  </p>

</section>

<section class="informative" id="node-identifiers">
  <h3 aria-level="2" role="heading" id="h3_node-identifiers"><span class="secno">5.3 </span>Node Identifiers</h3><p><em>This section is non-normative.</em></p>

  <p>To be able to externally reference <a class="tref internalDFN" title="node" href="#dfn-node">nodes</a>
    in a <a class="tref internalDFN" title="graph" href="#dfn-graph">graph</a>, it is important that
    <a class="tref internalDFN" title="node" href="#dfn-node">nodes</a> have an identifier. <a class="tref internalDFN" title="iri" href="#dfn-iri">IRIs</a>
    are a fundamental concept of Linked Data, for
    <a class="tref internalDFN" title="node" href="#dfn-node">nodes</a> to be truly linked, dereferencing the
    identifier should result in a representation of that <a class="tref internalDFN" title="node" href="#dfn-node">node</a>.
    This may allow an application to retrieve further information about a
    <a class="tref internalDFN" title="node" href="#dfn-node">node</a>.</p>

  <p>In JSON-LD, a <a class="tref internalDFN" title="node" href="#dfn-node">node</a> is identified using the <code>@id</code>
    <a class="tref internalDFN" title="keyword" href="#dfn-keyword">keyword</a>:</p>

  <div class="example"><div class="example-title"><span>Example 11</span>: Identifying a node</div><pre class="example">{
  "@context":
  {
    ...
    "name": "http://schema.org/name"
  },
  <span class="highlight">"@id": "http://me.markus-lanthaler.com/"</span>,
  "name": "Markus Lanthaler",
  ...
}</pre></div>

  <p>The example above contains a <a class="tref internalDFN" title="node-object" href="#dfn-node-object">node object</a> identified by the <abbr title="Internationalized Resource Identifier">IRI</abbr>
    <code>http://me.markus-lanthaler.com/</code>.</p>

  <p>This section only covers the most basic features associated with
  node identifiers in JSON-LD. More advanced features related to
  node identifiers are covered in section <a href="#advanced-concepts" class="sec-ref"><span class="secno">6.</span> <span class="sec-title">Advanced Concepts</span></a>.
  </p>

</section>

<section class="informative" id="specifying-the-type">
<h3 aria-level="2" role="heading" id="h3_specifying-the-type"><span class="secno">5.4 </span>Specifying the Type</h3><p><em>This section is non-normative.</em></p>

<p>The type of a particular node can be specified using the <code>@type</code>
  <a class="tref internalDFN" title="keyword" href="#dfn-keyword">keyword</a>. In Linked Data, types are uniquely
  identified with an <a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>.</p>

<div class="example"><div class="example-title"><span>Example 12</span>: Specifying the type for a node</div><pre class="example">{
...
  "@id": "http://example.org/places#BrewEats",
  "<span class="highlight">@type</span>": "<span class="highlight">http://schema.org/Restaurant</span>",
...
}</pre></div>

<p>A node can be assigned more than one type by using an <a class="tref internalDFN" title="array" href="#dfn-array">array</a>:</p>

<div class="example"><div class="example-title"><span>Example 13</span>: Specifying multiple types for a node</div><pre class="example">{
...
  "@id": "http://example.org/places#BrewEats",
  "<span class="highlight">@type</span>": <span class="highlight">[ "http://schema.org/Restaurant", "http://schema.org/Brewery" ],</span>
...
}</pre></div>

<p>The value of an <code>@type</code> key may also be a <a class="tref internalDFN" title="term" href="#dfn-term">term</a> defined in the <a class="tref internalDFN" title="active-context" href="#dfn-active-context">active context</a>:</p>
<div class="example"><div class="example-title"><span>Example 14</span>: Using a term to specify the type</div><pre class="example">{
  "@context": {
    ...
    <span class="highlight">"Restaurant": "http://schema.org/Restaurant", </span>
    <span class="highlight">"Brewery": "http://schema.org/Brewery"</span>
  }
  "@id": "http://example.org/places#BrewEats",
  <span class="highlight">"@type": [ "Restaurant", "Brewery" ]</span>,
  ...
}</pre></div>

<div class="note"><div class="note-title" aria-level="3" role="heading" id="h_note_1"><span>Note</span></div><p class="">This section only covers the most basic features associated with
  types in JSON-LD. It is worth noting that the <code>@type</code>
  <a class="tref internalDFN" title="keyword" href="#dfn-keyword">keyword</a> is not only used to specify the type of a
  <a class="tref internalDFN" title="node" href="#dfn-node">node</a> but also to express <a class="tref internalDFN" title="typed-value" href="#dfn-typed-value">typed values</a>
  (as described in <a class="sectionRef sec-ref" href="#typed-values">section 6.4 Typed Values</a>) and to
  <a class="tref internalDFN" title="coercion" href="#dfn-coercion">type coerce</a> values (as described in
  <a class="sectionRef sec-ref" href="#type-coercion">section 6.5 Type Coercion</a>). Specifically, <code>@type</code>
  cannot be used in a <a class="tref internalDFN" title="context" href="#dfn-context">context</a> to define a <a class="tref internalDFN" title="node" href="#dfn-node">node's</a>
  type. For a detailed description of the differences, please refer to
  <a class="sectionRef sec-ref" href="#typed-values">section 6.4 Typed Values</a>.</p></div>

</section>
</section>

<section class="normative" id="advanced-concepts">
<!--OddPage--><h2 aria-level="1" role="heading" id="h2_advanced-concepts"><span class="secno">6. </span>Advanced Concepts</h2>

<p>JSON-LD has a number of features that provide functionality above and beyond
  the core functionality described above. The following section describes this
  advanced functionality in more detail.</p>

<section class="informative" id="base-iri">
  <h3 aria-level="2" role="heading" id="h3_base-iri"><span class="secno">6.1 </span>Base <abbr title="Internationalized Resource Identifier">IRI</abbr></h3><p><em>This section is non-normative.</em></p>

  <p>JSON-LD allows <a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>s to be specified in a relative form which is
    resolved against the document base according
    <cite><a href="http://tools.ietf.org/html/rfc3986#section-5.1">section 5.1 Establishing a Base URI</a></cite>
    of [<cite><a class="bibref" href="#bib-RFC3986">RFC3986</a></cite>]. The base <abbr title="Internationalized Resource Identifier">IRI</abbr> may be explicitly set with a <a class="tref internalDFN" title="context" href="#dfn-context">context</a>
    using the <code>@base</code> keyword.</p>

  <p>For example, if a JSON-LD document was retrieved from <code>http://example.com/document.jsonld</code>,
    relative IRIs would resolve against that <abbr title="Internationalized Resource Identifier">IRI</abbr>:</p>

  <div class="example"><div class="example-title"><span>Example 15</span>: Use a relative IRI as node identifier</div><pre class="example">{
  "@context": {
    "label": "http://www.w3.org/2000/01/rdf-schema#label"
  },
  <span class="highlight">"@id": ""</span>,
  "label": "Just a simple document"
}</pre></div>

  <p>This document uses an empty <code>@id</code>, which resolves to the document base.
    However, if the document is moved to a different location, the <a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> would change.
    To prevent this without having to use an <a class="tref internalDFN" title="absolute-iri" href="#dfn-absolute-iri">absolute <abbr title="Internationalized Resource Identifier">IRI</abbr></a>, a <a class="tref internalDFN" title="context" href="#dfn-context">context</a>
    may define an <code>@base</code> mapping, to overwrite the base <abbr title="Internationalized Resource Identifier">IRI</abbr> for the document.</p>

  <div class="example"><div class="example-title"><span>Example 16</span>: Setting the document base in a document</div><pre class="example">{
  "@context": {
    <span class="highlight">"@base": "http://example.com/document.jsonld"</span>
  },
  "@id": "",
  "label": "Just a simple document"
}</pre></div>

  <p>Setting <code>@base</code> to <a class="tref internalDFN" title="null" href="#dfn-null">null</a> will prevent
    <a class="tref internalDFN" title="relative-iri" href="#dfn-relative-iri">relative IRIs</a> to be expanded to
    <a class="tref internalDFN" title="absolute-iri" href="#dfn-absolute-iri">absolute IRIs</a>.</p>

  <p>Please note that the <code>@base</code> will be ignored if used in
    external contexts.</p>
</section>

<section class="informative" id="default-vocabulary">
  <h3 aria-level="2" role="heading" id="h3_default-vocabulary"><span class="secno">6.2 </span>Default Vocabulary</h3><p><em>This section is non-normative.</em></p>

  <p>At times, all properties and types may come from the same vocabulary. JSON-LD's
    <code>@vocab</code> keyword allows an author to set a common prefix to be used
    for all properties and types that do not match a <a class="tref internalDFN" title="term" href="#dfn-term">term</a> and are neither
    a <a class="tref internalDFN" title="compact-iri" href="#dfn-compact-iri">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a> nor an <a class="tref internalDFN" title="absolute-iri" href="#dfn-absolute-iri">absolute <abbr title="Internationalized Resource Identifier">IRI</abbr></a> (i.e., they do
    not contain a colon).</p>

  <div class="example"><div class="example-title"><span>Example 17</span>: Using a common vocabulary prefix</div><pre class="example">{
  "@context": {
    <span class="highlight">"@vocab": "http://schema.org/"</span>
  }
  "@id": "http://example.org/places#BrewEats",
  "@type": <span class="highlight">"Restaurant"</span>,
  <span class="highlight">"name"</span>: "Brew Eats"
  ...
}</pre></div>

  <p>If <code>@vocab</code> is used but certain keys in an
    <a class="tref internalDFN" title="json-object" href="#dfn-json-object">object</a> should not be expanded using
    the vocabulary <a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>, a <a class="tref internalDFN" title="term" href="#dfn-term">term</a> can be explicitly set
    to <a class="tref internalDFN" title="null" href="#dfn-null">null</a> in the <a class="tref internalDFN" title="context" href="#dfn-context">context</a>. For instance, in the
    example below the <code>databaseId</code> member would not expand to an
    <a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>.</p>

  <div class="example"><div class="example-title"><span>Example 18</span>: Using the null keyword to ignore data</div><pre class="example">{
  "@context":
  {
     "@vocab": "http://schema.org/",
     <span class="highlight">"databaseId": null</span>
  },
    "@id": "http://example.org/places#BrewEats",
    "@type": "Restaurant",
    "name": "Brew Eats",
    <span class="highlight">"databaseId"</span>: "23987520"
}</pre></div>
</section>

<section class="informative" id="compact-iris">
  <h3 aria-level="2" role="heading" id="h3_compact-iris"><span class="secno">6.3 </span>Compact IRIs</h3><p><em>This section is non-normative.</em></p>

  <p>A <dfn title="compact-iri" id="dfn-compact-iri">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></dfn> is a way of expressing an <a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>
    using a <em>prefix</em> and <em>suffix</em> separated by a colon (<code>:</code>).
    The <dfn title="prefix" id="dfn-prefix">prefix</dfn> is a <a class="tref internalDFN" title="term" href="#dfn-term">term</a> taken from the
    <a class="tref internalDFN" title="active-context" href="#dfn-active-context">active context</a> and is a short string identifying a
    particular <a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> in a JSON-LD document. For example, the
    prefix <code>foaf</code> may be used as a short hand for the
    Friend-of-a-Friend vocabulary, which is identified using the <a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>
    <code>http://xmlns.com/foaf/0.1/</code>. A developer may append
    any of the FOAF vocabulary terms to the end of the prefix to specify a short-hand
    version of the <a class="tref internalDFN" title="absolute-iri" href="#dfn-absolute-iri">absolute <abbr title="Internationalized Resource Identifier">IRI</abbr></a> for the vocabulary term. For example,
    <code>foaf:name</code> would be expanded to the <abbr title="Internationalized Resource Identifier">IRI</abbr>
    <code>http://xmlns.com/foaf/0.1/name</code>.</p>

  <div class="example"><div class="example-title"><span>Example 19</span>: Prefix expansion</div><pre class="example">{
  "<span class="highlight">@context</span>":
  {
    "<span class="highlight">foaf</span>": "<span class="highlight">http://xmlns.com/foaf/0.1/</span>"
...
  },
  "@type": "<span class="highlight">foaf:Person</span>"
  "<span class="highlight">foaf:name</span>": "Dave Longley",
...
}</pre></div>

  <p>In the example above, <code>foaf:name</code> expands to the <a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>
    <code>http://xmlns.com/foaf/0.1/name</code> and <code>foaf:Person</code> expands
    to <code>http://xmlns.com/foaf/0.1/Person</code>.</p>

  <p><a class="tref internalDFN" title="prefix" href="#dfn-prefix">Prefixes</a> are expanded when the form of the value
    is a <a class="tref internalDFN" title="compact-iri" href="#dfn-compact-iri">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a> represented as a <code>prefix:suffix</code>
    combination, the <em>prefix</em> matches a <a class="tref internalDFN" title="term" href="#dfn-term">term</a> defined within the
    <a class="tref internalDFN" title="active-context" href="#dfn-active-context">active context</a>, and the <em>suffix</em> does not begin with two
    slashes&nbsp;(<code>//</code>). The <a class="tref internalDFN" title="compact-iri" href="#dfn-compact-iri">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a> is expanded by
    concatenating the <a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> mapped to the <em>prefix</em> to the (possibly empty)
    <em>suffix</em>. If the <em>prefix</em> is not defined in the <a class="tref internalDFN" title="active-context" href="#dfn-active-context">active context</a>,
    or the suffix begins with two slashes (such as in <code>http://example.com</code>),
    the value is interpreted as <a class="tref internalDFN" title="absolute-iri" href="#dfn-absolute-iri">absolute <abbr title="Internationalized Resource Identifier">IRI</abbr></a> instead. If the prefix is an
    underscore (<code>_</code>), the value is interpreted as <a class="tref internalDFN" title="blank-node-identifier" href="#dfn-blank-node-identifier">blank node identifier</a>
    instead.</p>


  <p>It's also possible to use compact IRIs within the context as shown in the
    following example:</p>

  <div class="example"><div class="example-title"><span>Example 20</span>: Using vocabularies</div><pre class="example">{
  "@context":
  {
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    <span class="highlight">"foaf": "http://xmlns.com/foaf/0.1/"</span>,
    <span class="highlight">"foaf:homepage"</span>: { "@type": "@id" },
    "picture": { "@id": <span class="highlight">"foaf:depiction"</span>, "@type": "@id" }
  },
  "@id": "http://me.markus-lanthaler.com/",
  "@type": "foaf:Person",
  "foaf:name": "Markus Lanthaler",
  "foaf:homepage": "http://www.markus-lanthaler.com/",
  "picture": "http://twitter.com/account/profile_image/markuslanthaler"
}</pre></div>
</section>

<section class="informative" id="typed-values">
<h3 aria-level="2" role="heading" id="h3_typed-values"><span class="secno">6.4 </span>Typed Values</h3><p><em>This section is non-normative.</em></p>

<p>
  A value with an associated type, also known as a
  <a class="tref internalDFN" title="typed-value" href="#dfn-typed-value">typed value</a>, is indicated by associating a value with
  an <a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> which indicates the value's type. Typed values may be
  expressed in JSON-LD in three ways:
</p>

<ol>
  <li>By utilizing the <code>@type</code> <a class="tref internalDFN" title="keyword" href="#dfn-keyword">keyword</a> when defining
    a <a class="tref internalDFN" title="term" href="#dfn-term">term</a> within an <code>@context</code> section.</li>
  <li>By utilizing a <a class="tref internalDFN" title="value-object" href="#dfn-value-object">value object</a>.</li>
  <li>By using a native JSON type such as <a class="tref internalDFN" title="number" href="#dfn-number">number</a>, <a class="tref internalDFN" title="true" href="#dfn-true">true</a>, or <a class="tref internalDFN" title="false" href="#dfn-false">false</a>.</li>
</ol>

<p>The first example uses the <code>@type</code> keyword to associate a
type with a particular <a class="tref internalDFN" title="term" href="#dfn-term">term</a> in the <code>@context</code>:</p>

<div class="example"><div class="example-title"><span>Example 21</span>: Expanded term definition with type coercion</div><pre class="example">{
  <span class="highlight">"@context":
  {
    "modified":
    {
      "@id": "http://purl.org/dc/terms/modified",
      "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
    }
  },</span>
...
  "@id": "http://example.com/docs/1",
  "modified": "2010-05-29T14:17:39+02:00",
...
}</pre></div>

<p>The <em>modified</em> key's value above is automatically type coerced to a
  <em>dateTime</em> value because of the information specified in the
  <code>@context</code>. A JSON-LD processor will interpret the example above
  as follows:</p>

<table class="example">
<thead>
  <tr><th>Subject</th>
  <th>Property</th>
  <th>Value</th>
  <th>Value Type</th>
</tr></thead>
<tbody>
<tr>
  <td>http://example.com/docs/1</td>
  <td>http://purl.org/dc/terms/modified</td>
  <td>2010-05-29T14:17:39+02:00</td>
  <td>http://www.w3.org/2001/XMLSchema#dateTime</td>
</tr>
</tbody>
</table>

<p>The second example uses the expanded form of setting the type information
in the body of a JSON-LD document:</p>

<div class="example"><div class="example-title"><span>Example 22</span>: Expanded value with type</div><pre class="example">{
  "@context":
  {
    "modified":
    {
      "@id": "http://purl.org/dc/terms/modified"
    }
  },
...
  "modified":
  <span class="highlight">{
    "@value": "2010-05-29T14:17:39+02:00",
    "@type": "http://www.w3.org/2001/XMLSchema#dateTime"
  }</span>
...
}</pre></div>

<p>Both examples above would generate the value
  <code>2010-05-29T14:17:39+02:00</code> with the type
  <code>http://www.w3.org/2001/XMLSchema#dateTime</code>. Note that it is
  also possible to use a <a class="tref internalDFN" title="term" href="#dfn-term">term</a> or a <a class="tref internalDFN" title="compact-iri" href="#dfn-compact-iri">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a> to
  express the value of a type.</p>

<div class="note"><div class="note-title" aria-level="3" role="heading" id="h_note_2"><span>Note</span></div><p class="">The <code>@type</code> <a class="tref internalDFN" title="keyword" href="#dfn-keyword">keyword</a> is also used to associate a type
  with a <a class="tref internalDFN" title="node" href="#dfn-node">node</a>. The concept of a <a class="tref internalDFN" title="node-type" href="#dfn-node-type">node type</a> and
  a <a class="tref internalDFN" title="value-type" href="#dfn-value-type">value type</a> are different.</p></div>

<p>A <dfn title="node-type" id="dfn-node-type">node type</dfn> specifies the type of thing
  that is being described, like a person, place, event, or web page. A
  <dfn title="value-type" id="dfn-value-type">value type</dfn> specifies the data type of a particular value, such
  as an integer, a floating point number, or a date.</p>

<div class="example"><div class="example-title"><span>Example 23</span>: Example demonstrating the context-sensitivity for @type</div><pre class="example">{
...
  "@id": "http://example.org/posts#TripToWestVirginia",
  <span class="highlight">"@type": "http://schema.org/BlogPosting"</span>,  <span class="comment">← This is a node type</span>
  "modified":
  {
    "@value": "2010-05-29T14:17:39+02:00",
    <span class="highlight">"@type": "http://www.w3.org/2001/XMLSchema#dateTime"</span>  <span class="comment">← This is a value type</span>
  }
...
}</pre></div>

<p>The first use of <code>@type</code> associates a <a class="tref internalDFN" title="node-type" href="#dfn-node-type">node type</a>
  (<code>http://schema.org/BlogPosting</code>) with the <a class="tref internalDFN" title="node" href="#dfn-node">node</a>,
  which is expressed using the <code>@id</code> <a class="tref internalDFN" title="keyword" href="#dfn-keyword">keyword</a>.
  The second use of <code>@type</code> associates a <a class="tref internalDFN" title="value-type" href="#dfn-value-type">value type</a>
  (<code>http://www.w3.org/2001/XMLSchema#dateTime</code>) with the
  value expressed using the <code>@value</code> <a class="tref internalDFN" title="keyword" href="#dfn-keyword">keyword</a>. As a
  general rule, when <code>@value</code> and <code>@type</code> are used in
  the same <a class="tref internalDFN" title="json-object" href="#dfn-json-object">JSON object</a>, the <code>@type</code>
  <a class="tref internalDFN" title="keyword" href="#dfn-keyword">keyword</a> is expressing a <a class="tref internalDFN" title="value-type" href="#dfn-value-type">value type</a>.
  Otherwise, the <code>@type</code> <a class="tref internalDFN" title="keyword" href="#dfn-keyword">keyword</a> is expressing a
  <a class="tref internalDFN" title="node-type" href="#dfn-node-type">node type</a>. The example above expresses the following data:</p>

<table class="example">
<thead>
  <tr><th>Subject</th>
  <th>Property</th>
  <th>Value</th>
  <th>Value Type</th>
</tr></thead>
<tbody>
<tr>
  <td>http://example.org/posts#TripToWestVirginia</td>
  <td>http://www.w3.org/1999/02/22-rdf-syntax-ns#type</td>
  <td>http://schema.org/BlogPosting</td>
  <td style="text-align:center;">-</td>
</tr>
<tr>
  <td>http://example.org/posts#TripToWestVirginia</td>
  <td>http://purl.org/dc/terms/modified</td>
  <td>2010-05-29T14:17:39+02:00</td>
  <td>http://www.w3.org/2001/XMLSchema#dateTime</td>
</tr>
</tbody>
</table>

</section>

<section class="informative" id="type-coercion">
<h3 aria-level="2" role="heading" id="h3_type-coercion"><span class="secno">6.5 </span>Type Coercion</h3><p><em>This section is non-normative.</em></p>

<p>JSON-LD supports the coercion of values to particular data types.
Type <dfn title="coercion" id="dfn-coercion">coercion</dfn> allows someone deploying JSON-LD to coerce the incoming or
outgoing values to the proper data type based on a mapping of data type <a class="tref internalDFN" title="iri" href="#dfn-iri">IRIs</a> to
<a class="tref internalDFN" title="term" href="#dfn-term">terms</a>. Using type coercion, value representation is preserved without requiring
the data type to be specified with each piece of data.</p>

<p>Type coercion is specified within an <a class="tref internalDFN" title="expanded-term-definition" href="#dfn-expanded-term-definition">expanded term definition</a>
  using the <code>@type</code> key. The value of this key expands to an <a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>.
  Alternatively, the <a class="tref internalDFN" title="keyword" href="#dfn-keyword">keywords</a> <code>@id</code> or <code>@vocab</code> may be used
  as value to indicate that within the body of a JSON-LD document, a <a class="tref internalDFN" title="string" href="#dfn-string">string</a> value of a
  <a class="tref internalDFN" title="term" href="#dfn-term">term</a> coerced to <code>@id</code> or <code>@vocab</code> is to be interpreted as an
  <a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>. The difference between <code>@id</code> and <code>@vocab</code> is how values are expanded
  to <a class="tref internalDFN" title="absolute-iri" href="#dfn-absolute-iri">absolute IRIs</a>. <code>@vocab</code> first tries to expand the value
  by interpreting it as <a class="tref internalDFN" title="term" href="#dfn-term">term</a>. If no matching <a class="tref internalDFN" title="term" href="#dfn-term">term</a> is found in the
  <a class="tref internalDFN" title="active-context" href="#dfn-active-context">active context</a>, it tries to expand it as <a class="tref internalDFN" title="compact-iri" href="#dfn-compact-iri">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a> or <a class="tref internalDFN" title="absolute-iri" href="#dfn-absolute-iri">absolute <abbr title="Internationalized Resource Identifier">IRI</abbr></a>
  if there's a colon in the value; otherwise, it will expand the value using the
  <a class="tref internalDFN" title="active-context" href="#dfn-active-context">active context's</a> vocabulary mapping, if present, or by interpreting it
  as <a class="tref internalDFN" title="relative-iri" href="#dfn-relative-iri">relative <abbr title="Internationalized Resource Identifier">IRI</abbr></a>. Values coerced to <code>@id</code> in contrast are expanded as
  <a class="tref internalDFN" title="compact-iri" href="#dfn-compact-iri">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a> or <a class="tref internalDFN" title="absolute-iri" href="#dfn-absolute-iri">absolute <abbr title="Internationalized Resource Identifier">IRI</abbr></a> if a colon is present; otherwise, they are interpreted
  as <a class="tref internalDFN" title="relative-iri" href="#dfn-relative-iri">relative <abbr title="Internationalized Resource Identifier">IRI</abbr></a>.</p>

<p><a class="tref internalDFN" title="term" href="#dfn-term">Terms</a> or <a class="tref internalDFN" title="compact-iri" href="#dfn-compact-iri">compact IRIs</a> used as the value of a
  <code>@type</code> key may be defined within the same context. This means that one may specify a
  <a class="tref internalDFN" title="term" href="#dfn-term">term</a> like <code>xsd</code> and then use <code>xsd:integer</code> within the same
  context definition.</p>

<p>The example below demonstrates how a JSON-LD author can coerce values to
<a class="tref internalDFN" title="typed-value" href="#dfn-typed-value">typed values</a> and <a class="tref internalDFN" title="iri" href="#dfn-iri">IRIs</a>.</p>

<div class="example"><div class="example-title"><span>Example 24</span>: Expanded term definition with types</div><pre class="example">{
  "@context":
  {
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "name": "http://xmlns.com/foaf/0.1/name",
    "age":
    <span class="highlight">{
      "@id": "http://xmlns.com/foaf/0.1/age",
      "@type": "xsd:integer"
    }</span>,
    "homepage":
    <span class="highlight">{
      "@id": "http://xmlns.com/foaf/0.1/homepage",
      "@type": "@id"
    }</span>
  },
  "@id": "http://example.com/people#john",
  "name": "John Smith",
  "age": <span class="highlight">"41"</span>,
  "homepage":
  <span class="highlight">[
    "http://personal.example.org/",
    "http://work.example.com/jsmith/"
  ]</span>
}</pre></div>

<p>The example shown above would generate the following data.</p>

<table class="example">
<thead>
  <tr><th>Subject</th>
  <th>Property</th>
  <th>Value</th>
  <th>Value Type</th>
</tr></thead>
<tbody>
<tr>
  <td>http://example.com/people#john</td>
  <td>http://xmlns.com/foaf/0.1/name</td>
  <td>John Smith</td>
  <td>&nbsp;</td>
</tr>
<tr>
  <td>http://example.com/people#john</td>
  <td>http://xmlns.com/foaf/0.1/age</td>
  <td>41</td>
  <td>http://www.w3.org/2001/XMLSchema#integer</td>
</tr>
<tr>
  <td rowspan="2">http://example.com/people#john</td>
  <td rowspan="2">http://xmlns.com/foaf/0.1/homepage</td>
  <td>http://personal.example.org/</td>
  <td><a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a></td>
</tr>
<tr>
  <td>http://work.example.com/jsmith/</td>
  <td><a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a></td>
</tr>
</tbody>
</table>

<p>Terms may also be defined using <a class="tref internalDFN" title="absolute-iri" href="#dfn-absolute-iri">absolute IRIs</a>
  or <a class="tref internalDFN" title="compact-iri" href="#dfn-compact-iri">compact IRIs</a>. This allows coercion rules
  to be applied to keys which are not represented as a simple <a class="tref internalDFN" title="term" href="#dfn-term">term</a>.
  For example:</p>

<div class="example"><div class="example-title"><span>Example 25</span>: Term definitions using compact and absolute IRIs</div><pre class="example">{
  "@context":
  {
    "foaf": "http://xmlns.com/foaf/0.1/",
    "<span class="highlight">foaf:age</span>":
    {
      <span class="highlight">"@id": "http://xmlns.com/foaf/0.1/age"</span>,
      "@type": "xsd:integer"
    },
    "<span class="highlight">http://xmlns.com/foaf/0.1/homepage</span>":
    {
      "@type": "@id"
    }
  },
  "foaf:name": "John Smith",
  "<span class="highlight">foaf:age</span>": "41",
  "<span class="highlight">http://xmlns.com/foaf/0.1/homepage</span>":
  [
    "http://personal.example.org/",
    "http://work.example.com/jsmith/"
  ]
}</pre></div>

<p>In this case the <code>@id</code> definition in the term definition is optional.
  If it does exist, the <a class="tref internalDFN" title="compact-iri" href="#dfn-compact-iri">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a> or <a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> representing
  the term will always be expanded to <a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> defined by the <code>@id</code>
  key—regardless of whether a prefix is defined or not.</p>

<p>Type coercion is always performed using the unexpanded value of the key. In the
  example above, that means that type coercion is done looking for <code>foaf:age</code>
  in the <a class="tref internalDFN" title="active-context" href="#dfn-active-context">active context</a> and not for the corresponding, expanded
  <a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> <code>http://xmlns.com/foaf/0.1/age</code>.</p>

<div class="note"><div class="note-title" aria-level="3" role="heading" id="h_note_3"><span>Note</span></div><p class="">Keys in the context are treated as <a class="tref internalDFN" title="term" href="#dfn-term">terms</a> for the purpose of
  expansion and value coercion. At times, this may result in multiple representations for the same expanded <abbr title="Internationalized Resource Identifier">IRI</abbr>.
  For example, one could specify that <code>dog</code> and <code>cat</code> both expanded to <code>http://example.com/vocab#animal</code>.
  Doing this could be useful for establishing different type coercion or language specification rules. It also allows a <a class="tref internalDFN" title="compact-iri" href="#dfn-compact-iri">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a> (or even an
  absolute <a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>) to be defined as something else entirely. For example, one could specify that
  the <a class="tref internalDFN" title="term" href="#dfn-term">term</a> <code>http://example.org/zoo</code> should expand to
  <code>http://example.org/river</code>, but this usage is discouraged because it would lead to a
  great deal of confusion among developers attempting to understand the JSON-LD document.</p></div>


</section>

<section class="informative" id="embedding">
  <h3 aria-level="2" role="heading" id="h3_embedding"><span class="secno">6.6 </span>Embedding</h3><p><em>This section is non-normative.</em></p>

  <p><dfn title="embedding" id="dfn-embedding">Embedding</dfn> is a JSON-LD feature that allows an author to
    use <a class="tref internalDFN" title="node-object" href="#dfn-node-object">node objects</a> as
    <a class="tref internalDFN" title="property" href="#dfn-property">property</a> values. This is a commonly used mechanism for
    creating a parent-child relationship between two <a class="tref internalDFN" title="node" href="#dfn-node">nodes</a>.</p>

  <p>The example shows two nodes related by a property from the first node:</p>

  <div class="example"><div class="example-title"><span>Example 26</span>: Embedding a node object as property value of another node object</div><pre class="example">{
...
  "name": "Manu Sporny",
  "<span class="highlight">knows</span>":
  {
    "<span class="highlight">@type</span>": "<span class="highlight">Person</span>",
    "<span class="highlight">name</span>": "<span class="highlight">Gregg Kellogg</span>",
  }
...
}</pre></div>

  <p>
    A <a class="tref internalDFN" title="node-object" href="#dfn-node-object">node object</a>, like the one used above, may be used in
    any value position in the body of a JSON-LD document.</p>
</section>

<section class="informative" id="advanced-context-usage">
  <h3 aria-level="2" role="heading" id="h3_advanced-context-usage"><span class="secno">6.7 </span>Advanced Context Usage</h3><p><em>This section is non-normative.</em></p>

  <p>Section <a href="#the-context" class="sec-ref"><span class="secno">5.1</span> <span class="sec-title">The Context</span></a> introduced the basics of what makes
  JSON-LD work. This section expands on the basic principles of the
  <a class="tref internalDFN" title="context" href="#dfn-context">context</a> and demonstrates how more advanced use cases can
  be achieved using JSON-LD. </p>

  <p>In general, contexts may be used at any time a
    <a class="tref internalDFN" title="json-object" href="#dfn-json-object">JSON object</a> is defined. The only time that one cannot
    express a context is inside a context definition itself. For example, a
    <a class="tref internalDFN" title="json-ld-document" href="#dfn-json-ld-document">JSON-LD document</a> may use more than one context at different
    points in a document:</p>

  <div class="example"><div class="example-title"><span>Example 27</span>: Using multiple contexts</div><pre class="example">[
  {
    <span class="highlight">"@context": "http://example.org/contexts/person.jsonld",</span>
    "name": "Manu Sporny",
    "homepage": "http://manu.sporny.org/",
    "depiction": "http://twitter.com/account/profile_image/manusporny"
  },
  {
    <span class="highlight">"@context": "http://example.org/contexts/place.jsonld",</span>
    "name": "The Empire State Building",
    "description": "The Empire State Building is a 102-story landmark in New York City.",
    "geo": {
      "latitude": "40.75",
      "longitude": "73.98"
    }
  }
]</pre></div>

  <p>Duplicate context <a class="tref internalDFN" title="term" href="#dfn-term">terms</a> are overridden using a
    most-recently-defined-wins mechanism.</p>

  <div class="example"><div class="example-title"><span>Example 28</span>: Scoped contexts within node objects</div><pre class="example">{
  <span class="highlight">"@context":
  {
    "name": "http://example.com/person#name,
    "details": "http://example.com/person#details"
  }"</span>,
  "<span class="highlight">name</span>": "Markus Lanthaler",
  ...
  "details":
  {
    <span class="highlight">"@context":
    {
      "name": "http://example.com/organization#name"
    }</span>,
    "<span class="highlight">name</span>": "Graz University of Technology"
  }
}</pre></div>

  <p>In the example above, the <code>name</code> <a class="tref internalDFN" title="term" href="#dfn-term">term</a> is overridden
    in the more deeply nested <code>details</code> structure. Note that this is
    rarely a good authoring practice and is typically used when working with
    legacy applications that depend on a specific structure of the
    <a class="tref internalDFN" title="json-object" href="#dfn-json-object">JSON object</a>. If a <a class="tref internalDFN" title="term" href="#dfn-term">term</a> is redefined within a
    context, all previous rules associated with the previous definition are
    removed. If a <a class="tref internalDFN" title="term" href="#dfn-term">term</a> is redefined to <code>null</code>,
    the <a class="tref internalDFN" title="term" href="#dfn-term">term</a> is effectively removed from the list of
    <a class="tref internalDFN" title="term" href="#dfn-term">terms</a> defined in the <a class="tref internalDFN" title="active-context" href="#dfn-active-context">active context</a>.</p>

  <p>Multiple contexts may be combined using an <a class="tref internalDFN" title="array" href="#dfn-array">array</a>, which is processed
    in order. The set of contexts defined within a specific <a class="tref internalDFN" title="json-object" href="#dfn-json-object">JSON object</a> are
    referred to as <dfn title="local-context" id="dfn-local-context">local contexts</dfn>. The
    <dfn title="active-context" id="dfn-active-context">active context</dfn> refers to the accumulation of
    <a class="tref internalDFN" title="local-context" href="#dfn-local-context">local contexts</a> that are in scope at a
    specific point within the document. Setting a <a class="tref internalDFN" title="local-context" href="#dfn-local-context">local context</a>
    to <code>null</code> effectively resets the <a class="tref internalDFN" title="active-context" href="#dfn-active-context">active context</a>
    to an empty context. The following example specifies an external context
    and then layers an embedded context on top of the external context:</p>

  <div class="example"><div class="example-title"><span>Example 29</span>: Combining external and local contexts</div><pre class="example">{
  <span class="highlight">"@context": [
    "http://json-ld.org/contexts/person.jsonld",
    {
      "pic": "http://xmlns.com/foaf/0.1/depiction"
    }
  ],</span>
  "name": "Manu Sporny",
  "homepage": "http://manu.sporny.org/",
  <span class="highlight">"pic": "http://twitter.com/account/profile_image/manusporny"</span>
}</pre></div>

  <div class="note"><div class="note-title" aria-level="3" role="heading" id="h_note_4"><span>Note</span></div><p class="">When possible, the <a class="tref internalDFN" title="context" href="#dfn-context">context</a> definition should be put
    at the top of a JSON-LD document. This makes the document easier to read and
    might make streaming parsers more efficient. Documents that do not have the
    <a class="tref internalDFN" title="context" href="#dfn-context">context</a> at the top are still conformant JSON-LD.</p></div>

  <div class="note"><div class="note-title" aria-level="3" role="heading" id="h_note_5"><span>Note</span></div><p class="">To avoid forward-compatibility issues, <a class="tref internalDFN" title="term" href="#dfn-term">terms</a>
    starting with an&nbsp;<code>@</code> character are to be avoided as they
    might be used as <a class="tref internalDFN" title="keyword" href="#dfn-keyword">keywords</a> in future versions
    of JSON-LD. Terms starting with an&nbsp;<code>@</code> character that are not
    <a class="tref internalDFN" title="keyword" href="#dfn-keyword">JSON-LD 1.0 keywords</a> are treated as any other term, i.e.,
    they are ignored unless mapped to an <a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>. Furthermore, the use of
    empty <a class="tref internalDFN" title="term" href="#dfn-term">terms</a> (<code>""</code>) is not allowed as
    not all programming languages are able to handle empty JSON keys.</p></div>
</section>

<section class="normative" id="interpreting-json-as-json-ld">
  <h3 aria-level="2" role="heading" id="h3_interpreting-json-as-json-ld"><span class="secno">6.8 </span>Interpreting JSON as JSON-LD</h3>

  <p>Ordinary JSON documents can be interpreted as JSON-LD by referencing a JSON-LD
    <a class="tref internalDFN" title="context" href="#dfn-context">context</a> document in an HTTP Link Header. Doing so allows JSON to
    be unambiguously machine-readable without requiring developers to drastically
    change their documents and provides an upgrade path for existing infrastructure
    without breaking existing clients that rely on the <code>application/json</code>
    media type or a media type with a <code>+json</code> suffix as defined in
    [<cite><a class="bibref" href="#bib-RFC6839">RFC6839</a></cite>].</p>

  <p>In order to use an external context with an ordinary JSON document, an author
    <em class="rfc2119" title="MUST">MUST</em> specify an <a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> to a valid <a class="tref internalDFN" title="json-ld-document" href="#dfn-json-ld-document">JSON-LD document</a> in
    an HTTP Link Header [<cite><a class="bibref" href="#bib-RFC5988">RFC5988</a></cite>] using the <code>http://www.w3.org/ns/json-ld#context</code>
    link relation. The referenced document <em class="rfc2119" title="MUST">MUST</em> have a top-level <a class="tref internalDFN" title="json-object" href="#dfn-json-object">JSON object</a>.
    The <code>@context</code> subtree within that object is added to the top-level
    <a class="tref internalDFN" title="json-object" href="#dfn-json-object">JSON object</a> of the referencing document. If an <a class="tref internalDFN" title="array" href="#dfn-array">array</a>
    is at the top-level of the referencing document and its items are
    <a class="tref internalDFN" title="json-object" href="#dfn-json-object">JSON objects</a>, the <code>@context</code>
    subtree is added to all <a class="tref internalDFN" title="array" href="#dfn-array">array</a> items. All extra information located outside
    of the <code>@context</code> subtree in the referenced document <em class="rfc2119" title="MUST">MUST</em> be
    discarded. Effectively this means that the <a class="tref internalDFN" title="active-context" href="#dfn-active-context">active context</a> is
    initialized with the referenced external <a class="tref internalDFN" title="context" href="#dfn-context">context</a>. A response <em class="rfc2119" title="MUST NOT">MUST NOT</em>
    contain more than one HTTP Link Header [<cite><a class="bibref" href="#bib-RFC5988">RFC5988</a></cite>] using the
    <code>http://www.w3.org/ns/json-ld#context</code> link relation.</p>

  <p>The following example demonstrates the use of an external context with an
    ordinary JSON document:</p>

  <div class="example"><div class="example-title"><span>Example 30</span>: Referencing a JSON-LD context from a JSON document via an HTTP Link Header</div><pre class="example">GET /ordinary-json-document.json HTTP/1.1
Host: example.com
Accept: application/ld+json,application/json,*/*;q=0.1

====================================

HTTP/1.1 200 OK
...
Content-Type: <span class="highlight">application/json</span>
<span class="highlight">Link: &lt;http://json-ld.org/contexts/person.jsonld&gt;; rel="http://www.w3.org/ns/json-ld#context"; type="application/ld+json"</span>

{
  "name": "Markus Lanthaler",
  "homepage": "http://www.markus-lanthaler.com/",
  "image": "http://twitter.com/account/profile_image/markuslanthaler"
}</pre></div>

  <p>Please note that <a class="tref internalDFN" title="json-ld-document" href="#dfn-json-ld-document">JSON-LD documents</a>
    served with the <code>application/ld+json</code>
    media type <em class="rfc2119" title="MUST">MUST</em> have all context information, including references to external
    contexts, within the body of the document. Contexts linked via a
    <code>http://www.w3.org/ns/json-ld#context</code> HTTP Link Header <em class="rfc2119" title="MUST">MUST</em> be
    ignored for such documents.</p>
</section>

<section class="informative" id="string-internationalization">
  <h3 aria-level="2" role="heading" id="h3_string-internationalization"><span class="secno">6.9 </span>String Internationalization</h3><p><em>This section is non-normative.</em></p>

  <p>At times, it is important to annotate a <a class="tref internalDFN" title="string" href="#dfn-string">string</a>
    with its language. In JSON-LD this is possible in a variety of ways.
    First, it is possible to define a default language for a JSON-LD document
    by setting the <code>@language</code> key in the <a class="tref internalDFN" title="context" href="#dfn-context">context</a>:</p>

  <div class="example"><div class="example-title"><span>Example 31</span>: Setting the default language of a JSON-LD document</div><pre class="example">{
  <span class="highlight">"@context":
  {
    ...
    "@language": "ja"
  }</span>,
  "name": <span class="highlight">"花澄"</span>,
  "occupation": <span class="highlight">"科学者"</span>
}</pre></div>

  <p>The example above would associate the <code>ja</code> language
    code with the two <a class="tref internalDFN" title="string" href="#dfn-string">strings</a> <em>花澄</em> and <em>科学者</em>.
    Languages codes are defined in [<cite><a class="bibref" href="#bib-BCP47">BCP47</a></cite>]. The default language applies to all
    <a class="tref internalDFN" title="string" href="#dfn-string">string</a> values that are not <a href="#type-coercion">type coerced</a>.</p>

  <p>To clear the default language for a subtree, <code>@language</code> can
    be set to <code>null</code> in a <a class="tref internalDFN" title="local-context" href="#dfn-local-context">local context</a> as follows:</p>

  <div class="example"><div class="example-title"><span>Example 32</span>: Clearing default language</div><pre class="example">{
  "@context": {
    ...
    "@language": "ja"
  },
  "name": "花澄",
  "details": {
<span class="highlight">    "@context": {
      "@language": null
    }</span>,
    "occupation": "Ninja"
  }
}</pre></div>

  <p>Second, it is possible to associate a language with a specific <a class="tref internalDFN" title="term" href="#dfn-term">term</a>
    using an <a class="tref internalDFN" title="expanded-term-definition" href="#dfn-expanded-term-definition">expanded term definition</a>:</p>

  <div class="example"><div class="example-title"><span>Example 33</span>: Expanded term definition with language</div><pre class="example">{
  "@context": {
    ...
    "ex": "http://example.com/vocab/",
    "@language": "ja",
    "name": { "@id": "ex:name", <span class="highlight">"@language": null</span> },
    "occupation": { "@id": "ex:occupation" },
    "occupation_en": { "@id": "ex:occupation", <span class="highlight">"@language": "en"</span> },
    "occupation_cs": { "@id": "ex:occupation", <span class="highlight">"@language": "cs"</span> }
  },
  <span class="highlight">"name": "Yagyū Muneyoshi",
  "occupation": "忍者",
  "occupation_en": "Ninja",
  "occupation_cs": "Nindža",</span>
  ...
}</pre></div>

  <p>The example above would associate <em>忍者</em> with the specified default
    language code <code>ja</code>, <em>Ninja</em> with the language code
    <code>en</code>, and <em>Nindža</em> with the language code <code>cs</code>.
    The value of <code>name</code>, <em>Yagyū Muneyoshi</em> wouldn't be
    associated with any language code since <code>@language</code> was reset to
    <a class="tref internalDFN" title="null" href="#dfn-null">null</a> in the <a class="tref internalDFN" title="expanded-term-definition" href="#dfn-expanded-term-definition">expanded term definition</a>.</p>

  <div class="note"><div class="note-title" aria-level="3" role="heading" id="h_note_6"><span>Note</span></div><p class="">Language associations are only applied to plain
    <a class="tref internalDFN" title="string" href="#dfn-string">strings</a>. <a class="tref internalDFN" title="typed-value" href="#dfn-typed-value">Typed values</a>
    or values that are subject to <a href="#type-coercion">type coercion</a>
    are not language tagged.</p></div>

  <p>Just as in the example above, systems often need to express the value of a
    property in multiple languages. Typically, such systems also try to ensure that
    developers have a programmatically easy way to navigate the data structures for
    the language-specific data. In this case, <a class="tref internalDFN" title="language-map" href="#dfn-language-map">language maps</a>
    may be utilized.</p>

  <div class="example"><div class="example-title"><span>Example 34</span>: Language map expressing a property in three languages</div><pre class="example">{
  "@context":
  {
    ...
    "occupation": { "@id": "ex:occupation", <span class="highlight">"@container": "@language"</span> }
  },
  "name": "Yagyū Muneyoshi",
  "occupation":
  <span class="highlight">{
    "ja": "忍者",
    "en": "Ninja",
    "cs": "Nindža"
  }</span>
  ...
}</pre></div>

  <p>The example above expresses exactly the same information as the previous
    example but consolidates all values in a single property. To access the
    value in a specific language in a programming language supporting dot-notation
    accessors for object properties, a developer may use the
    <code>property.language</code> pattern. For example, to access the occupation
    in English, a developer would use the following code snippet:
    <code>obj.occupation.en</code>.</p>

  <p>Third, it is possible to override the default language by using a
    <a class="tref internalDFN" title="value-object" href="#dfn-value-object">value object</a>:</p>

  <div class="example"><div class="example-title"><span>Example 35</span>: Overriding default language using an expanded value</div><pre class="example">{
  "@context": {
    ...
    "@language": "ja"
  },
  "name": "花澄",
  "occupation": <span class="highlight">{
    "@value": "Scientist",
    "@language": "en"
  }</span>
}</pre></div>

  <p>This makes it possible to specify a plain string by omitting the
    <code>@language</code> tag or setting it to <code>null</code> when expressing
    it using a <a class="tref internalDFN" title="value-object" href="#dfn-value-object">value object</a>:</p>

  <div class="example"><div class="example-title"><span>Example 36</span>: Removing language information using an expanded value</div><pre class="example">{
  "@context": {
    ...
    "@language": "ja"
  },
  "name": <span class="highlight">{
    "@value": "Frank"
  }</span>,
  "occupation": {
    "@value": "Ninja",
    "@language": "en"
  },
  "speciality": "手裏剣"
}</pre></div>

</section>

<section class="informative" id="iri-expansion-within-a-context">
  <h3 aria-level="2" role="heading" id="h3_iri-expansion-within-a-context"><span class="secno">6.10 </span><abbr title="Internationalized Resource Identifier">IRI</abbr> Expansion within a Context</h3><p><em>This section is non-normative.</em></p>
  <p>In general, normal <abbr title="Internationalized Resource Identifier">IRI</abbr> expansion rules apply
    anywhere an <abbr title="Internationalized Resource Identifier">IRI</abbr> is expected (see <a class="sectionRef sec-ref" href="#iris">section 5.2 IRIs</a>). Within
    a <a class="tref internalDFN" title="context" href="#dfn-context">context</a> definition, this can mean that terms defined
    within the context may also be used within that context as long as
    there are no circular dependencies. For example, it is common to use
    the <code>xsd</code> namespace when defining <a class="tref internalDFN" title="typed-value" href="#dfn-typed-value">typed value</a>s:</p>

<div class="example"><div class="example-title"><span>Example 37</span>: IRI expansion within a context</div><pre class="example">{
  "@context":
  {
    <span class="highlight">"xsd": "http://www.w3.org/2001/XMLSchema#"</span>,
    "name": "http://xmlns.com/foaf/0.1/name",
    "age":
    {
      "@id": "http://xmlns.com/foaf/0.1/age",
      "@type": <span class="highlight">"xsd:integer"</span>
    },
    "homepage":
    {
      "@id": "http://xmlns.com/foaf/0.1/homepage",
      "@type": "@id"
    }
  },
  ...
}</pre></div>

<p>In this example, the <code>xsd</code> <a class="tref internalDFN" title="term" href="#dfn-term">term</a> is defined
  and used as a <a class="tref internalDFN" title="prefix" href="#dfn-prefix">prefix</a> for the <code>@type</code> coercion
  of the <code>age</code> property.</p>

<p><a class="tref internalDFN" title="term" href="#dfn-term">Terms</a> may also be used when defining the <abbr title="Internationalized Resource Identifier">IRI</abbr> of another
<a class="tref internalDFN" title="term" href="#dfn-term">term</a>:</p>

<div class="example"><div class="example-title"><span>Example 38</span>: Using a term to define the IRI of another term within a context</div><pre class="example">{
  "@context":
  {
    <span class="highlight">"foaf": "http://xmlns.com/foaf/0.1/"</span>,
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "name": <span class="highlight">"foaf:name"</span>,
    "age":
    {
      "@id": <span class="highlight">"foaf:age"</span>,
      "@type": "xsd:integer"
    },
    "homepage":
    {
      "@id": <span class="highlight">"foaf:homepage"</span>,
      "@type": "@id"
    }
  },
  ...
}</pre></div>

<p><a class="tref internalDFN" title="compact-iri" href="#dfn-compact-iri">Compact IRIs</a>
  and <a class="tref internalDFN" title="iri" href="#dfn-iri">IRIs</a> may be used on the left-hand side of a
  <a class="tref internalDFN" title="term" href="#dfn-term">term</a> definition.</p>

<div class="example"><div class="example-title"><span>Example 39</span>: Using a compact IRI as a term</div><pre class="example">{
  "@context":
  {
    <span class="highlight">"foaf": "http://xmlns.com/foaf/0.1/"</span>,
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "name": "foaf:name",
    "<span class="highlight">foaf:age</span>":
    {
      "@type": "xsd:integer"
    },
    "<span class="highlight">foaf:homepage</span>":
    <span class="highlight">{
      "@type": "@id"
    }</span>
  },
  ...
}</pre></div>

<p>
In this example, the <a class="tref internalDFN" title="compact-iri" href="#dfn-compact-iri">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a> form is used in two different
ways.
In the first approach, <code>foaf:age</code> declares both the
<a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> for the <a class="tref internalDFN" title="term" href="#dfn-term">term</a> (using short-form) as well as the
<code>@type</code> associated with the <a class="tref internalDFN" title="term" href="#dfn-term">term</a>. In the second
approach, only the <code>@type</code> associated with the <a class="tref internalDFN" title="term" href="#dfn-term">term</a> is
specified. The full <a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> for
<code>foaf:homepage</code> is determined by looking up the <code>foaf</code>
<a class="tref internalDFN" title="prefix" href="#dfn-prefix">prefix</a> in the
<a class="tref internalDFN" title="context" href="#dfn-context">context</a>.
</p>

<p>
<a class="tref internalDFN" title="absolute-iri" href="#dfn-absolute-iri">Absolute IRIs</a> may also be used in the key position in a <a class="tref internalDFN" title="context" href="#dfn-context">context</a>:
</p>

<div class="example"><div class="example-title"><span>Example 40</span>: Associating context definitions with absolute IRIs</div><pre class="example">{
  "@context":
  {
    "foaf": "http://xmlns.com/foaf/0.1/",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "name": "foaf:name",
    "foaf:age":
    {
      "@id": "foaf:age",
      "@type": "xsd:integer"
    },
    "<span class="highlight">http://xmlns.com/foaf/0.1/homepage</span>":
    {
      "@type": "@id"
    }
  },
  ...
}</pre></div>

<p>In order for the <a class="tref internalDFN" title="absolute-iri" href="#dfn-absolute-iri">absolute <abbr title="Internationalized Resource Identifier">IRI</abbr></a> to match above, the <a class="tref internalDFN" title="absolute-iri" href="#dfn-absolute-iri">absolute <abbr title="Internationalized Resource Identifier">IRI</abbr></a>
  needs to be used in the <a class="tref internalDFN" title="json-ld-document" href="#dfn-json-ld-document">JSON-LD document</a>. Also note that <code>foaf:homepage</code>
  will not use the <code>{ "@type": "@id" }</code> declaration because
  <code>foaf:homepage</code> is not the same as <code>http://xmlns.com/foaf/0.1/homepage</code>.
  That is, <a class="tref internalDFN" title="term" href="#dfn-term">terms</a> are looked up in a <a class="tref internalDFN" title="context" href="#dfn-context">context</a> using
  direct string comparison before the <a class="tref internalDFN" title="prefix" href="#dfn-prefix">prefix</a> lookup mechanism is applied.</p>

<div class="note"><div class="note-title" aria-level="3" role="heading" id="h_note_7"><span>Note</span></div><p class="">While it is possible to define a <a class="tref internalDFN" title="compact-iri" href="#dfn-compact-iri">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a>, or
  an <a class="tref internalDFN" title="absolute-iri" href="#dfn-absolute-iri">absolute <abbr title="Internationalized Resource Identifier">IRI</abbr></a> to expand to some other unrelated <a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>
  (for example, <code>foaf:name</code> expanding to
  <code>http://example.org/unrelated#species</code>), such usage is strongly
  discouraged.</p></div>

<p>The only exception for using terms in the <a class="tref internalDFN" title="context" href="#dfn-context">context</a> is that
  circular definitions are not allowed. That is,
  a definition of <em>term1</em> cannot depend on the
  definition of <em>term2</em> if <em>term2</em> also depends on
  <em>term1</em>. For example, the following <a class="tref internalDFN" title="context" href="#dfn-context">context</a> definition
  is illegal:</p>
<div class="example"><div class="example-title"><span>Example 41</span>: Illegal circular definition of terms within a context</div><pre class="example">{
  "@context":
  {
    <span class="highlight">"term1": "term2:foo",
    "term2": "term1:bar"</span>
  },
  ...
}</pre></div>
</section>

<section class="informative" id="sets-and-lists">
<h3 aria-level="2" role="heading" id="h3_sets-and-lists"><span class="secno">6.11 </span>Sets and Lists</h3><p><em>This section is non-normative.</em></p>

<p>A JSON-LD author can express multiple values in a compact way by using
  <a class="tref internalDFN" title="array" href="#dfn-array">arrays</a>. Since graphs do not describe ordering for links
  between nodes, arrays in JSON-LD do not provide an ordering of the
  contained elements by default. This is exactly the opposite from regular JSON
  arrays, which are ordered by default. For example, consider the following
  simple document:</p>

<div class="example"><div class="example-title"><span>Example 42</span>: Multiple values with no inherent order</div><pre class="example">{
...
  "@id": "http://example.org/people#joebob",
  "nick": <span class="highlight">[ "joe", "bob", "JB" ]</span>,
...
}</pre></div>

<p>The example shown above would result in the following data being generated,
  each relating the node to an individual value, with no inherent order:</p>

<table class="example">
<thead>
  <tr><th>Subject</th>
  <th>Property</th>
  <th>Value</th>
</tr></thead>
<tbody>
<tr>
  <td>http://example.org/people#joebob</td>
  <td>http://xmlns.com/foaf/0.1/nick</td>
  <td>joe</td>
</tr>
<tr>
  <td>http://example.org/people#joebob</td>
  <td>http://xmlns.com/foaf/0.1/nick</td>
  <td>bob</td>
</tr>
<tr>
  <td>http://example.org/people#joebob</td>
  <td>http://xmlns.com/foaf/0.1/nick</td>
  <td>JB</td>
</tr>
</tbody>
</table>

<p>Multiple values may also be expressed using the expanded form:</p>

<div class="example"><div class="example-title"><span>Example 43</span>: Using an expanded form to set multiple values</div><pre class="example">{
  "@id": "http://example.org/articles/8",
  "dc:title": <span class="highlight">
  [
    {
      "@value": "Das Kapital",
      "@language": "de"
    },
    {
      "@value": "Capital",
      "@language": "en"
    }
  ]</span>
}</pre></div>

<p>The example shown above would generate the following data, again with
  no inherent order:</p>

<table class="example">
<thead>
  <tr><th>Subject</th>
  <th>Property</th>
  <th>Value</th>
  <th>Language</th>
</tr></thead>
<tbody>
<tr>
  <td>http://example.org/articles/8</td>
  <td>http://purl.org/dc/terms/title</td>
  <td>Das Kapital</td>
  <td>de</td>
</tr>
<tr>
  <td>http://example.org/articles/8</td>
  <td>http://purl.org/dc/terms/title</td>
  <td>Capital</td>
  <td>en</td>
</tr>
</tbody>
</table>

<p>As the notion of ordered collections is rather important in data
  modeling, it is useful to have specific language support. In JSON-LD,
  a list may be represented using the <code>@list</code> <a class="tref internalDFN" title="keyword" href="#dfn-keyword">keyword</a> as follows:</p>
<div class="example"><div class="example-title"><span>Example 44</span>: An ordered collection of values in JSON-LD</div><pre class="example">{
...
  "@id": "http://example.org/people#joebob",
  "foaf:nick":
  <span class="highlight">{
    "@list": [ "joe", "bob", "jaybee" ]
  }</span>,
...
}</pre></div>

<p>This describes the use of this <a class="tref internalDFN" title="array" href="#dfn-array">array</a> as being ordered,
  and order is maintained when processing a document. If every use of a given multi-valued
  property is a list, this may be abbreviated by setting <code>@container</code>
  to <code>@list</code> in the <a class="tref internalDFN" title="context" href="#dfn-context">context</a>:</p>
<div class="example"><div class="example-title"><span>Example 45</span>: Specifying that a collection is ordered in the context</div><pre class="example">{
  <span class="highlight">"@context":
  {
    ...
    "nick":
    {
      "@id": "http://xmlns.com/foaf/0.1/nick",
      "@container": "@list"
    }
  }</span>,
...
  "@id": "http://example.org/people#joebob",
  "nick": <span class="highlight">[ "joe", "bob", "jaybee" ]</span>,
...
}</pre></div>

<div class="note"><div class="note-title" aria-level="3" role="heading" id="h_note_8"><span>Note</span></div><p class="">List of lists in the form of <a class="tref internalDFN" title="list-object" href="#dfn-list-object">list objects</a>
  are not allowed in this version of JSON-LD. This decision was made due to the
  extreme amount of added complexity when processing lists of lists.</p></div>

<p>While <code>@list</code> is used to describe <em>ordered lists</em>,
  the <code>@set</code> keyword is used to describe <em>unordered sets</em>.
  The use of <code>@set</code> in the body of a JSON-LD document
  is optimized away when processing the document, as it is just syntactic
  sugar. However, <code>@set</code> is helpful when used within the context
  of a document.
  Values of terms associated with an <code>@set</code> or <code>@list</code> container
  are always represented in the form of an <a class="tref internalDFN" title="array" href="#dfn-array">array</a>,
  even if there is just a single value that would otherwise be optimized to
  a non-array form in compact form (see
  <a class="sectionRef sec-ref" href="#compacted-document-form">section 6.18 Compacted Document Form</a>). This makes post-processing of
  JSON-LD documents easier as the data is always in array form, even if the
  array only contains a single value.</p>

</section>

<section class="informative" id="reverse-properties">
  <h3 aria-level="2" role="heading" id="h3_reverse-properties"><span class="secno">6.12 </span>Reverse Properties</h3><p><em>This section is non-normative.</em></p>

  <p>JSON-LD serializes directed <a class="tref internalDFN" title="graph" href="#dfn-graph">graphs</a>. That means that
    every <a class="tref internalDFN" title="property" href="#dfn-property">property</a> points from a <a class="tref internalDFN" title="node" href="#dfn-node">node</a> to another <a class="tref internalDFN" title="node" href="#dfn-node">node</a>
    or <a class="tref internalDFN" title="json-ld-value" href="#dfn-json-ld-value">value</a>. However, in some cases, it is desirable
    to serialize in the reverse direction. Consider for example the case where a person
    and its children should be described in a document. If the used vocabulary does not
    provide a <em>children</em> <a class="tref internalDFN" title="property" href="#dfn-property">property</a> but just a <em>parent</em>
    <a class="tref internalDFN" title="property" href="#dfn-property">property</a>, every <a class="tref internalDFN" title="node" href="#dfn-node">node</a> representing a child would have to
    be expressed with a <a class="tref internalDFN" title="property" href="#dfn-property">property</a> pointing to the parent as in the following
    example.</p>

  <div class="example"><div class="example-title"><span>Example 46</span>: A document with children linking to their parent</div><pre class="example">[
  {
    <span class="highlight">"@id": "#homer"</span>,
    "http://example.com/vocab#name": "Homer"
  },
  {
    "@id": "#bart",
    "http://example.com/vocab#name": "Bart",
    <span class="highlight">"http://example.com/vocab#parent": { "@id": "#homer" }</span>
  },
  {
    "@id": "#lisa",
    "http://example.com/vocab#name": "Lisa",
    <span class="highlight">"http://example.com/vocab#parent": { "@id": "#homer" }</span>
  }
]</pre></div>

  <p>Expressing such data is much simpler by using JSON-LD's <code>@reverse</code>
    <a class="tref internalDFN" title="keyword" href="#dfn-keyword">keyword</a>:</p>

  <div class="example"><div class="example-title"><span>Example 47</span>: A person and its children using a reverse property</div><pre class="example">{
  "@id": "#homer",
  "http://example.com/vocab#name": "Homer",
  <span class="highlight">"@reverse"</span>: {
    <span class="highlight">"http://example.com/vocab#parent"</span>: [
      {
        "@id": "#bart",
        "http://example.com/vocab#name": "Bart"
      },
      {
        "@id": "#lisa",
        "http://example.com/vocab#name": "Lisa"
      }
    ]
  }
}</pre></div>

  <p>The <code>@reverse</code> <a class="tref internalDFN" title="keyword" href="#dfn-keyword">keyword</a> can also be used in
    <a class="tref internalDFN" title="expanded-term-definition" href="#dfn-expanded-term-definition">expanded term definitions</a>
    to create reverse properties as shown in the following example:</p>


  <div class="example"><div class="example-title"><span>Example 48</span>: Using @reverse to define reverse properties</div><pre class="example">{
  "@context": {
    "name": "http://example.com/vocab#name",
    <span class="highlight">"children": { "@reverse": "http://example.com/vocab#parent" }</span>
  },
  "@id": "#homer",
  "name": "Homer",
  <span class="highlight">"children"</span>: [
    {
      "@id": "#bart",
      "name": "Bart"
    },
    {
      "@id": "#lisa",
      "name": "Lisa"
    }
  ]
}</pre></div>
</section>


<section class="informative" id="named-graphs">
  <h3 aria-level="2" role="heading" id="h3_named-graphs"><span class="secno">6.13 </span>Named Graphs</h3><p><em>This section is non-normative.</em></p>

  <p>At times, it is necessary to make statements about a <a class="tref internalDFN" title="graph" href="#dfn-graph">graph</a>
    itself, rather than just a single <a class="tref internalDFN" title="node" href="#dfn-node">node</a>. This can be done by
    grouping a set of <a class="tref internalDFN" title="node" href="#dfn-node">nodes</a> using the <code>@graph</code>
    <a class="tref internalDFN" title="keyword" href="#dfn-keyword">keyword</a>. A developer may also name data expressed using the
    <code>@graph</code> <a class="tref internalDFN" title="keyword" href="#dfn-keyword">keyword</a> by pairing it with an
    <code>@id</code> <a class="tref internalDFN" title="keyword" href="#dfn-keyword">keyword</a> as shown in the following example:</p>

  <div class="example"><div class="example-title"><span>Example 49</span>: Identifying and making statements about a graph</div><pre class="example">{
  "@context": {
    "generatedAt": {
      "@id": "http://www.w3.org/ns/prov#generatedAtTime",
      "@type": "http://www.w3.org/2001/XMLSchema#date"
    },
    "Person": "http://xmlns.com/foaf/0.1/Person",
    "name": "http://xmlns.com/foaf/0.1/name",
    "knows": "http://xmlns.com/foaf/0.1/knows"
  },
  <span class="highlight">"@id": "http://example.org/graphs/73",
  "generatedAt": "2012-04-09",
  "@graph":</span>
  [
    {
      "@id": "http://manu.sporny.org/about#manu",
      "@type": "Person",
      "name": "Manu Sporny",
      "knows": "http://greggkellogg.net/foaf#me"
    },
    {
      "@id": "http://greggkellogg.net/foaf#me",
      "@type": "Person",
      "name": "Gregg Kellogg",
      "knows": "http://manu.sporny.org/about#manu"
    }
  ]
}</pre></div>

  <p>The example above expresses a <a class="tref internalDFN" title="named-graph" href="#dfn-named-graph">named graph</a> that is identified
    by the <a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> <code>http://example.org/graphs/73</code>. That
    graph is composed of the statements about Manu and Gregg. Metadata about
    the graph itself is expressed via the <code>generatedAt</code> property,
    which specifies when the graph was generated. An alternative view of the
    information above is represented in table form below:</p>

  <table class="example">
  <thead>
    <tr><th>Graph</th>
    <th>Subject</th>
    <th>Property</th>
    <th>Value</th>
    <th>Value Type</th>
  </tr></thead>
  <tbody>
  <tr>
    <td>&nbsp;</td>
    <td>http://example.org/graphs/73</td>
    <td>http://www.w3.org/ns/prov#generatedAtTime</td>
    <td>2012-04-09</td>
    <td>http://www.w3.org/2001/XMLSchema#date</td>
  </tr>
  <tr>
    <td>http://example.org/graphs/73</td>
    <td>http://manu.sporny.org/about#manu</td>
    <td>http://www.w3.org/2001/XMLSchema#type</td>
    <td>http://xmlns.com/foaf/0.1/Person</td>
    <td></td>
  </tr>
  <tr>
    <td>http://example.org/graphs/73</td>
    <td>http://manu.sporny.org/about#manu</td>
    <td>http://xmlns.com/foaf/0.1/name</td>
    <td>Manu Sporny</td>
    <td></td>
  </tr>
  <tr>
    <td>http://example.org/graphs/73</td>
    <td>http://manu.sporny.org/about#manu</td>
    <td>http://xmlns.com/foaf/0.1/knows</td>
    <td>http://greggkellogg.net/foaf#me</td>
    <td></td>
  </tr>
  <tr>
    <td>http://example.org/graphs/73</td>
    <td>http://greggkellogg.net/foaf#me</td>
    <td>http://www.w3.org/2001/XMLSchema#type</td>
    <td>http://xmlns.com/foaf/0.1/Person</td>
    <td></td>
  </tr>
  <tr>
    <td>http://example.org/graphs/73</td>
    <td>http://greggkellogg.net/foaf#me</td>
    <td>http://xmlns.com/foaf/0.1/name</td>
    <td>Gregg Kellogg</td>
    <td></td>
  </tr>
  <tr>
    <td>http://example.org/graphs/73</td>
    <td>http://greggkellogg.net/foaf#me</td>
    <td>http://xmlns.com/foaf/0.1/knows</td>
    <td>http://manu.sporny.org/about#manu</td>
    <td></td>
  </tr>
  </tbody>
  </table>

  <p>When a JSON-LD document's top-level structure is an
    <a class="tref internalDFN" title="json-object" href="#dfn-json-object">object</a> that contains no other
    <a class="tref internalDFN" title="property" href="#dfn-property">properties</a> than <code>@graph</code> and
    optionally <code>@context</code> (properties that are not mapped to an
    <a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> or a <a class="tref internalDFN" title="keyword" href="#dfn-keyword">keyword</a> are ignored),
    <code>@graph</code> is considered to express the otherwise implicit
    <a class="tref internalDFN" title="default-graph" href="#dfn-default-graph">default graph</a>. This mechanism can be useful when a number
    of <a class="tref internalDFN" title="node" href="#dfn-node">nodes</a> exist at the document's top level that
    share the same <a class="tref internalDFN" title="context" href="#dfn-context">context</a>, which is, e.g., the case when a
    document is <a href="#flattened-document-form">flattened</a>. The
    <code>@graph</code> keyword collects such nodes in an <a class="tref internalDFN" title="array" href="#dfn-array">array</a>
    and allows the use of a shared context.</p>

  <div class="example"><div class="example-title"><span>Example 50</span>: Using @graph to explicitly express the default graph</div><pre class="example">{
  "@context": ...,
  "<span class="highlight">@graph</span>":
  [
    {
      "@id": "http://manu.sporny.org/about#manu",
      "@type": "foaf:Person",
      "name": "Manu Sporny",
      "knows": "http://greggkellogg.net/foaf#me"
    },
    {
      "@id": "http://greggkellogg.net/foaf#me",
      "@type": "foaf:Person",
      "name": "Gregg Kellogg",
      "knows": "http://manu.sporny.org/about#manu"
    }
  ]
}</pre></div>

  <p>In this case, embedding doesn't work as each <a class="tref internalDFN" title="node-object" href="#dfn-node-object">node object</a>
    references the other. This is equivalent to using multiple
    <a class="tref internalDFN" title="node-object" href="#dfn-node-object">node objects</a> in array and defining
    the <code>@context</code> within each <a class="tref internalDFN" title="node-object" href="#dfn-node-object">node object</a>:</p>

  <div class="example"><div class="example-title"><span>Example 51</span>: Context needs to be duplicated if @graph is not used</div><pre class="example">[
  {
    <span class="highlight">"@context": ...,</span>
    "@id": "http://manu.sporny.org/about#manu",
    "@type": "foaf:Person",
    "name": "Manu Sporny",
    "knows": "http://greggkellogg.net/foaf#me"
  },
  {
    <span class="highlight">"@context": ...,</span>
    "@id": "http://greggkellogg.net/foaf#me",
    "@type": "foaf:Person",
    "name": "Gregg Kellogg",
    "knows": "http://manu.sporny.org/about#manu"
  }
]</pre></div>

</section>

<section class="informative" id="identifying-blank-nodes">
  <h3 aria-level="2" role="heading" id="h3_identifying-blank-nodes"><span class="secno">6.14 </span>Identifying Blank Nodes</h3><p><em>This section is non-normative.</em></p>

  <p>At times, it becomes necessary to be able to express information without
    being able to uniquely identify the <a class="tref internalDFN" title="node" href="#dfn-node">node</a> with an <a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>.
    This type of node is called a <a class="tref internalDFN" title="blank-node" href="#dfn-blank-node">blank node</a>. JSON-LD does not require
    all nodes to be identified using <code>@id</code>. However, some graph topologies
    may require identifiers to be serializable. Graphs containing loops, e.g., cannot
    be serialized using embedding alone, <code>@id</code> must be used to connect the nodes.
    In these situations, one can use <a class="tref internalDFN" title="blank-node-identifier" href="#dfn-blank-node-identifier">blank node identifiers</a>,
    which look like <a class="tref internalDFN" title="iri" href="#dfn-iri">IRIs</a> using an underscore (<code>_</code>)
    as scheme. This allows one to reference the node locally within the document, but
    makes it impossible to reference the node from an external document. The
    <a class="tref internalDFN" title="blank-node-identifier" href="#dfn-blank-node-identifier">blank node identifier</a> is scoped  to the document in which it is used.</p>

  <div class="example"><div class="example-title"><span>Example 52</span>: Specifying a local blank node identifier</div><pre class="example">{
   ...
   "@id": "<span class="highlight">_:n1</span>",
   "name": "Secret Agent 1",
   "knows":
     {
       "name": "Secret Agent 2",
       "knows": { "@id": "<span class="highlight">_:n1</span>" }
     }
}</pre></div>

  <p>The example above contains information about two secret agents that cannot be identified
    with an <a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>. While expressing that <em>agent&nbsp;1</em> knows <em>agent&nbsp;2</em>
    is possible without using <a class="tref internalDFN" title="blank-node-identifier" href="#dfn-blank-node-identifier">blank node identifiers</a>,
    it is necessary to assign <em>agent&nbsp;1</em> an identifier so that it can be referenced
    from <em>agent&nbsp;2</em>.</p>
  <p>It is worth nothing that blank node identifiers may be relabeled during processing.
    If a developer finds that they refer to the <a class="tref internalDFN" title="blank-node" href="#dfn-blank-node">blank node</a> more than once,
    they should consider naming the node using a dereferenceable <a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> so that
    it can also be referenced from other documents.</p>
</section>

<section class="informative" id="aliasing-keywords">
  <h3 aria-level="2" role="heading" id="h3_aliasing-keywords"><span class="secno">6.15 </span>Aliasing Keywords</h3><p><em>This section is non-normative.</em></p>

  <p>Each of the JSON-LD <a class="tref internalDFN" title="keyword" href="#dfn-keyword">keywords</a>,
    except for <code>@context</code>, may be aliased to application-specific
    keywords. This feature allows legacy JSON content to be utilized
    by JSON-LD by re-using JSON keys that already exist in legacy documents.
    This feature also allows developers to design domain-specific implementations
    using only the JSON-LD <a class="tref internalDFN" title="context" href="#dfn-context">context</a>.</p>

  <div class="example"><div class="example-title"><span>Example 53</span>: Aliasing keywords</div><pre class="example">{
  "@context":
  {
     <span class="highlight">"url": "@id"</span>,
     <span class="highlight">"a": "@type"</span>,
     "name": "http://xmlns.com/foaf/0.1/name"
  },
  "<span class="highlight">url</span>": "http://example.com/about#gregg",
  "<span class="highlight">a</span>": "http://xmlns.com/foaf/0.1/Person",
  "name": "Gregg Kellogg"
}</pre></div>

  <p>In the example above, the <code>@id</code> and <code>@type</code>
    <a class="tref internalDFN" title="keyword" href="#dfn-keyword">keywords</a> have been given the aliases
    <strong>url</strong> and <strong>a</strong>, respectively.</p>

  <p>Since keywords cannot be redefined, they can also not be aliased to
    other keywords.</p>
</section>

<section class="informative" id="data-indexing">
  <h3 aria-level="2" role="heading" id="h3_data-indexing"><span class="secno">6.16 </span>Data Indexing</h3><p><em>This section is non-normative.</em></p>

  <p>Databases are typically used to make access to
    data more efficient. Developers often extend this sort of functionality into
    their application data to deliver similar performance gains. Often this
    data does not have any meaning from a Linked Data standpoint, but is
    still useful for an application.</p>

  <p>JSON-LD introduces the notion of <a class="tref internalDFN" title="index-map" href="#dfn-index-map">index maps</a>
    that can be used to structure data into a form that is
    more efficient to access. The data indexing feature allows an author to
    structure data using a simple key-value map where the keys do not map
    to <a class="tref internalDFN" title="iri" href="#dfn-iri">IRIs</a>. This enables direct access to data
    instead of having to scan an array in search of a specific item.
    In JSON-LD such data can be specified by associating the
    <code>@index</code> <a class="tref internalDFN" title="keyword" href="#dfn-keyword">keyword</a> with a
    <code>@container</code> declaration in the context:</p>

  <div class="example"><div class="example-title"><span>Example 54</span>: Indexing data in JSON-LD</div><pre class="example">{
  "@context":
  {
     "schema": "http://schema.org/",
     "name": "schema:name",
     "body": "schema:articleBody",
     "words": "schema:wordCount",
     "post": {
       "@id": "schema:blogPost",
       <span class="highlight">"@container": "@index"</span>
     }
  },
  "@id": "http://example.com/",
  "@type": "schema:Blog",
  "name": "World Financial News",
  <span class="highlight">"post": {
     "en": {
       "@id": "http://example.com/posts/1/en",
       "body": "World commodities were up today with heavy trading of crude oil...",
       "words": 1539
     },
     "de": {
       "@id": "http://example.com/posts/1/de",
       "body": "Die Werte an Warenbörsen stiegen im Sog eines starken Handels von Rohöl...",
       "words": 1204
     }</span>
  }
}</pre></div>

  <p>In the example above, the <strong>post</strong> <a class="tref internalDFN" title="term" href="#dfn-term">term</a> has
    been marked as an <a class="tref internalDFN" title="index-map" href="#dfn-index-map">index map</a>. The <strong>en</strong> and
    <strong>de</strong> keys will be ignored  semantically, but preserved
    syntactically, by the JSON-LD Processor.  This allows a developer to
    access the German version of the <strong>post</strong> using the
    following code snippet: <code>obj.post.de</code>.</p>

  <p>The interpretation of the data above is expressed in
    the table below. Note how the index keys do not appear in the Linked Data
    below, but would continue to exist if the document were compacted or
    expanded (see <a class="sectionRef sec-ref" href="#compacted-document-form">section 6.18 Compacted Document Form</a> and
    <a class="sectionRef sec-ref" href="#expanded-document-form">section 6.17 Expanded Document Form</a>) using a JSON-LD processor:</p>

  <table class="example">
    <thead>
      <tr><th>Subject</th>
      <th>Property</th>
      <th>Value</th>
    </tr></thead>
    <tbody>
      <tr>
        <td>http://example.com/</td>
        <td>http://www.w3.org/1999/02/22-rdf-syntax-ns#type</td>
        <td>http://schema.org/Blog</td>
      </tr>
      <tr>
        <td>http://example.com/</td>
        <td>http://schema.org/name</td>
        <td>World Financial News</td>
      </tr>
      <tr>
        <td>http://example.com/</td>
        <td>http://schema.org/blogPost</td>
        <td>http://example.com/posts/1/en</td>
      </tr>
      <tr>
        <td>http://example.com/</td>
        <td>http://schema.org/blogPost</td>
        <td>http://example.com/posts/1/de</td>
      </tr>
      <tr>
        <td>http://example.com/posts/1/en</td>
        <td>http://schema.org/articleBody</td>
        <td>World commodities were up today with heavy trading of crude oil...</td>
      </tr>
      <tr>
        <td>http://example.com/posts/1/en</td>
        <td>http://schema.org/wordCount</td>
        <td>1539</td>
      </tr>
      <tr>
        <td>http://example.com/posts/1/de</td>
        <td>http://schema.org/articleBody</td>
        <td>Die Werte an Warenbörsen stiegen im Sog eines starken Handels von Rohöl...</td>
      </tr>
      <tr>
        <td>http://example.com/posts/1/de</td>
        <td>http://schema.org/wordCount</td>
        <td>1204</td>
      </tr>
    </tbody>
  </table>
</section>

<section class="informative" id="expanded-document-form">
  <h3 aria-level="2" role="heading" id="h3_expanded-document-form"><span class="secno">6.17 </span>Expanded Document Form</h3><p><em>This section is non-normative.</em></p>

  <p>The JSON-LD Processing Algorithms and API specification [<cite><a class="bibref" href="#bib-JSON-LD-API">JSON-LD-API</a></cite>]
    defines a method for <em>expanding</em> a JSON-LD document.
    Expansion is the process of taking a JSON-LD document and applying a
    <code>@context</code> such that all IRIs, types, and values
    are expanded so that the <code>@context</code> is no longer necessary.</p>

  <p>For example, assume the following JSON-LD input document:</p>

  <div class="example"><div class="example-title"><span>Example 55</span>: Sample JSON-LD document</div><pre class="example">{
   "@context":
   {
      "name": "http://xmlns.com/foaf/0.1/name",
      "homepage": {
        "@id": "http://xmlns.com/foaf/0.1/homepage",
        "@type": "@id"
      }
   },
   "name": "Manu Sporny",
   "homepage": "http://manu.sporny.org/"
}</pre></div>

  <p>Running the JSON-LD Expansion algorithm against the JSON-LD input document
    provided above would result in the following output:</p>

  <div class="example"><div class="example-title"><span>Example 56</span>: Expanded form for the previous example</div><pre class="example">[
  {
    "http://xmlns.com/foaf/0.1/name": [
      { "@value": "Manu Sporny" }
    ],
    "http://xmlns.com/foaf/0.1/homepage": [
      { "@id": "http://manu.sporny.org/" }
    ]
  }
]</pre></div>

  <p><a href="#application-ld-json">JSON-LD's media type</a> defines a
    <code>profile</code> parameter which can be used to signal or request
    expanded document form. The profile URI identifying expanded document
    form is <code>http://www.w3.org/ns/json-ld#expanded</code>.</p>
</section>

<section class="informative" id="compacted-document-form">
  <h3 aria-level="2" role="heading" id="h3_compacted-document-form"><span class="secno">6.18 </span>Compacted Document Form</h3><p><em>This section is non-normative.</em></p>

  <p>The JSON-LD Processing Algorithms and API specification [<cite><a class="bibref" href="#bib-JSON-LD-API">JSON-LD-API</a></cite>] defines
    a method for <em>compacting</em> a JSON-LD document. Compaction is the process
    of applying a developer-supplied context to shorten <a class="tref internalDFN" title="iri" href="#dfn-iri">IRIs</a>
    to <a class="tref internalDFN" title="term" href="#dfn-term">terms</a> or <a class="tref internalDFN" title="compact-iri" href="#dfn-compact-iri">compact IRIs</a>
    and JSON-LD values expressed in expanded form to simple values such as
    <a class="tref internalDFN" title="string" href="#dfn-string">strings</a> or <a class="tref internalDFN" title="number" href="#dfn-number">numbers</a>.
    Often this makes it simpler to work with document as the data is expressed in
    application-specific terms. Compacted documents are also typically easier to read
    for humans.</p>

  <p>For example, assume the following JSON-LD input document:</p>

  <div class="example"><div class="example-title"><span>Example 57</span>: Sample expanded JSON-LD document</div><pre class="example">[
  {
    "http://xmlns.com/foaf/0.1/name": [ "Manu Sporny" ],
    "http://xmlns.com/foaf/0.1/homepage": [
      {
       "@id": "http://manu.sporny.org/"
      }
    ]
  }
]</pre></div>

  <p>Additionally, assume the following developer-supplied JSON-LD context:</p>

  <div class="example"><div class="example-title"><span>Example 58</span>: Sample context</div><pre class="example">{
  "@context": {
    "name": "http://xmlns.com/foaf/0.1/name",
    "homepage": {
      "@id": "http://xmlns.com/foaf/0.1/homepage",
      "@type": "@id"
    }
  }
}</pre></div>

  <p>Running the JSON-LD Compaction algorithm given the context supplied above
    against the JSON-LD input document provided above would result in the following
    output:</p>

  <div class="example"><div class="example-title"><span>Example 59</span>: Compact form of the sample document once sample context has been applied</div><pre class="example">{
  "@context": {
    "name": "http://xmlns.com/foaf/0.1/name",
    "homepage": {
      "@id": "http://xmlns.com/foaf/0.1/homepage",
      "@type": "@id"
    }
  },
  "name": "Manu Sporny",
  "homepage": "http://manu.sporny.org/"
}</pre></div>

  <p><a href="#application-ld-json">JSON-LD's media type</a> defines a
    <code>profile</code> parameter which can be used to signal or request
    compacted document form. The profile URI identifying compacted document
    form is <code>http://www.w3.org/ns/json-ld#compacted</code>.</p>
</section>

<section class="informative" id="flattened-document-form">
  <h3 aria-level="2" role="heading" id="h3_flattened-document-form"><span class="secno">6.19 </span>Flattened Document Form</h3><p><em>This section is non-normative.</em></p>

  <p>The JSON-LD Processing Algorithms and API specification [<cite><a class="bibref" href="#bib-JSON-LD-API">JSON-LD-API</a></cite>] defines
    a method for <em>flattening</em> a JSON-LD document. Flattening collects all
    properties of a <a class="tref internalDFN" title="node" href="#dfn-node">node</a> in a single <a class="tref internalDFN" title="json-object" href="#dfn-json-object">JSON object</a> and labels
    all <a class="tref internalDFN" title="blank-node" href="#dfn-blank-node">blank nodes</a> with
    <a class="tref internalDFN" title="blank-node-identifier" href="#dfn-blank-node-identifier">blank node identifiers</a>.
    This ensures a shape of the data and consequently may drastically simplify the code
    required to process JSON-LD in certain applications.</p>

  <p>For example, assume the following JSON-LD input document:</p>

  <div class="example"><div class="example-title"><span>Example 60</span>: Sample JSON-LD document</div><pre class="example">{
  "@context": {
    "name": "http://xmlns.com/foaf/0.1/name",
    "knows": "http://xmlns.com/foaf/0.1/knows"
  },
  "@id": "http://me.markus-lanthaler.com/",
  "name": "Markus Lanthaler",
  "knows": [
    {
      "@id": "http://manu.sporny.org/about#manu",
      "name": "Manu Sporny"
    },
    {
      "name": "Dave Longley"
    }
  ]
}</pre></div>

  <p>Running the JSON-LD Flattening algorithm against the JSON-LD input document in
    the example above and using the same context would result in the following
    output:</p>

  <div class="example"><div class="example-title"><span>Example 61</span>: Flattened and compacted form for the previous example</div><pre class="example">{
  "@context": {
    "name": "http://xmlns.com/foaf/0.1/name",
    "knows": "http://xmlns.com/foaf/0.1/knows"
  },
  "@graph": [
    {
      "@id": "_:b0",
      "name": "Dave Longley"
    },
    {
      "@id": "http://manu.sporny.org/about#manu",
      "name": "Manu Sporny"
    },
    {
      "@id": "http://me.markus-lanthaler.com/",
      "name": "Markus Lanthaler",
      "knows": [
        { "@id": "http://manu.sporny.org/about#manu" },
        { "@id": "_:b0" }
      ]
    }
  ]
}</pre></div>

  <p><a href="#application-ld-json">JSON-LD's media type</a> defines a
    <code>profile</code> parameter which can be used to signal or request
    flattened document form. The profile URI identifying flattened document
    form is <code>http://www.w3.org/ns/json-ld#flattened</code>. It can be
    combined with the profile URI identifying
    <a href="#expanded-document-form">expanded document form</a> or
    <a href="#compacted-document-form">compacted document from</a>.</p>
</section>

<section class="informative" id="embedding-json-ld-in-html-documents">
  <h3 aria-level="2" role="heading" id="h3_embedding-json-ld-in-html-documents"><span class="secno">6.20 </span>Embedding JSON-LD in HTML Documents</h3><p><em>This section is non-normative.</em></p>

  <p>HTML script tags can be used to embed blocks of data in documents.
    This way, JSON-LD content can be easily embedded in HTML by placing
    it in a script element with the <code>type</code> attribute set to
    <code>application/ld+json</code>.</p>

  <div class="example"><div class="example-title"><span>Example 62</span>: Embedding JSON-LD in HTML</div><pre class="example"><span class="highlight">&lt;script type="application/ld+json"&gt;</span>
{
  "@context": "http://json-ld.org/contexts/person.jsonld",
  "@id": "http://dbpedia.org/resource/John_Lennon",
  "name": "John Lennon",
  "born": "1940-10-09",
  "spouse": "http://dbpedia.org/resource/Cynthia_Lennon"
}
<span class="highlight">&lt;/script&gt;</span></pre></div>

  <p>Depending on how the HTML document is served, certain strings may need
    to be escaped.</p>

  <p>Defining how such data may be used is beyond the scope of this specification.
    The embedded JSON-LD document might be extracted as is or, e.g., be
    interpreted as RDF.</p>

  <p>If JSON-LD content is extracted as RDF [<cite><a class="bibref" href="#bib-RDF11-CONCEPTS">RDF11-CONCEPTS</a></cite>], it should be expanded into an
    <a class="tref externalDFN" title="rdf-dataset" href="http://www.w3.org/TR/rdf11-concepts/#dfn-rdf-dataset">RDF Dataset</a> using the
    <cite><a href="http://www.w3.org/TR/2014/REC-json-ld-api-20140116/#deserialize-json-ld-to-rdf-algorithm">Deserialize JSON-LD to RDF Algorithm</a></cite>
    [<cite><a class="bibref" href="#bib-JSON-LD-API">JSON-LD-API</a></cite>].</p>
</section>

</section>

<section class="normative" id="data-model">
  <!--OddPage--><h2 aria-level="1" role="heading" id="h2_data-model"><span class="secno">7. </span>Data Model</h2>

  <p>JSON-LD is a serialization format for Linked Data based on JSON.
    It is therefore important to distinguish between the syntax, which is
    defined by JSON in [<cite><a class="bibref" href="#bib-RFC4627">RFC4627</a></cite>], and the <dfn title="data-model" id="dfn-data-model">data model</dfn> which is
    an extension of the RDF data model [<cite><a class="bibref" href="#bib-RDF11-CONCEPTS">RDF11-CONCEPTS</a></cite>]. The precise
    details of how JSON-LD relates to the RDF data model are given in
    <a class="sectionRef sec-ref" href="#relationship-to-rdf">section 9. Relationship to RDF</a>.</p>

  <p>To ease understanding for developers unfamiliar with the RDF model, the
    following summary is provided:</p>

  <ul>
    <li>A <dfn title="json-ld-document" id="dfn-json-ld-document">JSON-LD document</dfn> serializes a
      <a href="http://www.w3.org/TR/rdf11-concepts/#dfn-generalized-rdf-dataset" class="externalDFN">generalized RDF Dataset</a>
      [<cite><a class="bibref" href="#bib-RDF11-CONCEPTS">RDF11-CONCEPTS</a></cite>], which is a collection of <a class="tref internalDFN" title="graph" href="#dfn-graph">graphs</a>
      that comprises exactly one <dfn title="default-graph" id="dfn-default-graph"><a href="http://www.w3.org/TR/rdf11-concepts/#dfn-default-graph" class="externalDFN">default graph</a></dfn>
      and zero or more <dfn title="named-graph" id="dfn-named-graph"><a href="http://www.w3.org/TR/rdf11-concepts/#dfn-named-graph" class="externalDFN">named graphs</a></dfn>.</li>
    <li>The <a class="tref internalDFN" title="default-graph" href="#dfn-default-graph">default graph</a> does not have a name and <em class="rfc2119" title="MAY">MAY</em> be empty.</li>
    <li>Each <a class="tref internalDFN" title="named-graph" href="#dfn-named-graph">named graph</a> is a pair consisting of an <a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> or
      <a class="tref internalDFN" title="blank-node-identifier" href="#dfn-blank-node-identifier">blank node identifier</a> (the
      <dfn title="graph-name" id="dfn-graph-name"><a href="http://www.w3.org/TR/rdf11-concepts/#dfn-graph-name" class="externalDFN">graph name</a></dfn>)
      and a <a class="tref internalDFN" title="graph" href="#dfn-graph">graph</a>. Whenever practical, the <a class="tref internalDFN" title="graph-name" href="#dfn-graph-name">graph name</a> <em class="rfc2119" title="SHOULD">SHOULD</em> be an <a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>.</li>
    <li>A <dfn title="graph" id="dfn-graph"><a href="http://www.w3.org/TR/rdf11-concepts/#dfn-generalized-rdf-graph" class="externalDFN">graph</a></dfn>
      is a labeled directed graph, i.e., a set of <a class="tref internalDFN" title="node" href="#dfn-node">nodes</a>
      connected by <a class="tref internalDFN" title="edge" href="#dfn-edge">edges</a>.</li>
    <li>Every <dfn title="edge" id="dfn-edge">edge</dfn> has a direction associated with it and is labeled with
      an <a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> or a <a class="tref internalDFN" title="blank-node-identifier" href="#dfn-blank-node-identifier">blank node identifier</a>. Within the JSON-LD syntax
      these edge labels are called
      <dfn title="property" id="dfn-property"><a href="http://www.w3.org/TR/rdf11-concepts/#dfn-property" class="externalDFN">properties</a></dfn>.
      Whenever practical, an <a class="tref internalDFN" title="edge" href="#dfn-edge">edge</a> <em class="rfc2119" title="SHOULD">SHOULD</em> be labeled with an <a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>.</li>
    <li>Every <dfn title="node" id="dfn-node"><a href="http://www.w3.org/TR/rdf11-concepts/#dfn-node" class="externalDFN">node</a></dfn>
      is an <a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>, a <a class="tref internalDFN" title="blank-node" href="#dfn-blank-node">blank node</a>, a <a class="tref internalDFN" title="json-ld-value" href="#dfn-json-ld-value">JSON-LD value</a>,
      or a <a class="tref internalDFN" title="list" href="#dfn-list">list</a>.</li>
    <li>A <a class="tref internalDFN" title="node" href="#dfn-node">node</a> having an outgoing edge <em class="rfc2119" title="MUST">MUST</em> be an <a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> or a
      <a class="tref internalDFN" title="blank-node" href="#dfn-blank-node">blank node</a>.</li>
    <li>A <a class="tref internalDFN" title="graph" href="#dfn-graph">graph</a> <em class="rfc2119" title="MUST NOT">MUST NOT</em> contain unconnected <a class="tref internalDFN" title="node" href="#dfn-node">nodes</a>,
      i.e., nodes which are not connected by an <a class="tref internalDFN" title="edge" href="#dfn-edge">edge</a> to any other <a class="tref internalDFN" title="node" href="#dfn-node">node</a>.</li>
    <li>An <dfn title="iri" id="dfn-iri"><abbr title="Internationalized Resource Identifier"><a href="http://www.w3.org/TR/rdf11-concepts/#dfn-iri" class="externalDFN">IRI</a></abbr></dfn>
      (Internationalized Resource Identifier) is a string that conforms to the syntax
      defined in [<cite><a class="bibref" href="#bib-RFC3987">RFC3987</a></cite>]. <a class="tref internalDFN" title="iri" href="#dfn-iri">IRIs</a> used within a
      <a class="tref internalDFN" title="graph" href="#dfn-graph">graph</a> <em class="rfc2119" title="SHOULD">SHOULD</em> return a Linked Data document describing
      the resource denoted by that <a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> when being dereferenced.</li>
    <li>A <dfn title="blank-node" id="dfn-blank-node"><a href="http://www.w3.org/TR/rdf11-concepts/#dfn-blank-node" class="externalDFN">blank node</a></dfn>
      is a <a class="tref internalDFN" title="node" href="#dfn-node">node</a> which is neither an <a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>,
      nor a <a class="tref internalDFN" title="json-ld-value" href="#dfn-json-ld-value">JSON-LD value</a>, nor a <a class="tref internalDFN" title="list" href="#dfn-list">list</a>. A blank node <em class="rfc2119" title="MAY">MAY</em> be identified
      using a <a class="tref internalDFN" title="blank-node-identifier" href="#dfn-blank-node-identifier">blank node identifier</a>.</li>
    <li>A <dfn title="blank-node-identifier" id="dfn-blank-node-identifier"><a href="http://www.w3.org/TR/rdf11-concepts/#dfn-blank-node-identifier" class="externalDFN">blank node identifier</a></dfn>
      is a string that can be used as an identifier for a <a class="tref internalDFN" title="blank-node" href="#dfn-blank-node">blank node</a> within
      the scope of a <a class="tref internalDFN" title="json-ld-document" href="#dfn-json-ld-document">JSON-LD document</a>. Blank node identifiers begin with
      <code>_:</code>.</li>
    <li>A <dfn title="json-ld-value" id="dfn-json-ld-value">JSON-LD value</dfn> is a <a class="tref internalDFN" title="typed-value" href="#dfn-typed-value">typed value</a>, a <a class="tref internalDFN" title="string" href="#dfn-string">string</a> (which is interpreted
      as <a class="tref internalDFN" title="typed-value" href="#dfn-typed-value">typed value</a> with type <code>xsd:string</code>), a <a class="tref internalDFN" title="number" href="#dfn-number">number</a>
      (<a class="tref internalDFN" title="number" href="#dfn-number">numbers</a> with a non-zero fractional part, i.e., the result of a modulo‑1 operation,
      are interpreted as <a class="tref internalDFN" title="typed-value" href="#dfn-typed-value">typed values</a> with type <code>xsd:double</code>, all other
      <a class="tref internalDFN" title="number" href="#dfn-number">numbers</a> are interpreted as <a class="tref internalDFN" title="typed-value" href="#dfn-typed-value">typed values</a>
      with type <code>xsd:integer</code>), <a class="tref internalDFN" title="true" href="#dfn-true">true</a> or <a class="tref internalDFN" title="false" href="#dfn-false">false</a> (which are interpreted as
      <a class="tref internalDFN" title="typed-value" href="#dfn-typed-value">typed values</a> with type <code>xsd:boolean</code>),
      or a <a class="tref internalDFN" title="language-tagged-string" href="#dfn-language-tagged-string">language-tagged string</a>.</li>
    <li>A <dfn title="typed-value" id="dfn-typed-value">typed value</dfn> consists of a value, which is a string, and a type, which is an
      <a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>.</li>
    <li>A <dfn title="language-tagged-string" id="dfn-language-tagged-string"><a href="http://www.w3.org/TR/rdf11-concepts/#dfn-language-tagged-string" class="externalDFN">language-tagged string</a></dfn>
      consists of a string and a non-empty language tag as defined by [<cite><a class="bibref" href="#bib-BCP47">BCP47</a></cite>].
      The language tag <em class="rfc2119" title="MUST">MUST</em> be well-formed according to section
      <a href="http://tools.ietf.org/html/bcp47#section-2.2.9">2.2.9 Classes of Conformance</a>
      of [<cite><a class="bibref" href="#bib-BCP47">BCP47</a></cite>].</li>
    <li>A <dfn title="list" id="dfn-list">list</dfn> is a sequence of zero or more <a class="tref internalDFN" title="iri" href="#dfn-iri">IRIs</a>,
      <a class="tref internalDFN" title="blank-node" href="#dfn-blank-node">blank nodes</a>, and <a class="tref internalDFN" title="json-ld-value" href="#dfn-json-ld-value">JSON-LD values</a>.
      <a class="tref internalDFN" title="list" href="#dfn-list">Lists</a> are interpreted as
      <a href="http://www.w3.org/TR/rdf11-mt/#rdf-collections" class="externalDFN">RDF list structures</a> [<cite><a class="bibref" href="#bib-RDF11-MT">RDF11-MT</a></cite>].</li>
  </ul>

  <p><a class="tref internalDFN" title="json-ld-document" href="#dfn-json-ld-document">JSON-LD documents</a> <em class="rfc2119" title="MAY">MAY</em> contain data
    that cannot be represented by the <a class="tref internalDFN" title="data-model" href="#dfn-data-model">data model</a>
    defined above. Unless otherwise specified, such data is ignored when a
    <a class="tref internalDFN" title="json-ld-document" href="#dfn-json-ld-document">JSON-LD document</a> is being processed. One result of this rule
    is that properties which are not mapped to an <a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>,
    a <a class="tref internalDFN" title="blank-node" href="#dfn-blank-node">blank node</a>, or <a class="tref internalDFN" title="keyword" href="#dfn-keyword">keyword</a> will be ignored.</p>

  <p style="text-align: center"><img src="linked-data-graph.png" title="An illustration of the data model" alt="An illustration of the data model"></p>
  <p style="text-align: center">Figure&nbsp;1: An illustration of the data model.</p>
</section>

<section class="normative" id="json-ld-grammar">
  <!--OddPage--><h2 aria-level="1" role="heading" id="h2_json-ld-grammar"><span class="secno">8. </span>JSON-LD Grammar</h2>

  <p>This appendix restates the syntactic conventions described in the
    previous sections more formally.</p>

  <p>A <a class="tref internalDFN" title="json-ld-document" href="#dfn-json-ld-document">JSON-LD document</a> <em class="rfc2119" title="MUST">MUST</em> be a valid JSON document as described
    in [<cite><a class="bibref" href="#bib-RFC4627">RFC4627</a></cite>].</p>

  <p>A <a class="tref internalDFN" title="json-ld-document" href="#dfn-json-ld-document">JSON-LD document</a> <em class="rfc2119" title="MUST">MUST</em> be a single <a class="tref internalDFN" title="node-object" href="#dfn-node-object">node object</a>
    or an <a class="tref internalDFN" title="array" href="#dfn-array">array</a> whose elements are each
    <a class="tref internalDFN" title="node-object" href="#dfn-node-object">node objects</a> at the top level.</p>

  <p>In contrast to JSON, in JSON-LD the keys in <a class="tref internalDFN" title="json-object" href="#dfn-json-object">objects</a>
    <em class="rfc2119" title="MUST">MUST</em> be unique.</p>

  <div class="note"><div class="note-title" aria-level="2" role="heading" id="h_note_9"><span>Note</span></div><p class="">JSON-LD allows <a class="tref internalDFN" title="keyword" href="#dfn-keyword">keywords</a> to be aliased
    (see <a class="sectionRef sec-ref" href="#aliasing-keywords">section 6.15 Aliasing Keywords</a> for details). Whenever a <a class="tref internalDFN" title="keyword" href="#dfn-keyword">keyword</a> is
    discussed in this grammar, the statements also apply to an alias for
    that <a class="tref internalDFN" title="keyword" href="#dfn-keyword">keyword</a>. For example, if the <a class="tref internalDFN" title="active-context" href="#dfn-active-context">active context</a>
    defines the <a class="tref internalDFN" title="term" href="#dfn-term">term</a> <code>id</code> as an alias for <code>@id</code>,
    that alias may be legitimately used as a substitution for <code>@id</code>.
    Note that <a class="tref internalDFN" title="keyword" href="#dfn-keyword">keyword</a> aliases are not expanded during context
    processing.</p></div>

  <section class="normative" id="terms">
    <h3 aria-level="2" role="heading" id="h3_terms"><span class="secno">8.1 </span>Terms</h3>

    <p>A <dfn title="term" id="dfn-term">term</dfn> is a short-hand <a class="tref internalDFN" title="string" href="#dfn-string">string</a> that expands
      to an <a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a> or a <a class="tref internalDFN" title="blank-node-identifier" href="#dfn-blank-node-identifier">blank node identifier</a>.</p>

    <p>A <a class="tref internalDFN" title="term" href="#dfn-term">term</a> <em class="rfc2119" title="MUST NOT">MUST NOT</em> equal any of the JSON-LD
      <a class="tref internalDFN" title="keyword" href="#dfn-keyword">keywords</a>.</p>

    <p>To avoid forward-compatibility issues, a <a class="tref internalDFN" title="term" href="#dfn-term">term</a> <em class="rfc2119" title="SHOULD NOT">SHOULD NOT</em> start
      with an <code>@</code> character as future versions of JSON-LD may introduce
      additional <a class="tref internalDFN" title="keyword" href="#dfn-keyword">keywords</a>. Furthermore, the term <em class="rfc2119" title="MUST NOT">MUST NOT</em>
      be an empty <a class="tref internalDFN" title="string" href="#dfn-string">string</a> (<code>""</code>) as not all programming languages
      are able to handle empty JSON keys.</p>

    <p>See <a class="sectionRef sec-ref" href="#the-context">section 5.1 The Context</a> and
      <a class="sectionRef sec-ref" href="#iris">section 5.2 IRIs</a> for further discussion
      on mapping <a class="tref internalDFN" title="term" href="#dfn-term">terms</a> to <a class="tref internalDFN" title="iri" href="#dfn-iri">IRIs</a>.</p>
  </section>

  <section class="normative" id="node-objects">
    <h3 aria-level="2" role="heading" id="h3_node-objects"><span class="secno">8.2 </span>Node Objects</h3>

    <p>A <dfn title="node-object" id="dfn-node-object">node object</dfn> represents zero or more properties of a
      <a class="tref internalDFN" title="node" href="#dfn-node">node</a> in the <a class="tref internalDFN" title="graph" href="#dfn-graph">graph</a> serialized by the
      <a class="tref internalDFN" title="json-ld-document" href="#dfn-json-ld-document">JSON-LD document</a>. A <a class="tref internalDFN" title="json-object" href="#dfn-json-object">JSON object</a> is a
      <a class="tref internalDFN" title="node-object" href="#dfn-node-object">node object</a> if it exists outside of a JSON-LD
      <a class="tref internalDFN" title="context" href="#dfn-context">context</a> and:</p>

    <ul>
      <li>it does not contain the <code>@value</code>, <code>@list</code>,
        or <code>@set</code> keywords, and</li>
      <li>it is not the top-most <a class="tref internalDFN" title="json-object" href="#dfn-json-object">JSON object</a> in the JSON-LD document
        consisting of no other members than <code>@graph</code> and
        <code>@context</code>.</li>
    </ul>

    <p>The <a class="tref internalDFN" title="property" href="#dfn-property">properties</a> of a <a class="tref internalDFN" title="node" href="#dfn-node">node</a> in
      a <a class="tref internalDFN" title="graph" href="#dfn-graph">graph</a> may be spread among different
      <a class="tref internalDFN" title="node-object" href="#dfn-node-object">node objects</a> within a document. When
      that happens, the keys of the different
      <a class="tref internalDFN" title="node-object" href="#dfn-node-object">node objects</a> need to be merged to create the
      properties of the resulting <a class="tref internalDFN" title="node" href="#dfn-node">node</a>.</p>

    <p>A <a class="tref internalDFN" title="node-object" href="#dfn-node-object">node object</a> <em class="rfc2119" title="MUST">MUST</em> be a <a class="tref internalDFN" title="json-object" href="#dfn-json-object">JSON object</a>. All keys
      which are not <a class="tref internalDFN" title="iri" href="#dfn-iri">IRIs</a>,
      <a class="tref internalDFN" title="compact-iri" href="#dfn-compact-iri">compact IRIs</a>, <a class="tref internalDFN" title="term" href="#dfn-term">terms</a>
      valid in the <a class="tref internalDFN" title="active-context" href="#dfn-active-context">active context</a>, or one of the following
      <a class="tref internalDFN" title="keyword" href="#dfn-keyword">keywords</a> <em class="rfc2119" title="MUST">MUST</em> be ignored when processed:</p>

    <ul>
      <li><code>@context</code>,</li>
      <li><code>@id</code>,</li>
      <li><code>@graph</code>,</li>
      <li><code>@type</code>,</li>
      <li><code>@reverse</code>, or</li>
      <li><code>@index</code></li>
    </ul>

    <p>If the <a class="tref internalDFN" title="node-object" href="#dfn-node-object">node object</a> contains the <code>@context</code>
      key, its value <em class="rfc2119" title="MUST">MUST</em> be <a class="tref internalDFN" title="null" href="#dfn-null">null</a>, an <a class="tref internalDFN" title="absolute-iri" href="#dfn-absolute-iri">absolute <abbr title="Internationalized Resource Identifier">IRI</abbr></a>,
      a <a class="tref internalDFN" title="relative-iri" href="#dfn-relative-iri">relative <abbr title="Internationalized Resource Identifier">IRI</abbr></a>, a <a class="tref internalDFN" title="context-definition" href="#dfn-context-definition">context definition</a>, or
      an <a class="tref internalDFN" title="array" href="#dfn-array">array</a> composed of any of these.</p>

    <p>If the <a class="tref internalDFN" title="node-object" href="#dfn-node-object">node object</a> contains the <code>@id</code> key,
      its value <em class="rfc2119" title="MUST">MUST</em> be an <a class="tref internalDFN" title="absolute-iri" href="#dfn-absolute-iri">absolute <abbr title="Internationalized Resource Identifier">IRI</abbr></a>, a <a class="tref internalDFN" title="relative-iri" href="#dfn-relative-iri">relative <abbr title="Internationalized Resource Identifier">IRI</abbr></a>,
      or a <a class="tref internalDFN" title="compact-iri" href="#dfn-compact-iri">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a> (including
      <a class="tref internalDFN" title="blank-node-identifier" href="#dfn-blank-node-identifier">blank node identifiers</a>).
      See <a class="sectionRef sec-ref" href="#node-identifiers">section 5.3 Node Identifiers</a>,
      <a class="sectionRef sec-ref" href="#compact-iris">section 6.3 Compact IRIs</a>, and
      <a class="sectionRef sec-ref" href="#identifying-blank-nodes">section 6.14 Identifying Blank Nodes</a> for further discussion on
      <code>@id</code> values.</p>

    <p>If the <a class="tref internalDFN" title="node-object" href="#dfn-node-object">node object</a> contains the <code>@graph</code>
      key, its value <em class="rfc2119" title="MUST">MUST</em> be
      a <a class="tref internalDFN" title="node-object" href="#dfn-node-object">node object</a> or
      an <a class="tref internalDFN" title="array" href="#dfn-array">array</a> of zero or more <a class="tref internalDFN" title="node-object" href="#dfn-node-object">node objects</a>.
      If the <a class="tref internalDFN" title="node-object" href="#dfn-node-object">node object</a> contains an <code>@id</code> keyword,
      its value is used as the label of a named graph.
      See <a class="sectionRef sec-ref" href="#named-graphs">section 6.13 Named Graphs</a> for further discussion on
      <code>@graph</code> values. As a special case, if a <a class="tref internalDFN" title="json-object" href="#dfn-json-object">JSON object</a>
      contains no keys other than <code>@graph</code> and <code>@context</code>, and the
      <a class="tref internalDFN" title="json-object" href="#dfn-json-object">JSON object</a> is the root of the JSON-LD document, the
      <a class="tref internalDFN" title="json-object" href="#dfn-json-object">JSON object</a> is not treated as a <a class="tref internalDFN" title="node-object" href="#dfn-node-object">node object</a>; this
      is used as a way of defining <a class="tref internalDFN" title="node-object" href="#dfn-node-object">node
      definitions</a> that may not form a connected graph. This allows a
      <a class="tref internalDFN" title="context" href="#dfn-context">context</a> to be defined which is shared by all of the constituent
      <a class="tref internalDFN" title="node-object" href="#dfn-node-object">node objects</a>.</p>

    <p>If the <a class="tref internalDFN" title="node-object" href="#dfn-node-object">node object</a> contains the <code>@type</code>
      key, its value <em class="rfc2119" title="MUST">MUST</em> be either an <a class="tref internalDFN" title="absolute-iri" href="#dfn-absolute-iri">absolute <abbr title="Internationalized Resource Identifier">IRI</abbr></a>, a
      <a class="tref internalDFN" title="relative-iri" href="#dfn-relative-iri">relative <abbr title="Internationalized Resource Identifier">IRI</abbr></a>, a <a class="tref internalDFN" title="compact-iri" href="#dfn-compact-iri">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a>
      (including <a class="tref internalDFN" title="blank-node-identifier" href="#dfn-blank-node-identifier">blank node identifiers</a>),
      a <a class="tref internalDFN" title="term" href="#dfn-term">term</a> defined in the <a class="tref internalDFN" title="active-context" href="#dfn-active-context">active context</a> expanding into an <a class="tref internalDFN" title="absolute-iri" href="#dfn-absolute-iri">absolute <abbr title="Internationalized Resource Identifier">IRI</abbr></a>, or
      an <a class="tref internalDFN" title="array" href="#dfn-array">array</a> of any of these.
      See <a class="sectionRef sec-ref" href="#specifying-the-type">section 5.4 Specifying the Type</a> for further discussion on
      <code>@type</code> values.</p>

    <p>If the <a class="tref internalDFN" title="node-object" href="#dfn-node-object">node object</a> contains the <code>@reverse</code> key,
      its value <em class="rfc2119" title="MUST">MUST</em> be a <a class="tref internalDFN" title="json-object" href="#dfn-json-object">JSON object</a> containing members representing reverse
      properties. Each value of such a reverse property <em class="rfc2119" title="MUST">MUST</em> be an <a class="tref internalDFN" title="absolute-iri" href="#dfn-absolute-iri">absolute <abbr title="Internationalized Resource Identifier">IRI</abbr></a>,
      a <a class="tref internalDFN" title="relative-iri" href="#dfn-relative-iri">relative <abbr title="Internationalized Resource Identifier">IRI</abbr></a>, a <a class="tref internalDFN" title="compact-iri" href="#dfn-compact-iri">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a>, a <a class="tref internalDFN" title="blank-node-identifier" href="#dfn-blank-node-identifier">blank node identifier</a>,
      a <a class="tref internalDFN" title="node-object" href="#dfn-node-object">node object</a> or an <a class="tref internalDFN" title="array" href="#dfn-array">array</a> containing a combination of these.</p>

    <p>If the <a class="tref internalDFN" title="node-object" href="#dfn-node-object">node object</a> contains the <code>@index</code> key,
      its value <em class="rfc2119" title="MUST">MUST</em> be a <a class="tref internalDFN" title="string" href="#dfn-string">string</a>. See
      <a class="sectionRef sec-ref" href="#data-indexing">section 6.16 Data Indexing</a> for further discussion
      on <code>@index</code> values.</p>

    <p>Keys in a <a class="tref internalDFN" title="node-object" href="#dfn-node-object">node object</a> that are not
      <a class="tref internalDFN" title="keyword" href="#dfn-keyword">keywords</a> <em class="rfc2119" title="MAY">MAY</em> expand to an <a class="tref internalDFN" title="absolute-iri" href="#dfn-absolute-iri">absolute <abbr title="Internationalized Resource Identifier">IRI</abbr></a>
      using the <a class="tref internalDFN" title="active-context" href="#dfn-active-context">active context</a>. The values associated with keys that expand
      to an <a class="tref internalDFN" title="absolute-iri" href="#dfn-absolute-iri">absolute <abbr title="Internationalized Resource Identifier">IRI</abbr></a> <em class="rfc2119" title="MUST">MUST</em> be one of the following:</p>

    <ul>
      <li><a class="tref internalDFN" title="string" href="#dfn-string">string</a>,</li>
      <li><a class="tref internalDFN" title="number" href="#dfn-number">number</a>,</li>
      <li><a class="tref internalDFN" title="true" href="#dfn-true">true</a>,</li>
      <li><a class="tref internalDFN" title="false" href="#dfn-false">false</a>,</li>
      <li><a class="tref internalDFN" title="null" href="#dfn-null">null</a>,</li>
      <li><a class="tref internalDFN" title="node-object" href="#dfn-node-object">node object</a>,</li>
      <li><a class="tref internalDFN" title="value-object" href="#dfn-value-object">value object</a>,</li>
      <li><a class="tref internalDFN" title="list-object" href="#dfn-list-object">list object</a>,</li>
      <li><a class="tref internalDFN" title="set-object" href="#dfn-set-object">set object</a>,</li>
      <li>an <a class="tref internalDFN" title="array" href="#dfn-array">array</a> of zero or more of the possibilities above,</li>
      <li>a <a class="tref internalDFN" title="language-map" href="#dfn-language-map">language map</a>, or </li>
      <li>an <a class="tref internalDFN" title="index-map" href="#dfn-index-map">index map</a></li>
    </ul>
  </section>

  <section class="normative" id="value-objects">
    <h3 aria-level="2" role="heading" id="h3_value-objects"><span class="secno">8.3 </span>Value Objects</h3>

    <p>A <dfn title="value-object" id="dfn-value-object">value object</dfn> is used to explicitly associate a type or a
      language with a value to create a <a class="tref internalDFN" title="typed-value" href="#dfn-typed-value">typed value</a> or a <a class="tref internalDFN" title="language-tagged-string" href="#dfn-language-tagged-string">language-tagged
      string</a>.</p>

    <p>A <a class="tref internalDFN" title="value-object" href="#dfn-value-object">value object</a> <em class="rfc2119" title="MUST">MUST</em> be a <a class="tref internalDFN" title="json-object" href="#dfn-json-object">JSON object</a> containing the
      <code>@value</code> key. It <em class="rfc2119" title="MAY">MAY</em> also contain an <code>@type</code>,
      an <code>@language</code>, an <code>@index</code>, or an <code>@context</code> key but <em class="rfc2119" title="MUST NOT">MUST NOT</em> contain
      both an <code>@type</code> and an <code>@language</code> key at the same time.
      A <a class="tref internalDFN" title="value-object" href="#dfn-value-object">value object</a> <em class="rfc2119" title="MUST NOT">MUST NOT</em> contain any other keys that expand to an
      <a class="tref internalDFN" title="absolute-iri" href="#dfn-absolute-iri">absolute <abbr title="Internationalized Resource Identifier">IRI</abbr></a> or <a class="tref internalDFN" title="keyword" href="#dfn-keyword">keyword</a>.</p>

    <p>The value associated with the <code>@value</code> key <em class="rfc2119" title="MUST">MUST</em> be either a
      <a class="tref internalDFN" title="string" href="#dfn-string">string</a>, a <a class="tref internalDFN" title="number" href="#dfn-number">number</a>, <a class="tref internalDFN" title="true" href="#dfn-true">true</a>,
      <a class="tref internalDFN" title="false" href="#dfn-false">false</a> or <a class="tref internalDFN" title="null" href="#dfn-null">null</a>.</p>

    <p>The value associated with the <code>@type</code> key <em class="rfc2119" title="MUST">MUST</em> be a
      <a class="tref internalDFN" title="term" href="#dfn-term">term</a>, a <a class="tref internalDFN" title="compact-iri" href="#dfn-compact-iri">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a>,
      an <a class="tref internalDFN" title="absolute-iri" href="#dfn-absolute-iri">absolute <abbr title="Internationalized Resource Identifier">IRI</abbr></a>, a <a class="tref internalDFN" title="relative-iri" href="#dfn-relative-iri">relative <abbr title="Internationalized Resource Identifier">IRI</abbr></a>, or <a class="tref internalDFN" title="null" href="#dfn-null">null</a>.</p>

    <p>The value associated with the <code>@language</code> key <em class="rfc2119" title="MUST">MUST</em> have the
      lexical form described in [<cite><a class="bibref" href="#bib-BCP47">BCP47</a></cite>], or be <a class="tref internalDFN" title="null" href="#dfn-null">null</a>.</p>

    <p>The value associated with the <code>@index</code> key <em class="rfc2119" title="MUST">MUST</em> be a
      <a class="tref internalDFN" title="string" href="#dfn-string">string</a>.</p>

    <p>See <a class="sectionRef sec-ref" href="#typed-values">section 6.4 Typed Values</a> and
      <a class="sectionRef sec-ref" href="#string-internationalization">section 6.9 String Internationalization</a>
      for more information on <a class="tref internalDFN" title="value-object" href="#dfn-value-object">value objects</a>.</p>
  </section>

  <section class="normative" id="lists-and-sets">
    <h3 aria-level="2" role="heading" id="h3_lists-and-sets"><span class="secno">8.4 </span>Lists and Sets</h3>

    <p>A <a class="tref internalDFN" title="list" href="#dfn-list">list</a> represents an <em>ordered</em> set of values. A set
      represents an <em>unordered</em> set of values. Unless otherwise specified,
      <a class="tref internalDFN" title="array" href="#dfn-array">arrays</a> are unordered in JSON-LD. As such, the
      <code>@set</code> keyword, when used in the body of a JSON-LD document,
      represents just syntactic sugar which is optimized away when processing the document.
      However, it is very helpful when used within the context of a document. Values
      of terms associated with an <code>@set</code> or <code>@list</code> container
      will always be represented in the form of an <a class="tref internalDFN" title="array" href="#dfn-array">array</a> when a document
      is processed—even if there is just a single value that would otherwise be optimized to
      a non-array form in <a href="#compacted-document-form">compact document form</a>.
      This simplifies post-processing of the data as the data is always in a
      deterministic form.</p>

    <p>A <dfn title="list-object" id="dfn-list-object">list object</dfn> <em class="rfc2119" title="MUST">MUST</em> be a <a class="tref internalDFN" title="json-object" href="#dfn-json-object">JSON object</a> that contains no
      keys that expand to an <a class="tref internalDFN" title="absolute-iri" href="#dfn-absolute-iri">absolute <abbr title="Internationalized Resource Identifier">IRI</abbr></a> or <a class="tref internalDFN" title="keyword" href="#dfn-keyword">keyword</a> other
      than <code>@list</code>, <code>@context</code>, and <code>@index</code>.</p>

    <p>A <dfn title="set-object" id="dfn-set-object">set object</dfn> <em class="rfc2119" title="MUST">MUST</em> be a <a class="tref internalDFN" title="json-object" href="#dfn-json-object">JSON object</a> that contains no
      keys that expand to an <a class="tref internalDFN" title="absolute-iri" href="#dfn-absolute-iri">absolute <abbr title="Internationalized Resource Identifier">IRI</abbr></a> or <a class="tref internalDFN" title="keyword" href="#dfn-keyword">keyword</a> other
      than <code>@list</code>, <code>@context</code>, and <code>@index</code>.
      Please note that the <code>@index</code> key will be ignored when being processed.</p>

    <p>In both cases, the value associated with the keys <code>@list</code> and <code>@set</code>
      <em class="rfc2119" title="MUST">MUST</em> be one of the following types:</p>
    <ul>
      <li><a class="tref internalDFN" title="string" href="#dfn-string">string</a>,</li>
      <li><a class="tref internalDFN" title="number" href="#dfn-number">number</a>,</li>
      <li><a class="tref internalDFN" title="true" href="#dfn-true">true</a>,</li>
      <li><a class="tref internalDFN" title="false" href="#dfn-false">false</a>,</li>
      <li><a class="tref internalDFN" title="null" href="#dfn-null">null</a>,</li>
      <li><a class="tref internalDFN" title="node-object" href="#dfn-node-object">node object</a>,</li>
      <li><a class="tref internalDFN" title="value-object" href="#dfn-value-object">value object</a>, or</li>
      <li>an <a class="tref internalDFN" title="array" href="#dfn-array">array</a> of zero or more of the above possibilities</li>
    </ul>

    <p>See <a class="sectionRef sec-ref" href="#sets-and-lists">section 6.11 Sets and Lists</a> for further discussion on sets and lists.</p>
  </section>

  <section class="normative" id="language-maps">
    <h3 aria-level="2" role="heading" id="h3_language-maps"><span class="secno">8.5 </span>Language Maps</h3>

    <p>A <dfn title="language-map" id="dfn-language-map">language map</dfn> is used to associate a language with a value in a
      way that allows easy programmatic access. A <a class="tref internalDFN" title="language-map" href="#dfn-language-map">language map</a> may be
      used as a term value within a <a class="tref internalDFN" title="node-object" href="#dfn-node-object">node object</a> if the term is defined
      with <code>@container</code> set to <code>@language</code>. The keys of a
      <a class="tref internalDFN" title="language-map" href="#dfn-language-map">language map</a> <em class="rfc2119" title="MUST">MUST</em> be <a class="tref internalDFN" title="string" href="#dfn-string">strings</a> representing
      [<cite><a class="bibref" href="#bib-BCP47">BCP47</a></cite>] language codes and the values <em class="rfc2119" title="MUST">MUST</em> be any of the following types:</p>

    <ul>
      <li><a class="tref internalDFN" title="null" href="#dfn-null">null</a>,</li>
      <li><a class="tref internalDFN" title="string" href="#dfn-string">string</a>, or</li>
      <li>an <a class="tref internalDFN" title="array" href="#dfn-array">array</a> of zero or more of the above possibilities</li>
    </ul>

    <p>See <a class="sectionRef sec-ref" href="#string-internationalization">section 6.9 String Internationalization</a> for further discussion
      on language maps.</p>
  </section>

  <section class="normative" id="index-maps">
    <h3 aria-level="2" role="heading" id="h3_index-maps"><span class="secno">8.6 </span>Index Maps</h3>

    <p>An <dfn title="index-map" id="dfn-index-map">index map</dfn> allows keys that have no semantic meaning,
      but should be preserved regardless, to be used in JSON-LD documents.
      An <a class="tref internalDFN" title="index-map" href="#dfn-index-map">index map</a> may
      be used as a <a class="tref internalDFN" title="term" href="#dfn-term">term</a> value within a <a class="tref internalDFN" title="node-object" href="#dfn-node-object">node object</a> if the
      term is defined with <code>@container</code> set to <code>@index</code>.
      The values of the members of an <a class="tref internalDFN" title="index-map" href="#dfn-index-map">index map</a> <em class="rfc2119" title="MUST">MUST</em> be one
      of the following types:</p>

    <ul>
      <li><a class="tref internalDFN" title="string" href="#dfn-string">string</a>,</li>
      <li><a class="tref internalDFN" title="number" href="#dfn-number">number</a>,</li>
      <li><a class="tref internalDFN" title="true" href="#dfn-true">true</a>,</li>
      <li><a class="tref internalDFN" title="false" href="#dfn-false">false</a>,</li>
      <li><a class="tref internalDFN" title="null" href="#dfn-null">null</a>,</li>
      <li><a class="tref internalDFN" title="node-object" href="#dfn-node-object">node object</a>,</li>
      <li><a class="tref internalDFN" title="value-object" href="#dfn-value-object">value object</a>,</li>
      <li><a class="tref internalDFN" title="list-object" href="#dfn-list-object">list object</a>,</li>
      <li><a class="tref internalDFN" title="set-object" href="#dfn-set-object">set object</a>,</li>
      <li>an <a class="tref internalDFN" title="array" href="#dfn-array">array</a> of zero or more of the above possibilities</li>
    </ul>

    <p>See <a class="sectionRef sec-ref" href="#data-indexing">section 6.16 Data Indexing</a> for further information on this topic.</p>
  </section>

<section class="normative" id="context-definitions">
  <h3 aria-level="2" role="heading" id="h3_context-definitions"><span class="secno">8.7 </span>Context Definitions</h3>

  <p>A <dfn title="context-definition" id="dfn-context-definition">context definition</dfn> defines a <a class="tref internalDFN" title="local-context" href="#dfn-local-context">local context</a> in a
    <a class="tref internalDFN" title="node-object" href="#dfn-node-object">node object</a>.</p>

  <p>A <a class="tref internalDFN" title="context-definition" href="#dfn-context-definition">context definition</a> <em class="rfc2119" title="MUST">MUST</em> be a <a class="tref internalDFN" title="json-object" href="#dfn-json-object">JSON object</a> whose
    keys <em class="rfc2119" title="MUST">MUST</em> either be <a class="tref internalDFN" title="term" href="#dfn-term">terms</a>,
    <a class="tref internalDFN" title="compact-iri" href="#dfn-compact-iri">compact IRIs</a>, <a class="tref internalDFN" title="absolute-iri" href="#dfn-absolute-iri">absolute IRIs</a>,
    or the <a class="tref internalDFN" title="keyword" href="#dfn-keyword">keywords</a> <code>@language</code>, <code>@base</code>,
    and <code>@vocab</code>.</p>

  <p>If the <a class="tref internalDFN" title="context-definition" href="#dfn-context-definition">context definition</a> has an <code>@language</code> key,
    its value <em class="rfc2119" title="MUST">MUST</em> have the lexical form described in [<cite><a class="bibref" href="#bib-BCP47">BCP47</a></cite>] or be <a class="tref internalDFN" title="null" href="#dfn-null">null</a>.</p>

  <p>If the <a class="tref internalDFN" title="context-definition" href="#dfn-context-definition">context definition</a> has an <code>@base</code> key,
    its value <em class="rfc2119" title="MUST">MUST</em> be an <a class="tref internalDFN" title="absolute-iri" href="#dfn-absolute-iri">absolute <abbr title="Internationalized Resource Identifier">IRI</abbr></a>, a <a class="tref internalDFN" title="relative-iri" href="#dfn-relative-iri">relative <abbr title="Internationalized Resource Identifier">IRI</abbr></a>,
    or <a class="tref internalDFN" title="null" href="#dfn-null">null</a>.</p>

  <p>If the <a class="tref internalDFN" title="context-definition" href="#dfn-context-definition">context definition</a> has an <code>@vocab</code> key,
    its value <em class="rfc2119" title="MUST">MUST</em> be a <a class="tref internalDFN" title="absolute-iri" href="#dfn-absolute-iri">absolute <abbr title="Internationalized Resource Identifier">IRI</abbr></a>, a <a class="tref internalDFN" title="compact-iri" href="#dfn-compact-iri">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a>,
    a <a class="tref internalDFN" title="blank-node-identifier" href="#dfn-blank-node-identifier">blank node identifier</a>, a <a class="tref internalDFN" title="term" href="#dfn-term">term</a>, or <a class="tref internalDFN" title="null" href="#dfn-null">null</a>.</p>

  <p>The value of keys that are not <a class="tref internalDFN" title="keyword" href="#dfn-keyword">keywords</a> <em class="rfc2119" title="MUST">MUST</em> be either an
    <a class="tref internalDFN" title="absolute-iri" href="#dfn-absolute-iri">absolute <abbr title="Internationalized Resource Identifier">IRI</abbr></a>, a <a class="tref internalDFN" title="compact-iri" href="#dfn-compact-iri">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a>, a <a class="tref internalDFN" title="term" href="#dfn-term">term</a>,
    a <a class="tref internalDFN" title="blank-node-identifier" href="#dfn-blank-node-identifier">blank node identifier</a>, a <a class="tref internalDFN" title="keyword" href="#dfn-keyword">keyword</a>, <a class="tref internalDFN" title="null" href="#dfn-null">null</a>,
    or an <a class="tref internalDFN" title="expanded-term-definition" href="#dfn-expanded-term-definition">expanded term definition</a>.</p>

  <p>An <a class="tref internalDFN" title="expanded-term-definition" href="#dfn-expanded-term-definition">expanded term definition</a> is used to describe the mapping
    between a <a class="tref internalDFN" title="term" href="#dfn-term">term</a> and its expanded identifier, as well as other
    properties of the value associated with the <a class="tref internalDFN" title="term" href="#dfn-term">term</a> when it is
    used as key in a <a class="tref internalDFN" title="node-object" href="#dfn-node-object">node object</a>.</p>

  <p>An <a class="tref internalDFN" title="expanded-term-definition" href="#dfn-expanded-term-definition">expanded term definition</a> <em class="rfc2119" title="MUST">MUST</em> be a <a class="tref internalDFN" title="json-object" href="#dfn-json-object">JSON object</a>
    composed of zero or more keys from <code>@id</code>, <code>@reverse</code>,
    <code>@type</code>, <code>@language</code> or <code>@container</code>. An
    <a class="tref internalDFN" title="expanded-term-definition" href="#dfn-expanded-term-definition">expanded term definition</a> <em class="rfc2119" title="SHOULD NOT">SHOULD NOT</em> contain any other keys.</p>

  <p>If an <a class="tref internalDFN" title="expanded-term-definition" href="#dfn-expanded-term-definition">expanded term definition</a> has an <code>@reverse</code> member,
    it <em class="rfc2119" title="MUST NOT">MUST NOT</em> have an <code>@id</code> member at the same time. If an
    <code>@container</code> member exists, its value <em class="rfc2119" title="MUST">MUST</em> be <a class="tref internalDFN" title="null" href="#dfn-null">null</a>,
    <code>@set</code>, or <code>@index</code>.</p>

  <p>If the term being defined is not a <a class="tref internalDFN" title="compact-iri" href="#dfn-compact-iri">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a> or
    <a class="tref internalDFN" title="absolute-iri" href="#dfn-absolute-iri">absolute <abbr title="Internationalized Resource Identifier">IRI</abbr></a> and the <a class="tref internalDFN" title="active-context" href="#dfn-active-context">active context</a> does not have an
    <code>@vocab</code> mapping, the <a class="tref internalDFN" title="expanded-term-definition" href="#dfn-expanded-term-definition">expanded term definition</a> <em class="rfc2119" title="MUST">MUST</em>
    include the <code>@id</code> key.</p>

  <p>If the <a class="tref internalDFN" title="expanded-term-definition" href="#dfn-expanded-term-definition">expanded term definition</a> contains the <code>@id</code>
    <a class="tref internalDFN" title="keyword" href="#dfn-keyword">keyword</a>, its value <em class="rfc2119" title="MUST">MUST</em> be <a class="tref internalDFN" title="null" href="#dfn-null">null</a>, an <a class="tref internalDFN" title="absolute-iri" href="#dfn-absolute-iri">absolute <abbr title="Internationalized Resource Identifier">IRI</abbr></a>,
    a <a class="tref internalDFN" title="blank-node-identifier" href="#dfn-blank-node-identifier">blank node identifier</a>, a <a class="tref internalDFN" title="compact-iri" href="#dfn-compact-iri">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a>, a <a class="tref internalDFN" title="term" href="#dfn-term">term</a>,
    or a <a class="tref internalDFN" title="keyword" href="#dfn-keyword">keyword</a>.</p>

  <p>If the <a class="tref internalDFN" title="expanded-term-definition" href="#dfn-expanded-term-definition">expanded term definition</a> contains the <code>@type</code>
    <a class="tref internalDFN" title="keyword" href="#dfn-keyword">keyword</a>, its value <em class="rfc2119" title="MUST">MUST</em> be an <a class="tref internalDFN" title="absolute-iri" href="#dfn-absolute-iri">absolute <abbr title="Internationalized Resource Identifier">IRI</abbr></a>, a
    <a class="tref internalDFN" title="compact-iri" href="#dfn-compact-iri">compact <abbr title="Internationalized Resource Identifier">IRI</abbr></a>, a <a class="tref internalDFN" title="term" href="#dfn-term">term</a>, <a class="tref internalDFN" title="null" href="#dfn-null">null</a>, or the one of the
    <a class="tref internalDFN" title="keyword" href="#dfn-keyword">keywords</a> <code>@id</code> or <code>@vocab</code>.</p>

  <p>If the <a class="tref internalDFN" title="expanded-term-definition" href="#dfn-expanded-term-definition">expanded term definition</a> contains the <code>@language</code> <a class="tref internalDFN" title="keyword" href="#dfn-keyword">keyword</a>,
    its value <em class="rfc2119" title="MUST">MUST</em> have the lexical form described in [<cite><a class="bibref" href="#bib-BCP47">BCP47</a></cite>] or be <a class="tref internalDFN" title="null" href="#dfn-null">null</a>.</p>

  <p>If the <a class="tref internalDFN" title="expanded-term-definition" href="#dfn-expanded-term-definition">expanded term definition</a> contains the <code>@container</code>
    <a class="tref internalDFN" title="keyword" href="#dfn-keyword">keyword</a>, its value <em class="rfc2119" title="MUST">MUST</em> be either <code>@list</code>, <code>@set</code>,
    <code>@language</code>, <code>@index</code>, or be <a class="tref internalDFN" title="null" href="#dfn-null">null</a>. If the value
    is <code>@language</code>, when the <a class="tref internalDFN" title="term" href="#dfn-term">term</a> is used outside of the
    <code>@context</code>, the associated value <em class="rfc2119" title="MUST">MUST</em> be a <a class="tref internalDFN" title="language-map" href="#dfn-language-map">language map</a>.
    If the value is <code>@index</code>, when the <a class="tref internalDFN" title="term" href="#dfn-term">term</a> is used outside of
    the <code>@context</code>, the associated value <em class="rfc2119" title="MUST">MUST</em> be an
    <a class="tref internalDFN" title="index-map" href="#dfn-index-map">index map</a>.</p>

  <p><a class="tref internalDFN" title="term" href="#dfn-term">Terms</a> <em class="rfc2119" title="MUST NOT">MUST NOT</em> be used in a circular manner. That is,
    the definition of a term cannot depend on the definition of another term if that other
    term also depends on the first term.</p>

  <p>See <a class="sectionRef sec-ref" href="#the-context">section 5.1 The Context</a> for further discussion on contexts.</p>
</section>

</section>

<section class="normative" id="relationship-to-rdf">
  <!--OddPage--><h2 aria-level="1" role="heading" id="h2_relationship-to-rdf"><span class="secno">9. </span>Relationship to RDF</h2>

  <p>JSON-LD is a
    <a class="tref externalDFN" title="concrete-rdf-syntax" href="http://www.w3.org/TR/rdf11-concepts/#dfn-concrete-rdf-syntax">concrete RDF syntax</a>
    as described in [<cite><a class="bibref" href="#bib-RDF11-CONCEPTS">RDF11-CONCEPTS</a></cite>]. Hence, a JSON-LD document is both an
    RDF document <em>and</em> a JSON document and correspondingly represents an
    instance of an RDF data model. However, JSON-LD also extends the RDF data
    model to optionally allow JSON-LD to serialize
    <a class="tref externalDFN" title="generalized-rdf-datasets" href="http://www.w3.org/TR/rdf11-concepts/#dfn-generalized-rdf-dataset">Generalized RDF Datasets</a>.
    The JSON-LD extensions to the RDF data model are:</p>

  <ul>
    <li>In JSON-LD <a class="tref internalDFN" title="property" href="#dfn-property">properties</a> can be
      <a class="tref internalDFN" title="iri" href="#dfn-iri">IRIs</a> or <a class="tref internalDFN" title="blank-node" href="#dfn-blank-node">blank nodes</a>
      whereas in RDF properties (predicates) have to be <a class="tref internalDFN" title="iri" href="#dfn-iri">IRIs</a>. This
      means that JSON-LD serializes
      <a class="tref externalDFN" title="generalized-rdf-datasets" href="http://www.w3.org/TR/rdf11-concepts/#dfn-generalized-rdf-dataset">generalized RDF Datasets</a>.</li>
    <li>In JSON-LD <a class="tref internalDFN" title="list" href="#dfn-list">lists</a> are part of the data model
      whereas in RDF they are part of a vocabulary, namely [<cite><a class="bibref" href="#bib-RDF11-SCHEMA">RDF11-SCHEMA</a></cite>].</li>
    <li>RDF values are either typed <em>literals</em>
      (<a class="tref internalDFN" title="typed-value" href="#dfn-typed-value">typed values</a>) or
      <a class="tref internalDFN" title="language-tagged-string" href="#dfn-language-tagged-string">language-tagged strings</a> whereas
      JSON-LD also supports JSON's native data types, i.e., <a class="tref internalDFN" title="number" href="#dfn-number">number</a>,
      <a class="tref internalDFN" title="string" href="#dfn-string">strings</a>, and the boolean values <a class="tref internalDFN" title="true" href="#dfn-true">true</a>
      and <a class="tref internalDFN" title="false" href="#dfn-false">false</a>. The JSON-LD Processing Algorithms and API specification [<cite><a class="bibref" href="#bib-JSON-LD-API">JSON-LD-API</a></cite>]
      defines the <a href="http://www.w3.org/TR/2014/REC-json-ld-api-20140116/#data-round-tripping">conversion rules</a>
      between JSON's native data types and RDF's counterparts to allow round-tripping.</li>
  </ul>

  <p>Summarized, these differences mean that JSON-LD is capable of serializing any RDF
    graph or dataset and most, but not all, JSON-LD documents can be directly
    interpreted as RDF as described in RDF 1.1 Concepts [<cite><a class="bibref" href="#bib-RDF11-CONCEPTS">RDF11-CONCEPTS</a></cite>].</p>

  <p>For authors and developers working with <a class="tref internalDFN" title="blank-node" href="#dfn-blank-node">blank nodes</a>
    as <a class="tref internalDFN" title="property" href="#dfn-property">properties</a> when deserializing to RDF,
    three potential approaches are suggested:</p>

  <ul>
    <li>If the author is not yet ready to commit to a stable <abbr title="Internationalized Resource Identifier">IRI</abbr>, the
      property should be mapped to an <abbr title="Internationalized Resource Identifier">IRI</abbr> that is documented as unstable.</li>
    <li>If the developer wishes to use <a class="tref internalDFN" title="blank-node" href="#dfn-blank-node">blank nodes</a>
      as <a class="tref internalDFN" title="property" href="#dfn-property">properties</a> and also wishes to interpret the
      data as a
      <a class="tref externalDFN" title="generalized-rdf-dataset" href="http://www.w3.org/TR/rdf11-concepts/#dfn-generalized-rdf-dataset">generalized RDF Dataset</a>,
      there is an option, <i>produce generalized RDF</i>, in the
      Deserialize JSON-LD to RDF algorithm [<cite><a class="bibref" href="#bib-JSON-LD-API">JSON-LD-API</a></cite>] to do so. Note that a
      <a class="tref externalDFN" title="generalized-rdf-dataset" href="http://www.w3.org/TR/rdf11-concepts/#dfn-generalized-rdf-dataset">generalized RDF Dataset</a>
      is an extension of RDF; it does not conform to the RDF standard.</li>
    <li>If the author or developer wishes to use <a class="tref internalDFN" title="blank-node" href="#dfn-blank-node">blank nodes</a>
      as <a class="tref internalDFN" title="property" href="#dfn-property">properties</a> and wishes to interpret the data
      as a standard (non-generalized)
      <a class="tref externalDFN" title="rdf-dataset" href="http://www.w3.org/TR/rdf11-concepts/#dfn-rdf-dataset">RDF Dataset</a>,
      it is possible to losslessly interpret JSON-LD as RDF by transforming
      <a class="tref internalDFN" title="blank-node" href="#dfn-blank-node">blank nodes</a> used as
      <a class="tref internalDFN" title="property" href="#dfn-property">properties</a> to <a class="tref internalDFN" title="iri" href="#dfn-iri">IRIs</a>,
      by minting new "Skolem IRIs" as per
      <cite><a href="http://www.w3.org/TR/rdf11-concepts/#section-skolemization">Replacing Blank Nodes with IRIs</a></cite>
      of [<cite><a class="bibref" href="#bib-RDF11-CONCEPTS">RDF11-CONCEPTS</a></cite>].</li>
  </ul>

  <p>The normative algorithms for interpreting JSON-LD as RDF and serializing
    RDF as JSON-LD are specified in the JSON-LD Processing Algorithms and API
    specification [<cite><a class="bibref" href="#bib-JSON-LD-API">JSON-LD-API</a></cite>].</p>

  <p>Even though JSON-LD serializes
    <a class="tref externalDFN" title="generalized-rdf-datasets" href="http://www.w3.org/TR/rdf11-concepts/#dfn-generalized-rdf-dataset">generalized RDF Datasets</a>, it can
    also be used as a <a class="tref externalDFN" title="rdf-graph-source" href="http://www.w3.org/TR/rdf11-concepts/#dfn-rdf-source">RDF graph source</a>.
    In that case, a consumer <em class="rfc2119" title="MUST">MUST</em> only use the default graph and ignore all named graphs.
    This allows servers to expose data in languages such as Turtle and JSON-LD
    using content negotiation.</p>

  <div class="note"><div class="note-title" aria-level="2" role="heading" id="h_note_10"><span>Note</span></div><p class="">Publishers supporting both dataset and graph syntaxes have to ensure that
    the primary data is stored in the default graph to enable consumers that do not support
    datasets to process the information.</p></div>

  <section class="informative" id="serializing-deserializing-rdf">
    <h3 aria-level="2" role="heading" id="h3_serializing-deserializing-rdf"><span class="secno">9.1 </span>Serializing/Deserializing RDF</h3><p><em>This section is non-normative.</em></p>

    <p>The process of serializing RDF as JSON-LD and deserializing JSON-LD to RDF
      depends on executing the algorithms defined in
      <cite><a href="http://www.w3.org/TR/2014/REC-json-ld-api-20140116/#rdf-serialization-deserialization-algorithms">RDF Serialization-Deserialization Algorithms</a></cite>
      in the JSON-LD Processing Algorithms and API specification [<cite><a class="bibref" href="#bib-JSON-LD-API">JSON-LD-API</a></cite>].
      It is beyond the scope of this document to detail these algorithms any further,
      but a summary of the necessary operations is provided to illustrate the process.</p>

    <p>The procedure to deserialize a JSON-LD document to RDF involves the
      following steps:</p>

    <ol>
      <li>Expand the JSON-LD document, removing any context; this ensures
        that properties, types, and values are given their full representation
        as <a class="tref internalDFN" title="iri" href="#dfn-iri">IRIs</a> and expanded values. Expansion
        is discussed further in <a class="sectionRef sec-ref" href="#expanded-document-form">section 6.17 Expanded Document Form</a>.</li>
      <li>Flatten the document, which turns the document into an array of
        <a class="tref internalDFN" title="node-object" href="#dfn-node-object">node objects</a>. Flattening is discussed
        further in <a class="sectionRef sec-ref" href="#flattened-document-form">section 6.19 Flattened Document Form</a>.</li>
      <li>Turn each <a class="tref internalDFN" title="node-object" href="#dfn-node-object">node object</a> into a series of
        <a class="tref externalDFN" title="rdf-triples" href="http://www.w3.org/TR/rdf11-concepts/#dfn-rdf-triple">RDF triples</a>.</li>
    </ol>

    <p>For example, consider the following JSON-LD document in compact form:</p>

    <div class="example"><div class="example-title"><span>Example 63</span>: Sample JSON-LD document</div><pre class="example">{
  "@context": {
    "name": "http://xmlns.com/foaf/0.1/name",
    "knows": "http://xmlns.com/foaf/0.1/knows"
  },
  "@id": "http://me.markus-lanthaler.com/",
  "name": "Markus Lanthaler",
  "knows": [
    {
      "@id": "http://manu.sporny.org/about#manu",
      "name": "Manu Sporny"
    },
    {
      "name": "Dave Longley"
    }
  ]
}</pre></div>

    <p>Running the JSON-LD Expansion and Flattening algorithms against the
      JSON-LD input document in the example above would result in the
      following output:</p>

    <div class="example"><div class="example-title"><span>Example 64</span>: Flattened and expanded form for the previous example</div><pre class="example">[
  {
    "@id": "_:b0",
    "http://xmlns.com/foaf/0.1/name": "Dave Longley"
  },
  {
    "@id": "http://manu.sporny.org/about#manu",
    "http://xmlns.com/foaf/0.1/name": "Manu Sporny"
  },
  {
    "@id": "http://me.markus-lanthaler.com/",
    "http://xmlns.com/foaf/0.1/name": "Markus Lanthaler",
    "http://xmlns.com/foaf/0.1/knows": [
      { "@id": "http://manu.sporny.org/about#manu" },
      { "@id": "_:b0" }
    ]
  }
]</pre></div>

    <p>Deserializing this to RDF now is a straightforward process of turning
      each <a class="tref internalDFN" title="node-object" href="#dfn-node-object">node object</a> into one or more RDF triples. This can be
      expressed in Turtle as follows:</p>

    <div class="example"><div class="example-title"><span>Example 65</span>: Turtle representation of expanded/flattened document</div><pre class="example">_:b0 &lt;http://xmlns.com/foaf/0.1/name&gt; "Dave Longley" .

&lt;http://manu.sporny.org/about#manu&gt; &lt;http://xmlns.com/foaf/0.1/name&gt; "Manu Sporny" .

&lt;http://me.markus-lanthaler.com/&gt; &lt;http://xmlns.com/foaf/0.1/name&gt; "Markus Lanthaler" ;
    &lt;http://xmlns.com/foaf/0.1/knows&gt; &lt;http://manu.sporny.org/about#manu&gt;, _:b0 .</pre></div>

    <p>The process of serializing RDF as JSON-LD can be thought of as the
      inverse of this last step, creating an expanded JSON-LD document closely
      matching the triples from RDF, using a single <a class="tref internalDFN" title="node-object" href="#dfn-node-object">node object</a>
      for all triples having a common subject, and a single <a class="tref internalDFN" title="property" href="#dfn-property">property</a>
      for those triples also having a common predicate.</p>
  </section>
</section>

<section class="appendix informative" id="relationship-to-other-linked-data-formats">
  <!--OddPage--><h2 aria-level="1" role="heading" id="h2_relationship-to-other-linked-data-formats"><span class="secno">A. </span>Relationship to Other Linked Data Formats</h2><p><em>This section is non-normative.</em></p>

  <p>The JSON-LD examples below demonstrate how JSON-LD can be used to
    express semantic data marked up in other linked data formats such as Turtle,
    RDFa, Microformats, and Microdata. These sections are merely provided as
    evidence that JSON-LD is very flexible in what it can express across different
    Linked Data approaches.</p>

  <section class="informative" id="turtle">
    <h3 aria-level="2" role="heading" id="h3_turtle"><span class="secno">A.1 </span>Turtle</h3><p><em>This section is non-normative.</em></p>

    <p>The following are examples of transforming RDF expressed in Turtle [<cite><a class="bibref" href="#bib-TURTLE">TURTLE</a></cite>]
      into JSON-LD.</p>

    <section>
      <h4 id="prefix-definitions" aria-level="3" role="heading">Prefix definitions</h4><p><em>This section is non-normative.</em></p>

      <p>The JSON-LD context has direct equivalents for the Turtle
        <code>@prefix</code> declaration:</p>

      <div class="example"><div class="example-title"><span>Example 66</span>: A set of statements serialized in Turtle</div><pre class="example">@prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt; .

&lt;http://manu.sporny.org/about#manu&gt; a foaf:Person;
  foaf:name "Manu Sporny";
  foaf:homepage &lt;http://manu.sporny.org/&gt; .</pre></div>

      <div class="example"><div class="example-title"><span>Example 67</span>: The same set of statements serialized in JSON-LD</div><pre class="example">{
  "@context":
  {
    "foaf": "http://xmlns.com/foaf/0.1/"
  },
  "@id": "http://manu.sporny.org/about#manu",
  "@type": "foaf:Person",
  "foaf:name": "Manu Sporny",
  "foaf:homepage": { "@id": "http://manu.sporny.org/" }
}</pre></div>
    </section>

    <section>
      <h4 id="embedding-1" aria-level="3" role="heading">Embedding</h4>

      <p>Both Turtle and JSON-LD allow embedding, although Turtle only allows embedding of
        <a class="tref internalDFN" title="blank-node" href="#dfn-blank-node">blank nodes</a>.</p>

      <div class="example"><div class="example-title"><span>Example 68</span>: Embedding in Turtle</div><pre class="example">@prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt; .

&lt;http://manu.sporny.org/about#manu&gt;
  a foaf:Person;
  foaf:name "Manu Sporny";
  foaf:knows [ a foaf:Person; foaf:name "Gregg Kellogg" ] .</pre></div>

      <div class="example"><div class="example-title"><span>Example 69</span>: Same embedding example in JSON-LD</div><pre class="example">{
  "@context":
  {
    "foaf": "http://xmlns.com/foaf/0.1/"
  },
  "@id": "http://manu.sporny.org/about#manu",
  "@type": "foaf:Person",
  "foaf:name": "Manu Sporny",
  "foaf:knows":
  {
    "@type": "foaf:Person",
    "foaf:name": "Gregg Kellogg"
  }
}</pre></div>
    </section>

    <section>
      <h4 id="conversion-of-native-data-types" aria-level="3" role="heading">Conversion of native data types</h4>

      <p>In JSON-LD numbers and boolean values are native data types. While Turtle
        has a shorthand syntax to express such values, RDF's abstract syntax requires
        that numbers and boolean values are represented as typed literals. Thus,
        to allow full round-tripping, the JSON-LD Processing Algorithms and API specification [<cite><a class="bibref" href="#bib-JSON-LD-API">JSON-LD-API</a></cite>]
        defines conversion rules between JSON-LD's native data types and RDF's
        counterparts. <a class="tref internalDFN" title="number" href="#dfn-number">Numbers</a> without fractions are
        converted to <code>xsd:integer</code>-typed literals, numbers with fractions
        to <code>xsd:double</code>-typed literals and the two boolean values
        <a class="tref internalDFN" title="true" href="#dfn-true">true</a> and <a class="tref internalDFN" title="false" href="#dfn-false">false</a> to a <code>xsd:boolean</code>-typed
        literal. All typed literals are in canonical lexical form.</p>

      <div class="example"><div class="example-title"><span>Example 70</span>: JSON-LD using native data types for numbers and boolean values</div><pre class="example">{
  "@context":
  {
    "ex": "http://example.com/vocab#"
  },
  "@id": "http://example.com/",
  "ex:numbers": [ 14, 2.78 ],
  "ex:booleans": [ true, false ]
}</pre></div>

      <div class="example"><div class="example-title"><span>Example 71</span>: Same example in Turtle using typed literals</div><pre class="example">@prefix ex: &lt;http://example.com/vocab#&gt; .
@prefix xsd: &lt;http://www.w3.org/2001/XMLSchema#&gt; .

&lt;http://example.com/&gt;
  ex:numbers "14"^^xsd:integer, "2.78E0"^^xsd:double ;
  ex:booleans "true"^^xsd:boolean, "false"^^xsd:boolean .</pre></div>

    </section>

    <section>
      <h4 id="lists" aria-level="3" role="heading">Lists</h4>
      <p>Both JSON-LD and Turtle can represent sequential lists of values.</p>

      <div class="example"><div class="example-title"><span>Example 72</span>: A list of values in Turtle</div><pre class="example">@prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt; .

&lt;http://example.org/people#joebob&gt; a foaf:Person;
  foaf:name "Joe Bob";
  foaf:nick ( "joe" "bob" "jaybee" ) .</pre></div>

      <div class="example"><div class="example-title"><span>Example 73</span>: Same example with a list of values in JSON-LD</div><pre class="example">{
  "@context":
  {
    "foaf": "http://xmlns.com/foaf/0.1/"
  },
  "@id": "http://example.org/people#joebob",
  "@type": "foaf:Person",
  "foaf:name": "Joe Bob",
  "foaf:nick":
  {
    "@list": [ "joe", "bob", "jaybee" ]
  }
}</pre></div>
    </section>
  </section>

  <section class="informative" id="rdfa">
    <h3 aria-level="2" role="heading" id="h3_rdfa"><span class="secno">A.2 </span>RDFa</h3><p><em>This section is non-normative.</em></p>

    <p>The following example describes three people with their respective names and
      homepages in RDFa [<cite><a class="bibref" href="#bib-RDFA-CORE">RDFA-CORE</a></cite>].</p>

    <div class="example"><div class="example-title"><span>Example 74</span>: RDFa fragment that describes three people</div><pre class="example">&lt;div <span class="highlight">prefix="foaf: http://xmlns.com/foaf/0.1/"</span>&gt;
   &lt;ul&gt;
      &lt;li <span class="highlight">typeof="foaf:Person"</span>&gt;
        &lt;a <span class="highlight">rel="foaf:homepage" href="http://example.com/bob/" property="foaf:name"</span>&gt;Bob&lt;/a&gt;
      &lt;/li&gt;
      &lt;li <span class="highlight">typeof="foaf:Person"</span>&gt;
        &lt;a <span class="highlight">rel="foaf:homepage" href="http://example.com/eve/" property="foaf:name"</span>&gt;Eve&lt;/a&gt;
      &lt;/li&gt;
      &lt;li <span class="highlight">typeof="foaf:Person"</span>&gt;
        &lt;a <span class="highlight">rel="foaf:homepage" href="http://example.com/manu/" property="foaf:name"</span>&gt;Manu&lt;/a&gt;
      &lt;/li&gt;
   &lt;/ul&gt;
&lt;/div&gt;</pre></div>

    <p>An example JSON-LD implementation using a single <a class="tref internalDFN" title="context" href="#dfn-context">context</a> is
      described below.</p>

    <div class="example"><div class="example-title"><span>Example 75</span>: Same description in JSON-LD (context shared among node objects)</div><pre class="example">{
  "@context":
  {
    "foaf": "http://xmlns.com/foaf/0.1/"
  },
  "@graph":
  [
    {
      "@type": "foaf:Person",
      "foaf:homepage": "http://example.com/bob/",
      "foaf:name": "Bob"
    },
    {
      "@type": "foaf:Person",
      "foaf:homepage": "http://example.com/eve/",
      "foaf:name": "Eve"
    },
    {
      "@type": "foaf:Person",
      "foaf:homepage": "http://example.com/manu/",
      "foaf:name": "Manu"
    }
  ]
}</pre></div>
  </section>

  <section class="informative" id="microformats">
    <h3 aria-level="2" role="heading" id="h3_microformats"><span class="secno">A.3 </span>Microformats</h3><p><em>This section is non-normative.</em></p>

    <p>The following example uses a simple Microformats hCard example to express
      how Microformats [<cite><a class="bibref" href="#bib-MICROFORMATS">MICROFORMATS</a></cite>] are represented in JSON-LD.</p>

    <div class="example"><div class="example-title"><span>Example 76</span>: HTML fragment with a simple Microformats hCard</div><pre class="example">&lt;div class="vcard"&gt;
 &lt;a class="url fn" href="http://tantek.com/"&gt;Tantek Çelik&lt;/a&gt;
&lt;/div&gt;</pre></div>

    <p>The representation of the hCard expresses the Microformat terms in the
      <a class="tref internalDFN" title="context" href="#dfn-context">context</a> and uses them directly for the <code>url</code> and <code>fn</code>
      properties. Also note that the Microformat to JSON-LD processor has
      generated the proper URL type for <code>http://tantek.com/</code>.</p>

    <div class="example"><div class="example-title"><span>Example 77</span>: Same hCard representation in JSON-LD</div><pre class="example">{
  "@context":
  {
    "vcard": "http://microformats.org/profile/hcard#vcard",
    "url":
    {
      "@id": "http://microformats.org/profile/hcard#url",
      "@type": "@id"
    },
    "fn": "http://microformats.org/profile/hcard#fn"
  },
  "@type": "vcard",
  "url": "http://tantek.com/",
  "fn": "Tantek Çelik"
}</pre></div>
  </section>

  <section class="informative" id="microdata">
    <h3 aria-level="2" role="heading" id="h3_microdata"><span class="secno">A.4 </span>Microdata</h3><p><em>This section is non-normative.</em></p>

    <p>The HTML Microdata [<cite><a class="bibref" href="#bib-MICRODATA">MICRODATA</a></cite>] example below expresses book information as
      a Microdata Work item.</p>

    <div class="example"><div class="example-title"><span>Example 78</span>: HTML fragments that describes a book using microdata</div><pre class="example">&lt;dl itemscope
    itemtype="http://purl.org/vocab/frbr/core#Work"
    itemid="http://purl.oreilly.com/works/45U8QJGZSQKDH8N"&gt;
 &lt;dt&gt;Title&lt;/dt&gt;
 &lt;dd&gt;&lt;cite itemprop="http://purl.org/dc/terms/title"&gt;Just a Geek&lt;/cite&gt;&lt;/dd&gt;
 &lt;dt&gt;By&lt;/dt&gt;
 &lt;dd&gt;&lt;span itemprop="http://purl.org/dc/terms/creator"&gt;Wil Wheaton&lt;/span&gt;&lt;/dd&gt;
 &lt;dt&gt;Format&lt;/dt&gt;
 &lt;dd itemprop="http://purl.org/vocab/frbr/core#realization"
     itemscope
     itemtype="http://purl.org/vocab/frbr/core#Expression"
     itemid="http://purl.oreilly.com/products/9780596007683.BOOK"&gt;
  &lt;link itemprop="http://purl.org/dc/terms/type" href="http://purl.oreilly.com/product-types/BOOK"&gt;
  Print
 &lt;/dd&gt;
 &lt;dd itemprop="http://purl.org/vocab/frbr/core#realization"
     itemscope
     itemtype="http://purl.org/vocab/frbr/core#Expression"
     itemid="http://purl.oreilly.com/products/9780596802189.EBOOK"&gt;
  &lt;link itemprop="http://purl.org/dc/terms/type" href="http://purl.oreilly.com/product-types/EBOOK"&gt;
  Ebook
 &lt;/dd&gt;
&lt;/dl&gt;</pre></div>

    <p>Note that the JSON-LD representation of the Microdata information stays
      true to the desires of the Microdata community to avoid contexts and
      instead refer to items by their full <a class="tref internalDFN" title="iri" href="#dfn-iri"><abbr title="Internationalized Resource Identifier">IRI</abbr></a>.</p>

    <div class="example"><div class="example-title"><span>Example 79</span>: Same book description in JSON-LD (avoiding contexts)</div><pre class="example">[
  {
    "@id": "http://purl.oreilly.com/works/45U8QJGZSQKDH8N",
    "@type": "http://purl.org/vocab/frbr/core#Work",
    "http://purl.org/dc/terms/title": "Just a Geek",
    "http://purl.org/dc/terms/creator": "Whil Wheaton",
    "http://purl.org/vocab/frbr/core#realization":
    [
      "http://purl.oreilly.com/products/9780596007683.BOOK",
      "http://purl.oreilly.com/products/9780596802189.EBOOK"
    ]
  },
  {
    "@id": "http://purl.oreilly.com/products/9780596007683.BOOK",
    "@type": "http://purl.org/vocab/frbr/core#Expression",
    "http://purl.org/dc/terms/type": "http://purl.oreilly.com/product-types/BOOK"
  },
  {
    "@id": "http://purl.oreilly.com/products/9780596802189.EBOOK",
    "@type": "http://purl.org/vocab/frbr/core#Expression",
    "http://purl.org/dc/terms/type": "http://purl.oreilly.com/product-types/EBOOK"
  }
]</pre></div>
  </section>
</section>

<section class="appendix normative" id="iana-considerations">
  <!--OddPage--><h2 aria-level="1" role="heading" id="h2_iana-considerations"><span class="secno">B. </span>IANA Considerations</h2>

  <p>This section has been submitted to the Internet Engineering Steering
    Group (IESG) for review, approval, and registration with IANA.</p>

  <h2 id="application-ld-json">application/ld+json</h2>
  <dl>
    <dt>Type name:</dt>
    <dd>application</dd>
    <dt>Subtype name:</dt>
    <dd>ld+json</dd>
    <dt>Required parameters:</dt>
    <dd>None</dd>
    <dt>Optional parameters:</dt>
    <dd>
      <dl>
        <dt><code>profile</code></dt>
        <dd>
          <p>A a non-empty list of space-separated URIs identifying specific
            constraints or conventions that apply to a JSON-LD document according [<cite><a class="bibref" href="#bib-RFC6906">RFC6906</a></cite>].
            A profile does not change the semantics of the resource representation
            when processed without profile knowledge, so that clients both with
            and without knowledge of a profiled resource can safely use the same
            representation. The <code>profile</code> parameter <em class="rfc2119" title="MAY">MAY</em> be used by
            clients to express their preferences in the content negotiation process.
            If the profile parameter is given, a server <em class="rfc2119" title="SHOULD">SHOULD</em> return a document that
            honors the profiles in the list which are recognized by the server.
            It is <em class="rfc2119" title="RECOMMENDED">RECOMMENDED</em> that profile URIs are dereferenceable and provide
            useful documentation at that URI. For more information and background
            please refer to [<cite><a class="bibref" href="#bib-RFC6906">RFC6906</a></cite>].</p>
          <p>This specification defines three values for the <code>profile</code> parameter.
            To request or specify <a href="#expanded-document-form">expanded JSON-LD document form</a>,
            the URI <code>http://www.w3.org/ns/json-ld#expanded</code> <em class="rfc2119" title="SHOULD">SHOULD</em> be used.
            To request or specify <a href="#compacted-document-form">compacted JSON-LD document form</a>,
            the URI <code>http://www.w3.org/ns/json-ld#compacted</code> <em class="rfc2119" title="SHOULD">SHOULD</em> be used.
            To request or specify <a href="#flattened-document-form">flattened JSON-LD document form</a>,
            the URI <code>http://www.w3.org/ns/json-ld#flattened</code> <em class="rfc2119" title="SHOULD">SHOULD</em> be used.
            Please note that, according [<cite><a class="bibref" href="#bib-HTTP11">HTTP11</a></cite>], the value of the <code>profile</code>
            parameter has to be enclosed in quotes (<code>"</code>) because it contains
            special characters and, if multiple profiles are combined, whitespace.</p>
          <p>When processing the "profile" media type parameter, it is important to
            note that its value contains one or more URIs and not IRIs. In some cases
            it might therefore be necessary to convert between IRIs and URIs as specified in
            <cite><a href="http://tools.ietf.org/html/rfc3986#section-5.1">section 3 Relationship between IRIs and URIs</a></cite>
            of [<cite><a class="bibref" href="#bib-RFC3987">RFC3987</a></cite>].</p>
        </dd>
      </dl>
    </dd>
    <dt>Encoding considerations:</dt>
    <dd>See RFC&nbsp;6839, section 3.1.</dd>
    <dt>Security considerations:</dt>
    <dd>See [<cite><a class="bibref" href="#bib-RFC4627">RFC4627</a></cite>]
      <p>Since JSON-LD is intended to be a pure data exchange format for
        directed graphs, the serialization <em class="rfc2119" title="SHOULD NOT">SHOULD NOT</em> be passed through a
        code execution mechanism such as JavaScript's <code>eval()</code>
        function to be parsed. An (invalid) document may contain code that,
        when executed, could lead to unexpected side effects compromising
        the security of a system.</p>
      <p>When processing JSON-LD documents, links to remote contexts are
        typically followed automatically, resulting in the transfer of files
        without the explicit request of the user for each one. If remote
        contexts are served by third parties, it may allow them to gather
        usage patterns or similar information leading to privacy concerns.
        Specific implementations, such as the API defined in the
        JSON-LD Processing Algorithms and API specification [<cite><a class="bibref" href="#bib-JSON-LD-API">JSON-LD-API</a></cite>],
        may provide fine-grained mechanisms to control this behavior.</p>
      <p>JSON-LD contexts that are loaded from the Web over non-secure connections,
        such as HTTP, run the risk of being altered by an attacker such that
        they may modify the JSON-LD <a class="tref internalDFN" title="active-context" href="#dfn-active-context">active context</a> in a way that
        could compromise security. It is advised that any application that
        depends on a remote context for mission critical purposes vet and
        cache the remote context before allowing the system to use it.</p>
      <p>Given that JSON-LD allows the substitution of long IRIs with short terms,
        JSON-LD documents may expand considerably when processed and, in the worst case,
        the resulting data might consume all of the recipient's resources. Applications
        should treat any data with due skepticism.</p>
    </dd>
    <dt>Interoperability considerations:</dt>
    <dd>Not Applicable</dd>
    <dt>Published specification:</dt>
    <dd>http://www.w3.org/TR/json-ld</dd>
    <dt>Applications that use this media type:</dt>
    <dd>Any programming environment that requires the exchange of
      directed graphs. Implementations of JSON-LD have been created for
      JavaScript, Python, Ruby, PHP, and C++.
    </dd>
    <dt>Additional information:</dt>
    <dd>
      <dl>
        <dt>Magic number(s):</dt>
        <dd>Not Applicable</dd>
        <dt>File extension(s):</dt>
        <dd>.jsonld</dd>
        <dt>Macintosh file type code(s):</dt>
        <dd>TEXT</dd>
      </dl>
    </dd>
    <dt>Person &amp; email address to contact for further information:</dt>
    <dd>Manu Sporny &lt;msporny@digitalbazaar.com&gt;</dd>
    <dt>Intended usage:</dt>
    <dd>Common</dd>
    <dt>Restrictions on usage:</dt>
    <dd>None</dd>
    <dt>Author(s):</dt>
    <dd>Manu Sporny, Dave Longley, Gregg Kellogg, Markus Lanthaler, Niklas Lindström</dd>
    <dt>Change controller:</dt>
    <dd><abbr title="World Wide Web Consortium">W3C</abbr></dd>
  </dl>

  <p>Fragment identifiers used with <a href="#application-ld-json">application/ld+json</a>
    are treated as in RDF syntaxes, as per
    <cite><a href="http://www.w3.org/TR/rdf11-concepts/#section-fragID">RDF 1.1 Concepts and Abstract Syntax</a></cite>
    [<cite><a class="bibref" href="#bib-RDF11-CONCEPTS">RDF11-CONCEPTS</a></cite>].</p>
</section>

<section class="appendix informative" id="acknowledgements">
  <!--OddPage--><h2 aria-level="1" role="heading" id="h2_acknowledgements"><span class="secno">C. </span>Acknowledgements</h2><p><em>This section is non-normative.</em></p>

  <p>The authors would like to extend a deep appreciation and the most sincere
    thanks to Mark Birbeck, who contributed foundational concepts
    to JSON-LD via his work on RDFj. JSON-LD uses a number of core concepts
    introduced in RDFj, such as the context as a mechanism to provide an
    environment for interpreting JSON data. Mark had also been very involved in
    the work on RDFa as well. RDFj built upon that work. JSON-LD exists
    because of the work and ideas he started nearly a decade ago in 2004.</p>

  <p>A large amount of thanks goes out to the JSON-LD Community Group
    participants who worked through many of the technical issues on the mailing
    list and the weekly telecons - of special mention are François Daoust,
    Stéphane Corlosquet, Lin Clark, and Zdenko 'Denny' Vrandečić.</p>

  <p>The work of David I. Lehn and Mike Johnson are appreciated for
    reviewing, and performing several early implementations
    of the specification. Thanks also to Ian Davis for this work on RDF/JSON.</p>

  <p>Thanks to the following individuals, in order of their first name, for
    their input on the specification: Adrian Walker, Alexandre Passant,
    Andy Seaborne, Ben Adida, Blaine Cook, Bradley Allen, Brian Peterson,
    Bryan Thompson, Conal Tuohy, Dan Brickley, Danny Ayers, Daniel Leja,
    Dave Reynolds, David Booth, David I. Lehn, David Wood, Dean Landolt,
    Ed Summers, elf Pavlik,
    Eric Prud'hommeaux, Erik Wilde, Fabian Christ, Jon A. Frost, Gavin Carothers,
    Glenn McDonald, Guus Schreiber, Henri Bergius, Jose María Alvarez Rodríguez,
    Ivan Herman, Jack Moffitt, Josh Mandel, KANZAKI Masahide, Kingsley Idehen,
    Kuno Woudt, Larry Garfield, Mark Baker, Mark MacGillivray, Marko Rodriguez,
    Marios Meimaris, Matt Wuerstl,
    Melvin Carvalho, Nathan Rixham, Olivier Grisel, Paolo Ciccarese, Pat Hayes,
    Patrick Logan, Paul Kuykendall, Pelle Braendgaard,
    Peter Patel-Schneider, Peter Williams, Pierre-Antoine Champin,
    Richard Cyganiak, Roy T. Fielding, Sandro Hawke, Simon Grant, Srecko Joksimovic,
    Stephane Fellah, Steve Harris, Ted Thibodeau Jr., Thomas Steiner, Tim Bray,
    Tom Morris, Tristan King, Sergio Fernández, Werner Wilms, and William Waites.</p>
</section>



<section id="references" class="appendix" typeof="bibo:Chapter" resource="#references" rel="bibo:chapter"><!--OddPage--><h2 aria-level="1" role="heading" id="h2_references"><span class="secno">D. </span>References</h2><section id="normative-references" typeof="bibo:Chapter" resource="#normative-references" rel="bibo:chapter"><h3 aria-level="2" role="heading" id="h3_normative-references"><span class="secno">D.1 </span>Normative references</h3><dl class="bibliography" about=""><dt id="bib-BCP47">[BCP47]</dt><dd rel="dcterms:requires">A. Phillips; M. Davis. <a href="http://tools.ietf.org/html/bcp47"><cite>Tags for Identifying Languages</cite></a>. September 2009. IETF Best Current Practice. URL: <a href="http://tools.ietf.org/html/bcp47">http://tools.ietf.org/html/bcp47</a>
</dd><dt id="bib-RDF11-CONCEPTS">[RDF11-CONCEPTS]</dt><dd rel="dcterms:requires">Richard Cyganiak, David Wood, Markus Lanthaler, Editors. <cite><a href="http://www.w3.org/TR/2014/PR-rdf11-concepts-20140109/">RDF 1.1 Concepts and Abstract Syntax</a></cite>. 9 January 2014. W3C Proposed Recommendation (work in progress). URL: <a href="http://www.w3.org/TR/2014/PR-rdf11-concepts-20140109/">http://www.w3.org/TR/2014/PR-rdf11-concepts-20140109/</a>. The latest edition is available at <a href="http://www.w3.org/TR/rdf11-concepts/">http://www.w3.org/TR/rdf11-concepts/</a>
</dd><dt id="bib-RFC2119">[RFC2119]</dt><dd rel="dcterms:requires">S. Bradner. <a href="http://www.ietf.org/rfc/rfc2119.txt"><cite>Key words for use in RFCs to Indicate Requirement Levels.</cite></a> March 1997. Internet RFC 2119.  URL: <a href="http://www.ietf.org/rfc/rfc2119.txt">http://www.ietf.org/rfc/rfc2119.txt</a>
</dd><dt id="bib-RFC3987">[RFC3987]</dt><dd rel="dcterms:requires">M. Dürst; M. Suignard. <a href="http://www.ietf.org/rfc/rfc3987.txt"><cite>Internationalized Resource Identifiers (IRIs)</cite></a>. January 2005. RFC. URL: <a href="http://www.ietf.org/rfc/rfc3987.txt">http://www.ietf.org/rfc/rfc3987.txt</a>
</dd><dt id="bib-RFC4627">[RFC4627]</dt><dd rel="dcterms:requires">D. Crockford. <a href="http://www.ietf.org/rfc/rfc4627.txt"><cite>The application/json Media Type for JavaScript Object Notation (JSON) (RFC 4627)</cite></a>. July 2006. RFC. URL: <a href="http://www.ietf.org/rfc/rfc4627.txt">http://www.ietf.org/rfc/rfc4627.txt</a>
</dd><dt id="bib-RFC5988">[RFC5988]</dt><dd rel="dcterms:requires">M. Nottingham. <cite><a href="http://www.ietf.org/rfc/rfc5988.txt">Web Linking</a></cite>. October 2010. Internet RFC 5988. URL: <a href="http://www.ietf.org/rfc/rfc5988.txt">http://www.ietf.org/rfc/rfc5988.txt</a>
</dd></dl></section><section id="informative-references" typeof="bibo:Chapter" resource="#informative-references" rel="bibo:chapter"><h3 aria-level="2" role="heading" id="h3_informative-references"><span class="secno">D.2 </span>Informative references</h3><dl class="bibliography" about=""><dt id="bib-HTTP11">[HTTP11]</dt><dd rel="dcterms:references">R. Fielding et al. <a href="http://www.ietf.org/rfc/rfc2616.txt"><cite>Hypertext Transfer Protocol - HTTP/1.1</cite></a>. June 1999. RFC. URL: <a href="http://www.ietf.org/rfc/rfc2616.txt">http://www.ietf.org/rfc/rfc2616.txt</a>
</dd><dt id="bib-JSON-LD-API">[JSON-LD-API]</dt><dd rel="dcterms:references">Markus Lanthaler, Gregg Kellogg, Manu Sporny, Editors. <cite><a href="http://www.w3.org/TR/json-ld-api/">JSON-LD 1.0 Processing Algorithms and API</a></cite>. 16 January 2014. W3C Recommendation. URL: <a href="http://www.w3.org/TR/json-ld-api/">http://www.w3.org/TR/json-ld-api/</a>
</dd><dt id="bib-LINKED-DATA">[LINKED-DATA]</dt><dd rel="dcterms:references">Tim Berners-Lee. <cite><a href="http://www.w3.org/DesignIssues/LinkedData.html">Linked Data</a></cite>. Personal View, imperfect but published. URL: <a href="http://www.w3.org/DesignIssues/LinkedData.html">http://www.w3.org/DesignIssues/LinkedData.html</a>
</dd><dt id="bib-MICRODATA">[MICRODATA]</dt><dd rel="dcterms:references">Ian Hickson, Editor. <cite><a href="http://www.w3.org/TR/2013/NOTE-microdata-20131029/">HTML Microdata</a></cite>. 29 October 2013. W3C Working Group Note. URL: <a href="http://www.w3.org/TR/2013/NOTE-microdata-20131029/">http://www.w3.org/TR/2013/NOTE-microdata-20131029/</a>
</dd><dt id="bib-MICROFORMATS">[MICROFORMATS]</dt><dd rel="dcterms:references"><a href="http://microformats.org"><cite>Microformats</cite></a>. URL: <a href="http://microformats.org">http://microformats.org</a>
</dd><dt id="bib-RDF11-MT">[RDF11-MT]</dt><dd rel="dcterms:references">Patrick J. Hayes, Peter F. Patel-Schneider, Editors. <cite><a href="http://www.w3.org/TR/2014/PR-rdf11-mt-20140109/">RDF 1.1 Semantics</a></cite>. 9 January 2014. W3C Proposed Recommendation (work in progress). URL: <a href="http://www.w3.org/TR/2014/PR-rdf11-mt-20140109/">http://www.w3.org/TR/2014/PR-rdf11-mt-20140109/</a>. The latest edition is available at <a href="http://www.w3.org/TR/rdf11-mt/">http://www.w3.org/TR/rdf11-mt/</a>
</dd><dt id="bib-RDF11-SCHEMA">[RDF11-SCHEMA]</dt><dd rel="dcterms:references">Dan Brickley; R.V. Guha, Editors. <cite><a href="http://www.w3.org/TR/2014/PER-rdf-schema-20140109/">RDF Schema 1.1</a></cite>. 9 January 2014. W3C Proposed Edited Recommendation (work in progress). URL: <a href="http://www.w3.org/TR/2014/PER-rdf-schema-20140109/">http://www.w3.org/TR/2014/PER-rdf-schema-20140109/</a>. The latest edition is available at <a href="http://www.w3.org/TR/rdf-schema/">http://www.w3.org/TR/rdf-schema/</a>
</dd><dt id="bib-RDFA-CORE">[RDFA-CORE]</dt><dd rel="dcterms:references">Ben Adida; Mark Birbeck; Shane McCarron; Ivan Herman et al. <a href="http://www.w3.org/TR/rdfa-core/"><cite>RDFa Core 1.1 - Second Edition</cite></a>. 22 August 2013. W3C Recommendation. URL: <a href="http://www.w3.org/TR/rdfa-core/">http://www.w3.org/TR/rdfa-core/</a>
</dd><dt id="bib-RFC3986">[RFC3986]</dt><dd rel="dcterms:references">T. Berners-Lee; R. Fielding; L. Masinter. <a href="http://www.ietf.org/rfc/rfc3986.txt"><cite>Uniform Resource Identifier (URI): Generic Syntax (RFC 3986)</cite></a>. January 2005. RFC. URL: <a href="http://www.ietf.org/rfc/rfc3986.txt">http://www.ietf.org/rfc/rfc3986.txt</a>
</dd><dt id="bib-RFC6839">[RFC6839]</dt><dd rel="dcterms:references">Tony Hansen, Alexey Melnikov. <cite><a href="http://www.ietf.org/rfc/rfc6839.txt">Additional Media Type Structured Syntax Suffixes</a>.</cite> January 2013. Internet RFC 6839. URL: <a href="http://www.ietf.org/rfc/rfc6839.txt">http://www.ietf.org/rfc/rfc6839.txt</a>
</dd><dt id="bib-RFC6906">[RFC6906]</dt><dd rel="dcterms:references">Erik Wilde. <cite><a href="http://www.ietf.org/rfc/rfc6906.txt">The 'profile' Link Relation Type</a></cite>. March 2013. Internet RFC 6906. URL: <a href="http://www.ietf.org/rfc/rfc6906.txt">http://www.ietf.org/rfc/rfc6906.txt</a>
</dd><dt id="bib-TURTLE">[TURTLE]</dt><dd rel="dcterms:references">Eric Prud'hommeaux, Gavin Carothers, Editors. <cite><a href="http://www.w3.org/TR/2014/PR-turtle-20140109/">RDF 1.1 Turtle: Terse RDF Triple Language</a></cite>. 9 January 2014. W3C Proposed Recommendation (work in progress). URL: <a href="http://www.w3.org/TR/2014/PR-turtle-20140109/">http://www.w3.org/TR/2014/PR-turtle-20140109/</a>. The latest edition is available at <a href="http://www.w3.org/TR/turtle/">http://www.w3.org/TR/turtle/</a>
</dd></dl></section></section><script src="https://www.w3.org/scripts/TR/fixup.js"></script></body></html>

    http_version: 
  recorded_at: Tue, 07 Apr 2020 12:11:26 GMT
recorded_with: VCR 5.0.0
